{
    "Classification/arg_parser.py": {
        "torch": {
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Classification/imagenet_loader.py": {
        "torch": {}
    },
    "Classification/main.py": {
        "torch": {
            "SummaryWriter_215": {
                "variable": {
                    "value": "args.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.log_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flush_secs": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_325": {
                "variable": {
                    "value": "args.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_327": {
                "variable": {
                    "value": "args.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_330": {
                "variable": {
                    "value": "args.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_332": {
                "variable": {
                    "value": "args.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Classification/main_imagenet.py": {
        "torch": {
            "device_count_165": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_268": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_270": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_382": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "DataLoader_386": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_318": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_341": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiStepLR_350": {
                "variable": {
                    "value": "args.current_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(args.milestone * args.epochs)]",
                            "List"
                        ]
                    ]
                },
                "gamma": {
                    "value": "args.multistep_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_353": {
                "variable": {
                    "value": "args.current_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.scheduler_step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.multistep_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_361": {
                "variable": {
                    "value": "args.current_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "total_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.ceil(len(train_dataset) / args.batch_size) * args.epochs",
                            "BinOp"
                        ],
                        [
                            "math.ceil(len(train_dataset) / args.batch_size / args.ngpus_per_node) * args.epochs",
                            "BinOp"
                        ],
                        [
                            "math.ceil(len(train_dataset) / args.batch_size) * args.start_epoch",
                            "BinOp"
                        ],
                        [
                            "math.ceil(len(train_dataset) / args.batch_size / args.ngpus_per_node) * args.start_epoch",
                            "BinOp"
                        ]
                    ]
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_599": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(path, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_148": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_250": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "resnet18d(deconv=args.deconv, delinear=args.delinear, keep_bn=args.keep_bn)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "resnet34d(deconv=args.deconv, delinear=args.delinear, keep_bn=args.keep_bn)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "resnet50d(deconv=args.deconv, delinear=args.delinear, keep_bn=args.keep_bn)",
                            "Call"
                        ],
                        [
                            "resnet101d(deconv=args.deconv, delinear=args.delinear, keep_bn=args.keep_bn)",
                            "Call"
                        ],
                        [
                            "wide_resnet50_2d(deconv=args.deconv, delinear=args.delinear, keep_bn=args.keep_bn)",
                            "Call"
                        ],
                        [
                            "wide_resnet101_2d(deconv=args.deconv, delinear=args.delinear, keep_bn=args.keep_bn)",
                            "Call"
                        ],
                        [
                            "vgg11d('VGG11d', deconv=args.deconv, delinear=args.delinear)",
                            "Call"
                        ],
                        [
                            "vgg16d('VGG16d', deconv=args.deconv, delinear=args.delinear)",
                            "Call"
                        ],
                        [
                            "densenet121d(deconv=args.deconv, delinear=args.delinear)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_255": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "resnet18d(deconv=args.deconv, delinear=args.delinear, keep_bn=args.keep_bn)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "resnet34d(deconv=args.deconv, delinear=args.delinear, keep_bn=args.keep_bn)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "resnet50d(deconv=args.deconv, delinear=args.delinear, keep_bn=args.keep_bn)",
                            "Call"
                        ],
                        [
                            "resnet101d(deconv=args.deconv, delinear=args.delinear, keep_bn=args.keep_bn)",
                            "Call"
                        ],
                        [
                            "wide_resnet50_2d(deconv=args.deconv, delinear=args.delinear, keep_bn=args.keep_bn)",
                            "Call"
                        ],
                        [
                            "wide_resnet101_2d(deconv=args.deconv, delinear=args.delinear, keep_bn=args.keep_bn)",
                            "Call"
                        ],
                        [
                            "vgg11d('VGG11d', deconv=args.deconv, delinear=args.delinear)",
                            "Call"
                        ],
                        [
                            "vgg16d('VGG16d', deconv=args.deconv, delinear=args.delinear)",
                            "Call"
                        ],
                        [
                            "densenet121d(deconv=args.deconv, delinear=args.delinear)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SummaryWriter_280": {
                "variable": {
                    "value": "args.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flush_secs": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_554": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_653": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_243": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_257": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_262": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_265": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.arch](pretrained=True)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.arch]()",
                            "Call"
                        ],
                        [
                            "resnet18d(deconv=args.deconv, delinear=args.delinear, keep_bn=args.keep_bn)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(args.gpu)",
                            "Call"
                        ],
                        [
                            "resnet34d(deconv=args.deconv, delinear=args.delinear, keep_bn=args.keep_bn)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "resnet50d(deconv=args.deconv, delinear=args.delinear, keep_bn=args.keep_bn)",
                            "Call"
                        ],
                        [
                            "resnet101d(deconv=args.deconv, delinear=args.delinear, keep_bn=args.keep_bn)",
                            "Call"
                        ],
                        [
                            "wide_resnet50_2d(deconv=args.deconv, delinear=args.delinear, keep_bn=args.keep_bn)",
                            "Call"
                        ],
                        [
                            "wide_resnet101_2d(deconv=args.deconv, delinear=args.delinear, keep_bn=args.keep_bn)",
                            "Call"
                        ],
                        [
                            "vgg11d('VGG11d', deconv=args.deconv, delinear=args.delinear)",
                            "Call"
                        ],
                        [
                            "vgg16d('VGG16d', deconv=args.deconv, delinear=args.delinear)",
                            "Call"
                        ],
                        [
                            "densenet121d(deconv=args.deconv, delinear=args.delinear)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_292": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_296": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(args.gpu)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Classification/models/SyncND.py": {
        "torch": {
            "eye_128": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "Cov.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Cov.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Cov.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_212": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.block) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "torch.flip(w.view(weight.shape), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "UnaryOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flip_336": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_348": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w.view(weight.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv_transpose2d_351": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.block) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "torch.flip(w.view(weight.shape), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "UnaryOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_padding(x, output_size, self.stride, self.padding, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_83": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.block) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "torch.flip(w.view(weight.shape), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "UnaryOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unfold_173": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.sampling_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_173": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_259": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "Cov.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Cov.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Cov.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_263": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Cov.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Cov.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unfold_307": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.sampling_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_307": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_400": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "Cov.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Cov.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Cov.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_404": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Cov.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Cov.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/models/deconv.py": {
        "torch": {
            "eye_443": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "A.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "A.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_446": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "A.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "A.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_473": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "A.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "A.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_473": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_474": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "A.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "A.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_474": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_277": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.reshape(x_shape[0], -1)",
                            "Call"
                        ],
                        [
                            "x / std - mean / std",
                            "BinOp"
                        ],
                        [
                            "x.view(x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.block) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "torch.flip(w.view(weight.shape), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "UnaryOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flip_410": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_422": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w.view(weight.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv_transpose2d_426": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.reshape(x_shape[0], -1)",
                            "Call"
                        ],
                        [
                            "x / std - mean / std",
                            "BinOp"
                        ],
                        [
                            "x.view(x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.block) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "torch.flip(w.view(weight.shape), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "UnaryOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_padding(x, output_size, self.stride, self.padding, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_101": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "XX_mean.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_125": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous()",
                            "Call"
                        ],
                        [
                            "input / (input_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.block) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "torch.flip(w.view(weight.shape), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "UnaryOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "addmm_451": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                },
                "input": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device).unsqueeze(0).expand_as(A)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "mat1": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device)",
                            "Call"
                        ],
                        [
                            "T.mm(Z)",
                            "Call"
                        ],
                        [
                            "torch.addmm(beta=1.5, input=Z, alpha=-0.5, mat1=torch.matrix_power(Z, 3), mat2=Y)",
                            "Call"
                        ],
                        [
                            "Z.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device).unsqueeze(0).expand_as(A)",
                            "Call"
                        ],
                        [
                            "T.bmm(Z)",
                            "Call"
                        ],
                        [
                            "Z.bmm(T)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ],
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.bmm(T)",
                            "Call"
                        ],
                        [
                            "torch.bmm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_465": {
                "input": {
                    "value": "normA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.norm()",
                            "Call"
                        ],
                        [
                            "A.trace()",
                            "Call"
                        ],
                        [
                            "A.view(batchSize, -1).norm(2, 1).view(batchSize, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_486": {
                "input": {
                    "value": "normA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.norm()",
                            "Call"
                        ],
                        [
                            "A.trace()",
                            "Call"
                        ],
                        [
                            "A.view(batchSize, -1).norm(2, 1).view(batchSize, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_45": {
                "*size": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_46": {
                "n": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unfold_206": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.reshape(x_shape[0], -1)",
                            "Call"
                        ],
                        [
                            "x / std - mean / std",
                            "BinOp"
                        ],
                        [
                            "x.view(x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.sampling_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_206": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_246": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "XX_mean.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_250": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unfold_348": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.reshape(x_shape[0], -1)",
                            "Call"
                        ],
                        [
                            "x / std - mean / std",
                            "BinOp"
                        ],
                        [
                            "x.view(x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.sampling_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_348": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_387": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "XX_mean.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_391": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "addmm_457": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device)",
                            "Call"
                        ],
                        [
                            "T.mm(Z)",
                            "Call"
                        ],
                        [
                            "torch.addmm(beta=1.5, input=Z, alpha=-0.5, mat1=torch.matrix_power(Z, 3), mat2=Y)",
                            "Call"
                        ],
                        [
                            "Z.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device).unsqueeze(0).expand_as(A)",
                            "Call"
                        ],
                        [
                            "T.bmm(Z)",
                            "Call"
                        ],
                        [
                            "Z.bmm(T)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "mat1": {
                    "value": "torch.matrix_power(Z, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ],
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.bmm(T)",
                            "Call"
                        ],
                        [
                            "torch.bmm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_483": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matrix_power(T, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ],
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.bmm(T)",
                            "Call"
                        ],
                        [
                            "torch.bmm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_initialized_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X_mean.view(-1), XX_mean.view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_97": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sync_data_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_97": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_157": {
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "*size": {
                    "value": "kernel_size ** 2 * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_160": {
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_initialized_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X_mean.view(-1), XX_mean.view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_240": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sync_data_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_240": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_309": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_310": {
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_312": {
                "*size": {
                    "value": "kernel_size ** 2 * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_313": {
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_initialized_375": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_378": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X_mean.view(-1), XX_mean.view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_381": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sync_data_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_381": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_461": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matrix_power(T, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ],
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.bmm(T)",
                            "Call"
                        ],
                        [
                            "torch.bmm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "matrix_power_483": {
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.addmm(beta=1.5, input=I, alpha=-0.5, mat1=Z, mat2=Y)",
                            "Call"
                        ],
                        [
                            "(3 * I - Y) / 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * (3.0 * I - Z.bmm(Y))",
                            "BinOp"
                        ],
                        [
                            "(3 * I - Y) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_95": {
                "input": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_238": {
                "input": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_379": {
                "input": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matrix_power_457": {
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device)",
                            "Call"
                        ],
                        [
                            "T.mm(Z)",
                            "Call"
                        ],
                        [
                            "torch.addmm(beta=1.5, input=Z, alpha=-0.5, mat1=torch.matrix_power(Z, 3), mat2=Y)",
                            "Call"
                        ],
                        [
                            "Z.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device).unsqueeze(0).expand_as(A)",
                            "Call"
                        ],
                        [
                            "T.bmm(Z)",
                            "Call"
                        ],
                        [
                            "Z.bmm(T)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matrix_power_461": {
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.addmm(beta=1.5, input=I, alpha=-0.5, mat1=Z, mat2=Y)",
                            "Call"
                        ],
                        [
                            "(3 * I - Y) / 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * (3.0 * I - Z.bmm(Y))",
                            "BinOp"
                        ],
                        [
                            "(3 * I - Y) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/models/densenet.py": {
        "torch": {
            "randn_133": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_45": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.cat([out, x], 1)",
                            "Call"
                        ],
                        [
                            "self.conv(F.relu(self.bn(x)))",
                            "Call"
                        ],
                        [
                            "self.conv(F.relu(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.dense1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.dense2(out))",
                            "Call"
                        ],
                        [
                            "self.trans3(self.dense3(out))",
                            "Call"
                        ],
                        [
                            "self.dense4(out)",
                            "Call"
                        ],
                        [
                            "self.bn(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.channel_deconv(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_106": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.cat([out, x], 1)",
                            "Call"
                        ],
                        [
                            "self.conv(F.relu(self.bn(x)))",
                            "Call"
                        ],
                        [
                            "self.conv(F.relu(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.dense1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.dense2(out))",
                            "Call"
                        ],
                        [
                            "self.trans3(self.dense3(out))",
                            "Call"
                        ],
                        [
                            "self.dense4(out)",
                            "Call"
                        ],
                        [
                            "self.bn(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.channel_deconv(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_111": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.cat([out, x], 1)",
                            "Call"
                        ],
                        [
                            "self.conv(F.relu(self.bn(x)))",
                            "Call"
                        ],
                        [
                            "self.conv(F.relu(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.dense1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.dense2(out))",
                            "Call"
                        ],
                        [
                            "self.trans3(self.dense3(out))",
                            "Call"
                        ],
                        [
                            "self.dense4(out)",
                            "Call"
                        ],
                        [
                            "self.bn(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.channel_deconv(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes + self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes + self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "4 * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "4 * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4 * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growth_rate",
                            "Method Argument"
                        ],
                        [
                            "12",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes + self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes + self.growth_rate",
                            "BinOp"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(num_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(math.floor(num_planes * reduction))",
                            "Call"
                        ],
                        [
                            "int(math.floor(num_planes * reduction))",
                            "Call"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_planes + nblocks[3] * growth_rate",
                            "BinOp"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_planes + nblocks[3] * growth_rate",
                            "BinOp"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_planes + nblocks[3] * growth_rate",
                            "BinOp"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "out_planes",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_95": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_24": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_25": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_27": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_28": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "torch.cat([out, x], 1)",
                            "Call"
                        ],
                        [
                            "self.conv(F.relu(self.bn(x)))",
                            "Call"
                        ],
                        [
                            "self.conv(F.relu(x))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.dense1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.dense2(out))",
                            "Call"
                        ],
                        [
                            "self.trans3(self.dense3(out))",
                            "Call"
                        ],
                        [
                            "self.dense4(out)",
                            "Call"
                        ],
                        [
                            "self.bn(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "self.channel_deconv(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_42": {
                "input": {
                    "value": "self.bn(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_44": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Classification/models/densenet_imagenet.py": {
        "torch": {
            "relu_148": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_149": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(features, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, (1, 1)).view(features.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dropout_44": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(_DenseLayer, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(new_features, p=self.drop_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "[x, new_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv2d(3, num_init_features, kernel_size=7, stride=2, padding=3, bias=False)), ('norm0', nn.BatchNorm2d(num_init_features)), ('relu0', nn.ReLU(inplace=True)), ('pool0', nn.MaxPool2d(kernel_size=3, stride=2, padding=1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', deconv(3, num_init_features, kernel_size=7, stride=2, padding=3, freeze=True, n_iter=15)), ('relu0', nn.ReLU(inplace=True)), ('pool0', nn.MaxPool2d(kernel_size=3, stride=2, padding=1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_init_features",
                            "variable"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_62": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_output_features",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_66": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_71": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_init_features",
                            "variable"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growth_rate",
                            "Method Argument"
                        ],
                        [
                            "growth_rate",
                            "Method Argument"
                        ],
                        [
                            "growth_rate",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_init_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_init_features",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "num_init_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_init_features",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_100": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_107": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/models/dpn.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[:, :d, :, :] + out[:, :d, :, :], x[:, d:, :, :], out[:, d:, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :d, :, :] + out[:, :d, :, :], x[:, d:, :, :], out[:, d:, :, :]], 1)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_102": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :d, :, :] + out[:, :d, :, :], x[:, d:, :, :], out[:, d:, :, :]], 1)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "last_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['in_planes']",
                            "Subscript"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['in_planes']",
                            "Subscript"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['in_planes']",
                            "Subscript"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['in_planes']",
                            "Subscript"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride in enumerate(strides)",
                            "Call"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['in_planes']",
                            "Subscript"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['in_planes']",
                            "Subscript"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes + dense_depth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes + dense_depth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_planes[3] + (num_blocks[3] + 1) * dense_depth[3]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_88": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_92": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_129": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(last_planes, out_planes + dense_depth, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "last_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes + dense_depth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride in enumerate(strides)",
                            "Call"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "out_planes + dense_depth",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/models/efficientnet.py": {
        "torch": {
            "randn_132": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_67": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "out * w + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.layers(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg",
                            "Attribute"
                        ],
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg",
                            "Attribute"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg",
                            "Attribute"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg",
                            "Attribute"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg",
                            "Attribute"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_58": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cfg[-1][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_103": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_107": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_109": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_planes, out_planes, kernel_size=1, stride=1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg",
                            "Attribute"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg",
                            "Attribute"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Classification/models/googlenet.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, n1x1, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "self.b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, n3x3red, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.b3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, n5x5red, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.b4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.pre_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 192, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_70": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_81": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_55": {
                "tensors": {
                    "value": "[y1, y2, y3, y4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n1x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n1x1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "num_features": {
                    "value": "n1x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n1x1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n3x3red",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n3x3red",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "n3x3red",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n3x3red",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "n3x3red",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n3x3red",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n3x3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "n3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n3x3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n5x5red",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5red",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "n5x5red",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5red",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "n5x5red",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5red",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n5x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "n5x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "n5x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n5x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "n5x5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n5x5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_44": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "pool_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "pool_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/models/lenet.py": {
        "torch": {
            "AdaptiveAvgPool2d_29": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_33": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.avgpool(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_35": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.avgpool(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(out))",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "channel_deconv(16 * 5 * 5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "channel_deconv(120)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "channel_deconv(84)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Classification/models/mobilenet.py": {
        "torch": {
            "randn_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if isinstance(x, int) else x[1]",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x if isinstance(x, int) else x[0]",
                            "IfExp"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x if isinstance(x, int) else x[0]",
                            "IfExp"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_23": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_49": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_51": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layers(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/models/mobilenetv2.py": {
        "torch": {
            "randn_124": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_116": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x) if self.stride == 1 else out",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.layers(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg",
                            "Attribute"
                        ],
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expansion * in_planes",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg",
                            "Attribute"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg",
                            "Attribute"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_104": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_106": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_110": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_planes, out_planes, kernel_size=1, stride=1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "variable"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg",
                            "Attribute"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg",
                            "Attribute"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Classification/models/pnasnet.py": {
        "torch": {
            "randn_168": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_47": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_84": {
                "variable": {
                    "value": "y3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 3, 32, 32)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y1 + y2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y3 + y4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b1, b2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_154": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.layer5(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "self.linear(out.view(out.size(0), -1))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_54": {
                "input": {
                    "value": "y1 + y2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2 * out_planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_134": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_143": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_145": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_97": {
                "input": {
                    "value": "self.bn2(self.conv2(y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_99": {
                "input": {
                    "value": "self.conv2(y)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/models/preact_resnet.py": {
        "torch": {
            "avg_pool2d_142": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_45": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_87": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_109": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_132": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_166": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_43": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_48": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_90": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_91": {
                "input": {
                    "value": "self.bn3(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_96": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_97": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(out))",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/models/replicate.py": {
        "torch": {}
    },
    "Classification/models/resnet.py": {
        "torch": {
            "Sequential_31": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_174": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_61": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_84": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_85": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_86": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_111": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_118": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_119": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_122": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_135": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_139": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_160": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_164": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_166": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_198": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_planes, self.expansion * planes, kernel_size=1, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_planes, self.expansion * planes, kernel_size=1, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/models/resnet_imagenet.py": {
        "torch": {
            "ReLU_58": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_173": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_174": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_188": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flatten_269": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_167": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_246": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_232": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride, deconv=deconv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_222": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride, deconv=deconv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_228": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride, deconv=deconv)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/models/resnext.py": {
        "torch": {
            "randn_127": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_58": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_107": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "cardinality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "cardinality",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * group_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * group_width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cardinality * bottleneck_width * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_92": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_99": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * group_width, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(in_planes, self.expansion * group_width, kernel_size=1, stride=stride, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * group_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "self.expansion * group_width",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/models/rfnorm.py": {
        "torch": {
            "pad_21": {
                "variable": {
                    "value": "xp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(img).unsqueeze(0).permute(0, 3, 1, 2).float() / 255",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / std - mean / std",
                            "BinOp"
                        ],
                        [
                            "mean_a * x + mean_b",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, None, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x * rf_a + rf_b + b.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, None, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x * rf_a + rf_b + b.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1 + p, p, 1 + p, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_110": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flip_608": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_620": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w.view(weight.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_112": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_221": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous()",
                            "Call"
                        ],
                        [
                            "input / (input_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.block) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "torch.flip(w.view(weight.shape), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-x_mean / std",
                            "BinOp"
                        ],
                        [
                            "-(w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "UnaryOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_420": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(img).unsqueeze(0).permute(0, 3, 1, 2).float() / 255",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / std - mean / std",
                            "BinOp"
                        ],
                        [
                            "mean_a * x + mean_b",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, None, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x * rf_a + rf_b + b.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, None, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x * rf_a + rf_b + b.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.block) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "torch.flip(w.view(weight.shape), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_426": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(img).unsqueeze(0).permute(0, 3, 1, 2).float() / 255",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / std - mean / std",
                            "BinOp"
                        ],
                        [
                            "mean_a * x + mean_b",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, None, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x * rf_a + rf_b + b.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, None, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x * rf_a + rf_b + b.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.block) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "torch.flip(w.view(weight.shape), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-x_mean / std",
                            "BinOp"
                        ],
                        [
                            "-(w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "UnaryOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_625": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(img).unsqueeze(0).permute(0, 3, 1, 2).float() / 255",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / std - mean / std",
                            "BinOp"
                        ],
                        [
                            "mean_a * x + mean_b",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, None, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x * rf_a + rf_b + b.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, None, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x * rf_a + rf_b + b.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.block) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "torch.flip(w.view(weight.shape), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_padding(x, output_size, self.stride, self.padding, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_633": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(img).unsqueeze(0).permute(0, 3, 1, 2).float() / 255",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / std - mean / std",
                            "BinOp"
                        ],
                        [
                            "mean_a * x + mean_b",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, None, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x * rf_a + rf_b + b.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, None, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x * rf_a + rf_b + b.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.block) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "torch.flip(w.view(weight.shape), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-x_mean / std",
                            "BinOp"
                        ],
                        [
                            "-(w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "UnaryOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_padding(x, output_size, self.stride, self.padding, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_647": {
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread('horse.jpg', cv2.IMREAD_COLOR)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_647": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_647": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_66": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.block) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "torch.flip(w.view(weight.shape), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "*size": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_128": {
                "n": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_189": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "cov.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cov.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cov.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_197": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "X.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "addmm_198": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(X.shape[1], dtype=X.dtype, device=X.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(cov.shape[1], dtype=cov.dtype, device=cov.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(X.shape[1], dtype=X.dtype, device=X.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_features, dtype=X.dtype, device=X.device).expand(self.groups, self.num_features, self.num_features)",
                            "Call"
                        ],
                        [
                            "torch.eye(cov.shape[1], dtype=cov.dtype, device=cov.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_features, dtype=cov.dtype, device=cov.device).expand(self.groups, self.num_features, self.num_features)",
                            "Call"
                        ],
                        [
                            "torch.eye(X.shape[1], dtype=X.dtype, device=X.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_features, dtype=X.dtype, device=X.device).expand(self.groups, self.num_features, self.num_features)",
                            "Call"
                        ],
                        [
                            "torch.eye(cov.shape[1], dtype=cov.dtype, device=cov.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_features, dtype=cov.dtype, device=cov.device).expand(self.groups, self.num_features, self.num_features)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "1.0 / X.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat1": {
                    "value": "X.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1, self.block)",
                            "Call"
                        ],
                        [
                            "X - X_mean.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.unfold(x, self.kernel_size, self.dilation, self.padding, self.sampling_stride).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous().view(-1, C)[::self.sampling_stride ** 2, :]",
                            "Subscript"
                        ],
                        [
                            "(X - X.mean(dim=-1, keepdim=True)) / X_std",
                            "BinOp"
                        ],
                        [
                            "X.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features)",
                            "Call"
                        ],
                        [
                            "X.view(-1, X.shape[-1])",
                            "Call"
                        ],
                        [
                            "X - X_mean.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "X.view(-1, self.groups, self.num_features).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.unfold(x, self.kernel_size, self.dilation, self.padding, self.sampling_stride).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous().view(-1, C)[::self.sampling_stride ** 2, :]",
                            "Subscript"
                        ],
                        [
                            "(X - X.mean(dim=-1, keepdim=True)) / X_std",
                            "BinOp"
                        ],
                        [
                            "X.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features)",
                            "Call"
                        ],
                        [
                            "X.view(-1, X.shape[-1])",
                            "Call"
                        ],
                        [
                            "X - X_mean.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "X.view(-1, self.groups, self.num_features).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unfold_329": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(img).unsqueeze(0).permute(0, 3, 1, 2).float() / 255",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / std - mean / std",
                            "BinOp"
                        ],
                        [
                            "mean_a * x + mean_b",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, None, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x * rf_a + rf_b + b.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, None, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x * rf_a + rf_b + b.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.sampling_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_329": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_422": {
                "variable": {
                    "value": "rf_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rf_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / std",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(rf_a, size=x.shape[-2:], mode='bilinear')",
                            "Call"
                        ],
                        [
                            "1 / std",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(rf_a, size=x.shape[-2:], mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_423": {
                "variable": {
                    "value": "rf_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rf_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-x_mean / std * self.weight.sum(dim=(1, 2, 3)).view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(rf_b, size=x.shape[-2:], mode='bilinear')",
                            "Call"
                        ],
                        [
                            "-x_mean / std * self.weight.sum(dim=(1, 2, 3)).view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(rf_b, size=x.shape[-2:], mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unfold_522": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(img).unsqueeze(0).permute(0, 3, 1, 2).float() / 255",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / std - mean / std",
                            "BinOp"
                        ],
                        [
                            "mean_a * x + mean_b",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, None, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x * rf_a + rf_b + b.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, None, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x * rf_a + rf_b + b.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.sampling_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_522": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_629": {
                "variable": {
                    "value": "rf_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rf_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / std",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(rf_a, size=x.shape[-2:], mode='bilinear')",
                            "Call"
                        ],
                        [
                            "1 / std",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(rf_a, size=x.shape[-2:], mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_630": {
                "variable": {
                    "value": "rf_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rf_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-x_mean / std * self.weight.sum(dim=(1, 2, 3)).view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(rf_b, size=x.shape[-2:], mode='bilinear')",
                            "Call"
                        ],
                        [
                            "-x_mean / std * self.weight.sum(dim=(1, 2, 3)).view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(rf_b, size=x.shape[-2:], mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_58": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(img).unsqueeze(0).permute(0, 3, 1, 2).float() / 255",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / std - mean / std",
                            "BinOp"
                        ],
                        [
                            "mean_a * x + mean_b",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, None, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x * rf_a + rf_b + b.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, None, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x * rf_a + rf_b + b.view(1, -1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "1 / self.subsample",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_82": {
                "variable": {
                    "value": "mean_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_filter(a, win_size) / M",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(mean_a, size=(H, W), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_83": {
                "variable": {
                    "value": "mean_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "box_filter(b, win_size) / M",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(mean_b, size=(H, W), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_initialized_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X_mean.view(-1), XX_mean.view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_183": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sync_data_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_183": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_259": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_260": {
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_262": {
                "*size": {
                    "value": "kernel_size ** 2 * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_263": {
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_311": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.block) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "torch.flip(w.view(weight.shape), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_315": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_mean - x_mean ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_initialized_361": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_365": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X_mean.view(-1), XX_mean.view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_368": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sync_data_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_368": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_375": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "cov.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cov.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cov.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_379": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cov.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cov.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_389": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "X.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "addmm_390": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(X.shape[1], dtype=X.dtype, device=X.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(cov.shape[1], dtype=cov.dtype, device=cov.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(X.shape[1], dtype=X.dtype, device=X.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_features, dtype=X.dtype, device=X.device).expand(self.groups, self.num_features, self.num_features)",
                            "Call"
                        ],
                        [
                            "torch.eye(cov.shape[1], dtype=cov.dtype, device=cov.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_features, dtype=cov.dtype, device=cov.device).expand(self.groups, self.num_features, self.num_features)",
                            "Call"
                        ],
                        [
                            "torch.eye(X.shape[1], dtype=X.dtype, device=X.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_features, dtype=X.dtype, device=X.device).expand(self.groups, self.num_features, self.num_features)",
                            "Call"
                        ],
                        [
                            "torch.eye(cov.shape[1], dtype=cov.dtype, device=cov.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_features, dtype=cov.dtype, device=cov.device).expand(self.groups, self.num_features, self.num_features)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "1.0 / X.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat1": {
                    "value": "X.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1, self.block)",
                            "Call"
                        ],
                        [
                            "X - X_mean.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.unfold(x, self.kernel_size, self.dilation, self.padding, self.sampling_stride).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous().view(-1, C)[::self.sampling_stride ** 2, :]",
                            "Subscript"
                        ],
                        [
                            "(X - X.mean(dim=-1, keepdim=True)) / X_std",
                            "BinOp"
                        ],
                        [
                            "X.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features)",
                            "Call"
                        ],
                        [
                            "X.view(-1, X.shape[-1])",
                            "Call"
                        ],
                        [
                            "X - X_mean.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "X.view(-1, self.groups, self.num_features).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.unfold(x, self.kernel_size, self.dilation, self.padding, self.sampling_stride).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous().view(-1, C)[::self.sampling_stride ** 2, :]",
                            "Subscript"
                        ],
                        [
                            "(X - X.mean(dim=-1, keepdim=True)) / X_std",
                            "BinOp"
                        ],
                        [
                            "X.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features)",
                            "Call"
                        ],
                        [
                            "X.view(-1, X.shape[-1])",
                            "Call"
                        ],
                        [
                            "X - X_mean.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "X.view(-1, self.groups, self.num_features).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_394": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "baddbmm_395": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(X.shape[1], dtype=X.dtype, device=X.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(cov.shape[1], dtype=cov.dtype, device=cov.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(X.shape[1], dtype=X.dtype, device=X.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_features, dtype=X.dtype, device=X.device).expand(self.groups, self.num_features, self.num_features)",
                            "Call"
                        ],
                        [
                            "torch.eye(cov.shape[1], dtype=cov.dtype, device=cov.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_features, dtype=cov.dtype, device=cov.device).expand(self.groups, self.num_features, self.num_features)",
                            "Call"
                        ],
                        [
                            "torch.eye(X.shape[1], dtype=X.dtype, device=X.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_features, dtype=X.dtype, device=X.device).expand(self.groups, self.num_features, self.num_features)",
                            "Call"
                        ],
                        [
                            "torch.eye(cov.shape[1], dtype=cov.dtype, device=cov.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_features, dtype=cov.dtype, device=cov.device).expand(self.groups, self.num_features, self.num_features)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "1.0 / X.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat1": {
                    "value": "X.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1, self.block)",
                            "Call"
                        ],
                        [
                            "X - X_mean.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.unfold(x, self.kernel_size, self.dilation, self.padding, self.sampling_stride).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous().view(-1, C)[::self.sampling_stride ** 2, :]",
                            "Subscript"
                        ],
                        [
                            "(X - X.mean(dim=-1, keepdim=True)) / X_std",
                            "BinOp"
                        ],
                        [
                            "X.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features)",
                            "Call"
                        ],
                        [
                            "X.view(-1, X.shape[-1])",
                            "Call"
                        ],
                        [
                            "X - X_mean.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "X.view(-1, self.groups, self.num_features).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.unfold(x, self.kernel_size, self.dilation, self.padding, self.sampling_stride).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous().view(-1, C)[::self.sampling_stride ** 2, :]",
                            "Subscript"
                        ],
                        [
                            "(X - X.mean(dim=-1, keepdim=True)) / X_std",
                            "BinOp"
                        ],
                        [
                            "X.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features)",
                            "Call"
                        ],
                        [
                            "X.view(-1, X.shape[-1])",
                            "Call"
                        ],
                        [
                            "X - X_mean.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "X.view(-1, self.groups, self.num_features).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_457": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_458": {
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_460": {
                "*size": {
                    "value": "kernel_size ** 2 * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_461": {
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_506": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.block) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "torch.flip(w.view(weight.shape), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_510": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_mean - x_mean ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_initialized_555": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_559": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X_mean.view(-1), XX_mean.view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_562": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sync_data_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_562": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_569": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "cov.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cov.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cov.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_573": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cov.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cov.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_584": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "X.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "addmm_585": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(X.shape[1], dtype=X.dtype, device=X.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(cov.shape[1], dtype=cov.dtype, device=cov.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(X.shape[1], dtype=X.dtype, device=X.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_features, dtype=X.dtype, device=X.device).expand(self.groups, self.num_features, self.num_features)",
                            "Call"
                        ],
                        [
                            "torch.eye(cov.shape[1], dtype=cov.dtype, device=cov.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_features, dtype=cov.dtype, device=cov.device).expand(self.groups, self.num_features, self.num_features)",
                            "Call"
                        ],
                        [
                            "torch.eye(X.shape[1], dtype=X.dtype, device=X.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_features, dtype=X.dtype, device=X.device).expand(self.groups, self.num_features, self.num_features)",
                            "Call"
                        ],
                        [
                            "torch.eye(cov.shape[1], dtype=cov.dtype, device=cov.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_features, dtype=cov.dtype, device=cov.device).expand(self.groups, self.num_features, self.num_features)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "1.0 / X.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat1": {
                    "value": "X.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1, self.block)",
                            "Call"
                        ],
                        [
                            "X - X_mean.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.unfold(x, self.kernel_size, self.dilation, self.padding, self.sampling_stride).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous().view(-1, C)[::self.sampling_stride ** 2, :]",
                            "Subscript"
                        ],
                        [
                            "(X - X.mean(dim=-1, keepdim=True)) / X_std",
                            "BinOp"
                        ],
                        [
                            "X.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features)",
                            "Call"
                        ],
                        [
                            "X.view(-1, X.shape[-1])",
                            "Call"
                        ],
                        [
                            "X - X_mean.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "X.view(-1, self.groups, self.num_features).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.unfold(x, self.kernel_size, self.dilation, self.padding, self.sampling_stride).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous().view(-1, C)[::self.sampling_stride ** 2, :]",
                            "Subscript"
                        ],
                        [
                            "(X - X.mean(dim=-1, keepdim=True)) / X_std",
                            "BinOp"
                        ],
                        [
                            "X.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features)",
                            "Call"
                        ],
                        [
                            "X.view(-1, X.shape[-1])",
                            "Call"
                        ],
                        [
                            "X - X_mean.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "X.view(-1, self.groups, self.num_features).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_589": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "baddbmm_590": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(X.shape[1], dtype=X.dtype, device=X.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(cov.shape[1], dtype=cov.dtype, device=cov.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(X.shape[1], dtype=X.dtype, device=X.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_features, dtype=X.dtype, device=X.device).expand(self.groups, self.num_features, self.num_features)",
                            "Call"
                        ],
                        [
                            "torch.eye(cov.shape[1], dtype=cov.dtype, device=cov.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_features, dtype=cov.dtype, device=cov.device).expand(self.groups, self.num_features, self.num_features)",
                            "Call"
                        ],
                        [
                            "torch.eye(X.shape[1], dtype=X.dtype, device=X.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_features, dtype=X.dtype, device=X.device).expand(self.groups, self.num_features, self.num_features)",
                            "Call"
                        ],
                        [
                            "torch.eye(cov.shape[1], dtype=cov.dtype, device=cov.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(self.num_features, dtype=cov.dtype, device=cov.device).expand(self.groups, self.num_features, self.num_features)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "1.0 / X.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat1": {
                    "value": "X.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1, self.block)",
                            "Call"
                        ],
                        [
                            "X - X_mean.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.unfold(x, self.kernel_size, self.dilation, self.padding, self.sampling_stride).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous().view(-1, C)[::self.sampling_stride ** 2, :]",
                            "Subscript"
                        ],
                        [
                            "(X - X.mean(dim=-1, keepdim=True)) / X_std",
                            "BinOp"
                        ],
                        [
                            "X.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features)",
                            "Call"
                        ],
                        [
                            "X.view(-1, X.shape[-1])",
                            "Call"
                        ],
                        [
                            "X - X_mean.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "X.view(-1, self.groups, self.num_features).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.unfold(x, self.kernel_size, self.dilation, self.padding, self.sampling_stride).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1).contiguous().view(-1, C)[::self.sampling_stride ** 2, :]",
                            "Subscript"
                        ],
                        [
                            "(X - X.mean(dim=-1, keepdim=True)) / X_std",
                            "BinOp"
                        ],
                        [
                            "X.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features)",
                            "Call"
                        ],
                        [
                            "X.view(-1, X.shape[-1])",
                            "Call"
                        ],
                        [
                            "X - X_mean.unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "X.view(-1, self.groups, self.num_features).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_72": {
                "input": {
                    "value": "x2_mean - x_mean ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_like_181": {
                "input": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_366": {
                "input": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_560": {
                "input": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Classification/models/senet.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_55": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_57": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_110": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_111": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_112": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_165": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_99": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_104": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_127": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_150": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_155": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_157": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_177": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_102": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(out))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out * w",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "self.deconv1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_107": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/models/shufflenet.py": {
        "torch": {
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes / 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.groups",
                            "Attribute"
                        ],
                        [
                            "1 if in_planes == 24 else groups",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes / 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes / 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes / 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 if i == 0 else 1",
                            "IfExp"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes / 4",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes / 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes / 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['out_planes']",
                            "Subscript"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['groups']",
                            "Subscript"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ],
                        [
                            "groups",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['out_planes']",
                            "Subscript"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_planes[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_82": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.shuffle1(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(torch.cat([out, res], 1)) if self.stride == 2 else F.relu(out + res)",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_107": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_49": {
                "input": {
                    "value": "out + res",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AvgPool2d_41": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "tensors": {
                    "value": "[out, res]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/models/simple.py": {
        "torch": {
            "ModuleList_44": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_104": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deconv(x.view(N, -1, 1, 1)).view(N, C, H, W)",
                            "Call"
                        ],
                        [
                            "self.layers[i](x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_117": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Sigmoid()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm1d(hidden_nodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ChannelDeconv(num_groups=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Sigmoid()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "*args": {
                    "value": "nn.Conv2d(channels_in, hidden_channels, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "*args": {
                    "value": "nn.Conv2d(hidden_channels, num_outputs, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "*args": {
                    "value": "nn.Linear(input_nodes, hidden_nodes, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_125": {
                "in_features": {
                    "value": "hidden_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "*args": {
                    "value": "nn.Linear(input_nodes, hidden_nodes, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_133": {
                "num_features": {
                    "value": "hidden_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_133": {
                "in_features": {
                    "value": "hidden_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm1d(hidden_nodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "channels_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "channels_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels + 4",
                            "BinOp"
                        ],
                        [
                            "hidden_channels + 4",
                            "BinOp"
                        ],
                        [
                            "hidden_channels + 4",
                            "BinOp"
                        ],
                        [
                            "hidden_channels + 4",
                            "BinOp"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels + 4",
                            "BinOp"
                        ],
                        [
                            "hidden_channels + 4",
                            "BinOp"
                        ],
                        [
                            "hidden_channels + 4",
                            "BinOp"
                        ],
                        [
                            "hidden_channels + 4",
                            "BinOp"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "*args": {
                    "value": "nn.Conv2d(hidden_channels, hidden_channels + 4, kernel_size, padding=padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels + 4",
                            "BinOp"
                        ],
                        [
                            "hidden_channels + 4",
                            "BinOp"
                        ],
                        [
                            "hidden_channels + 4",
                            "BinOp"
                        ],
                        [
                            "hidden_channels + 4",
                            "BinOp"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_56": {
                "*args": {
                    "value": "DeConv2d(channels_in, hidden_channels, kernel_size, mode=3, num_groups=min(num_groups, channels_in))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "*args": {
                    "value": "DeConv2d(hidden_channels, num_outputs, kernel_size, mode=3, num_groups=min(num_groups, hidden_channels))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "in_features": {
                    "value": "input_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nodes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "*args": {
                    "value": "nn.Sigmoid()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "in_features": {
                    "value": "input_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nodes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "*args": {
                    "value": "nn.BatchNorm1d(hidden_nodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "*args": {
                    "value": "ChannelDeconv(num_groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_144": {
                "in_features": {
                    "value": "hidden_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels + 4",
                            "BinOp"
                        ],
                        [
                            "hidden_channels + 4",
                            "BinOp"
                        ],
                        [
                            "hidden_channels + 4",
                            "BinOp"
                        ],
                        [
                            "hidden_channels + 4",
                            "BinOp"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_channels + 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "hidden_channels + 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "*args": {
                    "value": "DeConv2d(hidden_channels, hidden_channels + 4, kernel_size, padding=padding, mode=3, num_groups=min(num_groups, hidden_channels))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "*args": {
                    "value": "DeConv2d(channels_in, hidden_channels, kernel_size, num_groups=min(num_groups, channels_in))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "*args": {
                    "value": "DeConv2d(hidden_channels, num_outputs, kernel_size, num_groups=min(num_groups, hidden_channels))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_124": {
                "in_features": {
                    "value": "hidden_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_132": {
                "num_features": {
                    "value": "hidden_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_132": {
                "in_features": {
                    "value": "hidden_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "in_features": {
                    "value": "input_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nodes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "*args": {
                    "value": "nn.Sigmoid()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "*args": {
                    "value": "ChannelDeconv(num_groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_153": {
                "num_features": {
                    "value": "hidden_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_154": {
                "in_features": {
                    "value": "hidden_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "*args": {
                    "value": "DeConv2d(hidden_channels, hidden_channels + 4, kernel_size, padding=padding, num_groups=min(num_groups, hidden_channels))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "*args": {
                    "value": "DeConv2d(channels_in, hidden_channels, kernel_size, mode=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "*args": {
                    "value": "DeConv2d(hidden_channels, num_outputs, kernel_size, mode=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_142": {
                "in_features": {
                    "value": "hidden_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "in_features": {
                    "value": "input_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nodes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "*args": {
                    "value": "nn.BatchNorm1d(hidden_nodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "*args": {
                    "value": "DeConv2d(hidden_channels, hidden_channels + 4, kernel_size, padding=padding, mode=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_151": {
                "num_features": {
                    "value": "hidden_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sigmoid_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_152": {
                "in_features": {
                    "value": "hidden_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Classification/models/vgg.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_65": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_51": {
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_64": {
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_44": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "int(kernel_size / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_55": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Classification/models/vgg_imagenet.py": {
        "torch": {}
    },
    "Classification/net_util.py": {
        "torch": {
            "save_277": {
                "obj": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': net.module.state_dict() if hasattr(net, 'module') else net.state_dict(), 'epoch': args.epoch + 1, 'arch': args.arch, 'best_acc': args.best_acc, 'train_losses': args.train_losses, 'optimizer': args.current_optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.checkpoint_path, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Classification/util.py": {
        "torch": {
            "DataLoader_14": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "*size": {
                    "value": "targets.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "targets.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/demo/predictor.py": {
        "torch": {
            "device_111": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "variable": {
                    "value": "self.palette",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[2 ** 25 - 1, 2 ** 15 - 1, 2 ** 21 - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_127": {
                "variable": {
                    "value": "self.cpu_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nonzero_237": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores > self.confidence_threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_237": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_324": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(masks_per_dim * height, masks_per_dim * width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_320": {
                "variable": {
                    "value": "masks_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks_per_dim ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/data/build.py": {
        "torch": {}
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/data/datasets/coco.py": {
        "torch": {
            "as_tensor_42": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes).reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_42": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "[self.json_category_id_to_contiguous_id[c] for c in classes]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/data/datasets/concat_dataset.py": {
        "torch": {}
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/data/datasets/evaluation/coco/coco_eval.py": {
        "torch": {
            "cat_255": {
                "variable": {
                    "value": "gt_overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gt_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sort(gt_overlaps)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_256": {
                "variable": {
                    "value": "(gt_overlaps, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_overlaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(gt_overlaps, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sort(gt_overlaps)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_261": {
                "variable": {
                    "value": "recalls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0.5, 0.95 + 1e-05, step, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_210": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno if obj['iscrowd'] == 0]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(gt_boxes).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "BoxList(gt_boxes, (image_width, image_height), mode='xywh').convert('xyxy')",
                            "Call"
                        ],
                        [
                            "gt_boxes[valid_gt_inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_210": {
                "variable": {
                    "value": "gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_214": {
                "variable": {
                    "value": "gt_areas",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['area'] for obj in anno if obj['iscrowd'] == 0]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_235": {
                "variable": {
                    "value": "_gt_overlaps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(gt_boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_260": {
                "variable": {
                    "value": "thresholds",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "0.95 + 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "float"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_67": {
                "obj": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "COCOResults(*iou_types)",
                            "Call"
                        ],
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "results",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'coco_results.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_40": {
                "obj": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "COCOResults('box_proposal')",
                            "Call"
                        ],
                        [
                            "evaluate_predictions_on_coco(dataset.coco, coco_results[iou_type], file_path, iou_type)",
                            "Call"
                        ],
                        [
                            "self.results[iou_type]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'box_proposals.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/data/datasets/voc.py": {
        "torch": {
            "tensor_121": {
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "data": {
                    "value": "gt_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_123": {
                "data": {
                    "value": "difficult_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/data/samplers/distributed.py": {
        "torch": {
            "Generator_45": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_47": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_49": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/data/samplers/grouped_batch_sampler.py": {
        "torch": {
            "as_tensor_31": {
                "variable": {
                    "value": "self.group_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "group_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_43": {
                "variable": {
                    "value": "sampled_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.sampler)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_51": {
                "variable": {
                    "value": "order",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(dataset_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_52": {
                "variable": {
                    "value": "order[sampled_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "len(sampled_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_84": {
                "variable": {
                    "value": "first_index_of_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[inv_sampled_ids_map[s] for s in first_element_of_batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unique_36": {
                "input": {
                    "value": "self.group_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_36": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/data/samplers/iteration_based_batch_sampler.py": {
        "torch": {}
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/data/transforms/transforms.py": {
        "torch": {}
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/engine/inference.py": {
        "torch": {
            "device_21": {
                "variable": {
                    "value": "cpu_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_73": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(device)",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "'cuda'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_initialized_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_101": {
                "obj": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "[predictions[i] for i in image_ids]",
                            "ListComp"
                        ],
                        [
                            "compute_on_dataset(model, data_loader, device, args)",
                            "Call"
                        ],
                        [
                            "_accumulate_predictions_from_multiple_gpus(predictions)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_folder, 'predictions.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/engine/tester.py": {
        "torch": {
            "empty_cache_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/engine/trainer.py": {
        "torch": {
            "stack_38": {
                "variable": {
                    "value": "all_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_losses, dim=0)",
                            "Call"
                        ],
                        [
                            "all_losses / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/layers/__init__.py": {
        "torch": {}
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/layers/_utils.py": {
        "torch": {
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/layers/batch_norm.py": {
        "torch": {
            "ones_14": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_16": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_17": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/layers/deconv.py": {
        "torch": {
            "eye_443": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "A.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "A.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_446": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "A.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "A.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_473": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "A.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "A.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_473": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_474": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "A.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "A.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_474": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_277": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.reshape(x_shape[0], -1)",
                            "Call"
                        ],
                        [
                            "x / std - mean / std",
                            "BinOp"
                        ],
                        [
                            "x.view(x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.block) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "torch.flip(w.view(weight.shape), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "UnaryOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flip_410": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_422": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w.view(weight.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv_transpose2d_426": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.reshape(x_shape[0], -1)",
                            "Call"
                        ],
                        [
                            "x / std - mean / std",
                            "BinOp"
                        ],
                        [
                            "x.view(x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.block) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "torch.flip(w.view(weight.shape), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "UnaryOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_padding(x, output_size, self.stride, self.padding, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_101": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "XX_mean.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_125": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous()",
                            "Call"
                        ],
                        [
                            "input / (input_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.block) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "torch.flip(w.view(weight.shape), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "UnaryOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "addmm_451": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                },
                "input": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device).unsqueeze(0).expand_as(A)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "mat1": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device)",
                            "Call"
                        ],
                        [
                            "T.mm(Z)",
                            "Call"
                        ],
                        [
                            "torch.addmm(beta=1.5, input=Z, alpha=-0.5, mat1=torch.matrix_power(Z, 3), mat2=Y)",
                            "Call"
                        ],
                        [
                            "Z.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device).unsqueeze(0).expand_as(A)",
                            "Call"
                        ],
                        [
                            "T.bmm(Z)",
                            "Call"
                        ],
                        [
                            "Z.bmm(T)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ],
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.bmm(T)",
                            "Call"
                        ],
                        [
                            "torch.bmm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_465": {
                "input": {
                    "value": "normA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.norm()",
                            "Call"
                        ],
                        [
                            "A.trace()",
                            "Call"
                        ],
                        [
                            "A.view(batchSize, -1).norm(2, 1).view(batchSize, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_486": {
                "input": {
                    "value": "normA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.norm()",
                            "Call"
                        ],
                        [
                            "A.trace()",
                            "Call"
                        ],
                        [
                            "A.view(batchSize, -1).norm(2, 1).view(batchSize, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_45": {
                "*size": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_46": {
                "n": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unfold_206": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.reshape(x_shape[0], -1)",
                            "Call"
                        ],
                        [
                            "x / std - mean / std",
                            "BinOp"
                        ],
                        [
                            "x.view(x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.sampling_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_206": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_246": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "XX_mean.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_250": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unfold_348": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.reshape(x_shape[0], -1)",
                            "Call"
                        ],
                        [
                            "x / std - mean / std",
                            "BinOp"
                        ],
                        [
                            "x.view(x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.sampling_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_348": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_387": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "XX_mean.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_391": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "addmm_457": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device)",
                            "Call"
                        ],
                        [
                            "T.mm(Z)",
                            "Call"
                        ],
                        [
                            "torch.addmm(beta=1.5, input=Z, alpha=-0.5, mat1=torch.matrix_power(Z, 3), mat2=Y)",
                            "Call"
                        ],
                        [
                            "Z.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device).unsqueeze(0).expand_as(A)",
                            "Call"
                        ],
                        [
                            "T.bmm(Z)",
                            "Call"
                        ],
                        [
                            "Z.bmm(T)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "mat1": {
                    "value": "torch.matrix_power(Z, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ],
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.bmm(T)",
                            "Call"
                        ],
                        [
                            "torch.bmm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_483": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matrix_power(T, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ],
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.bmm(T)",
                            "Call"
                        ],
                        [
                            "torch.bmm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_initialized_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X_mean.view(-1), XX_mean.view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_97": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sync_data_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_97": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_157": {
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "*size": {
                    "value": "kernel_size ** 2 * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_160": {
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_initialized_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X_mean.view(-1), XX_mean.view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_240": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sync_data_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_240": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_309": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_310": {
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_312": {
                "*size": {
                    "value": "kernel_size ** 2 * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_313": {
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_initialized_375": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_378": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X_mean.view(-1), XX_mean.view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_381": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sync_data_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_381": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_461": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matrix_power(T, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ],
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.bmm(T)",
                            "Call"
                        ],
                        [
                            "torch.bmm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "matrix_power_483": {
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.addmm(beta=1.5, input=I, alpha=-0.5, mat1=Z, mat2=Y)",
                            "Call"
                        ],
                        [
                            "(3 * I - Y) / 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * (3.0 * I - Z.bmm(Y))",
                            "BinOp"
                        ],
                        [
                            "(3 * I - Y) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_95": {
                "input": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_238": {
                "input": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_379": {
                "input": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matrix_power_457": {
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device)",
                            "Call"
                        ],
                        [
                            "T.mm(Z)",
                            "Call"
                        ],
                        [
                            "torch.addmm(beta=1.5, input=Z, alpha=-0.5, mat1=torch.matrix_power(Z, 3), mat2=Y)",
                            "Call"
                        ],
                        [
                            "Z.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device).unsqueeze(0).expand_as(A)",
                            "Call"
                        ],
                        [
                            "T.bmm(Z)",
                            "Call"
                        ],
                        [
                            "Z.bmm(T)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matrix_power_461": {
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.addmm(beta=1.5, input=I, alpha=-0.5, mat1=Z, mat2=Y)",
                            "Call"
                        ],
                        [
                            "(3 * I - Y) / 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * (3.0 * I - Z.bmm(Y))",
                            "BinOp"
                        ],
                        [
                            "(3 * I - Y) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/layers/group_whitening.py": {
        "torch": {
            "randn_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_46": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_62": {
                "variable": {
                    "value": "P[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "addcmul_64": {
                "variable": {
                    "value": "trace_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M_zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma.clone().fill_(0)",
                            "Call"
                        ]
                    ]
                },
                "tensor1": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_mean.matmul(x_mean.transpose(1, 2)) / m",
                            "BinOp"
                        ]
                    ]
                },
                "tensor2": {
                    "value": "P[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_64": {
                "variable": {
                    "value": "trace_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "addcmul_65": {
                "variable": {
                    "value": "sigma_N",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M_zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma.clone().fill_(0)",
                            "Call"
                        ]
                    ]
                },
                "tensor1": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_mean.matmul(x_mean.transpose(1, 2)) / m",
                            "BinOp"
                        ]
                    ]
                },
                "tensor2": {
                    "value": "trace_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.addcmul(M_zero, sigma, P[0]).sum((1, 2), keepdim=True).reciprocal_()",
                            "Call"
                        ]
                    ]
                }
            },
            "addcmul_68": {
                "variable": {
                    "value": "wm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M_zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sigma.clone().fill_(0)",
                            "Call"
                        ]
                    ]
                },
                "tensor1": {
                    "value": "P[self.T]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "trace_inv.sqrt()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*self.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*self.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_47": {
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(Input, Input)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "baddbmm_67": {
                "variable": {
                    "value": "P[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                },
                "batch1": {
                    "value": "P[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch2": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "beta": {
                    "value": "self.matrix_power3(P[k])",
                    "type": "Call",
                    "possible_values": []
                },
                "alpha": {
                    "value": "sigma_N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.addcmul(M_zero, sigma, trace_inv)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/layers/misc.py": {
        "torch": {
            "interpolate_71": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'nearest'",
                            "Method Argument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/layers/roi_align.py": {
        "torch": {}
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/layers/roi_pool.py": {
        "torch": {}
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/layers/smooth_l1_loss.py": {
        "torch": {
            "abs_11": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_13": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n < beta",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "0.5 * n ** 2 / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "n - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/backbone/backbone.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body), ('fpn', fpn)])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/backbone/fpn.py": {
        "torch": {
            "interpolate_54": {
                "variable": {
                    "value": "inner_top_down",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, self.inner_blocks[-1])(x[-1])",
                            "Call"
                        ],
                        [
                            "inner_lateral + inner_top_down",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_71": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/backbone/resnet.py": {
        "torch": {
            "Sequential_269": {
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu__344": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out0)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__347": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out0)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__357": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out0)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__441": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out0)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__444": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out0)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__453": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out0)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__475": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stem_norm(x)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.bottleneck_norm(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage_name)(x)",
                            "Call"
                        ],
                        [
                            "self.fpn_norm(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage)(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool2d_476": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stem_norm(x)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.bottleneck_norm(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage_name)(x)",
                            "Call"
                        ],
                        [
                            "self.fpn_norm(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage)(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu__499": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stem_norm(x)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.bottleneck_norm(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage_name)(x)",
                            "Call"
                        ],
                        [
                            "self.fpn_norm(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage)(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool2d_500": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stem_norm(x)",
                            "Call"
                        ],
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "self.bottleneck_norm(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage_name)(x)",
                            "Call"
                        ],
                        [
                            "self.fpn_norm(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage)(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_289": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, kernel_size=1, stride=down_stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_382": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Deconv(in_channels, out_channels, kernel_size=1, stride=down_stride, bias=True, block=block, sampling_stride=sampling_stride, sync=sync, norm_type=norm_type)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/balanced_positive_negative_sampler.py": {
        "torch": {
            "nonzero_39": {
                "variable": {
                    "value": "positive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image >= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "positive",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_40": {
                "variable": {
                    "value": "negative",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_40": {
                "variable": {
                    "value": "negative",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_57": {
                "variable": {
                    "value": "pos_idx_per_image_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matched_idxs",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_60": {
                "variable": {
                    "value": "neg_idx_per_image_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matched_idxs_per_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matched_idxs",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_50": {
                "n": {
                    "value": "positive.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "positive.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_51": {
                "n": {
                    "value": "negative.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "negative.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/box_coder.py": {
        "torch": {
            "clamp_82": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.bbox_xform_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_83": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "self.bbox_xform_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_90": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_35": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "_C.box_encode(reference_boxes, proposals, wx, wy, ww, wh)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_54": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_87": {
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_88": {
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=self.bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_51": {
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_52": {
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/detector/generalized_rcnn.py": {
        "torch": {}
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/make_layers.py": {
        "torch": {
            "GroupNorm_36": {
                "num_groups": {
                    "value": "get_group_gn(out_channels, dim_per_gp, num_groups)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // divisor",
                            "BinOp"
                        ],
                        [
                            "out_channels // divisor",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.GROUP_NORM.EPSILON",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.WHITENING.EPSILON",
                            "Attribute"
                        ]
                    ]
                },
                "affine": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_113": {
                "*args": {
                    "value": "*module",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "*args": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "*args": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_181": {
                "*args": {
                    "value": "*module",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_179": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/matcher.py": {
        "torch": {
            "nonzero_98": {
                "variable": {
                    "value": "gt_pred_pairs_of_highest_quality",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "match_quality_matrix == highest_quality_foreach_gt[:, None]",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/poolers.py": {
        "torch": {
            "sqrt_37": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cat([boxlist.area() for boxlist in boxlists])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_40": {
                "variable": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lvl0 + torch.log2(s / self.s0 + self.eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_41": {
                "variable": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_lvls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(self.lvl0 + torch.log2(s / self.s0 + self.eps))",
                            "Call"
                        ],
                        [
                            "torch.clamp(target_lvls, min=self.k_min, max=self.k_max)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.k_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.k_max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_70": {
                "variable": {
                    "value": "self.poolers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "poolers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_88": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ids, concat_boxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_rois, num_channels, output_size, output_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_boxes.dtype",
                            "Attribute"
                        ],
                        [
                            "x[0].dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_boxes.device",
                            "Attribute"
                        ],
                        [
                            "x[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "nonzero_117": {
                "variable": {
                    "value": "idx_in_level",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "levels == level",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_117": {
                "variable": {
                    "value": "idx_in_level",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log2_74": {
                "input": {
                    "value": "torch.tensor(scales[0], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log2_75": {
                "input": {
                    "value": "torch.tensor(scales[-1], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log2_40": {
                "input": {
                    "value": "s / self.s0 + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_83": {
                "size": {
                    "value": "(len(b), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_boxes.dtype",
                            "Attribute"
                        ],
                        [
                            "x[0].dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "concat_boxes.device",
                            "Attribute"
                        ],
                        [
                            "x[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_74": {
                "data": {
                    "value": "scales[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "scales[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/roi_heads/box_head/box_head.py": {
        "torch": {
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/roi_heads/box_head/inference.py": {
        "torch": {
            "softmax_50": {
                "variable": {
                    "value": "class_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "concat_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.bbox for a in boxes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kthvalue_130": {
                "variable": {
                    "value": "(image_thresh, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_scores.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "number_of_detections - self.detections_per_img + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_134": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_scores >= image_thresh.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_134": {
                "variable": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_120": {
                "size": {
                    "value": "(num_labels,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "j in range(1, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/roi_heads/box_head/loss.py": {
        "torch": {
            "cross_entropy_139": {
                "variable": {
                    "value": "classification_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cat(class_logits, dim=0)",
                            "Call"
                        ],
                        [
                            "class_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.prepare_targets(proposals, targets)",
                            "Call"
                        ],
                        [
                            "cat([proposal.get_field('labels') for proposal in proposals], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_144": {
                "variable": {
                    "value": "sampled_pos_inds_subset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_144": {
                "variable": {
                    "value": "sampled_pos_inds_subset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_104": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_inds_img | neg_inds_img",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_104": {
                "variable": {
                    "value": "img_sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_146": {
                "data": {
                    "value": "[0, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/roi_heads/box_head/roi_box_feature_extractors.py": {
        "torch": {
            "relu_109": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_213": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "*args": {
                    "value": "*xconvs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_185": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_171": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "conv_head_dim",
                            "variable"
                        ],
                        [
                            "conv_head_dim",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_head_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.CONV_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.DILATION",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False if use_gn or use_gw else True",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/roi_heads/box_head/roi_box_predictors.py": {
        "torch": {
            "AvgPool2d_15": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res2_out_channels * stage2_relative_factor",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res2_out_channels * stage2_relative_factor",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.cls_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.MLP_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ],
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.NUM_CLASSES",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "representation_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.ROI_BOX_HEAD.MLP_HEAD_DIM",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/roi_heads/mask_head/inference.py": {
        "torch": {
            "zeros_like_100": {
                "variable": {
                    "value": "boxes_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.convert('xyxy')",
                            "Call"
                        ],
                        [
                            "[boxes]",
                            "List"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ],
                        [
                            "boxes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_140": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.float()",
                            "Call"
                        ],
                        [
                            "padded_mask[0, 0]",
                            "Subscript"
                        ],
                        [
                            "mask.expand((1, 1, -1, -1))",
                            "Call"
                        ],
                        [
                            "mask.to(torch.float32)",
                            "Call"
                        ],
                        [
                            "F.interpolate(mask, size=(h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "mask[0][0]",
                            "Subscript"
                        ],
                        [
                            "mask > thresh",
                            "Compare"
                        ],
                        [
                            "(mask * 255).to(torch.uint8)",
                            "Call"
                        ],
                        [
                            "zip(masks, boxes)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_150": {
                "variable": {
                    "value": "im_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(im_h, im_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[bbox.get_field('labels') for bbox in boxes]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_44": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_180": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[paste_mask_in_image(mask[0], box, im_h, im_w, self.threshold, self.padding) for (mask, box) in zip(masks, boxes.bbox)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(res, dim=0)[:, None]",
                            "Subscript"
                        ],
                        [
                            "masks.new_empty((0, 1, masks.shape[-2], masks.shape[-1]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/roi_heads/mask_head/loss.py": {
        "torch": {
            "cat_39": {
                "variable": {
                    "value": "dense_coordinate_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(itertools.chain(*polygons_list))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_131": {
                "variable": {
                    "value": "positive_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_131": {
                "variable": {
                    "value": "positive_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_139": {
                "variable": {
                    "value": "mask_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_logits[positive_inds, labels_pos]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "mask_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.prepare_targets(proposals, targets)",
                            "Call"
                        ],
                        [
                            "cat(mask_targets, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_57": {
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "_C.generate_mask_targets(dense_coordinate_vec, polygons_list, proposals.bbox, M)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_100": {
                "variable": {
                    "value": "positive_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_per_image > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_100": {
                "variable": {
                    "value": "positive_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_41": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_46": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_56": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals.bbox.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/roi_heads/mask_head/mask_head.py": {
        "torch": {
            "cat_67": {
                "tensors": {
                    "value": "positive_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "keep_only_positive_boxes(proposals)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/roi_heads/mask_head/roi_mask_feature_extractors.py": {
        "torch": {
            "relu_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "getattr(self, layer_name)(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/roi_heads/mask_head/roi_mask_predictors.py": {
        "torch": {
            "relu_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv5_mask(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/roi_heads/roi_heads.py": {
        "torch": {}
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/rpn/anchor_generator.py": {
        "torch": {
            "from_numpy_217": {
                "ndarray": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_ratio_enum(anchor, aspect_ratios)",
                            "Call"
                        ],
                        [
                            "np.vstack([_scale_enum(anchors[i, :], scales) for i in range(anchors.shape[0])])",
                            "Call"
                        ],
                        [
                            "np.hstack((x_ctr - 0.5 * (ws - 1), y_ctr - 0.5 * (hs - 1), x_ctr + 0.5 * (ws - 1), y_ctr + 0.5 * (hs - 1)))",
                            "Call"
                        ],
                        [
                            "_mkanchors(ws, hs, x_ctr, y_ctr)",
                            "Call"
                        ],
                        [
                            "_mkanchors(ws, hs, x_ctr, y_ctr)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "boxlist.bbox",
                            "Attribute"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "arange_76": {
                "variable": {
                    "value": "shifts_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_width * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(grid_sizes, self.strides, self.cell_anchors)",
                            "Call"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_79": {
                "variable": {
                    "value": "shifts_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_height * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(grid_sizes, self.strides, self.cell_anchors)",
                            "Call"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "meshgrid_82": {
                "variable": {
                    "value": "(shift_y, shift_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "shifts_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, grid_height * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "shifts_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, grid_width * stride, step=stride, dtype=torch.float32, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_85": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shift_x, shift_y, shift_x, shift_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_105": {
                "variable": {
                    "value": "inds_inside",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "anchors.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/rpn/inference.py": {
        "torch": {
            "tensor_99": {
                "variable": {
                    "value": "image_shapes_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[box.size for box in anchors]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "objectness.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "concat_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.bbox for a in anchors]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "concat_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[a.bbox for a in anchors]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[boxlist.get_field('objectness') for boxlist in boxlists]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_231": {
                "variable": {
                    "value": "(_, inds_sorted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "objectness.reshape(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "objectness.topk(pre_nms_top_n, dim=1, sorted=True)",
                            "Call"
                        ],
                        [
                            "C.GeneratePreNMSUprightBoxes(N, A, H, W, topk_idx, objectness.float(), box_regression.float(), concat_anchors, image_shapes_cat, pre_nms_top_n, self.min_size, self.box_coder.bbox_xform_clip, True)",
                            "Call"
                        ],
                        [
                            "objectness.view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.reshape(N, A, H, W)",
                            "Call"
                        ],
                        [
                            "objectness.permute(0, 2, 3, 1).reshape(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "objectness.topk(pre_nms_top_n, dim=1, sorted=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ],
                        [
                            "objectness",
                            "Method Argument"
                        ],
                        [
                            "objectness",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "post_nms_top_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "post_nms_top_n",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_232": {
                "variable": {
                    "value": "inds_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "objectness.reshape(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "objectness.topk(pre_nms_top_n, dim=1, sorted=True)",
                            "Call"
                        ],
                        [
                            "C.GeneratePreNMSUprightBoxes(N, A, H, W, topk_idx, objectness.float(), box_regression.float(), concat_anchors, image_shapes_cat, pre_nms_top_n, self.min_size, self.box_coder.bbox_xform_clip, True)",
                            "Call"
                        ],
                        [
                            "objectness.view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.reshape(N, A, H, W)",
                            "Call"
                        ],
                        [
                            "objectness.permute(0, 2, 3, 1).reshape(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "objectness.topk(pre_nms_top_n, dim=1, sorted=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ],
                        [
                            "objectness",
                            "Method Argument"
                        ],
                        [
                            "objectness",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_241": {
                "variable": {
                    "value": "(_, inds_sorted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness",
                    "type": "variable",
                    "possible_values": [
                        [
                            "objectness.reshape(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "objectness.topk(pre_nms_top_n, dim=1, sorted=True)",
                            "Call"
                        ],
                        [
                            "C.GeneratePreNMSUprightBoxes(N, A, H, W, topk_idx, objectness.float(), box_regression.float(), concat_anchors, image_shapes_cat, pre_nms_top_n, self.min_size, self.box_coder.bbox_xform_clip, True)",
                            "Call"
                        ],
                        [
                            "objectness.view(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.reshape(N, A, H, W)",
                            "Call"
                        ],
                        [
                            "objectness.permute(0, 2, 3, 1).reshape(N, -1)",
                            "Call"
                        ],
                        [
                            "objectness.sigmoid()",
                            "Call"
                        ],
                        [
                            "objectness.topk(pre_nms_top_n, dim=1, sorted=True)",
                            "Call"
                        ],
                        [
                            "torch.cat([boxlist.get_field('objectness') for boxlist in boxlists], dim=0)",
                            "Call"
                        ],
                        [
                            "boxlists[i].get_field('objectness')",
                            "Call"
                        ],
                        [
                            "objectness",
                            "Method Argument"
                        ],
                        [
                            "objectness",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "post_nms_top_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TRAIN",
                            "Attribute"
                        ],
                        [
                            "config.MODEL.RPN.POST_NMS_TOP_N_TEST",
                            "Attribute"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "min(self.fpn_post_nms_top_n, len(objectness))",
                            "Call"
                        ],
                        [
                            "post_nms_top_n",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_66": {
                "*size": {
                    "value": "len(gt_box)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[0].bbox.device",
                            "Attribute"
                        ],
                        [
                            "objectness.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_149": {
                "start": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proposals[0].bbox.device",
                            "Attribute"
                        ],
                        [
                            "objectness.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/rpn/loss.py": {
        "torch": {
            "nonzero_93": {
                "variable": {
                    "value": "sampled_pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(sampled_pos_inds, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_93": {
                "variable": {
                    "value": "sampled_pos_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_94": {
                "variable": {
                    "value": "sampled_neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(sampled_neg_inds, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_94": {
                "variable": {
                    "value": "sampled_neg_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_pos_inds, sampled_neg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.prepare_targets(anchors, targets)",
                            "Call"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "regression_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "regression_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.prepare_targets(anchors, targets)",
                            "Call"
                        ],
                        [
                            "torch.cat(regression_targets, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_132": {
                "variable": {
                    "value": "objectness_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "objectness[sampled_inds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[sampled_inds]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_93": {
                "tensors": {
                    "value": "sampled_pos_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fg_bg_sampler(labels)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(torch.cat(sampled_pos_inds, dim=0)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_94": {
                "tensors": {
                    "value": "sampled_neg_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fg_bg_sampler(labels)",
                            "Call"
                        ],
                        [
                            "torch.nonzero(torch.cat(sampled_neg_inds, dim=0)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/rpn/rpn.py": {
        "torch": {
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.cls_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.MODEL.BACKBONE.OUT_CHANNELS",
                            "Attribute"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/modeling/utils.py": {
        "torch": {
            "cat_16": {
                "tensors": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/solver/build.py": {
        "torch": {
            "SGD_19": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.SOLVER.BASE_LR",
                            "Attribute"
                        ],
                        [
                            "cfg.SOLVER.BASE_LR * cfg.SOLVER.BIAS_LR_FACTOR",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.SOLVER.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/solver/lr_scheduler.py": {
        "torch": {}
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/structures/bounding_box.py": {
        "torch": {
            "as_tensor_22": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BoxList([[0, 0, 10, 10], [0, 0, 5, 5]], (10, 10))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(bbox, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat((xmin, ymin, xmax, ymax), dim=-1)",
                            "Call"
                        ],
                        [
                            "BoxList(bbox, self.size, mode=mode)",
                            "Call"
                        ],
                        [
                            "torch.cat((xmin, ymin, xmax - xmin + TO_REMOVE, ymax - ymin + TO_REMOVE), dim=-1)",
                            "Call"
                        ],
                        [
                            "BoxList(bbox, self.size, mode=mode)",
                            "Call"
                        ],
                        [
                            "BoxList(scaled_box, size, mode=self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(scaled_box, size, mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(transposed_boxes, self.size, mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(cropped_box, (w, h), mode='xyxy')",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox.to(device), self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox[item], self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "BoxList(self.bbox, self.size, self.mode)",
                            "Call"
                        ],
                        [
                            "bbox",
                            "Method Argument"
                        ],
                        [
                            "bbox",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bbox.device if isinstance(bbox, torch.Tensor) else torch.device('cpu')",
                            "IfExp"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_118": {
                "variable": {
                    "value": "scaled_box",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scaled_xmin, scaled_ymin, scaled_xmax, scaled_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "transposed_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(transposed_xmin, transposed_ymin, transposed_xmax, transposed_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "cropped_box",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cropped_xmin, cropped_ymin, cropped_xmax, cropped_ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax, ymax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xmin, ymin, xmax - xmin + TO_REMOVE, ymax - ymin + TO_REMOVE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_21": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/structures/boxlist_ops.py": {
        "torch": {
            "max_81": {
                "variable": {
                    "value": "lt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_82": {
                "variable": {
                    "value": "rb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_101": {
                "tensors": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/structures/image_list.py": {
        "torch": {}
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/structures/segmentation_mask.py": {
        "torch": {
            "from_numpy_133": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_utils.decode(rle)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_61": {
                "data": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poly.clone()",
                            "Call"
                        ],
                        [
                            "poly.clone()",
                            "Call"
                        ],
                        [
                            "poly.clone()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/utils/c2_model_loading.py": {
        "torch": {
            "from_numpy_124": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights[k]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/utils/checkpoint.py": {
        "torch": {
            "save_49": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, '{}.pth'.format(name))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, 'last_checkpoint')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_95": {
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_checkpoint_file()",
                            "Call"
                        ],
                        [
                            "catalog_f",
                            "variable"
                        ],
                        [
                            "cached_f",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_95": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/utils/collect_env.py": {
        "torch": {}
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/utils/comm.py": {
        "torch": {
            "cat_81": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_111": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/utils/imports.py": {
        "torch": {}
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/utils/metric_logger.py": {
        "torch": {
            "tensor_27": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/utils/model_serialization.py": {
        "torch": {
            "as_tensor_32": {
                "variable": {
                    "value": "match_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "match_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(j) if i.endswith(j) else 0 for i in current_keys for j in loaded_keys]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(match_matrix).view(len(current_keys), len(loaded_keys))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "MaskRCNN/pytorch/maskrcnn_benchmark/utils/model_zoo.py": {
        "torch": {}
    },
    "MaskRCNN/pytorch/setup.py": {
        "torch": {}
    },
    "MaskRCNN/pytorch/tests/checkpoint.py": {
        "torch": {
            "Module_19": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Module_20": {
                "variable": {
                    "value": "m.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "m.block1.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "m.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Module_23": {
                "variable": {
                    "value": "m.res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "m.res.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_27": {
                "variable": {
                    "value": "state_dict[layer1.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_28": {
                "variable": {
                    "value": "state_dict[layer1.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_29": {
                "variable": {
                    "value": "state_dict[layer2.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_30": {
                "variable": {
                    "value": "state_dict[layer2.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_31": {
                "variable": {
                    "value": "state_dict[res.layer2.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_32": {
                "variable": {
                    "value": "state_dict[res.layer2.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "*args": {
                    "value": "nn.Linear(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_107": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.create_complex_model()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_40": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_41": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_43": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_44": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_75": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_76": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_78": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_79": {
                "module": {
                    "value": "self.create_model()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/tests/test_data_samplers.py": {
        "torch": {
            "SequentialSampler_31": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "SequentialSampler_44": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "SequentialSampler_64": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "RandomSampler_116": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "SequentialSampler_136": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[i for i in range(40)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ],
                        [
                            "[i for i in range(10)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "BatchSampler_137": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SubsetSampler([0, 3, 5, 6, 7, 8])",
                            "Call"
                        ],
                        [
                            "SubsetSampler([5, 0, 6, 1, 3, 8])",
                            "Call"
                        ],
                        [
                            "SubsetSampler([5, 0, 6, 1, 3, 8])",
                            "Call"
                        ],
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3, 5, 6]",
                            "List"
                        ],
                        [
                            "batch_size in enumerate([1, 3, 4])",
                            "Call"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "[2, 3, 4]",
                            "List"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[False, True]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "MaskRCNN/pytorch/tools/test_net.py": {
        "torch": {
            "set_device_72": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MaskRCNN/pytorch/tools/train_net.py": {
        "torch": {
            "device_103": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.MODEL.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "map_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[bbox_map, segm_map]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device('cuda')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_383": {
                "variable": {
                    "value": "args.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flush_secs": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_72": {
                "tensor": {
                    "value": "map_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([bbox_map, segm_map], dtype=torch.float32, device=torch.device('cuda'))",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_123": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_detection_model(cfg)",
                            "Call"
                        ],
                        [
                            "amp.initialize(model, optimizer, opt_level=amp_opt_level)",
                            "Call"
                        ],
                        [
                            "DDP(model, delay_allreduce=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[local_rank], output_device=local_rank, broadcast_buffers=False)",
                            "Call"
                        ],
                        [
                            "model.module",
                            "Attribute"
                        ],
                        [
                            "train(cfg, args.local_rank, args.distributed, fp16, dllogger, args)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_rank",
                            "Method Argument"
                        ]
                    ]
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_device_338": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_71": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Segmentation/coco_utils.py": {
        "torch": {
            "Subset_83": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(dataset, ids)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.CocoDetection(img_folder, ann_file, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "_coco_remove_images_without_annotations(dataset, CAT_LIST)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "as_tensor_36": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coco_mask.decode(rles)",
                            "Call"
                        ],
                        [
                            "mask[..., None]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(mask, dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "mask.any(dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_40": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(masks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.zeros((0, height, width), dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "convert_coco_poly_to_mask(segmentations, h, w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_53": {
                "variable": {
                    "value": "cats",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(cats, dtype=masks.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "masks.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Segmentation/models/_utils.py": {
        "torch": {
            "ModuleDict_60": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OrderedDict()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Segmentation/models/resnet.py": {
        "torch": {
            "Conv2d_26": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_145": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_153": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_154": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_209": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_181": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "Segmentation/models/resnetd.py": {
        "torch": {
            "ReLU_53": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_98": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_167": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_168": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_185": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_186": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_161": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_234": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_216": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride, deconv=deconv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride, deconv=deconv)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Segmentation/models/segmentation/SyncND.py": {
        "torch": {
            "conv2d_116": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_163": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "Cov.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Cov.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Cov.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_167": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "Cov.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "Cov.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unfold_77": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.sampling_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_77": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Segmentation/models/segmentation/_utils.py": {
        "torch": {
            "interpolate_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['out']",
                            "Subscript"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=input_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "features['aux']",
                            "Subscript"
                        ],
                        [
                            "self.aux_classifier(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=input_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['out']",
                            "Subscript"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=input_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "features['aux']",
                            "Subscript"
                        ],
                        [
                            "self.aux_classifier(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=input_shape, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Segmentation/models/segmentation/deconv.py": {
        "torch": {
            "eye_443": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "A.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "A.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_446": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "A.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "A.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_473": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "A.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "A.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_473": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_474": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "A.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "A.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_474": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_277": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.reshape(x_shape[0], -1)",
                            "Call"
                        ],
                        [
                            "x / std - mean / std",
                            "BinOp"
                        ],
                        [
                            "x.view(x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.block) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "torch.flip(w.view(weight.shape), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "UnaryOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flip_410": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_422": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w.view(weight.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv_transpose2d_426": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.reshape(x_shape[0], -1)",
                            "Call"
                        ],
                        [
                            "x / std - mean / std",
                            "BinOp"
                        ],
                        [
                            "x.view(x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.block) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "torch.flip(w.view(weight.shape), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "UnaryOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_padding(x, output_size, self.stride, self.padding, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_101": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "XX_mean.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_125": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.contiguous()",
                            "Call"
                        ],
                        [
                            "input / (input_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(input)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(-1, self.block) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "self.weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "weight.view(-1, self.num_features, C // B).transpose(1, 2).contiguous().view(-1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(-1, C // B, self.num_features).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.weight.view(C // B, -1, self.num_features) @ cov_isqrt",
                            "BinOp"
                        ],
                        [
                            "w.view(self.weight.shape)",
                            "Call"
                        ],
                        [
                            "torch.flip(w.view(weight.shape), [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "UnaryOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.unsqueeze(1)).view(self.weight.shape[0], -1).sum(1)",
                            "BinOp"
                        ],
                        [
                            "self.bias - (w @ X_mean.view(-1, self.num_features, 1)).view(self.bias.shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "addmm_451": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                },
                "input": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device).unsqueeze(0).expand_as(A)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "mat1": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device)",
                            "Call"
                        ],
                        [
                            "T.mm(Z)",
                            "Call"
                        ],
                        [
                            "torch.addmm(beta=1.5, input=Z, alpha=-0.5, mat1=torch.matrix_power(Z, 3), mat2=Y)",
                            "Call"
                        ],
                        [
                            "Z.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device).unsqueeze(0).expand_as(A)",
                            "Call"
                        ],
                        [
                            "T.bmm(Z)",
                            "Call"
                        ],
                        [
                            "Z.bmm(T)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ],
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.bmm(T)",
                            "Call"
                        ],
                        [
                            "torch.bmm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_465": {
                "input": {
                    "value": "normA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.norm()",
                            "Call"
                        ],
                        [
                            "A.trace()",
                            "Call"
                        ],
                        [
                            "A.view(batchSize, -1).norm(2, 1).view(batchSize, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_486": {
                "input": {
                    "value": "normA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.norm()",
                            "Call"
                        ],
                        [
                            "A.trace()",
                            "Call"
                        ],
                        [
                            "A.view(batchSize, -1).norm(2, 1).view(batchSize, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_45": {
                "*size": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_46": {
                "n": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unfold_206": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.reshape(x_shape[0], -1)",
                            "Call"
                        ],
                        [
                            "x / std - mean / std",
                            "BinOp"
                        ],
                        [
                            "x.view(x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.sampling_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_206": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_246": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "XX_mean.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_250": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unfold_348": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x / (x_norm + self.eps)",
                            "BinOp"
                        ],
                        [
                            "self.layernorm(x)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, output_padding, self.groups, self.dilation)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, x_shape[-1])",
                            "Call"
                        ],
                        [
                            "x.reshape(x_shape[0], -1)",
                            "Call"
                        ],
                        [
                            "x / std - mean / std",
                            "BinOp"
                        ],
                        [
                            "x.view(x_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.sampling_stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_348": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_387": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "XX_mean.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_391": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "X.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "X.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "addmm_457": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "1.5",
                    "type": "float",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device)",
                            "Call"
                        ],
                        [
                            "T.mm(Z)",
                            "Call"
                        ],
                        [
                            "torch.addmm(beta=1.5, input=Z, alpha=-0.5, mat1=torch.matrix_power(Z, 3), mat2=Y)",
                            "Call"
                        ],
                        [
                            "Z.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device).unsqueeze(0).expand_as(A)",
                            "Call"
                        ],
                        [
                            "T.bmm(Z)",
                            "Call"
                        ],
                        [
                            "Z.bmm(T)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "mat1": {
                    "value": "torch.matrix_power(Z, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ],
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.bmm(T)",
                            "Call"
                        ],
                        [
                            "torch.bmm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_483": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matrix_power(T, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ],
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.bmm(T)",
                            "Call"
                        ],
                        [
                            "torch.bmm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_initialized_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X_mean.view(-1), XX_mean.view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_97": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sync_data_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_97": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_157": {
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "*size": {
                    "value": "kernel_size ** 2 * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_160": {
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_initialized_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X_mean.view(-1), XX_mean.view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_240": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sync_data_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_240": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_309": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_310": {
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_312": {
                "*size": {
                    "value": "kernel_size ** 2 * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_313": {
                "n": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_initialized_375": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_378": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[X_mean.view(-1), XX_mean.view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_381": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sync_data_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ],
                        [
                            "[torch.empty_like(sync_data) for k in range(world_size)]",
                            "ListComp"
                        ],
                        [
                            "diffdist.functional.all_gather(sync_data_list, sync_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_381": {
                "variable": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_461": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matrix_power(T, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.mm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ],
                        [
                            "A.div(normA)",
                            "Call"
                        ],
                        [
                            "Y.bmm(T)",
                            "Call"
                        ],
                        [
                            "torch.bmm(torch.matrix_power(T, 2), Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "matrix_power_483": {
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.addmm(beta=1.5, input=I, alpha=-0.5, mat1=Z, mat2=Y)",
                            "Call"
                        ],
                        [
                            "(3 * I - Y) / 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * (3.0 * I - Z.bmm(Y))",
                            "BinOp"
                        ],
                        [
                            "(3 * I - Y) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_95": {
                "input": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_238": {
                "input": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_379": {
                "input": {
                    "value": "sync_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ],
                        [
                            "torch.cat([X_mean.view(-1), XX_mean.view(-1)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack(sync_data_list).mean(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "matrix_power_457": {
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device)",
                            "Call"
                        ],
                        [
                            "T.mm(Z)",
                            "Call"
                        ],
                        [
                            "torch.addmm(beta=1.5, input=Z, alpha=-0.5, mat1=torch.matrix_power(Z, 3), mat2=Y)",
                            "Call"
                        ],
                        [
                            "Z.mm(T)",
                            "Call"
                        ],
                        [
                            "torch.eye(dim, dtype=A.dtype, device=A.device).unsqueeze(0).expand_as(A)",
                            "Call"
                        ],
                        [
                            "T.bmm(Z)",
                            "Call"
                        ],
                        [
                            "Z.bmm(T)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matrix_power_461": {
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.addmm(beta=1.5, input=I, alpha=-0.5, mat1=Z, mat2=Y)",
                            "Call"
                        ],
                        [
                            "(3 * I - Y) / 2",
                            "BinOp"
                        ],
                        [
                            "0.5 * (3.0 * I - Z.bmm(Y))",
                            "BinOp"
                        ],
                        [
                            "(3 * I - Y) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Segmentation/models/segmentation/deeplabv3.py": {
        "torch": {
            "ModuleList_106": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "modules",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[deconv(in_channels, out_channels, 3, padding=dilation, dilation=dilation, bias=True), nn.ReLU()]",
                            "List"
                        ],
                        [
                            "[nn.Conv2d(in_channels, out_channels, 3, padding=dilation, dilation=dilation, bias=False), nn.BatchNorm2d(out_channels), nn.ReLU()]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_124": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(res, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_83": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(ASPPPooling, self).forward(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[-2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "deconv(5 * out_channels, out_channels, 1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(5 * out_channels, out_channels, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_70": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_75": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "*args": {
                    "value": "deconv(in_channels, out_channels, 1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_112": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "5 * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_118": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Segmentation/models/segmentation/fcn.py": {
        "torch": {
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels // 4",
                            "BinOp"
                        ],
                        [
                            "in_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "inter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels // 4",
                            "BinOp"
                        ],
                        [
                            "in_channels // 4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "inter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels // 4",
                            "BinOp"
                        ],
                        [
                            "in_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_45": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "Segmentation/models/segmentation/replicate.py": {
        "torch": {}
    },
    "Segmentation/train.py": {
        "torch": {
            "device_count_193": {
                "variable": {
                    "value": "args.ngpus_per_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_202": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_221": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, 'train', transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_226": {
                "variable": {
                    "value": "data_loader_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, 'val', transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset_test)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset_test)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_73": {
                "variable": {
                    "value": "losses[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.items()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "metric_logger.log_every(data_loader, 100, header)",
                            "Call"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ],
                        [
                            "metric_logger.log_every(data_loader, print_freq, header)",
                            "Call"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_119": {
                "variable": {
                    "value": "segmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output['out']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SummaryWriter_199": {
                "variable": {
                    "value": "args.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flush_secs": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedSampler_215": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, 'train', transform=transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_216": {
                "variable": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, 'val', transform=transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_218": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, 'train', transform=transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_219": {
                "variable": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, 'val', transform=transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_241": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_250": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.segmentation.__dict__[args.model](num_classes=num_classes, aux_loss=args.aux_loss, pretrained=args.pretrained, deconv=args.deconv, pretrained_backbone=args.pretrained_backbone)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SGD_278": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params_to_optimize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': [p for p in model_without_ddp.backbone.parameters() if p.requires_grad], 'lr': args.lr}, {'params': [p for p in model_without_ddp.classifier.parameters() if p.requires_grad], 'lr': args.lr}]",
                            "List"
                        ],
                        [
                            "[{'params': [p for p in model_without_ddp.backbone.parameters() if p.requires_grad]}, {'params': [p for p in model_without_ddp.classifier.parameters() if p.requires_grad]}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_289": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(params_to_optimize, lr=args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(params_to_optimize, lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "total_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(data_loader) * args.epochs",
                            "BinOp"
                        ],
                        [
                            "len(data_loader) * args.start_epoch",
                            "BinOp"
                        ]
                    ]
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LambdaLR_291": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(params_to_optimize, lr=args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(params_to_optimize, lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda x: (1 - x / total_steps) ** 0.9",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_253": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.segmentation.__dict__[args.model](num_classes=num_classes, aux_loss=args.aux_loss, pretrained=args.pretrained, deconv=args.deconv, pretrained_backbone=args.pretrained_backbone)",
                            "Call"
                        ],
                        [
                            "torch.nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_282": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params_to_optimize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': [p for p in model_without_ddp.backbone.parameters() if p.requires_grad], 'lr': args.lr}, {'params': [p for p in model_without_ddp.classifier.parameters() if p.requires_grad], 'lr': args.lr}]",
                            "List"
                        ],
                        [
                            "[{'params': [p for p in model_without_ddp.backbone.parameters() if p.requires_grad]}, {'params': [p for p in model_without_ddp.classifier.parameters() if p.requires_grad]}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Segmentation/transforms.py": {
        "torch": {
            "as_tensor_81": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.array(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Segmentation/utils.py": {
        "torch": {
            "tensor_37": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_294": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "self.mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, n)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "a.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_274": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bincount_87": {
                "input": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n * a[k].to(torch.int64) + b[k]",
                            "BinOp"
                        ]
                    ]
                },
                "minlength": {
                    "value": "n ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_classes",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.num_classes",
                            "Attribute"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "diag_94": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mat.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_95": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mat.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_96": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mat.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}