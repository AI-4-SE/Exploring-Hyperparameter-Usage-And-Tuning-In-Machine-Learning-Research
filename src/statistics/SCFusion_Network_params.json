{
    "extension/build.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {
            "device_32": {
                "variable": {
                    "value": "config.DEVICE",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "device_35": {
                "variable": {
                    "value": "config.DEVICE",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "manual_seed_38": {
                "seed": {
                    "value": "config.SEED",
                    "possible_values": []
                }
            },
            "manual_seed_all_39": {
                "seed": {
                    "value": "config.SEED",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "src/DataLoader.py": {
        "torch": {
            "CustomDataLoader_19": {
                "base_class_0": {
                    "value": "torch.utils.data.DataLoader",
                    "possible_values": []
                },
                "self.config": {
                    "value": "config",
                    "possible_values": []
                }
            }
        }
    },
    "src/SceneInpainting.py": {
        "torch": {
            "zeros_229": {
                "variable": {
                    "value": "sums[k_iou_mean[1]]",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.CLASS_NUM",
                    "possible_values": []
                }
            },
            "zeros_230": {
                "variable": {
                    "value": "sums[k_pre_mean[1]]",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.CLASS_NUM",
                    "possible_values": []
                }
            },
            "zeros_231": {
                "variable": {
                    "value": "sums[k_rec_mean[1]]",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.CLASS_NUM",
                    "possible_values": []
                }
            },
            "zeros_232": {
                "variable": {
                    "value": "sums[k_f1_mean[1]]",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.CLASS_NUM",
                    "possible_values": []
                }
            },
            "rand_502": {
                "variable": {
                    "value": "volume",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "64",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "randint_503": {
                "variable": {
                    "value": "full_gt",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "self.config.CLASS_NUM",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch, 64, 64, 64)",
                    "possible_values": []
                }
            },
            "rand_515": {
                "variable": {
                    "value": "volume",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "trace_521": {
                "variable": {
                    "value": "traced_script_module",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model",
                    "possible_values": []
                }
            },
            "SummaryWriter_47": {
                "variable": {
                    "value": "self.writter",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(config.PATH, 'logs', model_name)",
                    "possible_values": []
                }
            },
            "zeros_234": {
                "variable": {
                    "value": "sums[k_iou_known[1]]",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.CLASS_NUM",
                    "possible_values": []
                }
            },
            "zeros_235": {
                "variable": {
                    "value": "sums[k_iou_unknown[1]]",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.CLASS_NUM",
                    "possible_values": []
                }
            },
            "zeros_236": {
                "variable": {
                    "value": "sums[k_rec_known[1]]",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.CLASS_NUM",
                    "possible_values": []
                }
            },
            "zeros_237": {
                "variable": {
                    "value": "sums[k_rec_unknown[1]]",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.CLASS_NUM",
                    "possible_values": []
                }
            },
            "zeros_238": {
                "variable": {
                    "value": "sums[k_pre_known[1]]",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.CLASS_NUM",
                    "possible_values": []
                }
            },
            "zeros_239": {
                "variable": {
                    "value": "sums[k_pre_unknown[1]]",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.CLASS_NUM",
                    "possible_values": []
                }
            },
            "zeros_240": {
                "variable": {
                    "value": "sums[k_f1_known[1]]",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.CLASS_NUM",
                    "possible_values": []
                }
            },
            "zeros_241": {
                "variable": {
                    "value": "sums[k_f1_unknown[1]]",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.config.CLASS_NUM",
                    "possible_values": []
                }
            },
            "argmax_439": {
                "variable": {
                    "value": "outputs_merged",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "self.model(volume, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "from_numpy_421": {
                "ndarray": {
                    "value": "item",
                    "possible_values": []
                }
            },
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "logical_not_285": {
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "items[2] if len(items) == 3 else None",
                            "IfExp"
                        ],
                        [
                            "items[2] if len(items) == 3 else None",
                            "IfExp"
                        ],
                        [
                            "cuda_items[2] if len(items) == 3 else None",
                            "IfExp"
                        ],
                        [
                            "(torch.rand(1, 64, 64, 64) > 0.3).float()",
                            "Call"
                        ],
                        [
                            "mask.to(self.config.DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_289": {
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "items[2] if len(items) == 3 else None",
                            "IfExp"
                        ],
                        [
                            "items[2] if len(items) == 3 else None",
                            "IfExp"
                        ],
                        [
                            "cuda_items[2] if len(items) == 3 else None",
                            "IfExp"
                        ],
                        [
                            "(torch.rand(1, 64, 64, 64) > 0.3).float()",
                            "Call"
                        ],
                        [
                            "mask.to(self.config.DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_517": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "zeros_like_468": {
                "input": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "volume",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "src/dataset_volume.py": {
        "torch": {
            "Dataset_48": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.folder_names": {
                    "value": "folder_names",
                    "possible_values": []
                },
                "self.shuffle": {
                    "value": "shuffle",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.paths": {
                    "value": "paths",
                    "possible_values": [
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_120": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "Dataset(config, config.TRAIN_BASE_FOLDERS, config.SUBFOLDERS)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "sample_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "self.shuffle",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "ndarray": {
                    "value": "np.load(self.paths[name][index])",
                    "possible_values": []
                }
            }
        }
    },
    "src/loss.py": {
        "torch": {
            "LogNLLLoss_6": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "NLLLoss_12": {
                    "variable": {
                        "value": "self.loss",
                        "possible_values": []
                    },
                    "weight": {
                        "value": "weight",
                        "possible_values": [
                            [
                                "weight.view(class_num, -1)",
                                "Call"
                            ],
                            [
                                "None",
                                "MethodArgument"
                            ],
                            [
                                "None",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "size_average": {
                        "value": "size_average",
                        "possible_values": [
                            [
                                "None",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "ignore_index": {
                        "value": "ignore_index",
                        "possible_values": [
                            [
                                "-100",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "reduce": {
                        "value": "reduce",
                        "possible_values": [
                            [
                                "None",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "reduction": {
                        "value": "reduction",
                        "possible_values": [
                            [
                                "'mean'",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "AdversarialLoss_18": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.type": {
                    "value": "type",
                    "possible_values": [
                        [
                            "'nsgan'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_14": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "torch.clamp(output, 1e-05, output.size(1) - 1 - 1e-05)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-05",
                    "possible_values": []
                },
                "max": {
                    "value": "output.size(1) - 1 - 1e-05",
                    "possible_values": []
                }
            },
            "BCELoss_35": {
                "variable": {
                    "value": "self.criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "log_15": {
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "torch.clamp(output, 1e-05, output.size(1) - 1 - 1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_31": {
                "data": {
                    "value": "target_real_label",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_32": {
                "data": {
                    "value": "target_fake_label",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MSELoss_38": {
                "variable": {
                    "value": "self.criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "variable": {
                    "value": "self.criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "log_118": {
                "input": {
                    "value": "score",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "soft_f1_score(y_pred, y_true)",
                            "Call"
                        ],
                        [
                            "soft_f1_score(y_pred_flat, y_true_flat)",
                            "Call"
                        ],
                        [
                            "score + -torch.log(soft_f1_score(y_pred_flat[:, c, :], y_true_flat[:, c, :]) + 1e-16) * weight[c] * 1.0 / B",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_108": {
                "input": {
                    "value": "soft_f1_score(y_pred_flat[:, c, :], y_true_flat[:, c, :]) + 1e-16",
                    "possible_values": []
                }
            }
        }
    },
    "src/loss_scene.py": {
        "torch": {
            "VariationalLoss_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "ReconstructionLoss_16": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.lambda_gamma": {
                    "value": "lambda_gamma",
                    "possible_values": [
                        [
                            "0.97",
                            "MethodArgument"
                        ],
                        [
                            "0.97",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GeometricSemanticSceneCompletionLoss_31": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.lambda_gamma": {
                    "value": "lambda_gamma",
                    "possible_values": [
                        [
                            "0.97",
                            "MethodArgument"
                        ],
                        [
                            "0.97",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StandardGANLoss_54": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "BCEWithLogitsLoss_57": {
                    "variable": {
                        "value": "self.BCE",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "sum_23": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.sum(self.lambda_gamma * target * torch.log(1e-06 + predict) + minus_lambda * minus_gt * torch.log(1e-06 + 1 - predict), dim=[0, 2, 3, 4]) * weight",
                    "possible_values": []
                }
            },
            "sum_39": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.sum(self.lambda_gamma * full_gt * torch.log(1e-06 + predict) * 2 + minus_lambda * minus_gt * torch.log(1e-06 + 1 - predict), dim=[2, 3, 4]) * weight",
                    "possible_values": []
                }
            },
            "sum_46": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.sum((self.lambda_gamma * full_gt * torch.log(1e-06 + predict) * 2 + minus_lambda * minus_gt * torch.log(1e-06 + 1 - predict)) * mask, dim=[2, 3, 4]) * weight",
                    "possible_values": []
                }
            },
            "mean_59": {
                "input": {
                    "value": "self.BCE(input, torch.ones_like(input))",
                    "possible_values": []
                }
            },
            "sum_11": {
                "input": {
                    "value": "1.0 + 2.0 * z_log_sigma - torch.mul(z_mu, z_mu) - torch.exp(2.0 * z_log_sigma)",
                    "possible_values": []
                }
            },
            "ones_like_59": {
                "input": {
                    "value": "input",
                    "possible_values": []
                }
            },
            "exp_12": {
                "input": {
                    "value": "2.0 * z_log_sigma",
                    "possible_values": []
                }
            },
            "sum_24": {
                "input": {
                    "value": "self.lambda_gamma * target * torch.log(1e-06 + predict) + minus_lambda * minus_gt * torch.log(1e-06 + 1 - predict)",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3, 4]",
                    "possible_values": []
                }
            },
            "mul_11": {
                "input": {
                    "value": "z_mu",
                    "possible_values": []
                },
                "other": {
                    "value": "z_mu",
                    "possible_values": []
                }
            },
            "sum_40": {
                "input": {
                    "value": "self.lambda_gamma * full_gt * torch.log(1e-06 + predict) * 2 + minus_lambda * minus_gt * torch.log(1e-06 + 1 - predict)",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3, 4]",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "(self.lambda_gamma * full_gt * torch.log(1e-06 + predict) * 2 + minus_lambda * minus_gt * torch.log(1e-06 + 1 - predict)) * mask",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3, 4]",
                    "possible_values": []
                }
            },
            "log_25": {
                "input": {
                    "value": "1e-06 + predict",
                    "possible_values": []
                }
            },
            "log_26": {
                "input": {
                    "value": "1e-06 + 1 - predict",
                    "possible_values": []
                }
            },
            "log_42": {
                "input": {
                    "value": "1e-06 + 1 - predict",
                    "possible_values": []
                }
            },
            "log_41": {
                "input": {
                    "value": "1e-06 + predict",
                    "possible_values": []
                }
            },
            "log_49": {
                "input": {
                    "value": "1e-06 + 1 - predict",
                    "possible_values": []
                }
            },
            "log_48": {
                "input": {
                    "value": "1e-06 + predict",
                    "possible_values": []
                }
            }
        }
    },
    "src/meshing.py": {
        "torch": {
            "SummaryWriter_260": {
                "variable": {
                    "value": "writer",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_265": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "u",
                    "possible_values": [
                        [
                            "(X - 2) ** 2 + (Y - 2) ** 2 + (Z - 2) ** 2 - 1 ** 2",
                            "BinOp"
                        ],
                        [
                            "(X - 2) ** 2 + (Y - 2) ** 2 + (Z - 2) ** 2 - 2 ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randint_266": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "size",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "size": {
                    "value": "list(a.size())",
                    "possible_values": []
                }
            },
            "from_numpy_268": {
                "variable": {
                    "value": "t1",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(NYU_13_CLASSEScolour_code)",
                    "possible_values": []
                }
            },
            "from_numpy_280": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "u",
                    "possible_values": [
                        [
                            "(X - 2) ** 2 + (Y - 2) ** 2 + (Z - 2) ** 2 - 1 ** 2",
                            "BinOp"
                        ],
                        [
                            "(X - 2) ** 2 + (Y - 2) ** 2 + (Z - 2) ** 2 - 2 ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_173": {
                "variable": {
                    "value": "t1",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(NYU_13_CLASSEScolour_code)",
                    "possible_values": []
                }
            },
            "from_numpy_175": {
                "variable": {
                    "value": "t1",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(SunCG_11_Color)",
                    "possible_values": []
                }
            }
        }
    },
    "src/metrics_ssc.py": {
        "torch": {
            "Metric_IoU_base_14": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Metric_PR_Base_56": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Metric_IoU_103": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Metric_PR_143": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "rand_187": {
                "variable": {
                    "value": "volume_pred",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "class_num",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "pred.size(-1)",
                            "Call"
                        ],
                        [
                            "pred.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "possible_values": []
                },
                "device": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "randint_188": {
                "variable": {
                    "value": "full_gt",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "class_num",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "pred.size(-1)",
                            "Call"
                        ],
                        [
                            "pred.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(batch, 1, 1, 2)",
                    "possible_values": []
                }
            },
            "DataLoader_227": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "Dataset(config, '../example_data/train', '../example_data/gt', '../example_data/mask')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.BATCH_SIZE",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ones_27": {
                "variable": {
                    "value": "self.output",
                    "possible_values": []
                },
                "*size": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "ones_28": {
                "variable": {
                    "value": "self.valid",
                    "possible_values": []
                },
                "*size": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "self.intersections",
                    "possible_values": []
                },
                "*size": {
                    "value": "[class_num]",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "self.unions",
                    "possible_values": []
                },
                "*size": {
                    "value": "[class_num]",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "self.output",
                    "possible_values": []
                },
                "*size": {
                    "value": "[class_num]",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "variable": {
                    "value": "self.precisions",
                    "possible_values": []
                },
                "*size": {
                    "value": "[class_num]",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "self.recalls",
                    "possible_values": []
                },
                "*size": {
                    "value": "[class_num]",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "self.intersection",
                    "possible_values": []
                },
                "*size": {
                    "value": "[class_num]",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "self.gt_sum",
                    "possible_values": []
                },
                "*size": {
                    "value": "[class_num]",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "self.pred_sum",
                    "possible_values": []
                },
                "*size": {
                    "value": "[class_num]",
                    "possible_values": []
                }
            },
            "argmax_128": {
                "variable": {
                    "value": "volume",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "one_hot_137": {
                "variable": {
                    "value": "volume",
                    "possible_values": []
                },
                "tensor": {
                    "value": "volume",
                    "possible_values": [
                        [
                            "torch.argmax(pred_, dim=1)",
                            "Call"
                        ],
                        [
                            "volume.clamp(0, class_num - 1)",
                            "Call"
                        ],
                        [
                            "volume[mask_ == 0]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.one_hot(volume, class_num).view(-1, class_num)",
                            "Call"
                        ],
                        [
                            "torch.argmax(pred_, dim=1)",
                            "Call"
                        ],
                        [
                            "volume.clamp(0, class_num - 1)",
                            "Call"
                        ],
                        [
                            "volume[mask_ == 0]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.one_hot(volume, class_num).view(-1, class_num)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "class_num",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "pred.size(-1)",
                            "Call"
                        ],
                        [
                            "pred.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_139": {
                "variable": {
                    "value": "gt",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt",
                    "possible_values": [
                        [
                            "gt_.clamp(0, class_num - 1)",
                            "Call"
                        ],
                        [
                            "gt[mask_ == 0]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.one_hot(gt, class_num).view(-1, class_num)",
                            "Call"
                        ],
                        [
                            "gt_.clamp(0, class_num - 1)",
                            "Call"
                        ],
                        [
                            "gt[mask_ == 0]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.one_hot(gt, class_num).view(-1, class_num)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "class_num",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "pred.size(-1)",
                            "Call"
                        ],
                        [
                            "pred.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_168": {
                "variable": {
                    "value": "volume",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "one_hot_176": {
                "variable": {
                    "value": "volume",
                    "possible_values": []
                },
                "tensor": {
                    "value": "volume",
                    "possible_values": [
                        [
                            "torch.argmax(pred_, dim=1)",
                            "Call"
                        ],
                        [
                            "volume.clamp(0, class_num - 1)",
                            "Call"
                        ],
                        [
                            "volume[mask_ == 0]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.one_hot(volume, class_num).view(-1, class_num)",
                            "Call"
                        ],
                        [
                            "torch.argmax(pred_, dim=1)",
                            "Call"
                        ],
                        [
                            "volume.clamp(0, class_num - 1)",
                            "Call"
                        ],
                        [
                            "volume[mask_ == 0]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.one_hot(volume, class_num).view(-1, class_num)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "class_num",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "pred.size(-1)",
                            "Call"
                        ],
                        [
                            "pred.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_177": {
                "variable": {
                    "value": "gt",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt",
                    "possible_values": [
                        [
                            "gt_.clamp(0, class_num - 1)",
                            "Call"
                        ],
                        [
                            "gt[mask_ == 0]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.one_hot(gt, class_num).view(-1, class_num)",
                            "Call"
                        ],
                        [
                            "gt_.clamp(0, class_num - 1)",
                            "Call"
                        ],
                        [
                            "gt[mask_ == 0]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.one_hot(gt, class_num).view(-1, class_num)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "class_num",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "pred.size(-1)",
                            "Call"
                        ],
                        [
                            "pred.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_243": {
                "variable": {
                    "value": "gt2",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt",
                    "possible_values": [
                        [
                            "gt_.clamp(0, class_num - 1)",
                            "Call"
                        ],
                        [
                            "gt[mask_ == 0]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.one_hot(gt, class_num).view(-1, class_num)",
                            "Call"
                        ],
                        [
                            "gt_.clamp(0, class_num - 1)",
                            "Call"
                        ],
                        [
                            "gt[mask_ == 0]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.one_hot(gt, class_num).view(-1, class_num)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "14",
                    "possible_values": []
                }
            },
            "rand_247": {
                "variable": {
                    "value": "volume_pred",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.BATCH_SIZE",
                    "possible_values": []
                },
                "out": {
                    "value": "config.CLASS_NUM",
                    "possible_values": []
                },
                "dtype": {
                    "value": "config.DATA_DIMS[0]",
                    "possible_values": []
                },
                "layout": {
                    "value": "config.DATA_DIMS[1]",
                    "possible_values": []
                },
                "device": {
                    "value": "config.DATA_DIMS[2]",
                    "possible_values": []
                }
            },
            "ones_21": {
                "*size": {
                    "value": "[]",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ones_22": {
                "*size": {
                    "value": "[]",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ones_23": {
                "*size": {
                    "value": "[]",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ones_63": {
                "*size": {
                    "value": "[]",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ones_64": {
                "*size": {
                    "value": "[]",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ones_66": {
                "*size": {
                    "value": "[]",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ones_67": {
                "*size": {
                    "value": "[]",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ones_68": {
                "*size": {
                    "value": "[]",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "src/model_base.py": {
        "torch": {
            "BaseModel_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.name": {
                    "value": "name",
                    "possible_values": [
                        [
                            "'module.' + k",
                            "BinOp"
                        ],
                        [
                            "k[7:]",
                            "Subscript"
                        ]
                    ]
                },
                "self.config": {
                    "value": "config",
                    "possible_values": []
                }
            },
            "save_26": {
                "obj": {
                    "value": "{'iteration': self.iteration, 'eva_iou': self.eva_iou}",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_34": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "possible_values": []
                }
            },
            "load_36": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "save_119": {
                "obj": {
                    "value": "{'model': model.module.state_dict()}",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "possible_values": []
                }
            },
            "save_123": {
                "obj": {
                    "value": "{'model': model.state_dict()}",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "possible_values": []
                }
            },
            "is_available_129": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_130": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "possible_values": []
                }
            },
            "load_132": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            }
        }
    },
    "src/models_scene_inpainting_forknet.py": {
        "torch": {
            "rand_536": {
                "variable": {
                    "value": "volume",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "64",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "randint_537": {
                "variable": {
                    "value": "full_gt",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "class_num",
                    "possible_values": [
                        [
                            "config.CLASS_NUM",
                            "Attribute"
                        ]
                    ]
                },
                "size": {
                    "value": "(batch, 64, 64, 64)",
                    "possible_values": []
                }
            },
            "L1Loss_100": {
                "variable": {
                    "value": "self.l1_loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "self.ssc_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': encoder.parameters()}]",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(config.LR_G)",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.BETA_G, config.BETA2)",
                    "possible_values": []
                }
            },
            "clamp_140": {
                "variable": {
                    "value": "gt_ssc_",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "max": {
                    "value": "self.class_num - 1",
                    "possible_values": []
                }
            },
            "one_hot_141": {
                "variable": {
                    "value": "gt_ssc",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt_ssc_",
                    "possible_values": [
                        [
                            "torch.clamp(gt_, 0.0, self.class_num - 1).long()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.class_num",
                    "possible_values": []
                }
            },
            "permute_141": {
                "variable": {
                    "value": "gt_ssc",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "clamp_254": {
                "variable": {
                    "value": "gt_com_",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "one_hot_255": {
                "variable": {
                    "value": "gt_com",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt_com_",
                    "possible_values": [
                        [
                            "torch.clamp(gt_, 0.0, 1.0).long()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "permute_255": {
                "variable": {
                    "value": "gt_com",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dims": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "clamp_324": {
                "variable": {
                    "value": "gt_sem_",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "possible_values": []
                },
                "max": {
                    "value": "self.class_num - 1",
                    "possible_values": []
                }
            },
            "one_hot_509": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.one_hot(x, class_num).view(-1, class_num).float()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "class_num",
                    "possible_values": [
                        [
                            "config.CLASS_NUM",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_515": {
                "variable": {
                    "value": "batch_mean",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.one_hot(x, class_num).view(-1, class_num).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "abs_516": {
                "variable": {
                    "value": "weight2",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 / (torch.log(batch_mean) + 1)",
                    "possible_values": []
                }
            },
            "is_available_541": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_542": {
                "variable": {
                    "value": "config.DEVICE",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "device_545": {
                "variable": {
                    "value": "config.DEVICE",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "manual_seed_556": {
                "seed": {
                    "value": "config.SEED",
                    "possible_values": []
                }
            },
            "manual_seed_all_557": {
                "seed": {
                    "value": "config.SEED",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_570": {
                "mode": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataParallel_74": {
                "variable": {
                    "value": "encoder",
                    "possible_values": []
                },
                "module": {
                    "value": "encoder",
                    "possible_values": [
                        [
                            "EncoderForkNet(self.config, 2, config.CLASS_NUM, norm=norm, conv_layer=conv_layer)",
                            "Call"
                        ],
                        [
                            "EncoderForkNet(self.config, 1, config.CLASS_NUM, norm=norm, conv_layer=conv_layer)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(encoder, config.GPU)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "config.GPU",
                    "possible_values": []
                }
            },
            "Adam_122": {
                "variable": {
                    "value": "self.fork_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "possible_values": [
                        [
                            "list(encoder2.parameters())",
                            "Call"
                        ],
                        [
                            "params + list(generator_sem_ref.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "float(config.LR_G)",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.BETA_G, config.BETA2)",
                    "possible_values": []
                }
            },
            "Adam_129": {
                "variable": {
                    "value": "self.ssc_dis_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator_ssc.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "float(config.LR_D)",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.BETA_D, config.BETA2)",
                    "possible_values": []
                }
            },
            "isnan_174": {
                "input": {
                    "value": "sem_ssc_loss",
                    "possible_values": [
                        [
                            "logNLLLoss(pred_ssc, gt_ssc_.long())",
                            "Call"
                        ],
                        [
                            "SoftF1Loss(pred_ssc, gt_ssc.long(), weight=weight_sem)",
                            "Call"
                        ],
                        [
                            "logNLLLoss(pred_ssc, gt_masked.long())",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_224": {
                "input": {
                    "value": "df_l1_loss",
                    "possible_values": [
                        [
                            "self.l1_loss(pred_df, input_known) * self.config.L1_LOSS_WEIGHT",
                            "BinOp"
                        ],
                        [
                            "self.l1_loss(pred_df, input_s) * self.config.L1_LOSS_WEIGHT",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_286": {
                "input": {
                    "value": "com_ssc_loss",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "com_ssc_loss + com_nllloss_unknown(pred_com * mask, (gt_com_ * mask_).long()) * (1.0 - p_known)",
                            "BinOp"
                        ],
                        [
                            "com_nllloss(pred_com, gt_com_)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_293": {
                "input": {
                    "value": "com_scc_ref_loss",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "com_scc_ref_loss + com_nllloss_unknown(pred_com_ref * mask, (gt_com_ * mask_).long()) * (1.0 - p_known)",
                            "BinOp"
                        ],
                        [
                            "com_nllloss(pred_com_ref, gt_com_)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_337": {
                "input": {
                    "value": "sem_ssc_loss_part",
                    "possible_values": [
                        [
                            "logNLLLoss(pred_sem_part, gt_sem_.long())",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_342": {
                "input": {
                    "value": "sem_ssc_loss_full",
                    "possible_values": [
                        [
                            "logNLLLoss(pred_sem_full, gt_sem_.long())",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_76": {
                "variable": {
                    "value": "discriminator_ssc",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator_ssc",
                    "possible_values": [
                        [
                            "Discriminator(in_channels=config.CLASS_NUM, use_sigmoid=config.GAN_LOSS != 'hinge')",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator_ssc, config.GPU)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "config.GPU",
                    "possible_values": []
                }
            },
            "DataParallel_78": {
                "variable": {
                    "value": "encoder2",
                    "possible_values": []
                },
                "module": {
                    "value": "encoder2",
                    "possible_values": [
                        [
                            "EncoderForkNet2(config.CLASS_NUM, 256)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(encoder2, config.GPU)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "config.GPU",
                    "possible_values": []
                }
            },
            "DataParallel_80": {
                "variable": {
                    "value": "generator_df",
                    "possible_values": []
                },
                "module": {
                    "value": "generator_df",
                    "possible_values": [
                        [
                            "GeneratorForkNet(256, 1, 0)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator_df, config.GPU)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "config.GPU",
                    "possible_values": []
                }
            },
            "DataParallel_82": {
                "variable": {
                    "value": "generator_com",
                    "possible_values": []
                },
                "module": {
                    "value": "generator_com",
                    "possible_values": [
                        [
                            "GeneratorForkNet(256, 2, 1)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator_com, config.GPU)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "config.GPU",
                    "possible_values": []
                }
            },
            "DataParallel_84": {
                "variable": {
                    "value": "generator_sem",
                    "possible_values": []
                },
                "module": {
                    "value": "generator_sem",
                    "possible_values": [
                        [
                            "GeneratorForkNet(256, config.CLASS_NUM, 2)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator_sem, config.GPU)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "config.GPU",
                    "possible_values": []
                }
            },
            "DataParallel_85": {
                "variable": {
                    "value": "generator_sem_ref",
                    "possible_values": []
                },
                "module": {
                    "value": "generator_sem_ref",
                    "possible_values": [
                        [
                            "GeneratorRefineForkNet(config.CLASS_NUM)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator_sem_ref, config.GPU)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "config.GPU",
                    "possible_values": []
                }
            },
            "no_grad_387": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_149": {
                "tensors": {
                    "value": "(volume, mask)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_464": {
                "tensors": {
                    "value": "(input_.unsqueeze(1).float(), mask_.unsqueeze(1).float())",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "rand_538": {
                "*size": {
                    "value": "batch",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "64",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "log_516": {
                "input": {
                    "value": "batch_mean",
                    "possible_values": [
                        [
                            "torch.sum(x, dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/networks_base.py": {
        "torch": {
            "BaseNetwork_10": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "mySequential_65": {
                "base_class_0": {
                    "value": "torch.nn.Sequential",
                    "possible_values": []
                }
            },
            "add_320": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.middle(c)",
                            "Call"
                        ],
                        [
                            "res + x",
                            "BinOp"
                        ],
                        [
                            "c + x",
                            "BinOp"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "self.activation(x) * self.gated(mask)",
                            "BinOp"
                        ],
                        [
                            "x * self.gated(mask)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "possible_values": [
                        [
                            "[block(x) for block in self.blocks]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(tuple(y), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_355": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(y)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv3d_373": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "get_pad_same(dilation, kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "get_pad_same(dilation, kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv3d_374": {
                "variable": {
                    "value": "self.mask_conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "get_pad_same(dilation, kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "get_pad_same(dilation, kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ],
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_375": {
                "variable": {
                    "value": "self.sigmoid",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "LeakyReLU_238": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_369": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConstantPad3d_90": {
                "variable": {
                    "value": "pad",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "get_pad_same(dilation, kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "get_pad_same(dilation, kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "padding_value",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose3d_184": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "get_pad_same(dilation, kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "get_pad_same(dilation, kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool3d_342": {
                "output_size": {
                    "value": "(None, None, None)",
                    "possible_values": []
                }
            },
            "ReplicationPad3d_93": {
                "variable": {
                    "value": "pad",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "get_pad_same(dilation, kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "get_pad_same(dilation, kernel_size)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/networks_scene_inpainting.py": {
        "torch": {
            "rand_250": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.BATCH_SIZE",
                    "possible_values": []
                },
                "out": {
                    "value": "input_size",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "64",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "possible_values": []
                },
                "device": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "rand_281": {
                "variable": {
                    "value": "x_in",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.BATCH_SIZE",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "possible_values": []
                },
                "device": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "rand_282": {
                "variable": {
                    "value": "y_in",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.BATCH_SIZE",
                    "possible_values": []
                },
                "out": {
                    "value": "config.CLASS_NUM",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "possible_values": []
                },
                "device": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "rand_283": {
                "variable": {
                    "value": "code_in",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.BATCH_SIZE",
                    "possible_values": []
                },
                "out": {
                    "value": "code_dim",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "8",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "possible_values": []
                },
                "device": {
                    "value": "8",
                    "possible_values": []
                }
            },
            "LeakyReLU_13": {
                "variable": {
                    "value": "activation",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h4_0, h5_0, h6_0)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LeakyReLU_84": {
                "variable": {
                    "value": "activation",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "variable": {
                    "value": "self.relu_inplace",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Softmax_104": {
                "variable": {
                    "value": "self.softmax",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Tanh_105": {
                "variable": {
                    "value": "self.tanh",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "variable": {
                    "value": "relu_inplace",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sigmoid_235": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "possible_values": [
                        [
                            "self.conv5(conv4)",
                            "Call"
                        ]
                    ]
                }
            },
            "spectral_norm_239": {
                "module": {
                    "value": "module",
                    "possible_values": []
                }
            },
            "no_grad_289": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Softmax_49": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "(y, x)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Softmax_184": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LeakyReLU_199": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_204": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_209": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LeakyReLU_214": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Softmax_149": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_167": {
                "tensors": {
                    "value": "(h3, h3_)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_168": {
                "tensors": {
                    "value": "(h4, h4_)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_169": {
                "tensors": {
                    "value": "(h5, h5_)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "rand_334": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "30",
                    "possible_values": []
                },
                "dtype": {
                    "value": "30",
                    "possible_values": []
                },
                "layout": {
                    "value": "30",
                    "possible_values": []
                }
            },
            "SummaryWriter_341": {
                "variable": {
                    "value": "writter",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "testlog",
                    "possible_values": []
                }
            },
            "zeros_310": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch, X * Y * Z, 3]",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}