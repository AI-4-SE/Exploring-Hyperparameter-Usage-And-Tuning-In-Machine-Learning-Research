{
    "lib/Datasets/datasets.py": {
        "torch": {
            "DataLoader_128": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "is_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.valset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "is_gpu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_248": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "is_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "DataLoader_253": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.valset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "is_gpu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_412": {
                "variable": {
                    "value": "train_images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_413": {
                "variable": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_414": {
                "variable": {
                    "value": "test_images",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_415": {
                "variable": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_436": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, kind + '_images_tensor.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_437": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(path, kind + '_labels_tensor.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_452": {
                "variable": {
                    "value": "x_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(x_train, size=patch_size, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "x_train.repeat(1, 3, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_453": {
                "variable": {
                    "value": "x_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(x_val, size=patch_size, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "x_val.repeat(1, 3, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorDataset_459": {
                "variable": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_460": {
                "variable": {
                    "value": "valset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x_val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_476": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "is_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "DataLoader_481": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.valset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "is_gpu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_580": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "is_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "DataLoader_585": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.valset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "is_gpu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_688": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "is_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "DataLoader_693": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.valset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "is_gpu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_886": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "is_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "DataLoader_891": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.valset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "is_gpu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConcatDataset_983": {
                "variable": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[trainset, extraset]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_998": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "is_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "DataLoader_1003": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.valset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "is_gpu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_1117": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "is_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "DataLoader_1122": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.valset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "is_gpu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_417": {
                "obj": {
                    "value": "train_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.Tensor(train_images).float()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.__path, 'train_images_tensor.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_418": {
                "obj": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.Tensor(train_labels).long()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.__path, 'train_labels_tensor.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_419": {
                "obj": {
                    "value": "test_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.Tensor(test_images).float()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.__path, 'test_images_tensor.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_420": {
                "obj": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.Tensor(test_labels).long()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.__path, 'test_labels_tensor.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/Datasets/incremental_dataset.py": {
        "torch": {}
    },
    "lib/Models/architectures.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "classifier[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "new_in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier[-1].in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "new_out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier[-1].out_features + class_increment",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias_flag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "ncolors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "spatial_size",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "spatial_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.fclayer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('fc' + str(l), nn.Linear(fan_in, fan_out, bias=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('encoder_layer1', SingleLinearLayer(1, self.num_colors * self.patch_size ** 2, 400, batch_norm=self.batch_norm)), ('encoder_layer2', SingleLinearLayer(2, 400, 400, batch_norm=self.batch_norm))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.latent_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.latent_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.latent_dim, num_classes, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('decoder_layer0', SingleLinearLayer(0, self.latent_dim, 400, batch_norm=self.batch_norm)), ('decoder_layer1', SingleLinearLayer(1, 400, 400, batch_norm=self.batch_norm)), ('decoder_layer2', nn.Linear(400, self.out_channels * self.patch_size ** 2, bias=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_165": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_167": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(2, ncolors, spatial_size, spatial_size)",
                            "Call"
                        ],
                        [
                            "self.layer(x)",
                            "Call"
                        ],
                        [
                            "self.fclayer(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.patch_size, self.patch_size)",
                            "Call"
                        ],
                        [
                            "self.decode(z)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.patch_size, self.patch_size)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.block(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "self.decode(z)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "output_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.patch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.patch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "variable": {
                    "value": "classification_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_196": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "batchnorm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_197": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_199": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_201": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "batchnorm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_202": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_320": {
                "variable": {
                    "value": "self.latent_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.enc_spatial_dim_x * self.enc_spatial_dim_x * self.enc_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_322": {
                "variable": {
                    "value": "self.latent_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.enc_spatial_dim_x * self.enc_spatial_dim_y * self.enc_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_325": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.latent_dim, num_classes, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_327": {
                "variable": {
                    "value": "self.latent_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.enc_spatial_dim_x * self.enc_spatial_dim_y * self.enc_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_389": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_391": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(2, ncolors, spatial_size, spatial_size)",
                            "Call"
                        ],
                        [
                            "self.layer(x)",
                            "Call"
                        ],
                        [
                            "self.fclayer(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.patch_size, self.patch_size)",
                            "Call"
                        ],
                        [
                            "self.decode(z)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels, self.patch_size, self.patch_size)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.block(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "self.decode(z)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_396": {
                "variable": {
                    "value": "output_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.patch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.patch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_398": {
                "variable": {
                    "value": "classification_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('transposed_conv' + str(l), nn.ConvTranspose2d(fan_in, fan_out, kernel_size=kernel_size, padding=padding, stride=stride, bias=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv' + str(l), nn.Conv2d(fan_in, fan_out, kernel_size=kernel_size, padding=padding, stride=stride, bias=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_192": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "int(stride > 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "add_222": {
                "input": {
                    "value": "x if self.useShortcut else self.shortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.layer1(out if self.useShortcut else x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_234": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('convT_block' + str(layer + 1), block_type(layer == 0 and in_planes or out_planes, out_planes, layer == 0 and stride or 1, batchnorm=batchnorm, is_transposed=layer == 0)) for layer in range(nb_layers)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_241": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv_block' + str(layer + 1), block_type(layer == 0 and in_planes or out_planes, out_planes, layer == 0 and stride or 1, batchnorm=batchnorm)) for layer in range(nb_layers)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_283": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('encoder_conv1', nn.Conv2d(num_colors, self.nChannels[0], kernel_size=3, stride=1, padding=1, bias=False)), ('encoder_block1', WRNNetworkBlock(self.num_block_layers, self.nChannels[0], self.nChannels[1], WRNBasicBlock, batchnorm=self.batch_norm, stride=2)), ('encoder_block2', WRNNetworkBlock(self.num_block_layers, self.nChannels[1], self.nChannels[2], WRNBasicBlock, batchnorm=self.batch_norm, stride=2)), ('encoder_block3', WRNNetworkBlock(self.num_block_layers, self.nChannels[2], self.nChannels[3], WRNBasicBlock, batchnorm=self.batch_norm, stride=2)), ('encoder_block4', WRNNetworkBlock(self.num_block_layers, self.nChannels[3], self.nChannels[4], WRNBasicBlock, batchnorm=self.batch_norm, stride=2)), ('encoder_block5', WRNNetworkBlock(self.num_block_layers, self.nChannels[4], self.nChannels[5], WRNBasicBlock, batchnorm=self.batch_norm, stride=2)), ('encoder_block6', WRNNetworkBlock(self.num_block_layers, self.nChannels[5], self.nChannels[6], WRNBasicBlock, batchnorm=self.batch_norm, stride=2)), ('encoder_bn1', nn.BatchNorm2d(self.nChannels[6], eps=self.batch_norm)), ('encoder_act1', nn.ReLU(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_305": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('encoder_conv1', nn.Conv2d(num_colors, self.nChannels[0], kernel_size=3, stride=1, padding=1, bias=False)), ('encoder_block1', WRNNetworkBlock(self.num_block_layers, self.nChannels[0], self.nChannels[1], WRNBasicBlock, batchnorm=self.batch_norm)), ('encoder_block2', WRNNetworkBlock(self.num_block_layers, self.nChannels[1], self.nChannels[2], WRNBasicBlock, batchnorm=self.batch_norm, stride=2)), ('encoder_block3', WRNNetworkBlock(self.num_block_layers, self.nChannels[2], self.nChannels[3], WRNBasicBlock, batchnorm=self.batch_norm, stride=2)), ('encoder_bn1', nn.BatchNorm2d(self.nChannels[3], eps=self.batch_norm)), ('encoder_act1', nn.ReLU(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_331": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('decoder_block1', WRNNetworkBlock(self.num_block_layers, self.nChannels[6], self.nChannels[5], WRNBasicBlock, batchnorm=self.batch_norm, stride=1)), ('decoder_upsample1', nn.Upsample(scale_factor=2, mode='nearest')), ('decoder_block2', WRNNetworkBlock(self.num_block_layers, self.nChannels[5], self.nChannels[4], WRNBasicBlock, batchnorm=self.batch_norm, stride=1)), ('decoder_upsample2', nn.Upsample(scale_factor=2, mode='nearest')), ('decoder_block3', WRNNetworkBlock(self.num_block_layers, self.nChannels[4], self.nChannels[3], WRNBasicBlock, batchnorm=self.batch_norm, stride=1)), ('decoder_upsample3', nn.Upsample(scale_factor=2, mode='nearest')), ('decoder_block4', WRNNetworkBlock(self.num_block_layers, self.nChannels[3], self.nChannels[2], WRNBasicBlock, batchnorm=self.batch_norm, stride=1)), ('decoder_upsample4', nn.Upsample(scale_factor=2, mode='nearest')), ('decoder_block5', WRNNetworkBlock(self.num_block_layers, self.nChannels[2], self.nChannels[1], WRNBasicBlock, batchnorm=self.batch_norm, stride=1)), ('decoder_upsample5', nn.Upsample(scale_factor=2, mode='nearest')), ('decoder_block6', WRNNetworkBlock(self.num_block_layers, self.nChannels[1], self.nChannels[0], WRNBasicBlock, batchnorm=self.batch_norm, stride=1)), ('decoder_bn1', nn.BatchNorm2d(self.nChannels[0], eps=self.batch_norm)), ('decoder_act1', nn.ReLU(inplace=True)), ('decoder_upsample6', nn.Upsample(scale_factor=2, mode='nearest')), ('decoder_conv1', nn.Conv2d(self.nChannels[0], self.out_channels, kernel_size=3, stride=1, padding=1, bias=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_356": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('decoder_block1', WRNNetworkBlock(self.num_block_layers, self.nChannels[3], self.nChannels[2], WRNBasicBlock, batchnorm=self.batch_norm, stride=1)), ('decoder_upsample1', nn.Upsample(scale_factor=2, mode='nearest')), ('decoder_block2', WRNNetworkBlock(self.num_block_layers, self.nChannels[2], self.nChannels[1], WRNBasicBlock, batchnorm=self.batch_norm, stride=1)), ('decoder_upsample2', nn.Upsample(scale_factor=2, mode='nearest')), ('decoder_block3', WRNNetworkBlock(self.num_block_layers, self.nChannels[1], self.nChannels[0], WRNBasicBlock, batchnorm=self.batch_norm, stride=1)), ('decoder_bn1', nn.BatchNorm2d(self.nChannels[0], eps=self.batch_norm)), ('decoder_act1', nn.ReLU(inplace=True)), ('decoder_conv1', nn.Conv2d(self.nChannels[0], self.out_channels, kernel_size=3, stride=1, padding=1, bias=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_140": {
                "in_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_207": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "int(1 and stride == 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_325": {
                "in_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "fan_out",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "batch_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_99": {
                "num_features": {
                    "value": "fan_out",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "batch_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ],
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "fan_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fan_out",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_145": {
                "in_features": {
                    "value": "400",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_channels * self.patch_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_68": {
                "in_channels": {
                    "value": "fan_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fan_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "fan_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "fan_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_285": {
                "in_channels": {
                    "value": "num_colors",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_298": {
                "num_features": {
                    "value": "self.nChannels[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_299": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_307": {
                "in_channels": {
                    "value": "num_colors",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_314": {
                "num_features": {
                    "value": "self.nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_315": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_334": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_337": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_340": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_343": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_346": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNorm2d_349": {
                "num_features": {
                    "value": "self.nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_350": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_351": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_352": {
                "in_channels": {
                    "value": "self.nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_359": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_362": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNorm2d_365": {
                "num_features": {
                    "value": "self.nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_366": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_367": {
                "in_channels": {
                    "value": "self.nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/Models/initialization.py": {
        "torch": {}
    },
    "lib/Models/pixelcnn.py": {
        "torch": {
            "Conv2d_52": {
                "variable": {
                    "value": "self.vertical",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels * f",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.horizontal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels * f",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.tohori",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels * f",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels * f",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "colors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.tores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "colors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.vhf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conditional_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.vhg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conditional_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.vvf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conditional_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.vvg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conditional_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.num_colors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_146": {
                "variable": {
                    "value": "self.gated_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256 * self.num_colors",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.num_colors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), self.num_colors, x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tanh_131": {
                "input": {
                    "value": "top + tan_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_131": {
                "input": {
                    "value": "bottom + sig_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_161": {
                "input": {
                    "value": "result[:, :, c, h, w]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_163": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(result[:, :, c, h, w], dim=1).data",
                            "Attribute"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/OpenSet/meta_recognition.py": {
        "torch": {
            "mean_21": {
                "input": {
                    "value": "tensors_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pairwise_distance_53": {
                "x1": {
                    "value": "a.view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_52": {
                "x1": {
                    "value": "a.view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/Training/augmentation.py": {
        "torch": {
            "pad_37": {
                "variable": {
                    "value": "padded_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip(img, [2])",
                            "Call"
                        ],
                        [
                            "torch.flip(img, [1])",
                            "Call"
                        ],
                        [
                            "padded_tensor[:, offset_h:h + offset_h, offset_w:w + offset_w]",
                            "Subscript"
                        ],
                        [
                            "scizoom(img[top:top + ch, top:top + ch], (zoom_factor, zoom_factor, 1), order=1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad_size, pad_size, pad_size, pad_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_24": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip(img, [2])",
                            "Call"
                        ],
                        [
                            "torch.flip(img, [1])",
                            "Call"
                        ],
                        [
                            "padded_tensor[:, offset_h:h + offset_h, offset_w:w + offset_w]",
                            "Subscript"
                        ],
                        [
                            "scizoom(img[top:top + ch, top:top + ch], (zoom_factor, zoom_factor, 1), order=1)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_29": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip(img, [2])",
                            "Call"
                        ],
                        [
                            "torch.flip(img, [1])",
                            "Call"
                        ],
                        [
                            "padded_tensor[:, offset_h:h + offset_h, offset_w:w + offset_w]",
                            "Subscript"
                        ],
                        [
                            "scizoom(img[top:top + ch, top:top + ch], (zoom_factor, zoom_factor, 1), order=1)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "lib/Training/evaluate.py": {
        "torch": {
            "softmax_365": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.module.classifier(z)",
                            "Call"
                        ],
                        [
                            "model.module.classifier(z)",
                            "Call"
                        ],
                        [
                            "model.module.classifier(z_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_101": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_103": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_249": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_251": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_361": {
                "variable": {
                    "value": "z_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "model.module.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_369": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_43": {
                "variable": {
                    "value": "zs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "out_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "z_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "encoded_mu.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "encoded_mu.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "recon_loss_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_185": {
                "variable": {
                    "value": "encoded_mus_correct[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded_mus_correct[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_186": {
                "variable": {
                    "value": "encoded_sigmas_correct[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded_sigmas_correct[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_187": {
                "variable": {
                    "value": "zs_correct[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zs_correct[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_189": {
                "variable": {
                    "value": "encoded_mus_false[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded_mus_false[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_190": {
                "variable": {
                    "value": "encoded_sigmas_false[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded_sigmas_false[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_191": {
                "variable": {
                    "value": "zs_false[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zs_false[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_260": {
                "variable": {
                    "value": "out_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_261": {
                "variable": {
                    "value": "z_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "encoded_mu.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "encoded_mu.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_262": {
                "variable": {
                    "value": "recon_loss_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "inputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_319": {
                "variable": {
                    "value": "encoded_mus[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded_mus[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_320": {
                "variable": {
                    "value": "encoded_sigmas[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoded_sigmas[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_321": {
                "variable": {
                    "value": "zs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_374": {
                "variable": {
                    "value": "z_samples_per_class[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_samples_per_class[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_127": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.module.classifier(z)",
                            "Call"
                        ],
                        [
                            "model.module.classifier(z)",
                            "Call"
                        ],
                        [
                            "model.module.classifier(z_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_163": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_mean[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_275": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.module.classifier(z)",
                            "Call"
                        ],
                        [
                            "model.module.classifier(z)",
                            "Call"
                        ],
                        [
                            "model.module.classifier(z_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_305": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_mean[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_359": {
                "*size": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "model.module.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_147": {
                "input": {
                    "value": "out_mean * torch.log(out_mean + eps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_296": {
                "input": {
                    "value": "out_mean * torch.log(out_mean + eps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "numel_136": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "numel_284": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_135": {
                "input": {
                    "value": "dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.module.decode(z)",
                            "Call"
                        ],
                        [
                            "model.module.pixelcnn(inputs, torch.sigmoid(dec)).contiguous()",
                            "Call"
                        ],
                        [
                            "model.module.decode(z)",
                            "Call"
                        ],
                        [
                            "model.module.pixelcnn(inputs, torch.sigmoid(dec)).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_283": {
                "input": {
                    "value": "dec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.module.decode(z)",
                            "Call"
                        ],
                        [
                            "model.module.pixelcnn(inputs, torch.sigmoid(dec)).contiguous()",
                            "Call"
                        ],
                        [
                            "model.module.decode(z)",
                            "Call"
                        ],
                        [
                            "model.module.pixelcnn(inputs, torch.sigmoid(dec)).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_147": {
                "input": {
                    "value": "out_mean + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_296": {
                "input": {
                    "value": "out_mean + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/Training/loss_functions.py": {
        "torch": {
            "CrossEntropyLoss_47": {
                "variable": {
                    "value": "class_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "recon_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output_samples_recon.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "cl_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output_samples_classification.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_59": {
                "variable": {
                    "value": "cl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cl_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(output_samples_classification.size(0)).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_60": {
                "variable": {
                    "value": "rl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(output_samples_recon.size(0)).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_73": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_75": {
                "variable": {
                    "value": "class_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "kld_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "margin - KLD(rec_mu, rec_std)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "kld_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "margin - KLD(fake_mu, fake_std)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BCELoss_94": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_43": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_45": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "numel_11": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "numel_77": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "numel_78": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "numel_83": {
                "input": {
                    "value": "real_mu",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "numel_96": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_11": {
                "input": {
                    "value": "1 + torch.log(eps + std ** 2) - mu ** 2 - std ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "numel_55": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "numel_56": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_11": {
                "input": {
                    "value": "eps + std ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/Training/train.py": {
        "torch": {
            "sigmoid_81": {
                "variable": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.module.decode(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_87": {
                "variable": {
                    "value": "z_p",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inp.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "model.module.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_88": {
                "variable": {
                    "value": "recon_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.module.decode(z_p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_111": {
                "variable": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.module.decode(z.detach())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_116": {
                "variable": {
                    "value": "recon_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.module.decode(z_p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_179": {
                "variable": {
                    "value": "class_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_162": {
                "variable": {
                    "value": "recon_samples_autoregression",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "recon_samples.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "inp.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "inp.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "inp.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "inp.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_67": {
                "*size": {
                    "value": "inp.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_166": {
                "input": {
                    "value": "recon_samples[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/Training/validate.py": {
        "torch": {
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_97": {
                "variable": {
                    "value": "class_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_98": {
                "variable": {
                    "value": "recon_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recon_samples_autoregression",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "variable": {
                    "value": "recon_samples_autoregression",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "recon_samples.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "inp.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "inp.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "inp.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "inp.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(inp.size(0), inp.size(1), inp.size(2), inp.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_126": {
                "variable": {
                    "value": "recon_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((inp.size(0), inp.size(1), inp.size(2), inp.size(3))).to(device)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(recon_output)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "recon_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "(recon_target * 255).long()",
                            "Call"
                        ],
                        [
                            "inp",
                            "Name"
                        ]
                    ]
                }
            },
            "sigmoid_129": {
                "variable": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(recon_samples, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_161": {
                "input": {
                    "value": "recon[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "recon_target[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_84": {
                "input": {
                    "value": "recon_samples[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_119": {
                "input": {
                    "value": "recon_output[:, :, c, h, w]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_120": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(recon_output[:, :, c, h, w], dim=1).data",
                            "Attribute"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_167": {
                "input": {
                    "value": "recon[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "recon_target[j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_159": {
                "input": {
                    "value": "rec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recon_output[j].view(1, recon_output.size(1), recon_output.size(2), recon_output.size(3), recon_output.size(4))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "(rec_tar * 255).long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_165": {
                "input": {
                    "value": "rec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recon_output[j].view(1, recon_output.size(1), recon_output.size(2), recon_output.size(3), recon_output.size(4))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "(rec_tar * 255).long()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/Utility/metrics.py": {
        "torch": {}
    },
    "lib/Utility/utils.py": {
        "torch": {
            "save_19": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(file_path, file_name)",
                            "Call"
                        ],
                        [
                            "os.path.join(file_path, 'checkpoint_task_' + str(task_num) + '.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/Utility/visualization.py": {
        "torch": {
            "cat_131": {
                "variable": {
                    "value": "encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "encoding_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_127": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Tensor_128": {
                "variable": {
                    "value": "encoding_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_46": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SummaryWriter_73": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'runs/' + strftime('%Y-%m-%d_%H-%M-%S', gmtime()) + '_' + args.dataset + '_' + args.architecture + '_variational_samples_' + str(args.var_samples) + '_latent_dim_' + str(args.var_latent_dim)",
                            "BinOp"
                        ],
                        [
                            "save_path + '_opensetreplay'",
                            "BinOp"
                        ],
                        [
                            "save_path + '_resumed'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataParallel_165": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_init_method(device, num_classes, num_colors, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_186": {
                "variable": {
                    "value": "optimizer_enc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.module.encoder.parameters()) + list(model.module.latent_mu.parameters()) + list(model.module.latent_std.parameters()) + list(model.module.classifier.parameters())",
                            "BinOp"
                        ],
                        [
                            "list(model.module.encoder.parameters()) + list(model.module.latent_mu.parameters()) + list(model.module.latent_std.parameters()) + list(model.module.classifier.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_187": {
                "variable": {
                    "value": "optimizer_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gen_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.module.decoder.parameters())",
                            "Call"
                        ],
                        [
                            "list(model.module.latent_decoder.parameters()) + list(model.module.decoder.parameters())",
                            "BinOp"
                        ],
                        [
                            "list(model.module.decoder.parameters())",
                            "Call"
                        ],
                        [
                            "list(model.module.latent_decoder.parameters()) + list(model.module.decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_192": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_202": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_264": {
                "variable": {
                    "value": "optimizer_enc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.module.encoder.parameters()) + list(model.module.latent_mu.parameters()) + list(model.module.latent_std.parameters()) + list(model.module.classifier.parameters())",
                            "BinOp"
                        ],
                        [
                            "list(model.module.encoder.parameters()) + list(model.module.latent_mu.parameters()) + list(model.module.latent_std.parameters()) + list(model.module.classifier.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_265": {
                "variable": {
                    "value": "optimizer_dec",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gen_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.module.decoder.parameters())",
                            "Call"
                        ],
                        [
                            "list(model.module.latent_decoder.parameters()) + list(model.module.decoder.parameters())",
                            "BinOp"
                        ],
                        [
                            "list(model.module.decoder.parameters())",
                            "Call"
                        ],
                        [
                            "list(model.module.latent_decoder.parameters()) + list(model.module.decoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_268": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_241": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}