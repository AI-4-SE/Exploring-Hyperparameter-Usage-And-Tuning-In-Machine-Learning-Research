{
    "alfworld/agents/agent/base_agent.py": {
        "torch": {
            "Adam_112": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config['general']['training']['optimizer']['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_116": {
                "variable": {
                    "value": "self.cross_entropy_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_296": {
                "variable": {
                    "value": "res_representations",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(action_candidate_list)",
                            "Call"
                        ],
                        [
                            "len(action_candidate_list)",
                            "Call"
                        ],
                        [
                            "len(observation_strings)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "max_num_candidate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_len(action_candidate_list)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.online_net.block_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_297": {
                "variable": {
                    "value": "res_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(action_candidate_list)",
                            "Call"
                        ],
                        [
                            "len(action_candidate_list)",
                            "Call"
                        ],
                        [
                            "len(observation_strings)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "max_num_candidate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_len(action_candidate_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_137": {
                "seed": {
                    "value": "self.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_277": {
                "obj": {
                    "value": "self.online_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_to",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_to",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_317": {
                "variable": {
                    "value": "_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_batch_cand_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode_text(tmp_batch_cand, use_model=use_model)",
                            "Call"
                        ],
                        [
                            "tmp_batch_cand_mask.byte().any(-1).float()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_318": {
                "variable": {
                    "value": "tmp_batch_cand_representation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_batch_cand_representation_sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode_text(tmp_batch_cand, use_model=use_model)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eq_319": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(tmp_batch_cand_mask, -1)",
                            "Call"
                        ],
                        [
                            "_mask + tmp",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_261": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_from",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_263": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_from",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_144": {
                "seed": {
                    "value": "self.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/agent/text_dagger_agent.py": {
        "torch": {
            "log_softmax_30": {
                "variable": {
                    "value": "pred_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_rank - torch.min(action_rank, -1, keepdim=True)[0] + 0.01",
                            "BinOp"
                        ],
                        [
                            "action_rank * action_mask",
                            "BinOp"
                        ],
                        [
                            "action_rank",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_31": {
                "variable": {
                    "value": "action_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log_softmax(action_rank, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_96": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NegativeLogLoss(pred * target_mask.unsqueeze(-1), ground_truth, target_mask, smoothing_eps=self.smoothing_eps)",
                            "Call"
                        ],
                        [
                            "NegativeLogLoss(pred * target_mask.unsqueeze(-1), ground_truth, target_mask, smoothing_eps=self.smoothing_eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_147": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_147": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_186": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_186": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__76": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__105": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__153": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_183": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NegativeLogLoss(pred * target_mask.unsqueeze(-1), ground_truth, target_mask, smoothing_eps=self.smoothing_eps)",
                            "Call"
                        ],
                        [
                            "NegativeLogLoss(pred * target_mask.unsqueeze(-1), ground_truth, target_mask, smoothing_eps=self.smoothing_eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__194": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gt_321": {
                "variable": {
                    "value": "gt_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, None, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "topk_325": {
                "variable": {
                    "value": "(top_beam_width_log_probs, top_beam_width_indicies)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(pred + epsilon) * gt_zero",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.beam_width",
                            "Attribute"
                        ]
                    ]
                }
            },
            "min_26": {
                "input": {
                    "value": "action_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_rank - torch.min(action_rank, -1, keepdim=True)[0] + 0.01",
                            "BinOp"
                        ],
                        [
                            "action_rank * action_mask",
                            "BinOp"
                        ],
                        [
                            "action_rank",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "le_322": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, None, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_323": {
                "input": {
                    "value": "pred + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/agent/text_dqn_agent.py": {
        "torch": {
            "argmax_48": {
                "variable": {
                    "value": "action_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_rank - torch.min(action_rank, -1, keepdim=True)[0] + 0.01",
                            "BinOp"
                        ],
                        [
                            "action_rank * action_mask",
                            "BinOp"
                        ],
                        [
                            "action_rank",
                            "Method Argument"
                        ],
                        [
                            "action_rank",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "smooth_l1_loss_500": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_admissible_commands()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_admissible_commands()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_beam_search_choice()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_beam_search_choice()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_command_generation()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_command_generation()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards.cuda()",
                            "Call"
                        ],
                        [
                            "rewards + next_q_value * discount",
                            "BinOp"
                        ],
                        [
                            "rewards.cuda()",
                            "Call"
                        ],
                        [
                            "rewards + next_q_value * discount",
                            "BinOp"
                        ],
                        [
                            "rewards.cuda()",
                            "Call"
                        ],
                        [
                            "rewards + next_q_value * discount",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_566": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_566": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_567": {
                "variable": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_value_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_567": {
                "variable": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "smooth_l1_loss_637": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_admissible_commands()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_admissible_commands()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_beam_search_choice()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_beam_search_choice()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_command_generation()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_command_generation()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards.cuda()",
                            "Call"
                        ],
                        [
                            "rewards + next_q_value * discount",
                            "BinOp"
                        ],
                        [
                            "rewards.cuda()",
                            "Call"
                        ],
                        [
                            "rewards + next_q_value * discount",
                            "BinOp"
                        ],
                        [
                            "rewards.cuda()",
                            "Call"
                        ],
                        [
                            "rewards + next_q_value * discount",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_710": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_710": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_711": {
                "variable": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_value_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_711": {
                "variable": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "smooth_l1_loss_814": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_admissible_commands()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_admissible_commands()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_beam_search_choice()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_beam_search_choice()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_command_generation()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_command_generation()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards.cuda()",
                            "Call"
                        ],
                        [
                            "rewards + next_q_value * discount",
                            "BinOp"
                        ],
                        [
                            "rewards.cuda()",
                            "Call"
                        ],
                        [
                            "rewards + next_q_value * discount",
                            "BinOp"
                        ],
                        [
                            "rewards.cuda()",
                            "Call"
                        ],
                        [
                            "rewards + next_q_value * discount",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_915": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_915": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_916": {
                "variable": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "q_value_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_916": {
                "variable": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "smooth_l1_loss_562": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_admissible_commands()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_admissible_commands()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_beam_search_choice()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_beam_search_choice()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_command_generation()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_command_generation()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_reward[step_no]",
                            "Subscript"
                        ],
                        [
                            "reward.cuda()",
                            "Call"
                        ],
                        [
                            "reward + next_q_value * self.discount_gamma_game_reward",
                            "BinOp"
                        ],
                        [
                            "seq_reward[step_no]",
                            "Subscript"
                        ],
                        [
                            "reward.cuda()",
                            "Call"
                        ],
                        [
                            "reward + next_q_value * self.discount_gamma_game_reward",
                            "BinOp"
                        ],
                        [
                            "seq_reward[step_no]",
                            "Subscript"
                        ],
                        [
                            "reward.cuda()",
                            "Call"
                        ],
                        [
                            "reward + next_q_value * self.discount_gamma_game_reward",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__585": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_706": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_admissible_commands()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_admissible_commands()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_beam_search_choice()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_beam_search_choice()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_command_generation()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_command_generation()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_reward[step_no]",
                            "Subscript"
                        ],
                        [
                            "reward.cuda()",
                            "Call"
                        ],
                        [
                            "reward + next_q_value * self.discount_gamma_game_reward",
                            "BinOp"
                        ],
                        [
                            "seq_reward[step_no]",
                            "Subscript"
                        ],
                        [
                            "reward.cuda()",
                            "Call"
                        ],
                        [
                            "reward + next_q_value * self.discount_gamma_game_reward",
                            "BinOp"
                        ],
                        [
                            "seq_reward[step_no]",
                            "Subscript"
                        ],
                        [
                            "reward.cuda()",
                            "Call"
                        ],
                        [
                            "reward + next_q_value * self.discount_gamma_game_reward",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__729": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_911": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_admissible_commands()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_admissible_commands()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_beam_search_choice()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_beam_search_choice()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_command_generation()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_command_generation()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_reward[step_no]",
                            "Subscript"
                        ],
                        [
                            "reward.cuda()",
                            "Call"
                        ],
                        [
                            "reward + next_q_value * self.discount_gamma_game_reward",
                            "BinOp"
                        ],
                        [
                            "seq_reward[step_no]",
                            "Subscript"
                        ],
                        [
                            "reward.cuda()",
                            "Call"
                        ],
                        [
                            "reward + next_q_value * self.discount_gamma_game_reward",
                            "BinOp"
                        ],
                        [
                            "seq_reward[step_no]",
                            "Subscript"
                        ],
                        [
                            "reward.cuda()",
                            "Call"
                        ],
                        [
                            "reward + next_q_value * self.discount_gamma_game_reward",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__933": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_416": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_472": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_519": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_605": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_615": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_655": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_765": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_830": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gt_233": {
                "variable": {
                    "value": "gt_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, None, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, next_aggregated_obs_representation, next_obs_mask, None, next_input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, next_aggregated_obs_representation, next_obs_mask, next_dynamics, next_input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "topk_237": {
                "variable": {
                    "value": "(top_beam_width_log_probs, top_beam_width_indicies)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(pred + epsilon) * gt_zero",
                            "BinOp"
                        ],
                        [
                            "torch.log(pred + epsilon) * gt_zero",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.beam_width",
                            "Attribute"
                        ],
                        [
                            "self.beam_width",
                            "Attribute"
                        ]
                    ]
                }
            },
            "gt_371": {
                "variable": {
                    "value": "gt_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, None, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, next_aggregated_obs_representation, next_obs_mask, None, next_input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, next_aggregated_obs_representation, next_obs_mask, next_dynamics, next_input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "topk_375": {
                "variable": {
                    "value": "(top_beam_width_log_probs, top_beam_width_indicies)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(pred + epsilon) * gt_zero",
                            "BinOp"
                        ],
                        [
                            "torch.log(pred + epsilon) * gt_zero",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.beam_width",
                            "Attribute"
                        ],
                        [
                            "self.beam_width",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_441": {
                "tensors": {
                    "value": "current_dynamics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.action_scoring(action_candidate_list, h_obs, obs_mask, h_td, td_mask, previous_dynamics, use_model='online')",
                            "Call"
                        ],
                        [
                            "self.action_scoring(action_candidate_list, h_obs, obs_mask, h_td, td_mask, previous_dynamics, use_model='online')",
                            "Call"
                        ],
                        [
                            "self.action_scoring(action_candidate_list, h_obs, obs_mask, h_td, td_mask, previous_dynamics, use_model='online')",
                            "Call"
                        ],
                        [
                            "self.command_generation_by_beam_search(observation_strings, task_desc_strings, previous_dynamics)",
                            "Call"
                        ],
                        [
                            "self.command_generation_by_beam_search(observation_strings, task_desc_strings, previous_dynamics)",
                            "Call"
                        ],
                        [
                            "self.command_generation_by_beam_search(observation_strings, task_desc_strings, previous_dynamics)",
                            "Call"
                        ],
                        [
                            "self.online_net.rnncell(averaged_representation, previous_dynamics) if previous_dynamics is not None else self.online_net.rnncell(averaged_representation)",
                            "IfExp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.online_net.rnncell(averaged_representation, previous_dynamics) if previous_dynamics is not None else self.online_net.rnncell(averaged_representation)",
                            "IfExp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.online_net.rnncell(averaged_representation, previous_dynamics) if previous_dynamics is not None else self.online_net.rnncell(averaged_representation)",
                            "IfExp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(current_dynamics, 0) if self.recurrent else None",
                            "IfExp"
                        ],
                        [
                            "self.action_scoring(candidates, h_obs, obs_mask, h_td, td_mask, prev_dynamics, use_model='online')",
                            "Call"
                        ],
                        [
                            "self.online_net.rnncell(averaged_representation, prev_dynamics) if prev_dynamics is not None else self.online_net.rnncell(averaged_representation)",
                            "IfExp"
                        ],
                        [
                            "self.online_net.rnncell(averaged_representation, previous_dynamics) if previous_dynamics is not None else self.online_net.rnncell(averaged_representation)",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_540": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_587": {
                "input": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_admissible_commands()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_admissible_commands()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_beam_search_choice()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_beam_search_choice()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_command_generation()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_command_generation()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_664": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_680": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_731": {
                "input": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_admissible_commands()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_admissible_commands()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_beam_search_choice()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_beam_search_choice()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_command_generation()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_command_generation()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_861": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_935": {
                "input": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_admissible_commands()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_admissible_commands()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, action_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "ez_gather_dim_1(action_scores, chosen_indices).squeeze(1)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_beam_search_choice()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_beam_search_choice()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "torch.stack(q_value_list).mean()",
                            "Call"
                        ],
                        [
                            "GetGenerationQValue(pred * target_mask.unsqueeze(-1), ground_truth, target_mask)",
                            "Call"
                        ],
                        [
                            "q_value.detach()",
                            "Call"
                        ],
                        [
                            "self.get_drqn_loss_command_generation()",
                            "Call"
                        ],
                        [
                            "self.get_dqn_loss_command_generation()",
                            "Call"
                        ]
                    ]
                }
            },
            "min_44": {
                "input": {
                    "value": "action_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_rank - torch.min(action_rank, -1, keepdim=True)[0] + 0.01",
                            "BinOp"
                        ],
                        [
                            "action_rank * action_mask",
                            "BinOp"
                        ],
                        [
                            "action_rank",
                            "Method Argument"
                        ],
                        [
                            "action_rank",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "le_234": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, None, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, next_aggregated_obs_representation, next_obs_mask, None, next_input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, next_aggregated_obs_representation, next_obs_mask, next_dynamics, next_input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_235": {
                "input": {
                    "value": "pred + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "le_372": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, __aggregated_obs_representation, __obs_mask, __current_dynamics, __input_obs)",
                            "Call"
                        ],
                        [
                            "pred[0][-1].cpu()",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, None, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, next_aggregated_obs_representation, next_obs_mask, None, next_input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, aggregated_obs_representation, obs_mask, current_dynamics, input_obs)",
                            "Call"
                        ],
                        [
                            "self.online_net.decode(input_target, target_mask, next_aggregated_obs_representation, next_obs_mask, next_dynamics, next_input_obs)",
                            "Call"
                        ],
                        [
                            "to_np(pred[:, -1])",
                            "Call"
                        ],
                        [
                            "np.argmax(pred, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_373": {
                "input": {
                    "value": "pred + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/agent/vision_dagger_agent.py": {
        "torch": {
            "softmax_77": {
                "variable": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.box_predictor(box_features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "vision_td",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_obs, h_td_mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_200": {
                "variable": {
                    "value": "vision_td_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, h_obs.shape[1] + h_td_mean.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_208": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NegativeLogLoss(pred * target_mask.unsqueeze(-1), ground_truth, target_mask, smoothing_eps=self.smoothing_eps)",
                            "Call"
                        ],
                        [
                            "NegativeLogLoss(pred * target_mask.unsqueeze(-1), ground_truth, target_mask, smoothing_eps=self.smoothing_eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_254": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_254": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_313": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_feat_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_91": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_logits.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_logits.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "nonzero_105": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores > module.score_thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_105": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__217": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "vision_td",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_obs, h_td_mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_235": {
                "variable": {
                    "value": "vision_td_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, h_obs.shape[1] + h_td_mean.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_251": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NegativeLogLoss(pred * target_mask.unsqueeze(-1), ground_truth, target_mask, smoothing_eps=self.smoothing_eps)",
                            "Call"
                        ],
                        [
                            "NegativeLogLoss(pred * target_mask.unsqueeze(-1), ground_truth, target_mask, smoothing_eps=self.smoothing_eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__262": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_275": {
                "variable": {
                    "value": "vision_td",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_obs, h_td_mean)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_276": {
                "variable": {
                    "value": "vision_td_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, h_obs.shape[1] + h_td_mean.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AvgPool2d_47": {
                "variable": {
                    "value": "self.avg2dpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(13, 13)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_135": {
                "variable": {
                    "value": "image_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.transform(i).cuda() if self.use_gpu else self.transform() for i in images]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(image_tensors, dim=0)",
                            "Call"
                        ],
                        [
                            "[self.transform(i).cuda() if self.use_gpu else self.transform(i) for i in images]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_148": {
                "*size": {
                    "value": "(1, 1000)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/detector/coco_eval.py": {
        "torch": {
            "stack_160": {
                "tensors": {
                    "value": "(xmin, ymin, xmax - xmin, ymax - ymin)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/detector/coco_utils.py": {
        "torch": {
            "Subset_142": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.Subset(dataset, ids)",
                            "Call"
                        ],
                        [
                            "{'images': [], 'categories': [], 'annotations': []}",
                            "Dict"
                        ],
                        [
                            "dataset.dataset",
                            "Attribute"
                        ],
                        [
                            "CocoDetection(img_folder, ann_file, transforms=transforms)",
                            "Call"
                        ],
                        [
                            "_coco_remove_images_without_annotations(dataset)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "as_tensor_40": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coco_mask.decode(rles)",
                            "Call"
                        ],
                        [
                            "mask[..., None]",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(mask, dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "mask.any(dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(masks, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.zeros((0, height, width), dtype=torch.uint8)",
                            "Call"
                        ],
                        [
                            "targets['masks']",
                            "Subscript"
                        ],
                        [
                            "masks.permute(0, 2, 1).contiguous().permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "convert_coco_poly_to_mask(segmentations, h, w)",
                            "Call"
                        ],
                        [
                            "masks[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(0, height, width)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "image_id",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[image_id]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_63": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['bbox'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(boxes, dtype=torch.float32).reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "boxes[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[obj['category_id'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(classes, dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "classes[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "area",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['area'] for obj in anno]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "iscrowd",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[obj['iscrowd'] for obj in anno]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "as_tensor_77": {
                "variable": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "keypoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets['keypoints']",
                            "Subscript"
                        ],
                        [
                            "keypoints.reshape(keypoints.shape[0], -1).tolist()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[obj['keypoints'] for obj in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(keypoints, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "keypoints.view(num_keypoints, -1, 3)",
                            "Call"
                        ],
                        [
                            "keypoints[keep]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/detector/engine.py": {
        "torch": {
            "get_num_threads_70": {
                "variable": {
                    "value": "n_threads",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_73": {
                "variable": {
                    "value": "cpu_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_num_threads_72": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_num_threads_107": {
                "int": {
                    "value": "n_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.get_num_threads()",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/detector/group_by_aspect_ratio.py": {
        "torch": {
            "DataLoader_98": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetSampler(indices)",
                            "Call"
                        ],
                        [
                            "sampler",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/detector/mrcnn.py": {
        "torch": {
            "load_41": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "alfworld/agents/detector/train.py": {
        "torch": {
            "device_46": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, 'train', get_transform(train=True))",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "train_batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GroupedBatchSampler(train_sampler, group_ids, args.batch_size)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.BatchSampler(train_sampler, args.batch_size, drop_last=True)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "data_loader_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, 'val', get_transform(train=False))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset_test)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.SequentialSampler(dataset_test)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_89": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_93": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(params, lr=args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "args.lr_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.lr_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedSampler_56": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, 'train', get_transform(train=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_57": {
                "variable": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, 'val', get_transform(train=False))",
                            "Call"
                        ]
                    ]
                }
            },
            "RandomSampler_59": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, 'train', get_transform(train=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_60": {
                "variable": {
                    "value": "test_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args.dataset, 'val', get_transform(train=False))",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchSampler_66": {
                "variable": {
                    "value": "train_batch_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.RandomSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_85": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.models.detection.__dict__[args.model](num_classes=num_classes, pretrained=args.pretrained)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_96": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/detector/transforms.py": {
        "torch": {}
    },
    "alfworld/agents/detector/utils.py": {
        "torch": {
            "tensor_95": {
                "variable": {
                    "value": "local_size",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[tensor.numel()]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.count, self.total]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.deque)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_108": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(max_size - local_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_139": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(values, dim=0)",
                            "Call"
                        ],
                        [
                            "values / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LambdaLR_242": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_312": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_294": {
                "obj": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "empty_106": {
                "*size": {
                    "value": "(max_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_count_304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/eval/evaluate_dagger.py": {
        "torch": {
            "no_grad_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/eval/evaluate_dqn.py": {
        "torch": {
            "no_grad_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/eval/evaluate_vision_dagger.py": {
        "torch": {
            "no_grad_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_67": {
                "tensors": {
                    "value": "[ef, obs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/modules/generic.py": {
        "torch": {
            "stack_112": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(inp)",
                            "Call"
                        ],
                        [
                            "[res]",
                            "List"
                        ],
                        [
                            "list(res)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_19": {
                "ndarray": {
                    "value": "np_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_21": {
                "ndarray": {
                    "value": "np_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_24": {
                "ndarray": {
                    "value": "np_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_26": {
                "ndarray": {
                    "value": "np_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "alfworld/agents/modules/layers.py": {
        "torch": {
            "ne_9": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "variable"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_39": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "P * mask",
                            "BinOp"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gt_40": {
                "variable": {
                    "value": "gt_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "P * mask",
                            "BinOp"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_58": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "P * mask",
                            "BinOp"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_61": {
                "variable": {
                    "value": "mask_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ne(x, 0).float()",
                            "Call"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "mask.expand(-1, -1, x.shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.ne(x, 0).float()",
                            "Call"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ],
                        [
                            "self.compute_mask(x)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(torch.ones(x.size(0)))",
                            "Call"
                        ],
                        [
                            "mask.cuda() if x.is_cuda else mask",
                            "IfExp"
                        ],
                        [
                            "mask.repeat(self.n_head, 1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eq_62": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(mask, -1)",
                            "Call"
                        ],
                        [
                            "mask_sum + tmp",
                            "BinOp"
                        ],
                        [
                            "torch.sum(m, dim=-1)",
                            "Call"
                        ],
                        [
                            "mask_sum + tmp",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, -1).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_66": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "P * mask",
                            "BinOp"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gt_80": {
                "variable": {
                    "value": "gt_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "P * mask",
                            "BinOp"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_93": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "variable"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "-15.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "15.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_97": {
                "variable": {
                    "value": "e_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - torch.max(x, dim=axis, keepdim=True)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_114": {
                "variable": {
                    "value": "mask_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.float()",
                            "Call"
                        ],
                        [
                            "torch.nn.ZeroPad2d((0, channels % 2, 0, 0))",
                            "Call"
                        ],
                        [
                            "self.modules()",
                            "Call"
                        ],
                        [
                            "self.modules()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "m",
                            "Method Argument"
                        ],
                        [
                            "m",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eq_115": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(mask, -1)",
                            "Call"
                        ],
                        [
                            "mask_sum + tmp",
                            "BinOp"
                        ],
                        [
                            "torch.sum(m, dim=-1)",
                            "Call"
                        ],
                        [
                            "mask_sum + tmp",
                            "BinOp"
                        ],
                        [
                            "torch.sum(mask, -1).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_119": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "variable"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_131": {
                "variable": {
                    "value": "mask_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ne(x, 0).float()",
                            "Call"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ],
                        [
                            "mask.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "mask.expand(-1, -1, x.shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.ne(x, 0).float()",
                            "Call"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ],
                        [
                            "self.compute_mask(x)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(torch.ones(x.size(0)))",
                            "Call"
                        ],
                        [
                            "mask.cuda() if x.is_cuda else mask",
                            "IfExp"
                        ],
                        [
                            "mask.repeat(self.n_head, 1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_131": {
                "variable": {
                    "value": "mask_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_135": {
                "variable": {
                    "value": "sum_masked_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_927": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "length",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_933": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(scaled_time), torch.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_934": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, channels % 2, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_86": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.sum(log_P, dim=1)",
                            "UnaryOp"
                        ],
                        [
                            "-torch.sum(log_P, dim=1)",
                            "UnaryOp"
                        ],
                        [
                            "self.gamma * (x - mean) / (std + self.eps) + self.beta",
                            "BinOp"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "pad_(output, n_zero)",
                            "Call"
                        ],
                        [
                            "output.index_select(0, idx_unsort)",
                            "Call"
                        ],
                        [
                            "torch.cat([output, torch.autograd.Variable(padding)], 1)",
                            "Call"
                        ],
                        [
                            "output.contiguous() * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "pad_(output, n_zero)",
                            "Call"
                        ],
                        [
                            "output.index_select(0, idx_unsort)",
                            "Call"
                        ],
                        [
                            "torch.cat([output, torch.autograd.Variable(padding)], 1)",
                            "Call"
                        ],
                        [
                            "output.contiguous() * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(attn, v)",
                            "Call"
                        ],
                        [
                            "self.attention(q, k, v, mask=mask)",
                            "Call"
                        ],
                        [
                            "output.view(self.n_head, batch_size, len_q, self.block_hidden_dim)",
                            "Call"
                        ],
                        [
                            "output.permute(1, 2, 0, 3).contiguous().view(batch_size, len_q, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.fc(output))",
                            "Call"
                        ],
                        [
                            "self.layer_norm(output + residual)",
                            "Call"
                        ],
                        [
                            "torch.bmm(adj, support)",
                            "Call"
                        ],
                        [
                            "self.weight(supports)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_144": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_145": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_152": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.var(dim=-1, keepdim=True) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_216": {
                "variable": {
                    "value": "self.embedding_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_223": {
                "variable": {
                    "value": "self.embedding_layer.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_embedding_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_init()",
                            "Call"
                        ],
                        [
                            "init_embedding_matrix.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_238": {
                "variable": {
                    "value": "word_embedding_init",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "word_embedding_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(low=-0.05, high=0.05, size=(self.vocab_size, self.embedding_size))",
                            "Call"
                        ],
                        [
                            "embedding_initr.word_embedding_initialize(self.id2word, dim_size=self.embedding_size, oov_init=self.embedding_oov_init)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(word_embedding_init).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "ne_242": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "variable"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_249": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_layer(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(embeddings, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_274": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "rnns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.nn.LSTM(self.ninp if i == 0 else self.nhids[i - 1], self.nhids[i], num_layers=1, bidirectional=False) for i in range(self.nlayers)]",
                            "ListComp"
                        ],
                        [
                            "[torch.nn.LSTM(self.ninp if i == 0 else self.nhids[i - 1] * 2, self.nhids[i], num_layers=1, bidirectional=True) for i in range(self.nlayers)]",
                            "ListComp"
                        ],
                        [
                            "[LSTMCell(self.input_p_dim + self.input_q_dim if i == 0 else self.nhids[i - 1] + self.input_q_dim, self.nhids[i], use_bias=True) for i in range(self.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sort_294": {
                "variable": {
                    "value": "(_, idx_sort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.data.eq(1).long().sum(1)",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ],
                        [
                            "lengths[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "mask.data.eq(1).long().sum(1)",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ],
                        [
                            "lengths[:n_nonzero]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_295": {
                "variable": {
                    "value": "(_, idx_unsort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(lengths, dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.sort(lengths, dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(idx_sort)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_315": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "variable"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.data.eq(1).long().sum(1)",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ],
                        [
                            "lengths[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "mask.data.eq(1).long().sum(1)",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ],
                        [
                            "lengths[:n_nonzero]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_382": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "rnns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.nn.LSTM(self.ninp if i == 0 else self.nhids[i - 1], self.nhids[i], num_layers=1, bidirectional=False) for i in range(self.nlayers)]",
                            "ListComp"
                        ],
                        [
                            "[torch.nn.LSTM(self.ninp if i == 0 else self.nhids[i - 1] * 2, self.nhids[i], num_layers=1, bidirectional=True) for i in range(self.nlayers)]",
                            "ListComp"
                        ],
                        [
                            "[LSTMCell(self.input_p_dim + self.input_q_dim if i == 0 else self.nhids[i - 1] + self.input_q_dim, self.nhids[i], use_bias=True) for i in range(self.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sort_402": {
                "variable": {
                    "value": "(_, idx_sort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.data.eq(1).long().sum(1)",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ],
                        [
                            "lengths[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "mask.data.eq(1).long().sum(1)",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ],
                        [
                            "lengths[:n_nonzero]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_403": {
                "variable": {
                    "value": "(_, idx_unsort)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_sort",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(lengths, dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.sort(lengths, dim=0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(idx_sort)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_423": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "variable"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.data.eq(1).long().sum(1)",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ],
                        [
                            "lengths[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "mask.data.eq(1).long().sum(1)",
                            "Call"
                        ],
                        [
                            "list(lengths[idx_sort])",
                            "Call"
                        ],
                        [
                            "lengths[:n_nonzero]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_483": {
                "variable": {
                    "value": "self.pre_act_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "split_530": {
                "variable": {
                    "value": "(f, i, o, g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pre_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pre_act_linear(torch.cat([input_, h_0], -1))",
                            "Call"
                        ],
                        [
                            "pre_act + torch.cat([self.bias_f, self.bias_iog]).unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_566": {
                "variable": {
                    "value": "self.W_p_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "W_p_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.nn.Linear(self.output_dim[i] + (self.input_p_dim if i == 0 else self.output_dim[i - 1]), self.output_dim[i]) for i in range(self.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ModuleList_567": {
                "variable": {
                    "value": "self.W_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "W_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.nn.Linear(self.input_q_dim, self.output_dim[i]) for i in range(self.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ParameterList_568": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.nn.Parameter(torch.FloatTensor(self.output_dim[i])) for i in range(self.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ParameterList_569": {
                "variable": {
                    "value": "self.match_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "match_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.nn.Parameter(torch.FloatTensor(1)) for i in range(self.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tanh_584": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "G_p_r + G_q",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_585": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(G_p_r + G_q)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.w[depth]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bmm_590": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(G, self.w[depth])",
                            "Call"
                        ],
                        [
                            "alpha + self.match_b[depth].unsqueeze(0)",
                            "BinOp"
                        ],
                        [
                            "masked_softmax(alpha, mask_q, axis=-1)",
                            "Call"
                        ],
                        [
                            "alpha.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "input_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_q",
                            "Method Argument"
                        ],
                        [
                            "input_q",
                            "Method Argument"
                        ],
                        [
                            "input_q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_592": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_p, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_623": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "rnns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.nn.LSTM(self.ninp if i == 0 else self.nhids[i - 1], self.nhids[i], num_layers=1, bidirectional=False) for i in range(self.nlayers)]",
                            "ListComp"
                        ],
                        [
                            "[torch.nn.LSTM(self.ninp if i == 0 else self.nhids[i - 1] * 2, self.nhids[i], num_layers=1, bidirectional=True) for i in range(self.nlayers)]",
                            "ListComp"
                        ],
                        [
                            "[LSTMCell(self.input_p_dim + self.input_q_dim if i == 0 else self.nhids[i - 1] + self.input_q_dim, self.nhids[i], use_bias=True) for i in range(self.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_656": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[h[0] for h in state_stp[-1][1:]]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(states, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_698": {
                "variable": {
                    "value": "input_p_inverted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_p",
                            "Method Argument"
                        ],
                        [
                            "input_p",
                            "Method Argument"
                        ],
                        [
                            "input_p",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_699": {
                "variable": {
                    "value": "mask_p_inverted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask_p",
                            "Method Argument"
                        ],
                        [
                            "mask_p",
                            "Method Argument"
                        ],
                        [
                            "mask_p",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_702": {
                "variable": {
                    "value": "backward_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "backward_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backward_rnn(input_p_inverted, mask_p_inverted, input_q, mask_q)",
                            "Call"
                        ],
                        [
                            "torch.flip(backward_states, dims=[1])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_704": {
                "variable": {
                    "value": "concat_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[forward_states, backward_states]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_706": {
                "variable": {
                    "value": "concat_last_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[forward_last_state, backward_last_state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_733": {
                "variable": {
                    "value": "Fk_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Fk_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W_a(H_q)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Fk_prime)",
                            "Call"
                        ],
                        [
                            "self.W_a(H_q)",
                            "Call"
                        ],
                        [
                            "self.W_a(h_tm1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_756": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_775": {
                "variable": {
                    "value": "Fk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Fk + Fk_prime.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_799": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_800": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_820": {
                "variable": {
                    "value": "Fk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Fk + Fk_prime.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_822": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Fk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.V(H_r.view(-1, H_r.size(2)))",
                            "Call"
                        ],
                        [
                            "Fk.view(batch_size, time, -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(Fk + Fk_prime.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "Fk * mask_r.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.V(H_r.view(-1, H_r.size(2)))",
                            "Call"
                        ],
                        [
                            "Fk.view(batch_size, time, -1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(Fk + Fk_prime.unsqueeze(1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_825": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta.view(beta.size(0), 1, beta.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "H_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H_r",
                            "Method Argument"
                        ],
                        [
                            "H_r",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_868": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "beta_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_884": {
                "variable": {
                    "value": "self.weight_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_885": {
                "variable": {
                    "value": "self.weight_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_887": {
                "variable": {
                    "value": "self.bias_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_888": {
                "variable": {
                    "value": "self.bias_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_901": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_943": {
                "variable": {
                    "value": "self.depthwise_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w_ks(k).view(batch_size, len_k, self.n_head, self.block_hidden_dim)",
                            "Call"
                        ],
                        [
                            "k.permute(2, 0, 1, 3).contiguous().view(-1, len_k, self.block_hidden_dim)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "k // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_944": {
                "variable": {
                    "value": "self.pointwise_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(1)",
                            "Call"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_960": {
                "variable": {
                    "value": "self.att_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hidden_size, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_966": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.att_weights.unsqueeze(0).repeat(batch_size, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_966": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mul_969": {
                "variable": {
                    "value": "weighted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "attentions.unsqueeze(-1).expand_as(input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_979": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_982": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w_qs(q).view(batch_size, len_q, self.n_head, self.block_hidden_dim)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, self.block_hidden_dim)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_986": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "masked_softmax(attn, mask, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "self.attention(q, k, v, mask=mask)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.w_vs(v).view(batch_size, len_v, self.n_head, self.block_hidden_dim)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, self.block_hidden_dim)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_999": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_head * block_hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1000": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_head * block_hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1001": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_head * block_hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1006": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * block_hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_1007": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "self.block_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1009": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_1045": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DepthwiseSeparableConv(ch_num, ch_num, k) for _ in range(conv_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_1047": {
                "variable": {
                    "value": "self.FFN_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1048": {
                "variable": {
                    "value": "self.FFN_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_1049": {
                "variable": {
                    "value": "self.norm_C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.LayerNorm(block_hidden_dim) for _ in range(conv_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_1050": {
                "variable": {
                    "value": "self.norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_1051": {
                "variable": {
                    "value": "self.norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_1070": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, squared_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_1078": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, squared_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_1081": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, squared_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_1105": {
                "variable": {
                    "value": "self.FFN_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1106": {
                "variable": {
                    "value": "self.FFN_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1107": {
                "variable": {
                    "value": "self.FFN_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_1108": {
                "variable": {
                    "value": "self.norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_1109": {
                "variable": {
                    "value": "self.norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_1123": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, squared_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_1128": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, squared_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_1135": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, squared_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_1138": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, squared_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_1163": {
                "variable": {
                    "value": "self.FFN_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1164": {
                "variable": {
                    "value": "self.FFN_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1165": {
                "variable": {
                    "value": "self.FFN_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ],
                        [
                            "ch_num",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_1166": {
                "variable": {
                    "value": "self.norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_1167": {
                "variable": {
                    "value": "self.norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_1181": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, squared_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1186": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_obs, out_node]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_1188": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, squared_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_1195": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, squared_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_1198": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, squared_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_1220": {
                "variable": {
                    "value": "w4C",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_1221": {
                "variable": {
                    "value": "w4Q",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_1222": {
                "variable": {
                    "value": "w4mlu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_1226": {
                "variable": {
                    "value": "self.w4C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w4C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(block_hidden_dim, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_1227": {
                "variable": {
                    "value": "self.w4Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w4Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(block_hidden_dim, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_1228": {
                "variable": {
                    "value": "self.w4mlu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w4mlu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(1, 1, block_hidden_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_1230": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_1232": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(1)",
                            "Call"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_1242": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_softmax(S, Qmask, axis=2)",
                            "Call"
                        ],
                        [
                            "S1 * Qmask * Cmask",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(Q, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_1243": {
                "input": {
                    "value": "S1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_softmax(S, Qmask, axis=2)",
                            "Call"
                        ],
                        [
                            "S1 * Qmask * Cmask",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "S2.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1244": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[C, A, torch.mul(C, A), torch.mul(C, B)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_1248": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(C, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_1249": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(Q, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_1252": {
                "variable": {
                    "value": "subres0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(C, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.w4C",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_1253": {
                "variable": {
                    "value": "subres1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(Q, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.w4Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_1253": {
                "variable": {
                    "value": "subres1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1254": {
                "variable": {
                    "value": "subres2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C * self.w4mlu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "Q.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1281": {
                "variable": {
                    "value": "X_head",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[M1, M2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1282": {
                "variable": {
                    "value": "X_tail",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[M1, M3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_1283": {
                "variable": {
                    "value": "X_head",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w_head_1(X_head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1284": {
                "variable": {
                    "value": "X_tail",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w_tail_1(X_tail)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_1302": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.Linear(size, size) for _ in range(self.n)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_1303": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.Linear(size, size) for _ in range(self.n)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_1318": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "char_emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "char_emb_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1321": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "word_emb_dim + block_hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_1329": {
                "variable": {
                    "value": "char_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "char_emb.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv2d(char_emb)",
                            "Call"
                        ],
                        [
                            "char_emb * mask.unsqueeze(1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.relu(char_emb)",
                            "Call"
                        ],
                        [
                            "torch.max(char_emb, dim=3)",
                            "Call"
                        ],
                        [
                            "char_emb.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "char_emb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_1330": {
                "variable": {
                    "value": "(char_emb, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "char_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "char_emb.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv2d(char_emb)",
                            "Call"
                        ],
                        [
                            "char_emb * mask.unsqueeze(1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.relu(char_emb)",
                            "Call"
                        ],
                        [
                            "torch.max(char_emb, dim=3)",
                            "Call"
                        ],
                        [
                            "char_emb.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "char_emb",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1332": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[char_emb, word_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1349": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_1365": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_1394": {
                "variable": {
                    "value": "self.gcns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "gcns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[GraphConvolution(self.input_dim if i == 0 else self.hidden_dims[i - 1], self.hidden_dims[i]) for i in range(self.nlayers)]",
                            "ListComp"
                        ],
                        [
                            "[RelationalGraphConvolution(self.entity_input_dim if i == 0 else self.hidden_dims[i - 1], self.relation_input_dim, self.num_relations, self.hidden_dims[i], num_bases=self.num_bases) for i in range(self.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_1408": {
                "variable": {
                    "value": "self.pointer_softmax_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1409": {
                "variable": {
                    "value": "self.pointer_softmax_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1410": {
                "variable": {
                    "value": "self.pointer_softmax_squash",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_1426": {
                "variable": {
                    "value": "switch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "switch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pointer_softmax_context(target_source_representations)",
                            "Call"
                        ],
                        [
                            "switch + self.pointer_softmax_target(target_target_representations)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(switch)",
                            "Call"
                        ],
                        [
                            "switch * target_mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.pointer_softmax_squash(switch).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(switch)",
                            "Call"
                        ],
                        [
                            "switch * target_mask",
                            "BinOp"
                        ],
                        [
                            "switch.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_1429": {
                "variable": {
                    "value": "switch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "switch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pointer_softmax_context(target_source_representations)",
                            "Call"
                        ],
                        [
                            "switch + self.pointer_softmax_target(target_target_representations)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(switch)",
                            "Call"
                        ],
                        [
                            "switch * target_mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.pointer_softmax_squash(switch).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(switch)",
                            "Call"
                        ],
                        [
                            "switch * target_mask",
                            "BinOp"
                        ],
                        [
                            "switch.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1486": {
                "variable": {
                    "value": "supports",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "supports",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(supports, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.bottleneck_layer(supports)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_1521": {
                "variable": {
                    "value": "self.highways",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "highways",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.nn.Linear(self.hidden_dims[i], self.hidden_dims[i]) for i in range(self.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_1522": {
                "variable": {
                    "value": "self.input_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.entity_input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_1527": {
                "variable": {
                    "value": "self.gcns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "gcns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[GraphConvolution(self.input_dim if i == 0 else self.hidden_dims[i - 1], self.hidden_dims[i]) for i in range(self.nlayers)]",
                            "ListComp"
                        ],
                        [
                            "[RelationalGraphConvolution(self.entity_input_dim if i == 0 else self.hidden_dims[i - 1], self.relation_input_dim, self.num_relations, self.hidden_dims[i], num_bases=self.num_bases) for i in range(self.nlayers)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Bilinear_1552": {
                "variable": {
                    "value": "self.f_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "n_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_h",
                            "Method Argument"
                        ],
                        [
                            "n_h",
                            "Method Argument"
                        ]
                    ]
                },
                "in2_features": {
                    "value": "n_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_h",
                            "Method Argument"
                        ],
                        [
                            "n_h",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1563": {
                "variable": {
                    "value": "c_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_1567": {
                "variable": {
                    "value": "sc_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_k(h_pl, c_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_1568": {
                "variable": {
                    "value": "sc_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.f_k(h_mi, c_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1575": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sc_1, sc_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Bilinear_1583": {
                "variable": {
                    "value": "self.f_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "2 * n_h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "in2_features": {
                    "value": "n_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_h",
                            "Method Argument"
                        ],
                        [
                            "n_h",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1600": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sc_1, sc_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1609": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1610": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "le_41": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "P * mask",
                            "BinOp"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_42": {
                "input": {
                    "value": "P + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "log_P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(P + epsilon) * gt_zero",
                            "BinOp"
                        ],
                        [
                            "log_P * mask",
                            "BinOp"
                        ],
                        [
                            "torch.log(P + epsilon) * gt_zero",
                            "BinOp"
                        ],
                        [
                            "log_P * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "le_81": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=-1)",
                            "Call"
                        ],
                        [
                            "P * mask",
                            "BinOp"
                        ],
                        [
                            "y_true_onehot * y_pred",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_82": {
                "input": {
                    "value": "P + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_85": {
                "input": {
                    "value": "log_P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(P + epsilon) * gt_zero",
                            "BinOp"
                        ],
                        [
                            "log_P * mask",
                            "BinOp"
                        ],
                        [
                            "torch.log(P + epsilon) * gt_zero",
                            "BinOp"
                        ],
                        [
                            "log_P * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_112": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "variable"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_353": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "mask.size(1) - output.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "output.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, torch.autograd.Variable(padding)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_461": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "mask.size(1) - output.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "output.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_464": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output, torch.autograd.Variable(padding)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_485": {
                "variable": {
                    "value": "self.bias_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_486": {
                "variable": {
                    "value": "self.bias_iog",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(3 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_523": {
                "variable": {
                    "value": "mask_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(input_, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_722": {
                "variable": {
                    "value": "self.W_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_q_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_754": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_seq_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_755": {
                "variable": {
                    "value": "self.W_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_q_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_797": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_798": {
                "variable": {
                    "value": "self.W_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_930": {
                "input": {
                    "value": "torch.arange(num_timescales).type(torch.float32) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_1273": {
                "variable": {
                    "value": "self.w_head_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1274": {
                "variable": {
                    "value": "self.w_tail_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1275": {
                "variable": {
                    "value": "self.w_head_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1276": {
                "variable": {
                    "value": "self.w_tail_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1287": {
                "tensors": {
                    "value": "[Y_head, Y_tail]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_1308": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gate[i](x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_1310": {
                "variable": {
                    "value": "nonlinear",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nonlinear",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear[i](x)",
                            "Call"
                        ],
                        [
                            "F.dropout(nonlinear, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_1351": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_1399": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(P, -1)",
                            "Call"
                        ],
                        [
                            "res / mask_sum",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=dim)",
                            "Call"
                        ],
                        [
                            "res / mask_sum.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.stack(beta_list, 2)",
                            "Call"
                        ],
                        [
                            "res * x_mask.unsqueeze(2)",
                            "BinOp"
                        ],
                        [
                            "self.depthwise_conv(x) * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.relu(self.pointwise_conv(res)) * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "res.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "out",
                            "variable"
                        ],
                        [
                            "out",
                            "variable"
                        ],
                        [
                            "out",
                            "variable"
                        ],
                        [
                            "out",
                            "variable"
                        ],
                        [
                            "out",
                            "variable"
                        ],
                        [
                            "out",
                            "variable"
                        ],
                        [
                            "out",
                            "variable"
                        ],
                        [
                            "out",
                            "variable"
                        ],
                        [
                            "out",
                            "variable"
                        ],
                        [
                            "subres0 + subres1 + subres2",
                            "BinOp"
                        ],
                        [
                            "res + self.bias",
                            "BinOp"
                        ],
                        [
                            "res * Qmask.unsqueeze(1) * Cmask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.gcns[i](x, adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_1400": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "variable"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1462": {
                "variable": {
                    "value": "self.bottleneck_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "(self.entity_input_dim + self.relation_input_dim) * self.num_relations",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_bases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1463": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_bases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1465": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "(self.entity_input_dim + self.relation_input_dim) * self.num_relations",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_1467": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_1542": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "variable"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_1616": {
                "tensors": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.pad(input=o, pad=(0, 0, 0, max_feat_len - o.shape[0]), mode='constant', value=0) for o in obs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_100": {
                "input": {
                    "value": "e_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(x - torch.max(x, dim=axis, keepdim=True)[0])",
                            "Call"
                        ],
                        [
                            "e_x * m",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_144": {
                "*size": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_145": {
                "*size": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_270": {
                "*args": {
                    "value": "self.ninp if i == 0 else self.nhids[i - 1]",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor, zero_pad]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_324": {
                "variable": {
                    "value": "dropout_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_input.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_between_rnn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PackedSequence_327": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dropout_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(rnn_input.data, p=self.dropout_between_rnn_layers, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(rnn_input.data, p=self.dropout_between_rnn_layers, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "rnn_input.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_378": {
                "*args": {
                    "value": "self.ninp if i == 0 else self.nhids[i - 1] * 2",
                    "type": "IfExp",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_391": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor, zero_pad]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_432": {
                "variable": {
                    "value": "dropout_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rnn_input.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_between_rnn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PackedSequence_435": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dropout_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(rnn_input.data, p=self.dropout_between_rnn_layers, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(rnn_input.data, p=self.dropout_between_rnn_layers, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "batch_sizes": {
                    "value": "rnn_input.batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_442": {
                "variable": {
                    "value": "last_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[last_state[0], last_state[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_527": {
                "tensors": {
                    "value": "[input_, h_0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_534": {
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o in enumerate(outputs[1:], 1)",
                            "Call"
                        ],
                        [
                            "o in enumerate(outputs[1:], 1)",
                            "Call"
                        ],
                        [
                            "torch.split(pre_act, split_size_or_sections=self.hidden_size, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_534": {
                "input": {
                    "value": "c_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(f) * c_0 + torch.sigmoid(i) * torch.tanh(g)",
                            "BinOp"
                        ],
                        [
                            "c_1 * expand_mask_ + c_0 * (1 - expand_mask_)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_561": {
                "in_features": {
                    "value": "self.output_dim[i] + (self.input_p_dim if i == 0 else self.output_dim[i - 1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_562": {
                "in_features": {
                    "value": "self.input_q_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_563": {
                "data": {
                    "value": "torch.FloatTensor(self.output_dim[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_564": {
                "data": {
                    "value": "torch.FloatTensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_858": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_884": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_885": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_886": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "1024",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_887": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_888": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_889": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "out_features",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_912": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_mu + self.weight_sigma * self.weight_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias_mu + self.bias_sigma * self.bias_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_914": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias_mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_933": {
                "input": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position.unsqueeze(1) * inv_timescales.unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_933": {
                "input": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position.unsqueeze(1) * inv_timescales.unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_951": {
                "input": {
                    "value": "self.pointwise_conv(res)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_1063": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, squared_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out, mask)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out_obs)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "self.layer_dropout(out_self, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([out_obs, out_node], -1)",
                            "Call"
                        ],
                        [
                            "self.FFN_0(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1435": {
                "*size": {
                    "value": "batch_size * target_len",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "from_vocab.size(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_1520": {
                "in_features": {
                    "value": "self.hidden_dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_1539": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "variable"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_1541": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "variable"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_1544": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.highways[i](x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_1615": {
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o in enumerate(outputs[1:], 1)",
                            "Call"
                        ],
                        [
                            "o in enumerate(outputs[1:], 1)",
                            "Call"
                        ],
                        [
                            "torch.split(pre_act, split_size_or_sections=self.hidden_size, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, max_feat_len - o.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_97": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "x * m.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "x.index_select(0, idx_sort)",
                            "Call"
                        ],
                        [
                            "x[:n_nonzero]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "F.relu(res)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "node_features",
                            "variable"
                        ],
                        [
                            "self.gcns[i](x, relation_features, adj)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "gate * x + (1 - gate) * prev",
                            "BinOp"
                        ],
                        [
                            "self.pad_and_stack(x)",
                            "Call"
                        ],
                        [
                            "self.linear1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_338": {
                "sequence": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o in enumerate(outputs[1:], 1)",
                            "Call"
                        ],
                        [
                            "o in enumerate(outputs[1:], 1)",
                            "Call"
                        ],
                        [
                            "torch.split(pre_act, split_size_or_sections=self.hidden_size, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_446": {
                "sequence": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o in enumerate(outputs[1:], 1)",
                            "Call"
                        ],
                        [
                            "o in enumerate(outputs[1:], 1)",
                            "Call"
                        ],
                        [
                            "torch.split(pre_act, split_size_or_sections=self.hidden_size, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_523": {
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_529": {
                "tensors": {
                    "value": "[self.bias_f, self.bias_iog]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_529": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_532": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(words_list)",
                            "Call"
                        ],
                        [
                            "i in range(self.nlayers)",
                            "Call"
                        ],
                        [
                            "i in enumerate(outputs[1:], 1)",
                            "Call"
                        ],
                        [
                            "i in range(self.nlayers)",
                            "Call"
                        ],
                        [
                            "i in enumerate(outputs[1:], 1)",
                            "Call"
                        ],
                        [
                            "torch.split(pre_act, split_size_or_sections=self.hidden_size, dim=1)",
                            "Call"
                        ],
                        [
                            "i in range(self.nlayers)",
                            "Call"
                        ],
                        [
                            "i in enumerate(self.convs)",
                            "Call"
                        ],
                        [
                            "i in range(self.n)",
                            "Call"
                        ],
                        [
                            "i in range(self.nlayers)",
                            "Call"
                        ],
                        [
                            "i in range(self.nlayers)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_532": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(pre_act, split_size_or_sections=self.hidden_size, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_931": {
                "start": {
                    "value": "num_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LayerNorm_1049": {
                "normalized_shape": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_1090": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_1147": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_1207": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_1244": {
                "input": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(C, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(torch.bmm(S1, S2.transpose(1, 2)), C)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_1302": {
                "in_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_1303": {
                "in_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_1485": {
                "input": {
                    "value": "adj[:, relation_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.cat([node_features, _r_features], dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_280": {
                "*size": {
                    "value": "(n,) + tensor.size()[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_388": {
                "*size": {
                    "value": "(n,) + tensor.size()[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_582": {
                "tensors": {
                    "value": "[input_p, h_tm1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_649": {
                "input": {
                    "value": "curr_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_p[:, t]",
                            "Subscript"
                        ],
                        [
                            "state_stp[d - 1][t][0]",
                            "Subscript"
                        ],
                        [
                            "self.attention_layer(x, x_mask, h_tm1=previous_h)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_between_rnn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_1094": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_1151": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_1211": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1485": {
                "tensors": {
                    "value": "[node_features, _r_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "alfworld/agents/modules/memory.py": {
        "torch": {
            "sum_77": {
                "variable": {
                    "value": "game_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(accumulated_rewards)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_81": {
                "variable": {
                    "value": "count_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(accumulated_count_rewards)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_85": {
                "variable": {
                    "value": "novel_object_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(accumulated_novel_object_rewards)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_135": {
                "variable": {
                    "value": "reward_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reward_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(reward_list, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_172": {
                "variable": {
                    "value": "game_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(accumulated_rewards)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_176": {
                "variable": {
                    "value": "count_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(accumulated_count_rewards)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_180": {
                "variable": {
                    "value": "novel_object_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(accumulated_novel_object_rewards)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_267": {
                "variable": {
                    "value": "reward[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reward[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_77": {
                "tensors": {
                    "value": "accumulated_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.discount_gamma_game_reward ** i * trajectory[head + i].reward for i in range(how_long)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_rewards[:n + 1]",
                            "Subscript"
                        ],
                        [
                            "[self.discount_gamma_game_reward ** i * trajectory[head + j + i].reward for i in range(how_long)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_rewards[:1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_81": {
                "tensors": {
                    "value": "accumulated_count_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.discount_gamma_count_reward ** i * trajectory[head + i].count_reward for i in range(n + 1)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_count_rewards[:n + 1]",
                            "Subscript"
                        ],
                        [
                            "[self.discount_gamma_count_reward ** i * trajectory[head + j + i].count_reward for i in range(how_long)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_count_rewards[:1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_85": {
                "tensors": {
                    "value": "accumulated_novel_object_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.discount_gamma_novel_object_reward ** i * trajectory[head + i].novel_object_reward for i in range(n + 1)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_novel_object_rewards[:n + 1]",
                            "Subscript"
                        ],
                        [
                            "[self.discount_gamma_novel_object_reward ** i * trajectory[head + j + i].novel_object_reward for i in range(how_long)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_novel_object_rewards[:1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_172": {
                "tensors": {
                    "value": "accumulated_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.discount_gamma_game_reward ** i * trajectory[head + i].reward for i in range(how_long)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_rewards[:n + 1]",
                            "Subscript"
                        ],
                        [
                            "[self.discount_gamma_game_reward ** i * trajectory[head + j + i].reward for i in range(how_long)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_rewards[:1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_176": {
                "tensors": {
                    "value": "accumulated_count_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.discount_gamma_count_reward ** i * trajectory[head + i].count_reward for i in range(n + 1)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_count_rewards[:n + 1]",
                            "Subscript"
                        ],
                        [
                            "[self.discount_gamma_count_reward ** i * trajectory[head + j + i].count_reward for i in range(how_long)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_count_rewards[:1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_180": {
                "tensors": {
                    "value": "accumulated_novel_object_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.discount_gamma_novel_object_reward ** i * trajectory[head + i].novel_object_reward for i in range(n + 1)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_novel_object_rewards[:n + 1]",
                            "Subscript"
                        ],
                        [
                            "[self.discount_gamma_novel_object_reward ** i * trajectory[head + j + i].novel_object_reward for i in range(how_long)]",
                            "ListComp"
                        ],
                        [
                            "accumulated_novel_object_rewards[:1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "alfworld/agents/modules/model.py": {
        "torch": {
            "Linear_62": {
                "variable": {
                    "value": "self.word_embedding_prj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "BERT_EMBEDDING_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.block_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderBlock(conv_num=self.encoder_conv_num, ch_num=self.block_hidden_dim, k=5, block_hidden_dim=self.block_hidden_dim, n_head=self.n_heads, dropout=self.block_dropout) for _ in range(self.encoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.aggregation_attention_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.block_hidden_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.block_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_74": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DecoderBlock(ch_num=self.block_hidden_dim, k=5, block_hidden_dim=self.block_hidden_dim, n_head=self.n_heads, dropout=self.block_dropout) for _ in range(self.decoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.decoding_to_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.block_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "BERT_EMBEDDING_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.embedding_to_words",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "BERT_EMBEDDING_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.word_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_89": {
                "variable": {
                    "value": "self.vision_feat_seq_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.vision_input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_123": {
                "variable": {
                    "value": "squared_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_word_masks.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "input_word_masks.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_132": {
                "variable": {
                    "value": "aggregated_obs_representation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aggregated_obs_representation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.aggregation_attention(h_obs, h_td, obs_mask, td_mask)",
                            "Call"
                        ],
                        [
                            "self.aggregation_attention_proj(aggregated_obs_representation)",
                            "Call"
                        ],
                        [
                            "torch.tanh(aggregated_obs_representation)",
                            "Call"
                        ],
                        [
                            "aggregated_obs_representation * obs_mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.masked_mean(h_obs, obs_mask)",
                            "Call"
                        ],
                        [
                            "self.dynamics_aggregation(torch.cat([aggregated_obs_representation, current_dynamics], -1))",
                            "Call"
                        ],
                        [
                            "torch.relu(aggregated_obs_representation)",
                            "Call"
                        ],
                        [
                            "aggregated_obs_representation.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_151": {
                "variable": {
                    "value": "new_h_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aggregated_obs_representation] * num_candidate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_153": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.action_scorer_linear_1(torch.cat([candidate_representations, new_h_expanded], -1))",
                            "Call"
                        ],
                        [
                            "torch.relu(output)",
                            "Call"
                        ],
                        [
                            "output * cand_mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.action_scorer_extra_self_attention(output, cand_mask_squared, output, output)",
                            "Call"
                        ],
                        [
                            "self.action_scorer_extra_linear(output)",
                            "Call"
                        ],
                        [
                            "torch.relu(output)",
                            "Call"
                        ],
                        [
                            "output * cand_mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.action_scorer_linear_2(output).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "output * cand_mask",
                            "BinOp"
                        ],
                        [
                            "self.pointer_softmax(target_target_representations, target_source_representations, trg_decoder_output, trg_mask, target_source_attention, obs_mask, input_obs)",
                            "Call"
                        ]
                    ]
                }
            },
            "triu_172": {
                "variable": {
                    "value": "subsequent_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((length, length))",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_183": {
                "variable": {
                    "value": "trg_mask_square",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trg_mask.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trg_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_185": {
                "variable": {
                    "value": "obs_mask_square",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trg_mask.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "obs_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_197": {
                "variable": {
                    "value": "trg_decoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trg_decoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trg_embeddings",
                            "variable"
                        ],
                        [
                            "self.decoder[i](trg_decoder_output, trg_mask, trg_mask_square, h_obs, obs_mask_square, i * 3 + 1, self.decoder_layers)",
                            "Call"
                        ],
                        [
                            "self.decoding_to_embedding(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "torch.tanh(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "self.embedding_to_words(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "masked_softmax(trg_decoder_output, m=trg_mask.unsqueeze(-1), axis=-1)",
                            "Call"
                        ],
                        [
                            "trg_embeddings",
                            "variable"
                        ],
                        [
                            "self.decoder[i](trg_decoder_output, trg_mask, trg_mask_square, h_obs, obs_mask_square, i * 3 + 1, self.decoder_layers)",
                            "Call"
                        ],
                        [
                            "self.decoding_to_embedding(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "torch.tanh(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "self.embedding_to_words(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "masked_softmax(trg_decoder_output, m=trg_mask.unsqueeze(-1), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_208": {
                "variable": {
                    "value": "trg_mask_square",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trg_mask.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "trg_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_210": {
                "variable": {
                    "value": "obs_mask_square",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trg_mask.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "obs_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_222": {
                "variable": {
                    "value": "trg_decoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trg_decoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trg_embeddings",
                            "variable"
                        ],
                        [
                            "self.decoder[i](trg_decoder_output, trg_mask, trg_mask_square, h_obs, obs_mask_square, i * 3 + 1, self.decoder_layers)",
                            "Call"
                        ],
                        [
                            "self.decoding_to_embedding(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "torch.tanh(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "self.embedding_to_words(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "masked_softmax(trg_decoder_output, m=trg_mask.unsqueeze(-1), axis=-1)",
                            "Call"
                        ],
                        [
                            "trg_embeddings",
                            "variable"
                        ],
                        [
                            "self.decoder[i](trg_decoder_output, trg_mask, trg_mask_square, h_obs, obs_mask_square, i * 3 + 1, self.decoder_layers)",
                            "Call"
                        ],
                        [
                            "self.decoding_to_embedding(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "torch.tanh(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "self.embedding_to_words(trg_decoder_output)",
                            "Call"
                        ],
                        [
                            "masked_softmax(trg_decoder_output, m=trg_mask.unsqueeze(-1), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_231": {
                "variable": {
                    "value": "_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs_mask",
                            "Method Argument"
                        ],
                        [
                            "obs_mask",
                            "Method Argument"
                        ],
                        [
                            "obs_mask",
                            "Method Argument"
                        ],
                        [
                            "obs_mask",
                            "Method Argument"
                        ],
                        [
                            "obs_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_232": {
                "variable": {
                    "value": "obs_representations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dynamics_aggregation(torch.cat([h_obs, current_dynamics_expanded], -1))",
                            "Call"
                        ],
                        [
                            "torch.relu(h_obs)",
                            "Call"
                        ],
                        [
                            "self.dynamics_aggregation(torch.cat([h_obs, current_dynamics_expanded], -1))",
                            "Call"
                        ],
                        [
                            "torch.relu(h_obs)",
                            "Call"
                        ],
                        [
                            "h_obs",
                            "Method Argument"
                        ],
                        [
                            "h_obs",
                            "Method Argument"
                        ],
                        [
                            "h_obs",
                            "Method Argument"
                        ],
                        [
                            "h_obs",
                            "Method Argument"
                        ],
                        [
                            "h_obs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eq_233": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(obs_mask, -1)",
                            "Call"
                        ],
                        [
                            "_mask + tmp",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRUCell_69": {
                "variable": {
                    "value": "self.rnncell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.block_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.block_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.dynamics_aggregation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.block_hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.block_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_143": {
                "variable": {
                    "value": "aggregated_obs_representation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aggregated_obs_representation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.aggregation_attention(h_obs, h_td, obs_mask, td_mask)",
                            "Call"
                        ],
                        [
                            "self.aggregation_attention_proj(aggregated_obs_representation)",
                            "Call"
                        ],
                        [
                            "torch.tanh(aggregated_obs_representation)",
                            "Call"
                        ],
                        [
                            "aggregated_obs_representation * obs_mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.masked_mean(h_obs, obs_mask)",
                            "Call"
                        ],
                        [
                            "self.dynamics_aggregation(torch.cat([aggregated_obs_representation, current_dynamics], -1))",
                            "Call"
                        ],
                        [
                            "torch.relu(aggregated_obs_representation)",
                            "Call"
                        ],
                        [
                            "aggregated_obs_representation.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_158": {
                "variable": {
                    "value": "cand_mask_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cand_mask.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "cand_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_161": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.action_scorer_linear_1(torch.cat([candidate_representations, new_h_expanded], -1))",
                            "Call"
                        ],
                        [
                            "torch.relu(output)",
                            "Call"
                        ],
                        [
                            "output * cand_mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.action_scorer_extra_self_attention(output, cand_mask_squared, output, output)",
                            "Call"
                        ],
                        [
                            "self.action_scorer_extra_linear(output)",
                            "Call"
                        ],
                        [
                            "torch.relu(output)",
                            "Call"
                        ],
                        [
                            "output * cand_mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.action_scorer_linear_2(output).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "output * cand_mask",
                            "BinOp"
                        ],
                        [
                            "self.pointer_softmax(target_target_representations, target_source_representations, trg_decoder_output, trg_mask, target_source_attention, obs_mask, input_obs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_188": {
                "variable": {
                    "value": "current_dynamics_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[current_dynamics] * h_obs.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_190": {
                "variable": {
                    "value": "h_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dynamics_aggregation(torch.cat([h_obs, current_dynamics_expanded], -1))",
                            "Call"
                        ],
                        [
                            "torch.relu(h_obs)",
                            "Call"
                        ],
                        [
                            "self.dynamics_aggregation(torch.cat([h_obs, current_dynamics_expanded], -1))",
                            "Call"
                        ],
                        [
                            "torch.relu(h_obs)",
                            "Call"
                        ],
                        [
                            "h_obs",
                            "Method Argument"
                        ],
                        [
                            "h_obs",
                            "Method Argument"
                        ],
                        [
                            "h_obs",
                            "Method Argument"
                        ],
                        [
                            "h_obs",
                            "Method Argument"
                        ],
                        [
                            "h_obs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_213": {
                "variable": {
                    "value": "current_dynamics_expanded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[current_dynamics] * h_obs.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_215": {
                "variable": {
                    "value": "h_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dynamics_aggregation(torch.cat([h_obs, current_dynamics_expanded], -1))",
                            "Call"
                        ],
                        [
                            "torch.relu(h_obs)",
                            "Call"
                        ],
                        [
                            "self.dynamics_aggregation(torch.cat([h_obs, current_dynamics_expanded], -1))",
                            "Call"
                        ],
                        [
                            "torch.relu(h_obs)",
                            "Call"
                        ],
                        [
                            "h_obs",
                            "Method Argument"
                        ],
                        [
                            "h_obs",
                            "Method Argument"
                        ],
                        [
                            "h_obs",
                            "Method Argument"
                        ],
                        [
                            "h_obs",
                            "Method Argument"
                        ],
                        [
                            "h_obs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_104": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_152": {
                "tensors": {
                    "value": "[candidate_representations, new_h_expanded]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_142": {
                "tensors": {
                    "value": "[aggregated_obs_representation, current_dynamics]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_189": {
                "tensors": {
                    "value": "[h_obs, current_dynamics_expanded]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_214": {
                "tensors": {
                    "value": "[h_obs, current_dynamics_expanded]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_172": {
                "*size": {
                    "value": "(length, length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/train_mrcnn.py": {
        "torch": {
            "Subset_186": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AlfredDataset(args.data_path, get_transform(train=True), args)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dataset, indices[:-4000])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices[:-4000]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Subset_187": {
                "variable": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AlfredDataset(args.data_path, get_transform(train=False), args)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dataset_test, indices[-4000:])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices[-4000:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_190": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AlfredDataset(args.data_path, get_transform(train=True), args)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dataset, indices[:-4000])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_194": {
                "variable": {
                    "value": "data_loader_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AlfredDataset(args.data_path, get_transform(train=False), args)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.Subset(dataset_test, indices[-4000:])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.collate_fn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_209": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_212": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(params, lr=args.lr, momentum=0.9, weight_decay=0.0005)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "iscrowd",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(masks)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_141": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(boxes, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_142": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(labels, dtype=torch.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_143": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(masks, dtype=torch.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "variable": {
                    "value": "image_id",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[idx]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_175": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_228": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save_path, '%s_%03d.pth' % (args.save_name, epoch))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/train_vision_dagger.py": {
        "torch": {
            "cat_136": {
                "tensors": {
                    "value": "[ef, obs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}