{
    "data.py": {
        "torch": {
            "randint_85": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len(choices)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_90": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "param[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "high": {
                    "value": "param[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grid_sample_155": {
                "variable": {
                    "value": "image2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(image1).view(1, c, self.image_size, self.image_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "torch.tensor(deformation).view(1, self.image_size, self.image_size, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randint_54": {
                "low": {
                    "value": "w // 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "high": {
                    "value": "w - w // 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_55": {
                "low": {
                    "value": "sigma_w // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "high": {
                    "value": "sigma_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w // 8",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_56": {
                "low": {
                    "value": "-4",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "data": {
                    "value": "image1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(sample, 0)",
                            "Call"
                        ],
                        [
                            "normalize(image1)",
                            "Call"
                        ],
                        [
                            "resize(image1, (self.image_size, self.image_size), mode='constant')",
                            "Call"
                        ],
                        [
                            "to_tensor_shape(image1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_156": {
                "data": {
                    "value": "deformation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generate_deformation_grid(image1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_96": {
                "low": {
                    "value": "int(param[0] * 100)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "int(param[1] * 100)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_102": {
                "low": {
                    "value": "param[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "high": {
                    "value": "param[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "loss.py": {
        "torch": {
            "tensor_21": {
                "variable": {
                    "value": "thresh",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "2.0 / float(h)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:0'",
                            "Method Argument"
                        ],
                        [
                            "'cuda:0'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grid_sample_25": {
                "variable": {
                    "value": "pts1_projected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "deformation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deformation.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "pts2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_29": {
                "variable": {
                    "value": "cell_distances",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pts1 - pts1_projected",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_34": {
                "variable": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cell_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(pts1 - pts1_projected, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_cell_distances_row",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(cell_distances, dim=1)[0].view(b, 1, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "eq_35": {
                "variable": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cell_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(pts1 - pts1_projected, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "min_cell_distances_col",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(cell_distances, dim=2)[0].view(b, -1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_39": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s1 * s2 * torch.ge(thresh, cell_distances)",
                            "BinOp"
                        ],
                        [
                            "s.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "gt1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "s.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "gt2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "s.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_50": {
                "variable": {
                    "value": "landmark_probs1_lossa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(1.0).to(device) - torch.sum(landmark_probs1, dim=1) / torch.tensor(float(k)).to(device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_51": {
                "variable": {
                    "value": "landmark_probs1_lossb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "landmark_probs1",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "gt1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(b, s.shape[1], dtype=torch.float).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_55": {
                "variable": {
                    "value": "landmark_probs2_lossa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(1.0).to(device) - torch.sum(landmark_probs2, dim=1) / torch.tensor(float(k)).to(device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_56": {
                "variable": {
                    "value": "landmark_probs2_lossb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "landmark_probs2",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "gt2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(b, s.shape[2], dtype=torch.float).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_62": {
                "variable": {
                    "value": "desc_loss1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "desc_pairs_score",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "match_target.long().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.tensor([wt, 1 - wt]).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ge_36": {
                "input": {
                    "value": "thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(2.0 / float(h), device=device)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cell_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(pts1 - pts1_projected, dim=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_67": {
                "input": {
                    "value": "match_target * torch.max(torch.zeros_like(desc_pairs_norm).to(device), desc_pairs_norm - 0.1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_68": {
                "input": {
                    "value": "(1.0 - match_target) * torch.max(torch.zeros_like(desc_pairs_norm).to(device), 1.0 - desc_pairs_norm)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "data": {
                    "value": "float(k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "float(k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "data": {
                    "value": "[wt, 1 - wt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_32": {
                "input": {
                    "value": "cell_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(pts1 - pts1_projected, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_33": {
                "input": {
                    "value": "cell_distances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(pts1 - pts1_projected, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_50": {
                "input": {
                    "value": "landmark_probs1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_55": {
                "input": {
                    "value": "landmark_probs2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_67": {
                "input": {
                    "value": "torch.zeros_like(desc_pairs_norm).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_68": {
                "input": {
                    "value": "torch.zeros_like(desc_pairs_norm).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_67": {
                "input": {
                    "value": "desc_pairs_norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_68": {
                "input": {
                    "value": "desc_pairs_norm",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Linear_31": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_49": {
                "variable": {
                    "value": "dn1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out1.view(b, c, h1 * w1).permute(0, 2, 1).view(b, h1 * w1, 1, c)",
                            "Call"
                        ],
                        [
                            "out1.div(1e-06 + torch.unsqueeze(dn1, 3))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_51": {
                "variable": {
                    "value": "dn2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out2.view(b, c, h2 * w2).permute(0, 2, 1).view(b, 1, h2 * w2, c)",
                            "Call"
                        ],
                        [
                            "out2.div(1e-06 + torch.unsqueeze(dn2, 3))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_54": {
                "variable": {
                    "value": "out_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out1 - out2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_156": {
                "variable": {
                    "value": "heatmaps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(heatmaps)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_194": {
                "variable": {
                    "value": "all_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_pts, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_195": {
                "variable": {
                    "value": "pts_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(heatmaps)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "all_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_pts, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_198": {
                "variable": {
                    "value": "desc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "desc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.grid_sample(desc, all_pts) for desc in features]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(desc, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_142": {
                "variable": {
                    "value": "pts1_projected",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "deformation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deformation.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "pts2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool2d_164": {
                "variable": {
                    "value": "(heatmaps1, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmaps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(heatmaps)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(scale_factor, scale_factor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(scale_factor, scale_factor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_unpool2d_165": {
                "variable": {
                    "value": "heatmaps1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heatmaps1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_unpool2d(heatmaps1, indices, (scale_factor, scale_factor))",
                            "Call"
                        ],
                        [
                            "heatmaps1.to('cpu').detach().numpy().reshape(b, H, W)",
                            "Call"
                        ],
                        [
                            "heatmaps.to('cpu').detach().numpy().reshape(b, H, W)",
                            "Call"
                        ],
                        [
                            "heatmaps1 * border_mask",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(scale_factor, scale_factor)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grid_sample_197": {
                "input": {
                    "value": "desc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.grid_sample(desc, all_pts) for desc in features]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(desc, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "all_pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_pts, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_50": {
                "input": {
                    "value": "dn1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(out1, p=2, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_52": {
                "input": {
                    "value": "dn2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(out2, p=2, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_116": {
                "input": {
                    "value": "desc_pairs_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(desc_pairs_score, dim=1)[:, 1].view(b, k1, k2)",
                            "Call"
                        ],
                        [
                            "desc_pairs_score.detach().to('cpu').numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_119": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CelebADataset(root_dir, image_size=image_size, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_120": {
                "variable": {
                    "value": "validation_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "validation_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CelebADataset(root_dir, image_size=image_size, split='valid')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_124": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_141": {
                "obj": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(out_dir_wts, 'model_weights.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "unet.py": {
        "torch": {
            "Sequential_36": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_block(in_ch=in_ch, out_ch=out_ch, threeD=threeD)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_123": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_9": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_ch, out_ch, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(in_ch, out_ch, kernel_size=scale_factor, stride=scale_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(in_ch, out_ch, kernel_size=scale_factor, stride=scale_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_54": {
                "variable": {
                    "value": "self.downblocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.deconvblocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.upblocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_70": {
                "variable": {
                    "value": "self.last_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "current_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "self.out_channels[i]",
                            "Subscript"
                        ],
                        [
                            "self.out_channels[-2 - i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_71": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.last_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "current_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "self.out_channels[i]",
                            "Subscript"
                        ],
                        [
                            "self.out_channels[-2 - i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_74": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[down_features, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_9": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_10": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_15": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_23": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_24": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_28": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "from_numpy_27": {
                "variable": {
                    "value": "samp_pts",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pts.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}