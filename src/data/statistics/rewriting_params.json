{
    "baselines/neural_best_buddies/algorithms/neural_best_buddies.py": {
        "sklearn": {
            "KMeans_313": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Upsample_114": {
                "variable": {
                    "value": "upsampler",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.pow(2, level - 1))",
                            "Call"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_34": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([dy, dy, dx, dx])",
                            "Call"
                        ],
                        [
                            "tuple([dy, dy, dx, dx])",
                            "Call"
                        ],
                        [
                            "tuple([dy, dy, dx, dx])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.pad_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_35": {
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([dy, dy, dx, dx])",
                            "Call"
                        ],
                        [
                            "tuple([dy, dy, dx, dx])",
                            "Call"
                        ],
                        [
                            "tuple([dy, dy, dx, dx])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.pad_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_54": {
                "input": {
                    "value": "Variable(search_box_B)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "Variable(patch_A.contiguous())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_68": {
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([dy, dy, dx, dx])",
                            "Call"
                        ],
                        [
                            "tuple([dy, dy, dx, dx])",
                            "Call"
                        ],
                        [
                            "tuple([dy, dy, dx, dx])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.pad_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_82": {
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([dy, dy, dx, dx])",
                            "Call"
                        ],
                        [
                            "tuple([dy, dy, dx, dx])",
                            "Call"
                        ],
                        [
                            "tuple([dy, dy, dx, dx])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.pad_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_83": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([dy, dy, dx, dx])",
                            "Call"
                        ],
                        [
                            "tuple([dy, dy, dx, dx])",
                            "Call"
                        ],
                        [
                            "tuple([dy, dy, dx, dx])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.pad_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ge_122": {
                "input": {
                    "value": "F_normalized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(F - min_val) / (max_val - min_val)",
                            "BinOp"
                        ],
                        [
                            "self.Tensor(F.size()).fill_(0)",
                            "Call"
                        ],
                        [
                            "self.normalize_0_to_1(F_squared_sum)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_127": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_127": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_128": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "size[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/fid.py": {
        "tensorflow": {
            "GraphDef_35": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_37": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "FID_Inception_Net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_34": {
                "name": {
                    "value": "pth",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorShape_83": {
                "variable": {
                    "value": "o.__dict__[_shape_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "global_variables_initializer_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "stack_269": {
                "variable": {
                    "value": "images1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(images1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_276": {
                "variable": {
                    "value": "images2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(images2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "metrics/get_fid.py": {
        "tensorflow": {
            "GPUOptions_16": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "visible_device_list": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_17": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(visible_device_list='')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_20": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "baselines/neural_best_buddies/algorithms/feature_metric.py": {
        "torch": {
            "Tensor_58": {
                "variable": {
                    "value": "idnty_map",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_65": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-w.pow(2).sum(1, keepdim=True) / (2 * stdv)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_59": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "size[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_59": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_60": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "size[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/neural_best_buddies/models/vgg19_model.py": {
        "torch": {
            "Adam_78": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': deconvolved_feature}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.old_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.beta, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MSELoss_127": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "size_average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "*args": {
                    "value": "*layer",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "*args": {
                    "value": "*classifier_layer",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/neural_best_buddies/options/options.py": {
        "torch": {
            "set_device_48": {
                "device": {
                    "value": "self.opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "baselines/neural_best_buddies/pyflow/transform.py": {
        "torch": {}
    },
    "baselines/neural_best_buddies/util/draw_correspondence.py": {
        "torch": {}
    },
    "baselines/neural_best_buddies/util/util.py": {
        "torch": {
            "Upsample_52": {
                "variable": {
                    "value": "upsampler",
                    "type": "variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.pow(2, level - 1))",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'nearest'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AvgPool2d_60": {
                "variable": {
                    "value": "downsampler",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(d, d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(d, d)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_130": {
                "input": {
                    "value": "torch.abs(param.grad.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_130": {
                "input": {
                    "value": "param.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/distances.py": {
        "torch": {
            "DataLoader_99": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(before_imgs, before_seg, after_imgs, srcc)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Sampler(indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_110": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "before_segs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "before_segs.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_28": {
                "variable": {
                    "value": "self.lpips",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.lpips",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_53": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss * w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_54": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_157": {
                "start": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_74": {
                "f": {
                    "value": "os.path.join(self.before_seg, f'{key}.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_127": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/face-parsing.PyTorch/evaluate.py": {
        "torch": {
            "load_68": {
                "f": {
                    "value": "save_pth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join('res/cp', cp)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_80": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(osp.join(dspth, image_path))",
                            "Call"
                        ],
                        [
                            "to_tensor(image)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img, 0)",
                            "Call"
                        ],
                        [
                            "img.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/face-parsing.PyTorch/face_dataset.py": {
        "torch": {}
    },
    "metrics/face-parsing.PyTorch/logger.py": {
        "torch": {
            "is_initialized_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metrics/face-parsing.PyTorch/loss.py": {
        "torch": {
            "Sequential_50": {
                "variable": {
                    "value": "net1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 19, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "net2",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 19, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_67": {
                "variable": {
                    "value": "logits1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net1(inten)",
                            "Call"
                        ],
                        [
                            "F.interpolate(logits1, inten.size()[2:], mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "inten.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_69": {
                "variable": {
                    "value": "logits2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net2(inten)",
                            "Call"
                        ],
                        [
                            "F.interpolate(logits2, inten.size()[2:], mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "inten.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_18": {
                "variable": {
                    "value": "self.criteria",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Method Argument"
                        ],
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sort_23": {
                "variable": {
                    "value": "(loss, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss1 + loss2",
                            "BinOp"
                        ],
                        [
                            "self.criteria(logits, labels).view(-1)",
                            "Call"
                        ],
                        [
                            "loss[loss > self.thresh]",
                            "Subscript"
                        ],
                        [
                            "loss[:self.n_min]",
                            "Subscript"
                        ],
                        [
                            "self.nll(log_score, labels)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "NLLLoss_35": {
                "variable": {
                    "value": "self.nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Method Argument"
                        ],
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_38": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_39": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_40": {
                "variable": {
                    "value": "log_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_47": {
                "seed": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_62": {
                "variable": {
                    "value": "inten",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_63": {
                "variable": {
                    "value": "lbs",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "[16, 20, 20]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_28": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss1 + loss2",
                            "BinOp"
                        ],
                        [
                            "self.criteria(logits, labels).view(-1)",
                            "Call"
                        ],
                        [
                            "loss[loss > self.thresh]",
                            "Subscript"
                        ],
                        [
                            "loss[:self.n_min]",
                            "Subscript"
                        ],
                        [
                            "self.nll(log_score, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_15": {
                "input": {
                    "value": "torch.tensor(thresh, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "data": {
                    "value": "thresh",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/face-parsing.PyTorch/model.py": {
        "torch": {
            "randn_279": {
                "variable": {
                    "value": "in_ten",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "640",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "480",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chan",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chan",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_chan",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_chan",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv_atten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_chan",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chan",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "variable": {
                    "value": "self.bn_atten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_chan",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_73": {
                "variable": {
                    "value": "self.sigmoid_atten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_78": {
                "variable": {
                    "value": "atten",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(feat)",
                            "Call"
                        ],
                        [
                            "self.conv3(feat)",
                            "Call"
                        ],
                        [
                            "self.conv_out(feat)",
                            "Call"
                        ],
                        [
                            "self.convblk(fcat)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "feat.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_82": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(feat)",
                            "Call"
                        ],
                        [
                            "self.conv3(feat)",
                            "Call"
                        ],
                        [
                            "self.conv_out(feat)",
                            "Call"
                        ],
                        [
                            "self.convblk(fcat)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "atten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(feat, feat.size()[2:])",
                            "Call"
                        ],
                        [
                            "self.conv_atten(atten)",
                            "Call"
                        ],
                        [
                            "self.bn_atten(atten)",
                            "Call"
                        ],
                        [
                            "self.sigmoid_atten(atten)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(feat, feat.size()[2:])",
                            "Call"
                        ],
                        [
                            "self.conv1(atten)",
                            "Call"
                        ],
                        [
                            "self.relu(atten)",
                            "Call"
                        ],
                        [
                            "self.conv2(atten)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(atten)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_111": {
                "variable": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat32",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "feat32.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_113": {
                "variable": {
                    "value": "avg_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(feat32, feat32.size()[2:])",
                            "Call"
                        ],
                        [
                            "self.conv_avg(avg)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H32, W32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_117": {
                "variable": {
                    "value": "feat32_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat32_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat32_arm + avg_up",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(H16, W16)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_122": {
                "variable": {
                    "value": "feat16_up",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat16_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat16_arm + feat32_up",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(H8, W8)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_184": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_chan",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chan // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_chan // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chan",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_196": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_197": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "fcat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fsp, fcp]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_203": {
                "variable": {
                    "value": "atten",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(feat)",
                            "Call"
                        ],
                        [
                            "self.conv3(feat)",
                            "Call"
                        ],
                        [
                            "self.conv_out(feat)",
                            "Call"
                        ],
                        [
                            "self.convblk(fcat)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "feat.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_208": {
                "variable": {
                    "value": "feat_atten",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(feat)",
                            "Call"
                        ],
                        [
                            "self.conv3(feat)",
                            "Call"
                        ],
                        [
                            "self.conv_out(feat)",
                            "Call"
                        ],
                        [
                            "self.convblk(fcat)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "atten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(feat, feat.size()[2:])",
                            "Call"
                        ],
                        [
                            "self.conv_atten(atten)",
                            "Call"
                        ],
                        [
                            "self.bn_atten(atten)",
                            "Call"
                        ],
                        [
                            "self.sigmoid_atten(atten)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(feat, feat.size()[2:])",
                            "Call"
                        ],
                        [
                            "self.conv1(atten)",
                            "Call"
                        ],
                        [
                            "self.relu(atten)",
                            "Call"
                        ],
                        [
                            "self.conv2(atten)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(atten)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_251": {
                "variable": {
                    "value": "feat_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feat_atten + feat",
                            "BinOp"
                        ],
                        [
                            "self.conv_out(feat_fuse)",
                            "Call"
                        ],
                        [
                            "F.interpolate(feat_out, (H, W), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_252": {
                "variable": {
                    "value": "feat_out16",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_out16",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_out16(feat_cp8)",
                            "Call"
                        ],
                        [
                            "F.interpolate(feat_out16, (H, W), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_253": {
                "variable": {
                    "value": "feat_out32",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_out32",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_out32(feat_cp16)",
                            "Call"
                        ],
                        [
                            "F.interpolate(feat_out32, (H, W), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/face-parsing.PyTorch/modules/bn.py": {
        "torch": {
            "batch_norm_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.batch_norm(x, self.running_mean, self.running_var, self.weight, self.bias, self.training, self.momentum, self.eps)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_51": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_66": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.batch_norm(x, self.running_mean, self.running_var, self.weight, self.bias, self.training, self.momentum, self.eps)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_45": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "leaky_relu_68": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.batch_norm(x, self.running_mean, self.running_var, self.weight, self.bias, self.training, self.momentum, self.eps)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.slope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_70": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.batch_norm(x, self.running_mean, self.running_var, self.weight, self.bias, self.training, self.momentum, self.eps)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/face-parsing.PyTorch/modules/deeplab.py": {
        "torch": {
            "ModuleList_20": {
                "variable": {
                    "value": "self.map_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(in_channels, hidden_channels, 1, bias=False), nn.Conv2d(in_channels, hidden_channels, 3, bias=False, dilation=dilations[0], padding=dilations[0]), nn.Conv2d(in_channels, hidden_channels, 3, bias=False, dilation=dilations[1], padding=dilations[1]), nn.Conv2d(in_channels, hidden_channels, 3, bias=False, dilation=dilations[2], padding=dilations[2])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.global_pooling_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.red_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_channels * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.pool_red_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[m(x) for m in self.map_convs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_82": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pooling_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(min(try_index(self.pooling_size, 0), x.shape[2]), min(try_index(self.pooling_size, 1), x.shape[3]))",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_83": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._global_pooling(x)",
                            "Call"
                        ],
                        [
                            "self.global_pooling_conv(pool)",
                            "Call"
                        ],
                        [
                            "self.global_pooling_bn(pool)",
                            "Call"
                        ],
                        [
                            "self.pool_red_conv(pool)",
                            "Call"
                        ],
                        [
                            "pool.repeat(1, 1, x.size(2), x.size(3))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1).mean(dim=-1)",
                            "Call"
                        ],
                        [
                            "pool.view(x.size(0), x.size(1), 1, 1)",
                            "Call"
                        ],
                        [
                            "functional.avg_pool2d(x, pooling_size, stride=1)",
                            "Call"
                        ],
                        [
                            "functional.pad(pool, pad=padding, mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((pooling_size[1] - 1) // 2, (pooling_size[1] - 1) // 2 if pooling_size[1] % 2 == 1 else (pooling_size[1] - 1) // 2 + 1, (pooling_size[0] - 1) // 2, (pooling_size[0] - 1) // 2 if pooling_size[0] % 2 == 1 else (pooling_size[0] - 1) // 2 + 1)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilations[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilations[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilations[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilations[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilations[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilations[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "metrics/face-parsing.PyTorch/modules/dense.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self.convs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_17": {
                "variable": {
                    "value": "self.convs3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "inputs + [x]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_42": {
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "inputs + [x]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "*args": {
                    "value": "OrderedDict([('bn', norm_act(in_channels)), ('conv', nn.Conv2d(in_channels, self.growth * bottleneck_factor, 1, bias=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "*args": {
                    "value": "OrderedDict([('bn', norm_act(self.growth * bottleneck_factor)), ('conv', nn.Conv2d(self.growth * bottleneck_factor, self.growth, 3, padding=dilation, bias=False, dilation=dilation))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels + self.growth",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.growth * bottleneck_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "self.growth * bottleneck_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.growth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "metrics/face-parsing.PyTorch/modules/functions.py": {
        "torch": {
            "load_10": {
                "variable": {
                    "value": "_backend",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "inplace_abn",
                    "type": "str",
                    "possible_values": []
                },
                "extra_cflags": {
                    "value": "['-O3']",
                    "type": "List",
                    "possible_values": []
                },
                "sources": {
                    "value": "[path.join(_src_path, f) for f in ['inplace_abn.cpp', 'inplace_abn_cpu.cpp', 'inplace_abn_cuda.cu', 'inplace_abn_cuda_half.cu']]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "extra_cuda_cflags": {
                    "value": "['--expt-extended-lambda']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_initialized_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metrics/face-parsing.PyTorch/modules/misc.py": {
        "torch": {}
    },
    "metrics/face-parsing.PyTorch/modules/residual.py": {
        "torch": {
            "Sequential_72": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(layers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.proj_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/face-parsing.PyTorch/optimizer.py": {
        "torch": {
            "SGD_34": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "param_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': wd_params}, {'params': nowd_params, 'weight_decay': 0}, {'params': lr_mul_wd_params, 'lr_mul': True}, {'params': lr_mul_nowd_params, 'weight_decay': 0, 'lr_mul': True}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr0",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/face-parsing.PyTorch/resnet.py": {
        "torch": {
            "randn_104": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_chan",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_chan",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(residual)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_64": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_chan, out_chan, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "in_chan",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chan",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "out_chan",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/face-parsing.PyTorch/test.py": {
        "torch": {
            "load_60": {
                "f": {
                    "value": "save_pth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join('res/cp', cp)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(osp.join(dspth, image_path))",
                            "Call"
                        ],
                        [
                            "to_tensor(image)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img, 0)",
                            "Call"
                        ],
                        [
                            "img.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/face-parsing.PyTorch/train.py": {
        "torch": {
            "DistributedSampler_63": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FaceMask(data_root, cropsize=cropsize, mode='train')",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FaceMask(data_root, cropsize=cropsize, mode='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "n_img_per_gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(ds)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_77": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BiSeNet(n_classes=n_classes)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(net, device_ids=[args.local_rank], output_device=args.local_rank)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_46": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_124": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lb.cuda()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(lb, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_174": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.module.state_dict() if hasattr(net, 'module') else net.state_dict()",
                            "IfExp"
                        ],
                        [
                            "net.module.state_dict() if hasattr(net, 'module') else net.state_dict()",
                            "IfExp"
                        ]
                    ]
                },
                "f": {
                    "value": "save_pth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(respth, 'model_final_diss.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_166": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.module.state_dict() if hasattr(net, 'module') else net.state_dict()",
                            "IfExp"
                        ],
                        [
                            "net.module.state_dict() if hasattr(net, 'module') else net.state_dict()",
                            "IfExp"
                        ]
                    ]
                },
                "f": {
                    "value": "'./res/cp/{}_iter.pth'.format(it)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/load_seg.py": {
        "torch": {
            "interpolate_27": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(xs, size=(512, 512))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_33": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "interpolate_34": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(results).float()",
                            "Call"
                        ],
                        [
                            "F.interpolate(masks, size=og_size).long()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "og_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xs.shape[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_31": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "out.squeeze(0).cpu().numpy().argmax(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_31": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/make_watermark_images.py": {
        "torch": {
            "DataLoader_121": {
                "variable": {
                    "value": "z_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "IndexDataset(zds)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Sampler()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metrics/num_smiles.py": {
        "torch": {
            "sigmoid_45": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(img)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/patch_metrics/fid_image_patches.py": {
        "torch": {
            "stack_51": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images[:N]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metrics/sample.py": {
        "torch": {
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metrics/sample_edited.py": {
        "torch": {
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metrics/seg_correct_mod.py": {
        "torch": {
            "DataLoader_45": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dataset(before, after, tgtc, srcc)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Sampler(indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_54": {
                "variable": {
                    "value": "before_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "before_segs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "before_segs.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_58": {
                "variable": {
                    "value": "after_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mapped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "after_segs[before_mask > 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_80": {
                "start": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_19": {
                "f": {
                    "value": "os.path.join(self.before, f'{key}.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_21": {
                "f": {
                    "value": "os.path.join(self.after, f'{key}.pth')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/seg_stats.py": {
        "torch": {
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_33": {
                "obj": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "rewrite/ganrewrite.py": {
        "torch": {
            "symeig_822": {
                "variable": {
                    "value": "(evals, evecs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cov.double()",
                    "type": "Call",
                    "possible_values": []
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mm_823": {
                "input": {
                    "value": "evecs",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.diag(evals.sqrt().clamp(1e-20).reciprocal())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_213": {
                "variable": {
                    "value": "lambda_param",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ws[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "ws[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "context.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "ws[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "original_weight.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_234": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[lambda_param]",
                            "List"
                        ],
                        [
                            "[weight]",
                            "List"
                        ],
                        [
                            "list(self.model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "Method Argument"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_277": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[lambda_param]",
                            "List"
                        ],
                        [
                            "[weight]",
                            "List"
                        ],
                        [
                            "list(self.model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "Method Argument"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_322": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[lambda_param]",
                            "List"
                        ],
                        [
                            "[weight]",
                            "List"
                        ],
                        [
                            "list(self.model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "Method Argument"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ],
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_604": {
                "variable": {
                    "value": "lowres",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.v_shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_808": {
                "variable": {
                    "value": "cosine_map",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "goiyx, di -> godyx",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_weights()",
                            "Call"
                        ],
                        [
                            "self.target_weights()",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_809": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "godyx, di -> goiyx",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cosine_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('goiyx, di -> godyx', weight, direction)",
                            "Call"
                        ],
                        [
                            "torch.einsum('oiyx, di -> odyx', weight, direction)",
                            "Call"
                        ],
                        [
                            "(weight * direction[None, :, None, None]).sum(1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_811": {
                "variable": {
                    "value": "cosine_map",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "oiyx, di -> odyx",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_weights()",
                            "Call"
                        ],
                        [
                            "self.target_weights()",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_812": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "odyx, di -> oiyx",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cosine_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('goiyx, di -> godyx', weight, direction)",
                            "Call"
                        ],
                        [
                            "torch.einsum('oiyx, di -> odyx', weight, direction)",
                            "Call"
                        ],
                        [
                            "(weight * direction[None, :, None, None]).sum(1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_105": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_110": {
                "input": {
                    "value": "self.zca_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k.permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_110": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l1_loss_228": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.target_acts(val)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "self.target_acts(self.target_model(key))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_413": {
                "variable": {
                    "value": "all_k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.covariance_adjusted_key(nonzero_k, k_outs) for (nonzero_k, k_outs) in accumulated_k]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "svd_419": {
                "variable": {
                    "value": "(u, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "all_k.permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "some": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_464": {
                "variable": {
                    "value": "all_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs for (obs, _) in accumulated_obs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_465": {
                "variable": {
                    "value": "all_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w for (_, w) in accumulated_obs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "permute_703": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_760": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_loss_198": {
                "input": {
                    "value": "self.target_acts(val)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "self.target_acts(self.target_model(key))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "synchronize_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_loss_268": {
                "input": {
                    "value": "self.target_acts(val)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "self.target_acts(self.target_model(key))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "synchronize_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_338": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "qr_370": {
                "variable": {
                    "value": "(q, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "row_dirs.permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_389": {
                "variable": {
                    "value": "all_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs for (obs, _) in accumulated_obs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_390": {
                "variable": {
                    "value": "all_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w for (_, w) in accumulated_obs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_396": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "all_obs.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "all_obs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_429": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_444": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_454": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_532": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_584": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_597": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_611": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_632": {
                "variable": {
                    "value": "z_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.get_z(imgnum) for imgnum in imgnum_batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mm_109": {
                "input": {
                    "value": "self.zca_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "k[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_221": {
                "equation": {
                    "value": "godyx, di -> goiyx",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "lambda_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(ws[0], ws[1], context.shape[0], ws[3], ws[4], device=original_weight.device, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "enable_grad_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_245": {
                "equation": {
                    "value": "godyx, di -> goiyx",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "lambda_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(ws[0], ws[1], context.shape[0], ws[3], ws[4], device=original_weight.device, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_loss_316": {
                "input": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "enable_grad_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_353": {
                "variable": {
                    "value": "all_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs[(w > 0).nonzero()[:, 0], :] for (obs, _, w) in accumulated_obs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_355": {
                "variable": {
                    "value": "all_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w[w > 0] for (_, _, w) in accumulated_obs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_357": {
                "variable": {
                    "value": "all_zca_k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(w * self.zca_whitened_query_key(obs))[(w > 0).nonzero()[:, 0], :] for (obs, outs, w) in accumulated_obs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_543": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_556": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_569": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_631": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "lstsq_104": {
                "input": {
                    "value": "k[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "A": {
                    "value": "self.c_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lstsq_105": {
                "input": {
                    "value": "k.permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "A": {
                    "value": "self.c_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_317": {
                "input": {
                    "value": "VF(gt)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "VF(pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_392": {
                "input": {
                    "value": "1.0 - rq.normalize(all_obs.permute(1, 0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_392": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lstsq_702": {
                "input": {
                    "value": "k[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "A": {
                    "value": "self.c_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lstsq_703": {
                "input": {
                    "value": "k.permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "A": {
                    "value": "self.c_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lstsq_759": {
                "input": {
                    "value": "k[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "A": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c_matrix * kout.style[0][None, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "lstsq_760": {
                "input": {
                    "value": "k.permute(1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "A": {
                    "value": "cs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.c_matrix * kout.style[0][None, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_823": {
                "input": {
                    "value": "evals.sqrt().clamp(1e-20).reciprocal()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_195": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_weights()",
                            "Call"
                        ],
                        [
                            "self.target_weights()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_398": {
                "start": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rewrite/rewriteapp.py": {
        "torch": {
            "symeig_745": {
                "variable": {
                    "value": "(evals, evecs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cov.double()",
                    "type": "Call",
                    "possible_values": []
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mm_746": {
                "input": {
                    "value": "evecs",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.diag(evals.sqrt().clamp(1e-20).reciprocal())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_731": {
                "variable": {
                    "value": "cosine_map",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "goiyx, di -> godyx",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "einsum_732": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "godyx, di -> goiyx",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cosine_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('goiyx, di -> godyx', weight, direction)",
                            "Call"
                        ],
                        [
                            "torch.einsum('oiyx, di -> odyx', weight, direction)",
                            "Call"
                        ],
                        [
                            "(weight * direction[None, :, None, None]).sum(1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_734": {
                "variable": {
                    "value": "cosine_map",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "oiyx, di -> odyx",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "einsum_735": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "odyx, di -> oiyx",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "cosine_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('goiyx, di -> godyx', weight, direction)",
                            "Call"
                        ],
                        [
                            "torch.einsum('oiyx, di -> odyx', weight, direction)",
                            "Call"
                        ],
                        [
                            "(weight * direction[None, :, None, None]).sum(1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_422": {
                "variable": {
                    "value": "obj_area",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj_acts.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "obj_acts.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_451": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "diag_746": {
                "input": {
                    "value": "evals.sqrt().clamp(1e-20).reciprocal()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/get_samples.py": {
        "torch": {
            "stack_94": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[] for _ in range(len(crop_sizes))]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(images)",
                            "Call"
                        ],
                        [
                            "[[] for _ in range(len(crop_sizes))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_83": {
                "variable": {
                    "value": "images[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_128": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(samples, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_167": {
                "variable": {
                    "value": "images[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/imgviz.py": {
        "torch": {
            "full_298": {
                "variable": {
                    "value": "strip",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(row.shape[1], row.shape[0] * (row.shape[2] + gap) - gap, row.shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "bg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "row.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_311": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "variable"
                        ],
                        [
                            "out",
                            "variable"
                        ],
                        [
                            "activations",
                            "variable"
                        ],
                        [
                            "activations[unit]",
                            "Subscript"
                        ],
                        [
                            "upsampler(a[None, None, ...], mode=mode)[0, 0].cpu()",
                            "Call"
                        ],
                        [
                            "activations",
                            "variable"
                        ],
                        [
                            "activations[unit]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_282": {
                "tensors": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_113": {
                "data": {
                    "value": "border_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[255.0, 255.0, 0]",
                            "List"
                        ],
                        [
                            "torch.tensor(border_color, dtype=border.dtype, device=border.device)[:, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "border.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "border.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_142": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_183": {
                "input": {
                    "value": "renormalizer(imagedata).float()[None, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "data": {
                    "value": "inside_color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(inside_color, dtype=border.dtype, device=border.device)[:, None, None]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "border.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "border.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "data": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "aborder.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/nethook.py": {
        "torch": {
            "from_numpy_306": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.array(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_401": {
                "*args": {
                    "value": "included_children",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/proggan.py": {
        "torch": {
            "interpolate_142": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(x.shape[0], x.shape[1], 1, 1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "x * self.scale + self.b.view(1, -1, 1, 1).expand(x_size[0], self.size, x_size[2], x_size[3])",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_150": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_46": {
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_247": {
                "ndarray": {
                    "value": "data.eval()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_137": {
                "input": {
                    "value": "torch.mean(x ** 2, dim=1, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_150": {
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_137": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_168": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_177": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_181": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Hardtanh_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/quickdissect.py": {
        "torch": {}
    },
    "utils/renormalize.py": {
        "torch": {
            "from_numpy_120": {
                "variable": {
                    "value": "self.mul",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.array(oldscale) / numpy.array(newscale)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "self.add",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "(numpy.array(oldoffset) - numpy.array(newoffset)) / numpy.array(newscale)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/runningstats.py": {
        "torch": {
            "bernoulli_1194": {
                "variable": {
                    "value": "bits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros(vec.shape[0], dtype=torch.uint8, device=vec.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_1224": {
                "variable": {
                    "value": "test_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_1256": {
                "variable": {
                    "value": "minerr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(qc.minmax().cpu()[:, 0] - torch.arange(qc.depth, dtype=torch.float) * amount)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_1258": {
                "variable": {
                    "value": "maxerr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(qc.minmax().cpu()[:, -1] + 1 - (torch.arange(qc.depth, dtype=torch.float) + 1) * amount)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_1261": {
                "variable": {
                    "value": "interr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(qc.integrate(lambda x: x * x).cpu() - actual_sum) / actual_sum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_1264": {
                "variable": {
                    "value": "medianerr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(qc.median() - alldata.median(0)[0]) / alldata.median(0)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_1267": {
                "variable": {
                    "value": "meanerr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(qc.mean() - alldata.mean(0)) / alldata.mean(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_1270": {
                "variable": {
                    "value": "varerr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(qc.variance() - alldata.var(0)) / alldata.var(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_140": {
                "variable": {
                    "value": "self.top_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['top_data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_141": {
                "variable": {
                    "value": "self.top_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['top_index']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_265": {
                "variable": {
                    "value": "self._grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['grid']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_322": {
                "variable": {
                    "value": "self.extremes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_454": {
                "variable": {
                    "value": "self.extremes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['extremes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_529": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "sum(self.firstfree)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_564": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "quantiles.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_609": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.arange(float(amount))",
                            "Call"
                        ],
                        [
                            "data / 2",
                            "BinOp"
                        ],
                        [
                            "self.data[index][:, 0:self.firstfree[index]]",
                            "Subscript"
                        ],
                        [
                            "data.sort()[0]",
                            "Subscript"
                        ],
                        [
                            "self.data[index][:, :amount]",
                            "Subscript"
                        ],
                        [
                            "data.sort()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_686": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(conditions), self.first_rq.depth, len(quantiles))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.first_rq.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.first_rq.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_697": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(conditions), values.shape[0], values.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.first_rq.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_818": {
                "variable": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_819": {
                "variable": {
                    "value": "self.v_cmom2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['cmom2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_980": {
                "variable": {
                    "value": "self.cmom2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['cmom2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1068": {
                "variable": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['mean']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1069": {
                "variable": {
                    "value": "self.cmom2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['cmom2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1120": {
                "variable": {
                    "value": "self.mom2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['mom2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_1178": {
                "variable": {
                    "value": "self._bincount",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['bincount']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_1233": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mm_1306": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_1342": {
                "variable": {
                    "value": "self.total_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dic['total_a']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_1343": {
                "variable": {
                    "value": "self.total_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dic['total_b']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_1344": {
                "variable": {
                    "value": "self.intersection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dic['intersection']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "self.top_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(numpy.prod(self.data_shape))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "data.new()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_232": {
                "variable": {
                    "value": "self._grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.data_shape",
                            "Attribute"
                        ],
                        [
                            "(shape,)",
                            "Tuple"
                        ],
                        [
                            "shape + (self.k,) + data.shape",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_377": {
                "variable": {
                    "value": "self.data[0][:, ff:ff + copycount]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming[index:index + copycount, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sort_540": {
                "variable": {
                    "value": "(summary, order)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.depth, size, dtype=self.dtype, device=self.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.extremes[:, :1], summary, self.extremes[:, 1:]], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_542": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.extremes[:, :1], summary, self.extremes[:, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_545": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(weights.shape[0], 1), weights, torch.zeros(weights.shape[0], 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_552": {
                "variable": {
                    "value": "quantiles",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "quantiles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "torch.tensor(quantiles)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_571": {
                "variable": {
                    "value": "result[d]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "numpy.interp(nq, ncw[d], nsm[d])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_580": {
                "variable": {
                    "value": "term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fun(self.data[level][:, :ff]) * 2.0 ** level",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_608": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(size)",
                            "Call"
                        ],
                        [
                            "weights[order.view(-1).cpu()].view(order.shape)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros(weights.shape[0], 1), weights, torch.zeros(weights.shape[0], 1)], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_615": {
                "variable": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "numpy.interp(ndata[d], nsm[d], ncw[d])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_1194": {
                "*size": {
                    "value": "vec.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "vec.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_1253": {
                "input": {
                    "value": "torch.abs(ro - gt) / amount",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1256": {
                "input": {
                    "value": "qc.minmax().cpu()[:, 0] - torch.arange(qc.depth, dtype=torch.float) * amount",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1258": {
                "input": {
                    "value": "qc.minmax().cpu()[:, -1] + 1 - (torch.arange(qc.depth, dtype=torch.float) + 1) * amount",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_143": {
                "ndarray": {
                    "value": "dic['linear_index']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_320": {
                "*size": {
                    "value": "self.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.resolution",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_411": {
                "input": {
                    "value": "torch.stack([self.extremes[:, 0], minr])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_413": {
                "input": {
                    "value": "torch.stack([self.extremes[:, -1], maxr])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_555": {
                "size": {
                    "value": "(self.depth,) + qshape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "torch.nan",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_557": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(size)",
                            "Call"
                        ],
                        [
                            "weights[order.view(-1).cpu()].view(order.shape)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros(weights.shape[0], 1), weights, torch.zeros(weights.shape[0], 1)], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_563": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(size)",
                            "Call"
                        ],
                        [
                            "weights[order.view(-1).cpu()].view(order.shape)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros(weights.shape[0], 1), weights, torch.zeros(weights.shape[0], 1)], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "linspace_596": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cumsum_607": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(size)",
                            "Call"
                        ],
                        [
                            "weights[order.view(-1).cpu()].view(order.shape)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros(weights.shape[0], 1), weights, torch.zeros(weights.shape[0], 1)], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "isnan_956": {
                "input": {
                    "value": "cor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rstdev[0][:, None] * covariance * rstdev[1][None, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_977": {
                "ndarray": {
                    "value": "dic[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_978": {
                "ndarray": {
                    "value": "dic[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_1251": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "amount",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.test_size",
                            "Attribute"
                        ],
                        [
                            "self.firstfree[index]",
                            "Subscript"
                        ]
                    ]
                },
                "steps": {
                    "value": "quantiles + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1261": {
                "input": {
                    "value": "qc.integrate(lambda x: x * x).cpu() - actual_sum",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_407": {
                "input": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": [
                        [
                            "incoming[index:]",
                            "Subscript"
                        ],
                        [
                            "sample_portion(incoming, self.samplerate)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_408": {
                "input": {
                    "value": "incoming",
                    "type": "variable",
                    "possible_values": [
                        [
                            "incoming[index:]",
                            "Subscript"
                        ],
                        [
                            "sample_portion(incoming, self.samplerate)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_412": {
                "tensors": {
                    "value": "[self.extremes[:, 0], minr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_414": {
                "tensors": {
                    "value": "[self.extremes[:, -1], maxr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_451": {
                "ndarray": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.zeros((d.shape[1], s), dtype=d.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_482": {
                "*size": {
                    "value": "self.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "cap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._next_capacity()",
                            "Call"
                        ],
                        [
                            "int(math.ceil(self.resolution * 0.67 ** len(self.data)))",
                            "Call"
                        ],
                        [
                            "-8 * (-cap // 8)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_1252": {
                "start": {
                    "value": "qc.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_1253": {
                "input": {
                    "value": "ro - gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_69": {
                "start": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(numpy.prod(self.data_shape))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.top_index.new()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_546": {
                "*size": {
                    "value": "weights.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_547": {
                "*size": {
                    "value": "weights.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_1257": {
                "start": {
                    "value": "qc.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_1264": {
                "input": {
                    "value": "qc.median() - alldata.median(0)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1268": {
                "input": {
                    "value": "qc.mean() - alldata.mean(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1271": {
                "input": {
                    "value": "qc.variance() - alldata.var(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_1259": {
                "start": {
                    "value": "qc.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_1273": {
                "*size": {
                    "value": "x.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/sampler.py": {
        "torch": {}
    },
    "utils/segdata.py": {
        "torch": {
            "zeros_60": {
                "variable": {
                    "value": "segout",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.categories)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "segin.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "ndarray": {
                    "value": "segin[:, :, field.index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/segmenter.py": {
        "torch": {
            "bincount_682": {
                "variable": {
                    "value": "bc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(tensor_images.shape[0], 1, tensor_images.shape[2] // downsample, tensor_images.shape[3] // downsample)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor_images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(tensor_images.shape[0], 1, tensor_images.shape[2] // downsample, tensor_images.shape[3] // downsample)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor_images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flip_253": {
                "variable": {
                    "value": "tensor_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tensor_images + 1) / 2 * 255",
                            "BinOp"
                        ],
                        [
                            "torch.flip(tensor_images, (1,))",
                            "Call"
                        ],
                        [
                            "tensor_images - torch.tensor([102.9801, 115.9465, 122.7717]).to(dtype=tensor_images.dtype, device=tensor_images.device)[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "torch.flip(tensor_images, (1,))",
                            "Call"
                        ],
                        [
                            "((tensor_images + 1) / 2).sub_(self.imagemean[None, :, None, None].to(tensor_images.device)).div_(self.imagestd[None, :, None, None].to(tensor_images.device))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_297": {
                "variable": {
                    "value": "segs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tensor_images)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3 + piece_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "seg_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor_images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_300": {
                "variable": {
                    "value": "(_, segs[:, 0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred['object']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_302": {
                "variable": {
                    "value": "(_, segs[:, 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred['material']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_418": {
                "variable": {
                    "value": "self.imagemean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "segmodel.meta.imageformat.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_419": {
                "variable": {
                    "value": "self.imagestd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "segmodel.meta.imageformat.stdev",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_482": {
                "variable": {
                    "value": "segs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tensor_images)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(self.category_rules)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "pred.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_519": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tensor_images)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_underlying_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "seg_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "seg_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_584": {
                "variable": {
                    "value": "labeled",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labeled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(labeled).to(segmentation_batch.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_105": {
                "tensors": {
                    "value": "segresult",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "*size": {
                    "value": "(tensor_images.shape[0], 1, tensor_images.shape[2] // downsample, tensor_images.shape[3] // downsample)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor_images.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_479": {
                "variable": {
                    "value": "(_, segs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, catindex]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_509": {
                "variable": {
                    "value": "tensor_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(tensor_images + 1) / 2 * 255",
                            "BinOp"
                        ],
                        [
                            "torch.flip(tensor_images, (1,))",
                            "Call"
                        ],
                        [
                            "tensor_images - torch.tensor([102.9801, 115.9465, 122.7717]).to(dtype=tensor_images.dtype, device=tensor_images.device)[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "torch.flip(tensor_images, (1,))",
                            "Call"
                        ],
                        [
                            "((tensor_images + 1) / 2).sub_(self.imagemean[None, :, None, None].to(tensor_images.device)).div_(self.imagestd[None, :, None, None].to(tensor_images.device))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_like_529": {
                "variable": {
                    "value": "softmax_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.segmodel(dict(img_data=resized), segSize=seg_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "NLLLoss_640": {
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_254": {
                "data": {
                    "value": "[102.9801, 115.9465, 122.7717]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_260": {
                "*size": {
                    "value": "len(tensor_images)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(self.segmodel.labeldata[category])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "seg_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "seg_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_264": {
                "*size": {
                    "value": "len(tensor_images)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(partindex)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "seg_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "seg_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_358": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((tensor_images.shape[0], 1, tensor_images.shape[2] // downsample, tensor_images.shape[3] // downsample), dtype=torch.uint8, device=tensor_images.device)",
                            "Call"
                        ],
                        [
                            "segs[:, 0] == object_index",
                            "Compare"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "pred['object'].max(dim=1)[1] == classnum",
                            "Compare"
                        ],
                        [
                            "mask2",
                            "variable"
                        ],
                        [
                            "torch.max(mask, mask2)",
                            "Call"
                        ],
                        [
                            "segs[:, 3:] <= self.num_object_classes",
                            "Compare"
                        ],
                        [
                            "(seg == classnum).max(1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_449": {
                "data": {
                    "value": "[self.labelmap.get(segmodel.meta.labels[ind].name, 0) for ind in catindex]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "softmax_531": {
                "variable": {
                    "value": "softmax_pred[:, catindex]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_pred[:, catindex]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_209": {
                "data": {
                    "value": "numeric_part_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_272": {
                "output_size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sizes",
                            "variable"
                        ],
                        [
                            "sizes",
                            "variable"
                        ]
                    ]
                }
            },
            "max_310": {
                "input": {
                    "value": "part_pred[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_526": {
                "output_size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sizes",
                            "variable"
                        ],
                        [
                            "sizes",
                            "variable"
                        ]
                    ]
                }
            },
            "from_numpy_678": {
                "ndarray": {
                    "value": "numpy.asarray(testim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_678": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/segmodel/mobilenet.py": {
        "torch": {
            "Sequential_31": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_173": {
                "f": {
                    "value": "cached_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_42": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, hidden_dim, 3, stride, 1, groups=hidden_dim, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp, hidden_dim, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_125": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "in_features": {
                    "value": "self.last_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_70": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU6_74": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/segmodel/models.py": {
        "torch": {
            "max_16": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(self.encoder(feed_dict['img_data'], return_feature_maps=True), segSize=segSize)",
                            "Call"
                        ],
                        [
                            "self.decoder(self.encoder(feed_dict['img_data'], return_feature_maps=True))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_18": {
                "variable": {
                    "value": "acc_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid * (preds == label).long()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_19": {
                "variable": {
                    "value": "pixel_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(label >= 0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_60": {
                "*args": {
                    "value": "conv3x3(in_planes, out_planes, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_337": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_338": {
                "variable": {
                    "value": "self.conv_last_deepsup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_357": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_358": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cbr_deepsup(conv4)",
                            "Call"
                        ],
                        [
                            "self.conv_last_deepsup(_)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(_, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr_deepsup(conv4)",
                            "Call"
                        ],
                        [
                            "self.dropout_deepsup(_)",
                            "Call"
                        ],
                        [
                            "self.conv_last_deepsup(_)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(_, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_372": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_404": {
                "variable": {
                    "value": "self.ppm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_406": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(fc_dim + len(pool_scales) * 512, 512, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_425": {
                "variable": {
                    "value": "ppm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_453": {
                "variable": {
                    "value": "self.ppm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_456": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(fc_dim + len(pool_scales) * 512, 512, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_464": {
                "variable": {
                    "value": "self.conv_last_deepsup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_465": {
                "variable": {
                    "value": "self.dropout_deepsup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_477": {
                "variable": {
                    "value": "ppm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_493": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_494": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cbr_deepsup(conv4)",
                            "Call"
                        ],
                        [
                            "self.conv_last_deepsup(_)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(_, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr_deepsup(conv4)",
                            "Call"
                        ],
                        [
                            "self.dropout_deepsup(_)",
                            "Call"
                        ],
                        [
                            "self.conv_last_deepsup(_)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(_, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_518": {
                "variable": {
                    "value": "self.ppm_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm_pooling",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_519": {
                "variable": {
                    "value": "self.ppm_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_530": {
                "variable": {
                    "value": "self.fpn_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.fpn_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_537": {
                "variable": {
                    "value": "self.fpn_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.fpn_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_539": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3_bn_relu(len(fpn_inplanes) * fpn_dim, fpn_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_554": {
                "variable": {
                    "value": "ppm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_576": {
                "variable": {
                    "value": "fusion_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fusion_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[fpn_feature_list[0]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_585": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_347": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_349": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_380": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_382": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_384": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_430": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_432": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_434": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_482": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_484": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_562": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ppm_last_conv(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(f, size=conv_x.size()[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "conv_x + f",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_580": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_582": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_407": {
                "in_channels": {
                    "value": "fc_dim + len(pool_scales) * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_410": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_411": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_412": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_457": {
                "in_channels": {
                    "value": "fc_dim + len(pool_scales) * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_460": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_461": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_462": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_541": {
                "in_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "150",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_121": {
                "f": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_167": {
                "f": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Sequential_398": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_421": {
                "input": {
                    "value": "pool_scale(conv5)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[2], input_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_447": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_473": {
                "input": {
                    "value": "pool_scale(conv5)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[2], input_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_512": {
                "output_size": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_scales",
                            "variable"
                        ],
                        [
                            "pool_scales",
                            "variable"
                        ],
                        [
                            "pool_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "Sequential_513": {
                "*args": {
                    "value": "nn.Conv2d(fc_dim, 512, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_525": {
                "*args": {
                    "value": "nn.Conv2d(fpn_inplane, fpn_dim, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_534": {
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_572": {
                "input": {
                    "value": "fpn_feature_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fpn_feature_list[0].size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_399": {
                "output_size": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_scales",
                            "variable"
                        ],
                        [
                            "pool_scales",
                            "variable"
                        ],
                        [
                            "pool_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_400": {
                "in_channels": {
                    "value": "fc_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "4096",
                            "Method Argument"
                        ],
                        [
                            "4096",
                            "Method Argument"
                        ],
                        [
                            "4096",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_402": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_448": {
                "output_size": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pool_scales",
                            "variable"
                        ],
                        [
                            "pool_scales",
                            "variable"
                        ],
                        [
                            "pool_scales",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2d_449": {
                "in_channels": {
                    "value": "fc_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "4096",
                            "Method Argument"
                        ],
                        [
                            "4096",
                            "Method Argument"
                        ],
                        [
                            "4096",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_451": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_514": {
                "in_channels": {
                    "value": "fc_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "4096",
                            "Method Argument"
                        ],
                        [
                            "4096",
                            "Method Argument"
                        ],
                        [
                            "4096",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_516": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_526": {
                "in_channels": {
                    "value": "fpn_inplane",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fpn_inplanes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_528": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_550": {
                "input": {
                    "value": "pool_scale(conv5)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[2], input_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/segmodel/resnet.py": {
        "torch": {
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_118": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_124": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_235": {
                "f": {
                    "value": "cached_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/segmodel/resnext.py": {
        "torch": {
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_85": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_91": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_183": {
                "f": {
                    "value": "cached_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/segviz.py": {
        "torch": {
            "bincount_19": {
                "variable": {
                    "value": "bc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/stylegan2/__init__.py": {
        "torch": {}
    },
    "utils/stylegan2/models.py": {
        "torch": {
            "tensor_450": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(k, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "k[None, :] * k[:, None]",
                            "BinOp"
                        ],
                        [
                            "k / k.sum()",
                            "BinOp"
                        ],
                        [
                            "re.sub('^conv1\\\\.conv\\\\.', 'layer2.conv.mconv.', k)",
                            "Call"
                        ],
                        [
                            "re.sub('^conv1\\\\.', 'layer2.conv.', k)",
                            "Call"
                        ],
                        [
                            "re.sub('^convs\\\\.(\\\\d+)\\\\.conv', lambda x: f'layer{int(x.group(1)) + 3}.sconv.mconv', k)",
                            "Call"
                        ],
                        [
                            "re.sub('^convs\\\\.(\\\\d+)\\\\.', lambda x: f'layer{int(x.group(1)) + 3}.sconv.', k)",
                            "Call"
                        ],
                        [
                            "re.sub('^to_rgb1\\\\.(conv\\\\.|bias$)', lambda x: f'to_rgb1.rgb.{x.group(1)}', k)",
                            "Call"
                        ],
                        [
                            "re.sub('^to_rgbs\\\\.(\\\\d+)\\\\.upsample\\\\.', lambda x: f'up_rgb{int(x.group(1)) + 1}.', k)",
                            "Call"
                        ],
                        [
                            "re.sub('^to_rgbs\\\\.(\\\\d+)\\\\.', lambda x: f'to_rgb{int(x.group(1)) + 2}.rgb.', k)",
                            "Call"
                        ],
                        [
                            "re.sub('mconv\\\\.weight$', 'mconv.dconv.weight', k)",
                            "Call"
                        ],
                        [
                            "re.sub('mconv\\\\.dconv\\\\.weight$', 'mconv.weight', k)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_303": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, out_channel, in_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_381": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, out_channel, in_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_538": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_551": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, channel, size, size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_636": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv_transpose2d_316": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d.fmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight.transpose(1, 2).squeeze(0)",
                            "BinOp"
                        ],
                        [
                            "self.scale * self.weight.squeeze(0)",
                            "BinOp"
                        ],
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_319": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d.fmap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight.transpose(1, 2).squeeze(0)",
                            "BinOp"
                        ],
                        [
                            "self.scale * self.weight.squeeze(0)",
                            "BinOp"
                        ],
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rsqrt_327": {
                "variable": {
                    "value": "demod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_weight.pow(2).sum([2, 3, 4]) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_399": {
                "variable": {
                    "value": "demod",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.pow(2).sum([2, 3, 4]) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv_transpose2d_415": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight.transpose(1, 2).squeeze(0)",
                            "BinOp"
                        ],
                        [
                            "self.scale * self.weight.squeeze(0)",
                            "BinOp"
                        ],
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.latent.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "conv2d_422": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scale * self.weight.transpose(1, 2).squeeze(0)",
                            "BinOp"
                        ],
                        [
                            "self.scale * self.weight.squeeze(0)",
                            "BinOp"
                        ],
                        [
                            "self.scale * self.weight * style",
                            "BinOp"
                        ],
                        [
                            "weight * demod.view(batch, self.out_channel, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "weight.view(batch * self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.view(batch, self.out_channel, in_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ],
                        [
                            "weight.transpose(1, 2).reshape(batch * in_channel, self.out_channel, self.kernel_size, self.kernel_size)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.latent.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "linear_505": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_508": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias * self.lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_545": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.RandomState(0).randn(batch, height * width).astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(noise).cuda().view(batch, 1, height, width)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_304": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels[2 ** i]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels[4]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_382": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels[2 ** i]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels[4]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "variable"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_538": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_551": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_575": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_636": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_352": {
                "ndarray": {
                    "value": "np_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rng.randn(*shape).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_97": {
                "*args": {
                    "value": "*style_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "*args": {
                    "value": "OrderedDict([('lat0', PickLatent(0)), ('conv', StyledConvSeq(self.channels[4], self.channels[4], 3, style_dim, blur_kernel=blur_kernel, mconv=mconv))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "*args": {
                    "value": "OrderedDict([('lat1', PickLatent(1)), ('rgb', ToRGBF(self.channels[4], style_dim, upsample=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rsqrt_613": {
                "input": {
                    "value": "torch.mean(data.latent ** 2, dim=1, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "*args": {
                    "value": "OrderedDict([('lat%d' % lat_i, PickLatent(lat_i)), ('sconv', StyledConvSeq(in_channel, out_channel, 3, style_dim, upsample=True, blur_kernel=blur_kernel, mconv=mconv))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "*args": {
                    "value": "OrderedDict([('lat%d' % (lat_i + 1), PickLatent(lat_i + 1)), ('sconv', StyledConvSeq(out_channel, out_channel, 3, style_dim, blur_kernel=blur_kernel, mconv=mconv))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "*args": {
                    "value": "OrderedDict([('lat%d' % (lat_i + 2), PickLatent(lat_i + 2)), ('rgb', ToRGBF(out_channel, style_dim, skip=True, upsample=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_613": {
                "input": {
                    "value": "data.latent ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/stylegan2/op/fused_act.py": {
        "torch": {
            "load_10": {
                "variable": {
                    "value": "fused",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fused",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(module_path, 'fused_bias_act.cpp'), os.path.join(module_path, 'fused_bias_act_kernel.cu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "*size": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/stylegan2/op/upfirdn2d.py": {
        "torch": {
            "load_9": {
                "variable": {
                    "value": "upfirdn2d_op",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "upfirdn2d",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(module_path, 'upfirdn2d.cpp'), os.path.join(module_path, 'upfirdn2d_kernel.cu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_176": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_100": {
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "utils/tally.py": {
        "torch": {
            "cat_344": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "summarize()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "defaultdict(list)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "bincount_479": {
                "variable": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "strided.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "minlength": {
                    "value": "num_labels * len(data)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_504": {
                "variable": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "conditions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(segcounts[1:].nonzero() + 1)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "max(condmv.keys()) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_505": {
                "variable": {
                    "value": "isect",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "conditions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(segcounts[1:].nonzero() + 1)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "max(condmv.keys()) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "condmv.conditional(0).mean().shape[0]",
                            "Subscript"
                        ],
                        [
                            "condq.conditional(0).depth",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_565": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(units, max(condq.keys()) + 1) + cutoff.shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_121": {
                "variable": {
                    "value": "index_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "first_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i * loader.batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "end": {
                    "value": "first_index + len(batch[0])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_562": {
                "variable": {
                    "value": "cutoff",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cutoff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(cutoff)",
                            "Call"
                        ],
                        [
                            "0.95",
                            "Method Argument"
                        ],
                        [
                            "0.95",
                            "Method Argument"
                        ],
                        [
                            "0.95",
                            "Method Argument"
                        ],
                        [
                            "0.95",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_581": {
                "variable": {
                    "value": "arr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[isect, pred - isect, truth - isect, 1 - union]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorDataset_635": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_643": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FixedSubsetSampler(list(range(sample_size)))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_339": {
                "ndarray": {
                    "value": "cached_state['data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_367": {
                "tensors": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "isnan_617": {
                "input": {
                    "value": "iqr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mutual_information(arr) / joint_entropy(arr)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_361": {
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_477": {
                "start": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_599": {
                "input": {
                    "value": "term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint * (joint / ind).log()",
                            "BinOp"
                        ],
                        [
                            "joint * joint.log()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_610": {
                "input": {
                    "value": "term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "joint * (joint / ind).log()",
                            "BinOp"
                        ],
                        [
                            "joint * joint.log()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_695": {
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/upsample.py": {
        "torch": {
            "grid_sample_38": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "batch_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid",
                            "variable"
                        ],
                        [
                            "grid.expand((data.shape[0],) + grid.shape[1:])",
                            "Call"
                        ],
                        [
                            "batch_grid.to(data.device)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'zeros'",
                            "Method Argument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_41": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "batch_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid",
                            "variable"
                        ],
                        [
                            "grid.expand((data.shape[0],) + grid.shape[1:])",
                            "Call"
                        ],
                        [
                            "batch_grid.to(data.device)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'zeros'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_152": {
                "tensors": {
                    "value": "(tx[None, :].expand(target_shape), ty[:, None].expand(target_shape))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_148": {
                "start": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(source, 'transforms', None)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "Method Argument"
                        ],
                        [
                            "torch.float",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/upsegmodel/models.py": {
        "torch": {
            "max_18": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(self.encoder(feed_dict['img'], return_feature_maps=True), output_switch=output_switch, seg_size=seg_size)",
                            "Call"
                        ],
                        [
                            "self.decoder(self.encoder(feed_dict['img'], return_feature_maps=True), output_switch=output_switch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_20": {
                "variable": {
                    "value": "acc_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid * (preds == label).long()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_21": {
                "variable": {
                    "value": "pixel_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(label != ignore_index).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_28": {
                "variable": {
                    "value": "(_, pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_part",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_30": {
                "variable": {
                    "value": "acc_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_sum.view(acc_sum.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_31": {
                "variable": {
                    "value": "acc_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_sum * valid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_32": {
                "variable": {
                    "value": "pixel_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_object.view(mask_object.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_33": {
                "variable": {
                    "value": "pixel_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pixel_sum * valid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nll_loss_39": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_part",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_seg_part * mask_object.long()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_41": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss.view(loss.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_42": {
                "variable": {
                    "value": "nr_pixel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_object.view(mask_object.shape[0], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleDict_53": {
                "variable": {
                    "value": "self.crit_dict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_60": {
                "variable": {
                    "value": "self.crit_dict[object]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_61": {
                "variable": {
                    "value": "self.crit_dict[material]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_62": {
                "variable": {
                    "value": "self.crit_dict[scene]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_143": {
                "*args": {
                    "value": "conv3x3(in_planes, out_planes, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_273": {
                "variable": {
                    "value": "self.ppm_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm_pooling",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_274": {
                "variable": {
                    "value": "self.ppm_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_285": {
                "variable": {
                    "value": "self.fpn_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.fpn_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_292": {
                "variable": {
                    "value": "self.fpn_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.fpn_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_301": {
                "variable": {
                    "value": "self.scene_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_308": {
                "variable": {
                    "value": "self.object_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_314": {
                "variable": {
                    "value": "self.part_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_320": {
                "variable": {
                    "value": "self.material_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_335": {
                "variable": {
                    "value": "roi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "roi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(roi, dim=0).type_as(conv5)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_342": {
                "variable": {
                    "value": "ppm_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_385": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_397": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "seg_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_44": {
                "input": {
                    "value": "sum_pixel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(nr_pixel * valid).sum()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_303": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_304": {
                "in_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.nr_scene_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_310": {
                "in_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.nr_object_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_316": {
                "in_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.nr_part_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_322": {
                "in_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.nr_material_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_354": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ppm_last_conv(ppm_out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(f, size=conv_x.size()[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "conv_x + f",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_373": {
                "variable": {
                    "value": "fusion_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fusion_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[fpn_feature_list[0]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_391": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "seg_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_392": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_401": {
                "variable": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, head:head + n_part]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "seg_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_402": {
                "variable": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x[:, head:head + n_part], size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(_x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_413": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_184": {
                "f": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_209": {
                "f": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ],
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Sequential_268": {
                "*args": {
                    "value": "nn.Conv2d(fc_dim, 512, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_280": {
                "*args": {
                    "value": "nn.Conv2d(fpn_inplane, fpn_dim, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_289": {
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_422": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_269": {
                "in_channels": {
                    "value": "fc_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "4096",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_271": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_281": {
                "in_channels": {
                    "value": "fpn_inplane",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fpn_inplanes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fpn_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_283": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_338": {
                "input": {
                    "value": "pool_scale(conv5, roi.detach())",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[2], input_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_369": {
                "input": {
                    "value": "fpn_feature_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fpn_feature_list[0].size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/upsegmodel/prroi_pool/build.py": {
        "torch": {
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/upsegmodel/prroi_pool/functional.py": {
        "torch": {}
    },
    "utils/upsegmodel/prroi_pool/prroi_pool.py": {
        "torch": {}
    },
    "utils/upsegmodel/prroi_pool/test_prroi_pooling2d.py": {
        "torch": {
            "rand_23": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, 16, 24, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 14, 14], [1, 14, 14, 28, 28]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool2d_30": {
                "variable": {
                    "value": "out_gold",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand((4, 16, 24, 32)).cuda()",
                            "Call"
                        ],
                        [
                            "torch.rand((4, 2, 24, 32)).cuda()",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_40": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, 2, 24, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 4, 4], [1, 14, 14, 18, 18]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_32": {
                "tensors": {
                    "value": "(out_gold[0, :, :7, :7], out_gold[1, :, 7:14, 7:14])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/upsegmodel/resnet.py": {
        "torch": {
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_117": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_123": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_235": {
                "f": {
                    "value": "cached_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/upsegmodel/resnext.py": {
        "torch": {
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_84": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_85": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_91": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_183": {
                "f": {
                    "value": "cached_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/zdataset.py": {
        "torch": {
            "from_numpy_46": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng.standard_normal(size * depth).reshape(size, depth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng.randint(num_classes, size=size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "z_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dataset_for_model(z_generator, size=epoch_size, seed=g_epoch + 1)",
                            "Call"
                        ],
                        [
                            "z_dataset_for_model(z_generator, size=test_size, seed=1)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_tensor_9": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(indices, dtype=torch.int64, device='cpu')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorDataset_14": {
                "*tensors": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_80": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "z_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dataset_for_model(z_generator, size=epoch_size, seed=g_epoch + 1)",
                            "Call"
                        ],
                        [
                            "z_dataset_for_model(z_generator, size=test_size, seed=1)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}