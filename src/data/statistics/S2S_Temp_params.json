{
    "chsmm_without_src.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self.A_from",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(opt.K * opt.Kmul, opt.A_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.A_to",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(opt.A_dim, opt.K * opt.Kmul)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_52": {
                "variable": {
                    "value": "self.lut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "wordtypes",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "opt.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "opt.pad_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.cat_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hsmm_emb_size, self.hid_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "variable": {
                    "value": "self.start_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, self.emb_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_60": {
                "variable": {
                    "value": "self.pad_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, self.emb_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_62": {
                "variable": {
                    "value": "self.seg_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "rnninsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "opt.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_64": {
                "variable": {
                    "value": "self.state_embs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(opt.K, 1, 1, hsmm_emb_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "self.trans_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(hsmm_emb_size, hsmm_emb_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.trans_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(opt.K, opt.K)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "self.h0_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(2 * opt.hid_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_79": {
                "variable": {
                    "value": "self.state_out_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(opt.K, 1, 1, out_hid_sz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.state_out_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(opt.K, 1, 1, out_hid_sz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_hid_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.hid_size",
                            "Attribute"
                        ],
                        [
                            "rnn_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "gentypes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.attn_lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.hid_size + opt.emb_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_87": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "opt.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_90": {
                "variable": {
                    "value": "self.lsm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "self.zeros",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_96": {
                "variable": {
                    "value": "self.src_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, opt.emb_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_97": {
                "variable": {
                    "value": "self.uniq_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, opt.emb_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.init_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.K * opt.Kmul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_100": {
                "variable": {
                    "value": "self.init_trans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, opt.K * opt.Kmul)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.cond_trans_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "opt.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.K * opt.Kmul * opt.cond_A_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_239": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(h0).unsqueeze(1).expand(bsz, seqlen, rnn_size).contiguous().view(-1, rnn_size).unsqueeze(0).expand(layers, -1, rnn_size).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_239": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_289": {
                "variable": {
                    "value": "obslps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seg_lls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_289": {
                "variable": {
                    "value": "obslps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_311": {
                "variable": {
                    "value": "wlps_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.decoder(states_k.view(-1, rnn_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "cond_start_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start_inp, self.state_embs[rul_ss]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_334": {
                "variable": {
                    "value": "curr_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_492": {
                "variable": {
                    "value": "saved_stuff",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.save + '.e{}'.format(epoch)",
                            "BinOp"
                        ],
                        [
                            "args.save + '.best'",
                            "BinOp"
                        ],
                        [
                            "save_path",
                            "variable"
                        ]
                    ]
                }
            },
            "manual_seed_605": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_607": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_628": {
                "variable": {
                    "value": "saved_stuff",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_655": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "HSMM(len(corpus.dictionary), corpus.ngen_types, args)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net).cuda()",
                            "Call"
                        ],
                        [
                            "HSMM(len(corpus.dictionary), corpus.ngen_types, saved_args)",
                            "Call"
                        ],
                        [
                            "net.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adagrad_662": {
                "variable": {
                    "value": "optalg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, net.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_689": {
                "variable": {
                    "value": "trainperm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(corpus.train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_855": {
                "variable": {
                    "value": "src_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.len_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, opt.L)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.len_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hsmm_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.emb_size * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "opt.L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "rowi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xemb[:, i:], pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_194": {
                "tensors": {
                    "value": "newx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.start_emb.expand(bsz, seqlen, emb_size)]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_210": {
                "variable": {
                    "value": "rowi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states[:, i + 1:, :], pad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_213": {
                "tensors": {
                    "value": "newh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[states[:, :seqlenp1 - 1, :]]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_249": {
                "variable": {
                    "value": "condembs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[segembs, self.state_embs[k].expand(Lp1, bszsl, state_emb_sz)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "wlps_k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wlps_k, self.zeros.expand(wlps_k.size(0), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_351": {
                "variable": {
                    "value": "(maxprobs, top2k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "wrd_dist.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "2 * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_390": {
                "variable": {
                    "value": "cond_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embs, self.state_embs[rul_ss].expand(1, beam_size, state_emb_sz)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RMSprop_667": {
                "variable": {
                    "value": "optalg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, net.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_679": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'opt': args, 'state_dict': net.state_dict(), 'lr': args.lr, 'dict': corpus.dictionary, 'epoch': epoch, 'best_valloss': best_valloss, 'prev_valloss': prev_valloss}",
                            "Dict"
                        ],
                        [
                            "{'opt': args, 'state_dict': net.state_dict(), 'lr': args.lr, 'dict': corpus.dictionary, 'epoch': epoch, 'best_valloss': best_valloss, 'prev_valloss': prev_valloss}",
                            "Dict"
                        ],
                        [
                            "states",
                            "variable"
                        ],
                        [
                            "state[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.save + '.e{}'.format(epoch)",
                            "BinOp"
                        ],
                        [
                            "args.save + '.best'",
                            "BinOp"
                        ],
                        [
                            "save_path",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "hsmm_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.emb_size * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "self.hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "*size": {
                    "value": "2 * opt.hid_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_97": {},
            "ones_100": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.K * opt.Kmul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_152": {
                "input": {
                    "value": "state_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.state_embs.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.trans_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_262": {
                "variable": {
                    "value": "wlps_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.decoder(states_k.view(-1, out_hid_sz))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_264": {
                "variable": {
                    "value": "cat_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cat_mlp(self.state_embs[k].squeeze())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_266": {
                "variable": {
                    "value": "vocab_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cat_dist.unsqueeze(1).expand_as(vocab_masks) * vocab_masks",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_268": {
                "variable": {
                    "value": "vocab_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[vocab_mask, torch.Tensor([1]).cuda()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_611": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_654": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_669": {
                "variable": {
                    "value": "optalg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, net.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_757": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_801": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_866": {
                "input": {
                    "value": "inits[:, :inits.size(1) // 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_719": {
                "start": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "diag_48": {
                "input": {
                    "value": "selfmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(opt.K * opt.Kmul).fill_(-float('inf'))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_270": {
                "input": {
                    "value": "self.decoder(states_k.view(-1, out_hid_sz))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_391": {
                "tensors": {
                    "value": "anc_cs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_268": {},
            "device_count_705": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_1044": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'opt': args, 'state_dict': net.state_dict(), 'lr': args.lr, 'dict': corpus.dictionary, 'epoch': epoch, 'best_valloss': best_valloss, 'prev_valloss': prev_valloss}",
                            "Dict"
                        ],
                        [
                            "{'opt': args, 'state_dict': net.state_dict(), 'lr': args.lr, 'dict': corpus.dictionary, 'epoch': epoch, 'best_valloss': best_valloss, 'prev_valloss': prev_valloss}",
                            "Dict"
                        ],
                        [
                            "states",
                            "variable"
                        ],
                        [
                            "state[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.save + '.e{}'.format(epoch)",
                            "BinOp"
                        ],
                        [
                            "args.save + '.best'",
                            "BinOp"
                        ],
                        [
                            "save_path",
                            "variable"
                        ]
                    ]
                }
            },
            "save_1050": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'opt': args, 'state_dict': net.state_dict(), 'lr': args.lr, 'dict': corpus.dictionary, 'epoch': epoch, 'best_valloss': best_valloss, 'prev_valloss': prev_valloss}",
                            "Dict"
                        ],
                        [
                            "{'opt': args, 'state_dict': net.state_dict(), 'lr': args.lr, 'dict': corpus.dictionary, 'epoch': epoch, 'best_valloss': best_valloss, 'prev_valloss': prev_valloss}",
                            "Dict"
                        ],
                        [
                            "states",
                            "variable"
                        ],
                        [
                            "state[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.save + '.e{}'.format(epoch)",
                            "BinOp"
                        ],
                        [
                            "args.save + '.best'",
                            "BinOp"
                        ],
                        [
                            "save_path",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "datasets.py": {
        "torch": {
            "t_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_249": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "t_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "discriminator.py": {
        "torch": {
            "Dropout_14": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_15": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.judger",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * filter_num * len(filter_sizes), 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(query_features, response_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_92": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_113": {
                "variable": {
                    "value": "saved_stuff",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_110": {
                "obj": {
                    "value": "kwargs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "2 * filter_num * len(filter_sizes)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_22": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_103": {
                "input": {
                    "value": "(out > 0.5) == (target > 0.5)",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "gan.py": {
        "torch": {
            "load_265": {
                "variable": {
                    "value": "saved_stuff",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_281": {
                "variable": {
                    "value": "gen_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, gen.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_291": {
                "variable": {
                    "value": "dis_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "dis.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randperm_107": {
                "variable": {
                    "value": "trainperm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(corpus.train)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_165": {
                "variable": {
                    "value": "tpls",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gen.template_sample(templates, tpl_len) for _ in range(bsz)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "tpl_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_260": {
                "seed": {
                    "value": "666",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_261": {
                "seed": {
                    "value": "666",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_175": {
                "variable": {
                    "value": "rw",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "generate.py": {
        "torch": {
            "zeros_180": {
                "variable": {
                    "value": "curr_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_280": {
                "variable": {
                    "value": "saved_stuff",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.hsmm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_292": {
                "variable": {
                    "value": "saved_stuff",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.generator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_106": {
                "variable": {
                    "value": "ss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_ss] * s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_108": {
                "variable": {
                    "value": "wrd_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wrd_dist[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_200": {
                "variable": {
                    "value": "wrd_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wrd_dist[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_215": {
                "variable": {
                    "value": "(maxprobs, top2k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "wrd_dist.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "2 * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_240": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anc_h1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_241": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anc_c1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_242": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anc_h2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_243": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anc_c2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_304": {
                "variable": {
                    "value": "src_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_75": {
                "input": {
                    "value": "inits[:, :net.hsmm_net.hid_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_79": {
                "input": {
                    "value": "src_enc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_93": {
                "variable": {
                    "value": "inps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h.latest_token for h in hyps]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_95": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.state[0] for _ in hyps]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_96": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.state[1] for _ in hyps]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_97": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.state[2] for _ in hyps]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_98": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_.state[3] for _ in hyps]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_123": {
                "variable": {
                    "value": "(probs, topk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_186": {
                "input": {
                    "value": "inits[:, :net.hsmm_net.hid_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_190": {
                "input": {
                    "value": "src_enc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_125": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "generator.py": {
        "torch": {
            "LSTM_34": {
                "variable": {
                    "value": "self.stack_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.hsmm_net.hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_35": {
                "variable": {
                    "value": "self.encode_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.encode_redu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hid_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.hid_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.attn_W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.attn_U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_46": {
                "variable": {
                    "value": "self.debug_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.hsmm_net.emb_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "inps_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start_inp.repeat(bsz, 1, 1), inps_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_99": {
                "variable": {
                    "value": "vocab_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vocab_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.zeros(inp_len, bsz, self.vocab_size)).cuda()",
                            "Call"
                        ],
                        [
                            "F.log_softmax(vocab_dist, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "cond_start_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inp_emb, hsmm_state_embs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_163": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn_W(src_sent_enc) + self.attn_U(states.transpose(0, 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_166": {
                "variable": {
                    "value": "aprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ascores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.V(attn).squeeze(2)",
                            "Call"
                        ],
                        [
                            "ascores + src_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_167": {
                "variable": {
                    "value": "ctx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aprobs.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "src_sent_enc",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "cat_ctx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[states, ctx.transpose(0, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_225": {
                "variable": {
                    "value": "rep_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "response_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "full_288": {
                "variable": {
                    "value": "rep_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(bsz, tpl_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "pad_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hsmm_net.pad_idx",
                            "Attribute"
                        ],
                        [
                            "self.vocab.word2idx['<pad>']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_309": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_330": {
                "variable": {
                    "value": "loss_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "pad_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hsmm_net.pad_idx",
                            "Attribute"
                        ],
                        [
                            "self.vocab.word2idx['<pad>']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_346": {
                "variable": {
                    "value": "saved_stuff",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_247": {
                "variable": {
                    "value": "wlps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wlps[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_253": {
                "variable": {
                    "value": "(probs, topk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "wlps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(wlps[0], 1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_255": {
                "variable": {
                    "value": "sids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nor_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs / torch.sum(probs, 1).unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_256": {
                "variable": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topk_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(nor_probs, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_256": {
                "variable": {
                    "value": "sample_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_291": {
                "variable": {
                    "value": "rep_sample[i][:len(rep)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rep_sample[i]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_343": {
                "obj": {
                    "value": "kwargs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_80": {
                "input": {
                    "value": "inits[:, :self.hsmm_net.hid_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_84": {
                "input": {
                    "value": "src_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode_redu(hn.transpose(0, 1).contiguous().view(bsz, self.encode_rnn.num_layers, -1)[:, -1, :])",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_234": {
                "input": {
                    "value": "inits[:, :self.hsmm_net.hid_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_238": {
                "input": {
                    "value": "src_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encode_redu(hn.transpose(0, 1).contiguous().view(bsz, self.encode_rnn.num_layers, -1)[:, -1, :])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_254": {
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_254": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "*size": {
                    "value": "inp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if inps is None else inps.size(1)",
                            "IfExp"
                        ]
                    ]
                },
                "out": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_195": {
                "input": {
                    "value": "len_lps[ss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "infc.py": {
        "torch": {
            "max_92": {
                "variable": {
                    "value": "(maxes, argmaxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "delt_terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "delt_star[t - steps_back:t] + bwd_obs_logprobs[-steps_back:, t - 1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_63": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_75": {
                "variable": {
                    "value": "len_terms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[len_logprobs[min(L, seqlen + 1 - t + jj) - 1][jj] for jj in range(L - 1, -1, -1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "max_105": {
                "variable": {
                    "value": "(maxes, argmaxes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "delt_star_terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tps.transpose(0, 1) + delt_t.unsqueeze(2).expand(bsz, K, K).transpose(0, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_131": {
                "start": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fwd_obs_logprobs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_193": {
                "variable": {
                    "value": "len_terms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Variable(torch.exp(tmask))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_59": {
                "tensors": {
                    "value": "[llps[-i - 1] for i in range(llps.size(0))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_143": {
                "tensors": {
                    "value": "alph_star[t - steps_back:t]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_196": {
                "tensors": {
                    "value": "beta[seqlen - t + 1:seqlen - t + 1 + steps_fwd]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_244": {
                "tensors": {
                    "value": "beta[seqlen - t + 1:seqlen - t + 1 + steps_fwd]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_193": {
                "input": {
                    "value": "tmask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.narrow(0, 0, steps_back).zero_()",
                            "Call"
                        ],
                        [
                            "mask.narrow(0, 0, steps_back).zero_()",
                            "Call"
                        ],
                        [
                            "mask.narrow(0, 0, steps_fwd).zero_()",
                            "Call"
                        ],
                        [
                            "mask.narrow(0, 0, steps_fwd).zero_()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "template_extraction.py": {
        "torch": {
            "Tensor_73": {
                "variable": {
                    "value": "counts",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "textcnn.py": {
        "torch": {
            "Embedding_31": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filter_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(filter_size, embed_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "conv_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_41": {
                "variable": {
                    "value": "conv_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool1d_43": {
                "variable": {
                    "value": "pool_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(conv(x)).squeeze(3)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "conv_res.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_14": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(1, filter_num, (width, input_dim)) for width in filter_sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "relu_17": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_17": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool1d_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedded_inputs.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.relu(conv(x)).squeeze(3)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, x.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "embedded_inputs.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[F.relu(conv(x)).squeeze(3) for conv in self.convs]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in x]",
                            "ListComp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_25": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedded_inputs.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.relu(conv(x)).squeeze(3)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(x, x.size(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "embedded_inputs.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "[F.relu(conv(x)).squeeze(3) for conv in self.convs]",
                            "ListComp"
                        ],
                        [
                            "[F.max_pool1d(i, i.size(2)).squeeze(2) for i in x]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_23": {
                "input": {
                    "value": "conv(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_23": {
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool1d_24": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "i.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_24": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "filter_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(width, input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "max_21": {
                "variable": {
                    "value": "(maxes, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "X2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.view(X.size(0), -1)",
                            "Call"
                        ],
                        [
                            "X.view(-1, X.size(2))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_36": {
                "variable": {
                    "value": "(maxes, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "X2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.view(X.size(0), -1)",
                            "Call"
                        ],
                        [
                            "X.view(-1, X.size(2))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_48": {
                "variable": {
                    "value": "(maxes, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "X.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_182": {
                "variable": {
                    "value": "curr_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "cond_start_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[start_inp, net.state_embs[rul_ss]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_198": {
                "variable": {
                    "value": "(maxprobs, top2k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "wrd_dist.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "2 * K",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_279": {
                "variable": {
                    "value": "pos_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(pos_rep, (0, tpl_len - rep_len), value=pad_idx)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, tpl_len - rep_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "pad_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_288": {
                "variable": {
                    "value": "pos_target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(constrs)",
                            "Call"
                        ],
                        [
                            "len(constrs)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_289": {
                "variable": {
                    "value": "neg_target",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(constrs)",
                            "Call"
                        ],
                        [
                            "len(constrs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_290": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[query, query]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "response",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_rep, neg_rep]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pos_target, neg_target]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_22": {
                "input": {
                    "value": "torch.sum(torch.exp(X2d - maxes.expand_as(X2d)), axis, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_37": {
                "input": {
                    "value": "torch.sum(torch.exp(X2d - maxes.expand_as(X2d)), 1, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_49": {
                "input": {
                    "value": "torch.sum(torch.exp(X - maxes.expand_as(X)), 1, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "cond_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embs, net.state_embs[rul_ss].expand(1, K, state_emb_sz)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_281": {
                "variable": {
                    "value": "tpls",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[generator.template_sample(templates, tpl_len) for _ in range(bsz)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_22": {
                "input": {
                    "value": "torch.exp(X2d - maxes.expand_as(X2d))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ]
                    ]
                }
            },
            "sum_37": {
                "input": {
                    "value": "torch.exp(X2d - maxes.expand_as(X2d))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "torch.exp(X - maxes.expand_as(X))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_58": {
                "input": {
                    "value": "torch.exp(v - maxv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "tpls",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[template, template.narrow(1, rep_len - 1, 1).expand(bsz, tpl_len - rep_len)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_22": {
                "input": {
                    "value": "X2d - maxes.expand_as(X2d)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_37": {
                "input": {
                    "value": "X2d - maxes.expand_as(X2d)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_49": {
                "input": {
                    "value": "X - maxes.expand_as(X)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_58": {
                "input": {
                    "value": "v - maxv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_243": {
                "tensors": {
                    "value": "anc_cs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_245": {
                "tensors": {
                    "value": "anc_cs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}