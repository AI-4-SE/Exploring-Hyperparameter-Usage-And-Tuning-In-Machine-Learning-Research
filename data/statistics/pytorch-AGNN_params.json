{
    "agnn/model.py": {
        "torch": {
            "norm_23": {
                "variable": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.embeddinglayer(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.attentionlayers[i](x, adj)",
                            "Call"
                        ],
                        [
                            "self.outputlayer(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_36": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cos + mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_39": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(masked, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.embeddinglayer(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.attentionlayers[i](x, adj)",
                            "Call"
                        ],
                        [
                            "self.outputlayer(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_52": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "initializer(torch.Tensor(in_features, out_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_76": {
                "variable": {
                    "value": "self.attentionlayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_87": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.embeddinglayer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.embeddinglayer(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.attentionlayers[i](x, adj)",
                            "Call"
                        ],
                        [
                            "self.outputlayer(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.embeddinglayer(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.attentionlayers[i](x, adj)",
                            "Call"
                        ],
                        [
                            "self.outputlayer(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_14": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1).uniform_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_57": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_95": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.embeddinglayer(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.attentionlayers[i](x, adj)",
                            "Call"
                        ],
                        [
                            "self.outputlayer(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_28": {
                "input": {
                    "value": "torch.mm(x, x.t())",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.mm(norm2, norm2.t()) + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_28": {
                "input": {
                    "value": "norm2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(x, 2, 1).view(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "norm2.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "agnn/train.py": {
        "torch": {
            "nll_loss_52": {
                "variable": {
                    "value": "loss_test",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_99": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_25": {
                "variable": {
                    "value": "loss_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nll_loss_36": {
                "variable": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_84": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_86": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "agnn/utils.py": {
        "torch": {}
    }
}