{
    "LRP_util.py": {
        "torch": {
            "from_numpy_18": {
                "variable": {
                    "value": "preprocessed_img",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "preprocessed_img",
                    "possible_values": [
                        [
                            "img.copy()[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "np.ascontiguousarray(np.transpose(preprocessed_img, (2, 0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(preprocessed_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_82": {
                "variable": {
                    "value": "logit",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "possible_values": [
                        [
                            "self.model(input).cuda()",
                            "Call"
                        ],
                        [
                            "F.softmax(logit)",
                            "Call"
                        ],
                        [
                            "logit.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "score_saliency_map",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1, h, w)",
                    "possible_values": []
                }
            },
            "relu_123": {
                "variable": {
                    "value": "score_saliency_map",
                    "possible_values": []
                },
                "input": {
                    "value": "score_saliency_map",
                    "possible_values": [
                        [
                            "torch.zeros((1, 1, h, w))",
                            "Call"
                        ],
                        [
                            "score_saliency_map.cuda()",
                            "Call"
                        ],
                        [
                            "F.relu(score_saliency_map)",
                            "Call"
                        ],
                        [
                            "score_saliency_map + score * saliency_map",
                            "BinOp"
                        ],
                        [
                            "(score_saliency_map - score_saliency_map_min).div(score_saliency_map_max - score_saliency_map_min).data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_84": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_96": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "variable": {
                    "value": "saliency_map",
                    "possible_values": []
                },
                "input": {
                    "value": "activations[:, i, :, :]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_105": {
                "variable": {
                    "value": "saliency_map",
                    "possible_values": []
                },
                "input": {
                    "value": "saliency_map",
                    "possible_values": [
                        [
                            "torch.unsqueeze(activations[:, i, :, :], 1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(saliency_map, size=(h, w), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "softmax_117": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "self.model(input * norm_saliency_map)",
                            "Call"
                        ],
                        [
                            "F.softmax(output)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Multi_CAM.py": {
        "torch": {
            "mean_91": {
                "variable": {
                    "value": "gradient_",
                    "possible_values": []
                },
                "input": {
                    "value": "gradient",
                    "possible_values": [
                        [
                            "value['gradients']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_93": {
                "variable": {
                    "value": "grad_cam",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_cam",
                    "possible_values": [
                        [
                            "activation * gradient_",
                            "BinOp"
                        ],
                        [
                            "torch.sum(grad_cam, dim=(0, 1))",
                            "Call"
                        ],
                        [
                            "torch.clamp(grad_cam, min=0)",
                            "Call"
                        ],
                        [
                            "grad_cam.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "cv2.resize(grad_cam, (224, 224))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 1)",
                    "possible_values": []
                }
            },
            "clamp_94": {
                "variable": {
                    "value": "grad_cam",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_cam",
                    "possible_values": [
                        [
                            "activation * gradient_",
                            "BinOp"
                        ],
                        [
                            "torch.sum(grad_cam, dim=(0, 1))",
                            "Call"
                        ],
                        [
                            "torch.clamp(grad_cam, min=0)",
                            "Call"
                        ],
                        [
                            "grad_cam.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "cv2.resize(grad_cam, (224, 224))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_102": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha * torch.clamp(gradient, 0)",
                    "possible_values": []
                },
                "axis": {
                    "value": "(2, 3)",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_104": {
                "variable": {
                    "value": "grad_campp",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_campp",
                    "possible_values": [
                        [
                            "activation * w",
                            "BinOp"
                        ],
                        [
                            "torch.sum(grad_campp, dim=(0, 1))",
                            "Call"
                        ],
                        [
                            "torch.clamp(grad_campp, min=0)",
                            "Call"
                        ],
                        [
                            "grad_campp.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "cv2.resize(grad_campp, (224, 224))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(0, 1)",
                    "possible_values": []
                }
            },
            "clamp_105": {
                "variable": {
                    "value": "grad_campp",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_campp",
                    "possible_values": [
                        [
                            "activation * w",
                            "BinOp"
                        ],
                        [
                            "torch.sum(grad_campp, dim=(0, 1))",
                            "Call"
                        ],
                        [
                            "torch.clamp(grad_campp, min=0)",
                            "Call"
                        ],
                        [
                            "grad_campp.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "cv2.resize(grad_campp, (224, 224))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_100": {
                "input": {
                    "value": "activation * gradient_3",
                    "possible_values": []
                },
                "axis": {
                    "value": "(2, 3)",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "clamp_102": {
                "input": {
                    "value": "gradient",
                    "possible_values": [
                        [
                            "value['gradients']",
                            "Subscript"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "modules/google_net.py": {
        "torch": {
            "GoogLeNet_58": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.aux_logits": {
                    "value": "aux_logits",
                    "possible_values": []
                },
                "self.transform_input": {
                    "value": "transform_input",
                    "possible_values": []
                }
            },
            "InceptionAux_258": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_271": {
                    "variable": {
                        "value": "self.fc1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "2048",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1024",
                        "possible_values": []
                    }
                },
                "Linear_272": {
                    "variable": {
                        "value": "self.fc2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "1024",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": []
                    }
                }
            },
            "Inception_291": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.channel1": {
                    "value": "ch1x1",
                    "possible_values": []
                },
                "self.channel2": {
                    "value": "ch3x3",
                    "possible_values": []
                },
                "self.channel3": {
                    "value": "ch5x5",
                    "possible_values": []
                },
                "self.channel4": {
                    "value": "pool_proj",
                    "possible_values": []
                }
            },
            "BasicConv2d_365": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "flatten_171": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.inception3a(x)",
                            "Call"
                        ],
                        [
                            "self.inception3b(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool3(x)",
                            "Call"
                        ],
                        [
                            "self.inception4a(x)",
                            "Call"
                        ],
                        [
                            "self.inception4b(x)",
                            "Call"
                        ],
                        [
                            "self.inception4c(x)",
                            "Call"
                        ],
                        [
                            "self.inception4d(x)",
                            "Call"
                        ],
                        [
                            "self.inception4e(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool4(x)",
                            "Call"
                        ],
                        [
                            "self.inception5a(x)",
                            "Call"
                        ],
                        [
                            "self.inception5b(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (4, 4))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, 0.7, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "argmax_226": {
                "variable": {
                    "value": "maxindex",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.inception3a(x)",
                            "Call"
                        ],
                        [
                            "self.inception3b(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool3(x)",
                            "Call"
                        ],
                        [
                            "self.inception4a(x)",
                            "Call"
                        ],
                        [
                            "self.inception4b(x)",
                            "Call"
                        ],
                        [
                            "self.inception4c(x)",
                            "Call"
                        ],
                        [
                            "self.inception4d(x)",
                            "Call"
                        ],
                        [
                            "self.inception4e(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool4(x)",
                            "Call"
                        ],
                        [
                            "self.inception5a(x)",
                            "Call"
                        ],
                        [
                            "self.inception5b(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (4, 4))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, 0.7, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_227": {
                "variable": {
                    "value": "R",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_276": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.inception3a(x)",
                            "Call"
                        ],
                        [
                            "self.inception3b(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool3(x)",
                            "Call"
                        ],
                        [
                            "self.inception4a(x)",
                            "Call"
                        ],
                        [
                            "self.inception4b(x)",
                            "Call"
                        ],
                        [
                            "self.inception4c(x)",
                            "Call"
                        ],
                        [
                            "self.inception4d(x)",
                            "Call"
                        ],
                        [
                            "self.inception4e(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool4(x)",
                            "Call"
                        ],
                        [
                            "self.inception5a(x)",
                            "Call"
                        ],
                        [
                            "self.inception5b(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (4, 4))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, 0.7, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(4, 4)",
                    "possible_values": []
                }
            },
            "flatten_280": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.inception3a(x)",
                            "Call"
                        ],
                        [
                            "self.inception3b(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool3(x)",
                            "Call"
                        ],
                        [
                            "self.inception4a(x)",
                            "Call"
                        ],
                        [
                            "self.inception4b(x)",
                            "Call"
                        ],
                        [
                            "self.inception4c(x)",
                            "Call"
                        ],
                        [
                            "self.inception4d(x)",
                            "Call"
                        ],
                        [
                            "self.inception4e(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool4(x)",
                            "Call"
                        ],
                        [
                            "self.inception5a(x)",
                            "Call"
                        ],
                        [
                            "self.inception5b(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (4, 4))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, 0.7, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_282": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "dropout_284": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.inception3a(x)",
                            "Call"
                        ],
                        [
                            "self.inception3b(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool3(x)",
                            "Call"
                        ],
                        [
                            "self.inception4a(x)",
                            "Call"
                        ],
                        [
                            "self.inception4b(x)",
                            "Call"
                        ],
                        [
                            "self.inception4c(x)",
                            "Call"
                        ],
                        [
                            "self.inception4d(x)",
                            "Call"
                        ],
                        [
                            "self.inception4e(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool4(x)",
                            "Call"
                        ],
                        [
                            "self.inception5a(x)",
                            "Call"
                        ],
                        [
                            "self.inception5b(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (4, 4))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, 0.7, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.7",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "cat_347": {
                "tensors": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[branch1, branch2, branch3, branch4]",
                            "List"
                        ],
                        [
                            "self._forward(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "relu_380": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool2(x)",
                            "Call"
                        ],
                        [
                            "self.inception3a(x)",
                            "Call"
                        ],
                        [
                            "self.inception3b(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool3(x)",
                            "Call"
                        ],
                        [
                            "self.inception4a(x)",
                            "Call"
                        ],
                        [
                            "self.inception4b(x)",
                            "Call"
                        ],
                        [
                            "self.inception4c(x)",
                            "Call"
                        ],
                        [
                            "self.inception4d(x)",
                            "Call"
                        ],
                        [
                            "self.inception4e(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool4(x)",
                            "Call"
                        ],
                        [
                            "self.inception5a(x)",
                            "Call"
                        ],
                        [
                            "self.inception5b(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (4, 4))",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x), inplace=True)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, 0.7, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "modules/layers.py": {
        "torch": {
            "RelProp_30": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "SwishImplementation_53": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            },
            "Identity_110": {
                "base_class_0": {
                    "value": "torch.nn.Identity",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "base_class_0": {
                    "value": "torch.nn.ReLU",
                    "possible_values": []
                }
            },
            "LeakyReLU_116": {
                "base_class_0": {
                    "value": "torch.nn.LeakyReLU",
                    "possible_values": []
                }
            },
            "Dropout_119": {
                "base_class_0": {
                    "value": "torch.nn.Dropout",
                    "possible_values": []
                }
            },
            "MaxPool2d_122": {
                "base_class_0": {
                    "value": "torch.nn.MaxPool2d",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_126": {
                "base_class_0": {
                    "value": "torch.nn.AdaptiveAvgPool2d",
                    "possible_values": []
                }
            },
            "ZeroPad2d_146": {
                "base_class_0": {
                    "value": "torch.nn.ZeroPad2d",
                    "possible_values": []
                }
            },
            "AvgPool2d_154": {
                "base_class_0": {
                    "value": "torch.nn.AvgPool2d",
                    "possible_values": []
                }
            },
            "Sequential_271": {
                "base_class_0": {
                    "value": "torch.nn.Sequential",
                    "possible_values": []
                }
            },
            "BatchNorm2d_281": {
                "base_class_0": {
                    "value": "torch.nn.BatchNorm2d",
                    "possible_values": []
                }
            },
            "Linear_330": {
                "base_class_0": {
                    "value": "torch.nn.Linear",
                    "possible_values": []
                }
            },
            "Conv2d_467": {
                "base_class_0": {
                    "value": "torch.nn.Conv2d",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_626": {
                "base_class_0": {
                    "value": "torch.nn.ConvTranspose2d",
                    "possible_values": []
                }
            },
            "rand_819": {
                "variable": {
                    "value": "rand",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 100, 224, 224)",
                    "possible_values": []
                }
            },
            "grad_37": {
                "variable": {
                    "value": "C",
                    "possible_values": []
                },
                "outputs": {
                    "value": "Z",
                    "possible_values": [
                        [
                            "self.forward(self.X)",
                            "Call"
                        ],
                        [
                            "self.forward(self.X)",
                            "Call"
                        ],
                        [
                            "self.forward(self.X)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.forward(self.X, self.dim)",
                            "Call"
                        ],
                        [
                            "self.forward(self.X, self.dim)",
                            "Call"
                        ],
                        [
                            "X * weight + 1e-09",
                            "BinOp"
                        ],
                        [
                            "Z1 + Z2",
                            "BinOp"
                        ],
                        [
                            "self.forward(self.X)",
                            "Call"
                        ],
                        [
                            "Z1 + Z2",
                            "BinOp"
                        ],
                        [
                            "Z1 + Z2",
                            "BinOp"
                        ]
                    ]
                },
                "inputs": {
                    "value": "X",
                    "possible_values": [
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ],
                        [
                            "self.padd_output",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "S",
                    "possible_values": [
                        [
                            "safe_divide(R, Z)",
                            "Call"
                        ],
                        [
                            "safe_divide(R, Z)",
                            "Call"
                        ],
                        [
                            "safe_divide(R, Z)",
                            "Call"
                        ],
                        [
                            "[safe_divide(r, z) for (r, z) in zip(R, Z)]",
                            "ListComp"
                        ],
                        [
                            "safe_divide(R, Z)",
                            "Call"
                        ],
                        [
                            "R / Z",
                            "BinOp"
                        ],
                        [
                            "safe_divide(R, Z)",
                            "Call"
                        ],
                        [
                            "R / Za",
                            "BinOp"
                        ],
                        [
                            "safe_divide(R, Z)",
                            "Call"
                        ],
                        [
                            "R / Za",
                            "BinOp"
                        ],
                        [
                            "safe_divide(R, Z)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sigmoid_63": {
                "variable": {
                    "value": "sigmoid_i",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "possible_values": [
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "range(idx)",
                            "Call"
                        ],
                        [
                            "range(idx)",
                            "Call"
                        ],
                        [
                            "range(idx)",
                            "Call"
                        ],
                        [
                            "range(idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_128": {
                "variable": {
                    "value": "px",
                    "possible_values": []
                },
                "input": {
                    "value": "self.X",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_168": {
                "variable": {
                    "value": "x0",
                    "possible_values": []
                },
                "input": {
                    "value": "self.X[0]",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_169": {
                "variable": {
                    "value": "x1",
                    "possible_values": []
                },
                "input": {
                    "value": "self.X[1]",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_333": {
                "variable": {
                    "value": "pw",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_334": {
                "variable": {
                    "value": "nw",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_335": {
                "variable": {
                    "value": "px",
                    "possible_values": []
                },
                "input": {
                    "value": "self.X",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_336": {
                "variable": {
                    "value": "nx",
                    "possible_values": []
                },
                "input": {
                    "value": "self.X",
                    "possible_values": []
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_448": {
                "variable": {
                    "value": "pw",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_449": {
                "variable": {
                    "value": "nw",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_451": {
                "variable": {
                    "value": "px",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ],
                        [
                            "self.padd_output",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_452": {
                "variable": {
                    "value": "nx",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ],
                        [
                            "self.padd_output",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ]
                    ]
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_594": {
                "variable": {
                    "value": "pw",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_595": {
                "variable": {
                    "value": "nw",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_596": {
                "variable": {
                    "value": "px",
                    "possible_values": []
                },
                "input": {
                    "value": "self.X",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_597": {
                "variable": {
                    "value": "nx",
                    "possible_values": []
                },
                "input": {
                    "value": "self.X",
                    "possible_values": []
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_629": {
                "variable": {
                    "value": "pw",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_630": {
                "variable": {
                    "value": "nw",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_631": {
                "variable": {
                    "value": "px",
                    "possible_values": []
                },
                "input": {
                    "value": "self.X",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_632": {
                "variable": {
                    "value": "nx",
                    "possible_values": []
                },
                "input": {
                    "value": "self.X",
                    "possible_values": []
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "conv2d_674": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.padd_output",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "clamp_799": {
                "variable": {
                    "value": "pw",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_800": {
                "variable": {
                    "value": "nw",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_801": {
                "variable": {
                    "value": "px",
                    "possible_values": []
                },
                "input": {
                    "value": "self.padd_output",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_802": {
                "variable": {
                    "value": "nx",
                    "possible_values": []
                },
                "input": {
                    "value": "self.padd_output",
                    "possible_values": []
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_131": {
                "variable": {
                    "value": "Z1",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "torch.clamp(self.X[1], min=0)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "self.output_size",
                    "possible_values": []
                }
            },
            "add_160": {
                "input": {
                    "value": "*inputs",
                    "possible_values": []
                }
            },
            "mul_165": {
                "input": {
                    "value": "*inputs",
                    "possible_values": []
                }
            },
            "cat_234": {
                "tensors": {
                    "value": "inputs",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "possible_values": []
                }
            },
            "linear_348": {
                "variable": {
                    "value": "Z1",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "torch.clamp(self.X[1], min=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w1",
                    "possible_values": []
                }
            },
            "linear_349": {
                "variable": {
                    "value": "Z2",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "possible_values": []
                },
                "weight": {
                    "value": "w2",
                    "possible_values": []
                }
            },
            "ne_366": {
                "variable": {
                    "value": "R_nonzero",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "possible_values": [
                        [
                            "self.X * C",
                            "BinOp"
                        ],
                        [
                            "m.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.X * Ca",
                            "BinOp"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "activator_relevances",
                            "Name"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "self.static_padding.relprop(R)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_371": {
                "variable": {
                    "value": "R_pos",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "possible_values": [
                        [
                            "self.X * C",
                            "BinOp"
                        ],
                        [
                            "m.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.X * Ca",
                            "BinOp"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "activator_relevances",
                            "Name"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "self.static_padding.relprop(R)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_372": {
                "variable": {
                    "value": "R_neg",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "possible_values": [
                        [
                            "self.X * C",
                            "BinOp"
                        ],
                        [
                            "m.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.X * Ca",
                            "BinOp"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "activator_relevances",
                            "Name"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "self.static_padding.relprop(R)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "linear_408": {
                "variable": {
                    "value": "Z1",
                    "possible_values": []
                },
                "input": {
                    "value": "px",
                    "possible_values": [
                        [
                            "torch.clamp(self.X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.padd_output, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.padd_output, min=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_409": {
                "variable": {
                    "value": "Z2",
                    "possible_values": []
                },
                "input": {
                    "value": "px",
                    "possible_values": [
                        [
                            "torch.clamp(self.X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.padd_output, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.padd_output, min=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "nw",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_410": {
                "variable": {
                    "value": "Z3",
                    "possible_values": []
                },
                "input": {
                    "value": "nx",
                    "possible_values": [
                        [
                            "torch.clamp(self.X, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(X, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.padd_output, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.padd_output, max=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_411": {
                "variable": {
                    "value": "Z4",
                    "possible_values": []
                },
                "input": {
                    "value": "nx",
                    "possible_values": [
                        [
                            "torch.clamp(self.X, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(X, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.padd_output, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.padd_output, max=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "nw",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_442": {
                "variable": {
                    "value": "Rp",
                    "possible_values": []
                },
                "input": {
                    "value": "Rp_tmp",
                    "possible_values": [
                        [
                            "backward(tmp_R_p[i])",
                            "Call"
                        ],
                        [
                            "backward(tmp_R_p[i])",
                            "Call"
                        ],
                        [
                            "backward(tmp_R_p[i])",
                            "Call"
                        ],
                        [
                            "backward(tmp_R_p[i])",
                            "Call"
                        ],
                        [
                            "first_prop(pd, px, nx, pw, nw)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_443": {
                "variable": {
                    "value": "Rn",
                    "possible_values": []
                },
                "input": {
                    "value": "Rp_tmp",
                    "possible_values": [
                        [
                            "backward(tmp_R_p[i])",
                            "Call"
                        ],
                        [
                            "backward(tmp_R_p[i])",
                            "Call"
                        ],
                        [
                            "backward(tmp_R_p[i])",
                            "Call"
                        ],
                        [
                            "backward(tmp_R_p[i])",
                            "Call"
                        ],
                        [
                            "first_prop(pd, px, nx, pw, nw)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "conv_transpose2d_474": {
                "input": {
                    "value": "DY",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "self.weight.unsqueeze(0).unsqueeze(2).unsqueeze(3) / (self.running_var.unsqueeze(0).unsqueeze(2).unsqueeze(3).pow(2) + self.eps).pow(0.5)",
                            "BinOp"
                        ],
                        [
                            "self.weight.unsqueeze(0).unsqueeze(2).unsqueeze(3) / (self.running_var.unsqueeze(0).unsqueeze(2).unsqueeze(3).pow(2) + self.eps).pow(0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "output_padding",
                    "possible_values": [
                        [
                            "self.X.size()[2] - ((Z.size()[2] - 1) * self.stride[0] - 2 * self.padding[0] + self.kernel_size[0])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_478": {
                "variable": {
                    "value": "pw",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_479": {
                "variable": {
                    "value": "nw",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_496": {
                "variable": {
                    "value": "pw",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_497": {
                "variable": {
                    "value": "nw",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_498": {
                "variable": {
                    "value": "px",
                    "possible_values": []
                },
                "input": {
                    "value": "self.X",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_499": {
                "variable": {
                    "value": "nx",
                    "possible_values": []
                },
                "input": {
                    "value": "self.X",
                    "possible_values": []
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "ne_530": {
                "variable": {
                    "value": "R_nonzero",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "possible_values": [
                        [
                            "self.X * C",
                            "BinOp"
                        ],
                        [
                            "m.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.X * Ca",
                            "BinOp"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "activator_relevances",
                            "Name"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "self.static_padding.relprop(R)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_535": {
                "variable": {
                    "value": "R_pos",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "possible_values": [
                        [
                            "self.X * C",
                            "BinOp"
                        ],
                        [
                            "m.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.X * Ca",
                            "BinOp"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "activator_relevances",
                            "Name"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "self.static_padding.relprop(R)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_536": {
                "variable": {
                    "value": "R_neg",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "possible_values": [
                        [
                            "self.X * C",
                            "BinOp"
                        ],
                        [
                            "m.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.X * Ca",
                            "BinOp"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "activator_relevances",
                            "Name"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "self.static_padding.relprop(R)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "conv_transpose2d_635": {
                "variable": {
                    "value": "Z1",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "torch.clamp(self.X[1], min=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w1",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "possible_values": []
                }
            },
            "clamp_679": {
                "variable": {
                    "value": "pw",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_680": {
                "variable": {
                    "value": "nw",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_697": {
                "variable": {
                    "value": "pw",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_698": {
                "variable": {
                    "value": "nw",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_699": {
                "variable": {
                    "value": "px",
                    "possible_values": []
                },
                "input": {
                    "value": "self.padd_output",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_700": {
                "variable": {
                    "value": "nx",
                    "possible_values": []
                },
                "input": {
                    "value": "self.padd_output",
                    "possible_values": []
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "ne_729": {
                "variable": {
                    "value": "R_nonzero",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "possible_values": [
                        [
                            "self.X * C",
                            "BinOp"
                        ],
                        [
                            "m.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.X * Ca",
                            "BinOp"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "activator_relevances",
                            "Name"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "self.static_padding.relprop(R)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_736": {
                "variable": {
                    "value": "R_pos",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "possible_values": [
                        [
                            "self.X * C",
                            "BinOp"
                        ],
                        [
                            "m.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.X * Ca",
                            "BinOp"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "activator_relevances",
                            "Name"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "self.static_padding.relprop(R)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_737": {
                "variable": {
                    "value": "R_neg",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "possible_values": [
                        [
                            "self.X * C",
                            "BinOp"
                        ],
                        [
                            "m.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.X * Ca",
                            "BinOp"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "activator_relevances",
                            "Name"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "self.static_padding.relprop(R)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sigmoid_50": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "i.detach()",
                            "Call"
                        ],
                        [
                            "[x0, x1]",
                            "List"
                        ],
                        [
                            "F.conv2d(self.padd_output, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_56": {
                "input": {
                    "value": "i",
                    "possible_values": [
                        [
                            "input[0]",
                            "Subscript"
                        ],
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ],
                        [
                            "range(idx)",
                            "Call"
                        ],
                        [
                            "range(idx)",
                            "Call"
                        ],
                        [
                            "range(idx)",
                            "Call"
                        ],
                        [
                            "range(idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_77": {
                "obj": {
                    "value": "self.X",
                    "possible_values": []
                }
            },
            "is_tensor_98": {
                "obj": {
                    "value": "R_p",
                    "possible_values": [
                        [
                            "R_p - bias_p",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_tensor_220": {
                "obj": {
                    "value": "R_p",
                    "possible_values": [
                        [
                            "R_p - bias_p",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_tensor_260": {
                "obj": {
                    "value": "R_p",
                    "possible_values": [
                        [
                            "R_p - bias_p",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_tensor_304": {
                "obj": {
                    "value": "self.bias",
                    "possible_values": []
                }
            },
            "is_tensor_312": {
                "obj": {
                    "value": "self.bias",
                    "possible_values": []
                }
            },
            "is_tensor_319": {
                "obj": {
                    "value": "R_p",
                    "possible_values": [
                        [
                            "R_p - bias_p",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_512": {
                "variable": {
                    "value": "Z1",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "torch.clamp(self.X[1], min=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w1",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "conv2d_513": {
                "variable": {
                    "value": "Z2",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "possible_values": []
                },
                "weight": {
                    "value": "w2",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "conv2d_712": {
                "variable": {
                    "value": "Z1",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "torch.clamp(self.X[1], min=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w1",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "conv2d_713": {
                "variable": {
                    "value": "Z2",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "possible_values": []
                },
                "weight": {
                    "value": "w2",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "is_tensor_91": {
                "obj": {
                    "value": "self.X",
                    "possible_values": []
                }
            },
            "ne_367": {
                "input": {
                    "value": "R",
                    "possible_values": [
                        [
                            "self.X * C",
                            "BinOp"
                        ],
                        [
                            "m.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.X * Ca",
                            "BinOp"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "activator_relevances",
                            "Name"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "self.static_padding.relprop(R)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "linear_389": {
                "input": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "torch.clamp(self.X[1], min=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w1",
                    "possible_values": []
                }
            },
            "linear_393": {
                "input": {
                    "value": "x2",
                    "possible_values": []
                },
                "weight": {
                    "value": "w2",
                    "possible_values": []
                }
            },
            "linear_401": {
                "input": {
                    "value": "px",
                    "possible_values": [
                        [
                            "torch.clamp(self.X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.padd_output, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.padd_output, min=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_402": {
                "input": {
                    "value": "px",
                    "possible_values": [
                        [
                            "torch.clamp(self.X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.padd_output, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.padd_output, min=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "nw",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_403": {
                "input": {
                    "value": "nx",
                    "possible_values": [
                        [
                            "torch.clamp(self.X, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(X, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.padd_output, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.padd_output, max=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_404": {
                "input": {
                    "value": "nx",
                    "possible_values": [
                        [
                            "torch.clamp(self.X, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(X, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.X, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.padd_output, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.padd_output, max=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "nw",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_453": {
                "obj": {
                    "value": "R_p",
                    "possible_values": [
                        [
                            "R_p - bias_p",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ne_531": {
                "input": {
                    "value": "R",
                    "possible_values": [
                        [
                            "self.X * C",
                            "BinOp"
                        ],
                        [
                            "m.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.X * Ca",
                            "BinOp"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "activator_relevances",
                            "Name"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "self.static_padding.relprop(R)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "conv2d_553": {
                "input": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "torch.clamp(self.X[1], min=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w1",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "conv2d_557": {
                "input": {
                    "value": "x2",
                    "possible_values": []
                },
                "weight": {
                    "value": "w2",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "conv2d_588": {
                "input": {
                    "value": "H",
                    "possible_values": [
                        [
                            "self.X * 0 + torch.max(torch.max(torch.max(self.X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "X * 0 + torch.max(torch.max(torch.max(X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "self.padd_output * 0 + torch.max(torch.max(torch.max(self.padd_output, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "X * 0 + torch.max(torch.max(torch.max(X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "nw",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "ne_730": {
                "input": {
                    "value": "R",
                    "possible_values": [
                        [
                            "self.X * C",
                            "BinOp"
                        ],
                        [
                            "m.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.X * Ca",
                            "BinOp"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "activator_relevances",
                            "Name"
                        ],
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "alpha * activator_relevances - beta * inhibitor_relevances",
                            "BinOp"
                        ],
                        [
                            "self.static_padding.relprop(R)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "conv2d_754": {
                "input": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "torch.clamp(self.X[1], min=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w1",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "conv2d_760": {
                "input": {
                    "value": "x2",
                    "possible_values": []
                },
                "weight": {
                    "value": "w2",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "conv2d_792": {
                "input": {
                    "value": "H",
                    "possible_values": [
                        [
                            "self.X * 0 + torch.max(torch.max(torch.max(self.X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "X * 0 + torch.max(torch.max(torch.max(X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "self.padd_output * 0 + torch.max(torch.max(torch.max(self.padd_output, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "X * 0 + torch.max(torch.max(torch.max(X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "nw",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "sum_367": {
                "input": {
                    "value": "R_nonzero",
                    "possible_values": [
                        [
                            "torch.ne(R, 0).type(R.type())",
                            "Call"
                        ],
                        [
                            "R.ne(0).type(R.type())",
                            "Call"
                        ],
                        [
                            "torch.ne(R, 0).type(R.type())",
                            "Call"
                        ],
                        [
                            "R.ne(0).type(R.type())",
                            "Call"
                        ],
                        [
                            "torch.ne(R, 0).type(R.type())",
                            "Call"
                        ],
                        [
                            "R.ne(0).type(R.type())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "linear_390": {
                "input": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "torch.clamp(self.X[1], min=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w2",
                    "possible_values": []
                }
            },
            "linear_392": {
                "input": {
                    "value": "x2",
                    "possible_values": []
                },
                "weight": {
                    "value": "w1",
                    "possible_values": []
                }
            },
            "min_482": {
                "input": {
                    "value": "self.X",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "max_485": {
                "input": {
                    "value": "self.X",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "conv2d_489": {
                "input": {
                    "value": "H",
                    "possible_values": [
                        [
                            "self.X * 0 + torch.max(torch.max(torch.max(self.X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "X * 0 + torch.max(torch.max(torch.max(X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "self.padd_output * 0 + torch.max(torch.max(torch.max(self.padd_output, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "X * 0 + torch.max(torch.max(torch.max(X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "nw",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                }
            },
            "sum_531": {
                "input": {
                    "value": "R_nonzero",
                    "possible_values": [
                        [
                            "torch.ne(R, 0).type(R.type())",
                            "Call"
                        ],
                        [
                            "R.ne(0).type(R.type())",
                            "Call"
                        ],
                        [
                            "torch.ne(R, 0).type(R.type())",
                            "Call"
                        ],
                        [
                            "R.ne(0).type(R.type())",
                            "Call"
                        ],
                        [
                            "torch.ne(R, 0).type(R.type())",
                            "Call"
                        ],
                        [
                            "R.ne(0).type(R.type())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "conv2d_554": {
                "input": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "torch.clamp(self.X[1], min=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w2",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "conv2d_556": {
                "input": {
                    "value": "x2",
                    "possible_values": []
                },
                "weight": {
                    "value": "w1",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "min_581": {
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ],
                        [
                            "self.padd_output",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "max_584": {
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ],
                        [
                            "self.padd_output",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "conv2d_586": {
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ],
                        [
                            "self.padd_output",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "conv2d_587": {
                "input": {
                    "value": "L",
                    "possible_values": [
                        [
                            "self.X * 0 + torch.min(torch.min(torch.min(self.X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "X * 0 + torch.min(torch.min(torch.min(X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "self.padd_output * 0 + torch.min(torch.min(torch.min(self.padd_output, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "X * 0 + torch.min(torch.min(torch.min(X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "min_683": {
                "input": {
                    "value": "self.padd_output",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "max_686": {
                "input": {
                    "value": "self.padd_output",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "conv2d_690": {
                "input": {
                    "value": "H",
                    "possible_values": [
                        [
                            "self.X * 0 + torch.max(torch.max(torch.max(self.X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "X * 0 + torch.max(torch.max(torch.max(X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "self.padd_output * 0 + torch.max(torch.max(torch.max(self.padd_output, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "X * 0 + torch.max(torch.max(torch.max(X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "nw",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, max=0)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                }
            },
            "sum_730": {
                "input": {
                    "value": "R_nonzero",
                    "possible_values": [
                        [
                            "torch.ne(R, 0).type(R.type())",
                            "Call"
                        ],
                        [
                            "R.ne(0).type(R.type())",
                            "Call"
                        ],
                        [
                            "torch.ne(R, 0).type(R.type())",
                            "Call"
                        ],
                        [
                            "R.ne(0).type(R.type())",
                            "Call"
                        ],
                        [
                            "torch.ne(R, 0).type(R.type())",
                            "Call"
                        ],
                        [
                            "R.ne(0).type(R.type())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "conv2d_755": {
                "input": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "torch.clamp(self.X[1], min=0)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w2",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "conv2d_758": {
                "input": {
                    "value": "x2",
                    "possible_values": []
                },
                "weight": {
                    "value": "w1",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "min_785": {
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ],
                        [
                            "self.padd_output",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "max_788": {
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ],
                        [
                            "self.padd_output",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "conv2d_790": {
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ],
                        [
                            "self.padd_output",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "conv2d_791": {
                "input": {
                    "value": "L",
                    "possible_values": [
                        [
                            "self.X * 0 + torch.min(torch.min(torch.min(self.X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "X * 0 + torch.min(torch.min(torch.min(X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "self.padd_output * 0 + torch.min(torch.min(torch.min(self.padd_output, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "X * 0 + torch.min(torch.min(torch.min(X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "possible_values": []
                }
            },
            "clamp_211": {
                "input": {
                    "value": "rp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clamp_212": {
                "input": {
                    "value": "rp",
                    "possible_values": []
                },
                "max": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "conv2d_487": {
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ],
                        [
                            "self.padd_output",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                }
            },
            "conv2d_488": {
                "input": {
                    "value": "L",
                    "possible_values": [
                        [
                            "self.X * 0 + torch.min(torch.min(torch.min(self.X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "X * 0 + torch.min(torch.min(torch.min(X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "self.padd_output * 0 + torch.min(torch.min(torch.min(self.padd_output, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "X * 0 + torch.min(torch.min(torch.min(X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                }
            },
            "conv2d_688": {
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "self.X",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ],
                        [
                            "self.padd_output",
                            "Attribute"
                        ],
                        [
                            "X1",
                            "Name"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                }
            },
            "conv2d_689": {
                "input": {
                    "value": "L",
                    "possible_values": [
                        [
                            "self.X * 0 + torch.min(torch.min(torch.min(self.X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "X * 0 + torch.min(torch.min(torch.min(X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "self.padd_output * 0 + torch.min(torch.min(torch.min(self.padd_output, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ],
                        [
                            "X * 0 + torch.min(torch.min(torch.min(X, dim=1, keepdim=True)[0], dim=2, keepdim=True)[0], dim=3, keepdim=True)[0]",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "pw",
                    "possible_values": [
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(self.weight, min=0)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                }
            }
        }
    },
    "modules/resnet.py": {
        "torch": {
            "BasicBlock_30": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Sequential(conv1x1(self.inplanes, planes * block.expansion, stride), BatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Bottleneck_115": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "Sequential(conv1x1(self.inplanes, planes * block.expansion, stride), BatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ResNet_229": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.long": {
                    "value": "long",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_classes": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_284": {
                "variable": {
                    "value": "R",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "possible_values": []
                }
            },
            "argmax_283": {
                "variable": {
                    "value": "maxindex",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample.relprop(x, alpha)",
                            "Call"
                        ],
                        [
                            "self.downsample.m_relprop(x, pred, alpha)",
                            "Call"
                        ],
                        [
                            "self.downsample.RAP_relprop(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(layer4)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "mean_314": {
                "variable": {
                    "value": "r_weight4",
                    "possible_values": []
                },
                "input": {
                    "value": "R4",
                    "possible_values": [
                        [
                            "self.avgpool.relprop(R, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_316": {
                "variable": {
                    "value": "r_cam4",
                    "possible_values": []
                },
                "input": {
                    "value": "r_cam4",
                    "possible_values": [
                        [
                            "layer4 * r_weight4",
                            "BinOp"
                        ],
                        [
                            "torch.sum(r_cam4, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "is_tensor_201": {
                "obj": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "self.conv1.relprop(out, alpha)",
                            "Call"
                        ],
                        [
                            "self.conv1.m_relprop(out, pred, alpha)",
                            "Call"
                        ],
                        [
                            "self.conv1.RAP_relprop(out)",
                            "Call"
                        ],
                        [
                            "self.conv1.relprop(out, alpha)",
                            "Call"
                        ],
                        [
                            "self.conv1.m_relprop(out, pred, alpha)",
                            "Call"
                        ],
                        [
                            "self.conv1.RAP_relprop(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_321": {
                "variable": {
                    "value": "r_weight3",
                    "possible_values": []
                },
                "input": {
                    "value": "R3",
                    "possible_values": [
                        [
                            "self.layer4.relprop(R4, 1)",
                            "Call"
                        ],
                        [
                            "self.layer4.relprop(R4, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_323": {
                "variable": {
                    "value": "r_cam3",
                    "possible_values": []
                },
                "input": {
                    "value": "r_cam3",
                    "possible_values": [
                        [
                            "layer3 * r_weight3",
                            "BinOp"
                        ],
                        [
                            "torch.sum(r_cam3, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "is_tensor_364": {
                "obj": {
                    "value": "R",
                    "possible_values": [
                        [
                            "torch.ones(x.shape).cuda()",
                            "Call"
                        ],
                        [
                            "R / -self.num_classes",
                            "BinOp"
                        ],
                        [
                            "self.CLRP(z, target_class)",
                            "Call"
                        ],
                        [
                            "self.fc.relprop(R, 1)",
                            "Call"
                        ],
                        [
                            "R.reshape_as(self.avgpool.Y)",
                            "Call"
                        ],
                        [
                            "self.fc.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "R.reshape_as(self.avgpool.Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.layer4.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.layer3.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.layer2.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.layer1.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.maxpool.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.relu.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.bn1.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.conv1.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.fc.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "R.reshape_as(self.avgpool.Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.layer4.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.layer3.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.layer2.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "self.fc.m_relprop(R, pred, alpha)",
                            "Call"
                        ],
                        [
                            "R.reshape_as(self.avgpool.Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.m_relprop(R, pred, alpha)",
                            "Call"
                        ],
                        [
                            "self.layer4.m_relprop(R, pred, alpha)",
                            "Call"
                        ],
                        [
                            "self.layer3.m_relprop(R, pred, alpha)",
                            "Call"
                        ],
                        [
                            "self.layer2.m_relprop(R, pred, alpha)",
                            "Call"
                        ],
                        [
                            "self.layer1.m_relprop(R, pred, alpha)",
                            "Call"
                        ],
                        [
                            "self.maxpool.m_relprop(R, pred, alpha)",
                            "Call"
                        ],
                        [
                            "self.relu.m_relprop(R, pred, alpha)",
                            "Call"
                        ],
                        [
                            "self.bn1.m_relprop(R, pred, alpha)",
                            "Call"
                        ],
                        [
                            "self.conv1.m_relprop(R, pred, alpha)",
                            "Call"
                        ],
                        [
                            "self.fc.RAP_relprop(R)",
                            "Call"
                        ],
                        [
                            "R.reshape_as(self.avgpool.Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.RAP_relprop(R)",
                            "Call"
                        ],
                        [
                            "self.layer4.RAP_relprop(R)",
                            "Call"
                        ],
                        [
                            "self.layer3.RAP_relprop(R)",
                            "Call"
                        ],
                        [
                            "self.layer2.RAP_relprop(R)",
                            "Call"
                        ],
                        [
                            "self.layer1.RAP_relprop(R)",
                            "Call"
                        ],
                        [
                            "self.maxpool.RAP_relprop(R)",
                            "Call"
                        ],
                        [
                            "self.relu.RAP_relprop(R)",
                            "Call"
                        ],
                        [
                            "self.bn1.RAP_relprop(R)",
                            "Call"
                        ],
                        [
                            "self.conv1.RAP_relprop(R)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_328": {
                "variable": {
                    "value": "r_weight2",
                    "possible_values": []
                },
                "input": {
                    "value": "R2",
                    "possible_values": [
                        [
                            "self.layer3.relprop(R3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_330": {
                "variable": {
                    "value": "r_cam2",
                    "possible_values": []
                },
                "input": {
                    "value": "r_cam2",
                    "possible_values": [
                        [
                            "layer2 * r_weight2",
                            "BinOp"
                        ],
                        [
                            "torch.sum(r_cam2, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "modules/vgg.py": {
        "torch": {
            "VGG_spread_23": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.features": {
                    "value": "features",
                    "possible_values": []
                }
            },
            "VGG_92": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.features": {
                    "value": "features",
                    "possible_values": []
                },
                "self.num_classes": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_114": {
                "variable": {
                    "value": "R",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "possible_values": []
                }
            },
            "mean_142": {
                "variable": {
                    "value": "r_weight",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "possible_values": [
                        [
                            "torch.ones(x.shape).cuda()",
                            "Call"
                        ],
                        [
                            "R / -self.num_classes",
                            "BinOp"
                        ],
                        [
                            "self.CLRP(x, target_class)",
                            "Call"
                        ],
                        [
                            "self.classifier.relprop(R)",
                            "Call"
                        ],
                        [
                            "R.reshape_as(next(reversed(self.features._modules.values())).Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.relprop(R)",
                            "Call"
                        ],
                        [
                            "self.features[i].relprop(R)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sum_144": {
                "variable": {
                    "value": "r_cam",
                    "possible_values": []
                },
                "input": {
                    "value": "r_cam",
                    "possible_values": [
                        [
                            "target_layer * r_weight",
                            "BinOp"
                        ],
                        [
                            "torch.sum(r_cam, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "argmax_113": {
                "variable": {
                    "value": "maxindex",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.classifier.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "x.reshape_as(next(reversed(self.features._modules.values())).Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.relprop(x, alpha)",
                            "Call"
                        ],
                        [
                            "self.features.relprop(x, alpha)",
                            "Call"
                        ],
                        [
                            "self.classifier.m_relprop(R, pred, alpha)",
                            "Call"
                        ],
                        [
                            "x.reshape_as(next(reversed(self.features._modules.values())).Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.m_relprop(x, pred, alpha)",
                            "Call"
                        ],
                        [
                            "self.features.m_relprop(x, pred, alpha)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.classifier.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "x.reshape_as(next(reversed(self.features._modules.values())).Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.relprop(x, alpha)",
                            "Call"
                        ],
                        [
                            "self.features[i].relprop(x, alpha)",
                            "Call"
                        ],
                        [
                            "self.classifier.m_relprop(R, pred, alpha)",
                            "Call"
                        ],
                        [
                            "x.reshape_as(next(reversed(self.features._modules.values())).Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.m_relprop(x, pred, alpha)",
                            "Call"
                        ],
                        [
                            "self.features.m_relprop(x, pred, alpha)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_tensor_58": {
                "obj": {
                    "value": "x",
                    "possible_values": [
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.classifier.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "x.reshape_as(next(reversed(self.features._modules.values())).Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.relprop(x, alpha)",
                            "Call"
                        ],
                        [
                            "self.features.relprop(x, alpha)",
                            "Call"
                        ],
                        [
                            "self.classifier.m_relprop(R, pred, alpha)",
                            "Call"
                        ],
                        [
                            "x.reshape_as(next(reversed(self.features._modules.values())).Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.m_relprop(x, pred, alpha)",
                            "Call"
                        ],
                        [
                            "self.features.m_relprop(x, pred, alpha)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.classifier.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "x.reshape_as(next(reversed(self.features._modules.values())).Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.relprop(x, alpha)",
                            "Call"
                        ],
                        [
                            "self.features[i].relprop(x, alpha)",
                            "Call"
                        ],
                        [
                            "self.classifier.m_relprop(R, pred, alpha)",
                            "Call"
                        ],
                        [
                            "x.reshape_as(next(reversed(self.features._modules.values())).Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.m_relprop(x, pred, alpha)",
                            "Call"
                        ],
                        [
                            "self.features.m_relprop(x, pred, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_69": {
                "obj": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "self.classifier.RAP_relprop(R)",
                            "Call"
                        ],
                        [
                            "x1.reshape_as(next(reversed(self.features._modules.values())).Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.RAP_relprop(x1)",
                            "Call"
                        ],
                        [
                            "self.features.RAP_relprop(x1)",
                            "Call"
                        ],
                        [
                            "self.classifier.RAP_relprop(R)",
                            "Call"
                        ],
                        [
                            "x1.reshape_as(next(reversed(self.features._modules.values())).Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.RAP_relprop(x1)",
                            "Call"
                        ],
                        [
                            "self.features.RAP_relprop(x1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_160": {
                "obj": {
                    "value": "x",
                    "possible_values": [
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.classifier.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "x.reshape_as(next(reversed(self.features._modules.values())).Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.relprop(x, alpha)",
                            "Call"
                        ],
                        [
                            "self.features.relprop(x, alpha)",
                            "Call"
                        ],
                        [
                            "self.classifier.m_relprop(R, pred, alpha)",
                            "Call"
                        ],
                        [
                            "x.reshape_as(next(reversed(self.features._modules.values())).Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.m_relprop(x, pred, alpha)",
                            "Call"
                        ],
                        [
                            "self.features.m_relprop(x, pred, alpha)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.classifier.relprop(R, alpha)",
                            "Call"
                        ],
                        [
                            "x.reshape_as(next(reversed(self.features._modules.values())).Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.relprop(x, alpha)",
                            "Call"
                        ],
                        [
                            "self.features[i].relprop(x, alpha)",
                            "Call"
                        ],
                        [
                            "self.classifier.m_relprop(R, pred, alpha)",
                            "Call"
                        ],
                        [
                            "x.reshape_as(next(reversed(self.features._modules.values())).Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.m_relprop(x, pred, alpha)",
                            "Call"
                        ],
                        [
                            "self.features.m_relprop(x, pred, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_171": {
                "obj": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "self.classifier.RAP_relprop(R)",
                            "Call"
                        ],
                        [
                            "x1.reshape_as(next(reversed(self.features._modules.values())).Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.RAP_relprop(x1)",
                            "Call"
                        ],
                        [
                            "self.features.RAP_relprop(x1)",
                            "Call"
                        ],
                        [
                            "self.classifier.RAP_relprop(R)",
                            "Call"
                        ],
                        [
                            "x1.reshape_as(next(reversed(self.features._modules.values())).Y)",
                            "Call"
                        ],
                        [
                            "self.avgpool.RAP_relprop(x1)",
                            "Call"
                        ],
                        [
                            "self.features.RAP_relprop(x1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}