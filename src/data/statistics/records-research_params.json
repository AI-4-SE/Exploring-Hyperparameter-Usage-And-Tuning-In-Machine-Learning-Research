{
    "beds-bench/benchmark.py": {
        "sklearn": {
            "StandardScaler_75": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "beds-bench/models/GP.py": {
        "sklearn": {
            "roc_auc_score_30": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Yv",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "Pv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.predict_proba(Xv)[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "RationalQuadratic_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "beds-bench/models/LogReg.py": {
        "sklearn": {
            "roc_auc_score_27": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Yv",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "Pv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.predict_proba(Xv)[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "beds-bench/models/MLP.py": {
        "sklearn": {
            "roc_auc_score_29": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Yv",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "Pv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.predict_proba(Xv)[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "beds-bench/models/MondrianForest.py": {
        "sklearn": {
            "roc_auc_score_27": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Yv",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "Pv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.predict_proba(Xv)[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "beds-bench/models/RandomForest.py": {
        "sklearn": {
            "roc_auc_score_27": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Yv",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "Pv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.predict_proba(Xv)[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "beds-bench/models/SNGP.py": {
        "sklearn": {
            "RandomizedSearchCV_214": {
                "variable": {
                    "value": "best_model",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "builder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KerasClassifierLOSS(create_model, verbose=0)",
                            "Call"
                        ]
                    ]
                },
                "param_distributions": {
                    "value": "param_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(l2=[0.1, 0.03, 0.01, 0.003, 0.001], depth=[2, 3, 4, 5], width=[64, 128, 256, 512], batch_size=[32, 64, 128, 256], activation=['tanh', 'relu', 'sigmoid'], epochs=[40])",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "n_iter": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2020",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roc_auc_score_194": {
                "y_true": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.binomial(1, 0.1, size=M)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.call(inputs).numpy()",
                            "Call"
                        ],
                        [
                            "self.model(X).numpy().flatten()",
                            "Call"
                        ],
                        [
                            "self.model(X).numpy().flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_217": {
                "y_true": {
                    "value": "Yv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.binomial(1, 0.1, size=M)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "best_model.predict_proba(Xv)[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "set_seed_28": {
                "seed": {
                    "value": "2020",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.dnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "[block() for _ in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dense_158": {
                "variable": {
                    "value": "self.proj_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "gp_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "random_normal",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_164": {
                "variable": {
                    "value": "self.last_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_173": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last_layer(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_142": {
                "units": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "Activation(activation)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(l2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "EarlyStopping_181": {
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "min_delta": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AUC_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_143": {
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "beds-bench/results.py": {
        "sklearn": {
            "roc_auc_score_143": {
                "y_true": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y.flatten()",
                            "Call"
                        ],
                        [
                            "pd.read_csv('%s/train-%s/test/%s_Y.csv' % (FEATDIR, train_sl, test_sl))",
                            "Call"
                        ],
                        [
                            "np.load('%s/%s/predictions/train-%s/test-%s/%s/test/labels.npy' % (basedir, task_BRNN(task), train_sl, test_sl, ts))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "Pfix * (1 - Pfix)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "roc_auc_score_184": {
                "y_true": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Y.flatten()",
                            "Call"
                        ],
                        [
                            "pd.read_csv('%s/train-%s/test/%s_Y.csv' % (FEATDIR, train_sl, test_sl))",
                            "Call"
                        ],
                        [
                            "np.load('%s/%s/predictions/train-%s/test-%s/%s/test/labels.npy' % (basedir, task_BRNN(task), train_sl, test_sl, ts))",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "Pfix * (1 - Pfix)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "clinical-notes-prediction/ehr_prediction_model.py": {
        "sklearn": {}
    },
    "clinical-notes-prediction/input_transformer.py": {
        "sklearn": {}
    },
    "graph-convolutional-transformer/eicu_samples/process_eicu.py": {
        "sklearn": {
            "train_test_split_290": {
                "variable": {
                    "value": "(key_train, key_temp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "key_list",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_292": {
                "variable": {
                    "value": "(key_valid, key_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "key_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "SequenceExample_239": {
                "variable": {
                    "value": "seqex",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordWriter_469": {
                "path": {
                    "value": "fold_path + '/train.tfrecord'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TFRecordWriter_473": {
                "path": {
                    "value": "fold_path + '/validation.tfrecord'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TFRecordWriter_477": {
                "path": {
                    "value": "fold_path + '/test.tfrecord'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "graph-convolutional-transformer/synthetic_samples/process_synthetic.py": {
        "sklearn": {
            "train_test_split_413": {
                "variable": {
                    "value": "(key_train, key_temp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "key_list",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_414": {
                "variable": {
                    "value": "(key_valid, key_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "key_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "SequenceExample_147": {
                "variable": {
                    "value": "seqex",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordWriter_518": {
                "path": {
                    "value": "fold_path + '/train.tfrecord'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TFRecordWriter_522": {
                "path": {
                    "value": "fold_path + '/validation.tfrecord'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TFRecordWriter_526": {
                "path": {
                    "value": "fold_path + '/test.tfrecord'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "beds-bench/feat_seqex.py": {
        "tensorflow": {
            "GFile_253": {
                "variable": {
                    "value": "fd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s/seqex/%s/VOCAB/EmbedConfigFile.pbtxt' % (DATADIR, sl)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SequenceExample_180": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_249": {
                "variable": {
                    "value": "fd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'%s/seqex/%s/VOCAB/%s.txt' % (DATADIR, sl, key)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "makedirs_287": {
                "path": {
                    "value": "'%s/seqex/%s/VOCAB' % (DATADIR, sl)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TFRecordWriter_228": {
                "path": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "clinical-notes-prediction/lstm.py": {
        "tensorflow": {
            "LSTMCell_100": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self._model_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self._trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_60": {
                "variable": {
                    "value": "returned_state",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "final_new_state[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "h": {
                    "value": "final_new_state[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DropoutWrapper_105": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(self._model_dim, trainable=self._trainable)",
                            "Call"
                        ],
                        [
                            "self._ZoneoutWrapper(cell, 1.0 - self._zoneout_keep_prob, self._is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cell, input_keep_prob=self._input_dropout_keep_prob, output_keep_prob=self._hidden_dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "self._input_dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self._hidden_dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_116": {
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.LSTMCell(self._model_dim, trainable=self._trainable)",
                            "Call"
                        ],
                        [
                            "self._ZoneoutWrapper(cell, 1.0 - self._zoneout_keep_prob, self._is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cell, input_keep_prob=self._input_dropout_keep_prob, output_keep_prob=self._hidden_dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "self._variational_input_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self._variational_output_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "variational_recurrent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "bidirectional_dynamic_rnn_136": {
                "variable": {
                    "value": "(outputs, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "fw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._LSTMCell()",
                            "Call"
                        ],
                        [
                            "self._VariationalDropout(fw_cell, input_size)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "bw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._LSTMCell()",
                            "Call"
                        ],
                        [
                            "self._VariationalDropout(bw_cell, input_size)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_144": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(outputs, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_145": {
                "variable": {
                    "value": "last_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[last_output_fw, last_output_bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dynamic_rnn_147": {
                "variable": {
                    "value": "(outputs, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "fw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._LSTMCell()",
                            "Call"
                        ],
                        [
                            "self._VariationalDropout(fw_cell, input_size)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "floor_52": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - self._zoneout_prob",
                            "BinOp"
                        ],
                        [
                            "random_tensor + tf.random_uniform(tf.shape(state_element))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_51": {
                "input": {
                    "value": "state_element",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "graph-convolutional-transformer/graph_convolutional_transformer.py": {
        "tensorflow": {
            "zeros_43": {
                "variable": {
                    "value": "dummy_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_51": {
                "variable": {
                    "value": "self._params[visit]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "visit",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_97": {
                "variable": {
                    "value": "embeddings[visit]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self._params['visit'][None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_236": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._layers['Q'][stack_index](features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, num_codes, self._hidden_size, self._num_heads])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, perm=[0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_codes, self._hidden_size, self._num_heads]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_240": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._layers['K'][stack_index](features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch_size, num_codes, self._hidden_size, self._num_heads])",
                            "Call"
                        ],
                        [
                            "tf.transpose(k, perm=[0, 3, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_codes, self._hidden_size, self._num_heads]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_244": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._layers['Q'][stack_index](features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, num_codes, self._hidden_size, self._num_heads])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, perm=[0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_245": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._layers['K'][stack_index](features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch_size, num_codes, self._hidden_size, self._num_heads])",
                            "Call"
                        ],
                        [
                            "tf.transpose(k, perm=[0, 3, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_293": {
                "variable": {
                    "value": "mask_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(tf.equal(masks[:, :, 0], 0.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_294": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(mask_idx)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.float32.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scatter_nd_295": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "mask_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.where(tf.equal(masks[:, :, 0], 0.0)), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([tf.shape(mask_idx)[0]], tf.float32.max)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(masks[:, :, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_395": {
                "variable": {
                    "value": "row0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([1, 1]), tf.ones([1, num_dx_ids]), tf.zeros([1, num_proc_ids + num_lab_ids])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_402": {
                "variable": {
                    "value": "row1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([num_dx_ids, 1 + num_dx_ids]), tf.ones([num_dx_ids, num_proc_ids]), tf.zeros([num_dx_ids, num_lab_ids])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_409": {
                "variable": {
                    "value": "row2",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([num_proc_ids, 1 + num_dx_ids + num_proc_ids]), tf.ones([num_proc_ids, num_lab_ids])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_415": {
                "variable": {
                    "value": "row3",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_lab_ids, num_codes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_417": {
                "variable": {
                    "value": "guide",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[row0, row1, row2, row3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_419": {
                "variable": {
                    "value": "guide",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "guide[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_431": {
                "variable": {
                    "value": "prior_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prior_indices.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_432": {
                "variable": {
                    "value": "prior_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prior_batch_idx[:, None], prior_idx[:, :1], prior_idx[:, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_437": {
                "variable": {
                    "value": "sorted_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "temp_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_idx[:, 0] * 1000000 + prior_idx[:, 1] * 1000 + prior_idx[:, 2]",
                            "BinOp"
                        ],
                        [
                            "prior_idx[:, 0] * 1000000 + prior_idx[:, 1] * 1000 + prior_idx[:, 2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_438": {
                "variable": {
                    "value": "prior_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "prior_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(prior_indices.values, [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([prior_batch_idx[:, None], prior_idx[:, :1], prior_idx[:, 1:]], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(prior_idx, sorted_idx)",
                            "Call"
                        ],
                        [
                            "tf.reshape(prior_indices.values, [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([prior_batch_idx[:, None], prior_idx[:, :1], prior_idx[:, 1:]], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(prior_idx, sorted_idx)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "sorted_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.argsort(temp_idx)",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.argsort(temp_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseTensor_441": {
                "variable": {
                    "value": "sparse_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "prior_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(prior_indices.values, [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([prior_batch_idx[:, None], prior_idx[:, :1], prior_idx[:, 1:]], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(prior_idx, sorted_idx)",
                            "Call"
                        ],
                        [
                            "tf.reshape(prior_indices.values, [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([prior_batch_idx[:, None], prior_idx[:, :1], prior_idx[:, 1:]], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(prior_idx, sorted_idx)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "prior_idx_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_values.values",
                            "Attribute"
                        ],
                        [
                            "prior_values.values",
                            "Attribute"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "prior_idx_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, max_num_codes * 3, max_num_codes * 3]",
                            "List"
                        ],
                        [
                            "[batch_size, max_num_codes * 2, max_num_codes * 2]",
                            "List"
                        ]
                    ]
                }
            },
            "to_dense_443": {
                "variable": {
                    "value": "prior_guide",
                    "type": "variable",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "sparse_prior",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.SparseTensor(indices=prior_idx, values=prior_idx_values, dense_shape=prior_idx_shape)",
                            "Call"
                        ],
                        [
                            "tf.SparseTensor(indices=prior_idx, values=prior_idx_values, dense_shape=prior_idx_shape)",
                            "Call"
                        ]
                    ]
                },
                "validate_indices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "convert_to_tensor_445": {
                "variable": {
                    "value": "visit_guide",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[prior_scalar] * max_num_codes + [0.0] * max_num_codes * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_448": {
                "variable": {
                    "value": "prior_guide",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.tile(visit_guide[None, None, :], [batch_size, 1, 1]), prior_guide]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_451": {
                "variable": {
                    "value": "visit_guide",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[0.0], visit_guide]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_452": {
                "variable": {
                    "value": "prior_guide",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.tile(visit_guide[None, :, None], [batch_size, 1, 1]), prior_guide]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_458": {
                "variable": {
                    "value": "degrees",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "prior_guide",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.sparse.to_dense(sparse_prior, validate_indices=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.tile(visit_guide[None, None, :], [batch_size, 1, 1]), prior_guide], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.tile(visit_guide[None, :, None], [batch_size, 1, 1]), prior_guide], axis=2)",
                            "Call"
                        ],
                        [
                            "prior_guide * mask[:, :, None] * mask[:, None, :] + prior_scalar * tf.eye(num_codes)[None, :, :]",
                            "BinOp"
                        ],
                        [
                            "prior_guide / degrees[:, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.sparse.to_dense(sparse_prior, validate_indices=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.tile(visit_guide[None, None, :], [batch_size, 1, 1]), prior_guide], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.tile(visit_guide[None, :, None], [batch_size, 1, 1]), prior_guide], axis=2)",
                            "Call"
                        ],
                        [
                            "prior_guide * mask[:, :, None] * mask[:, None, :] + prior_scalar * tf.eye(num_codes)[None, :, :]",
                            "BinOp"
                        ],
                        [
                            "prior_guide / degrees[:, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_498": {
                "variable": {
                    "value": "row0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([1, 1]), tf.ones([1, num_dx_ids]), tf.zeros([1, num_proc_ids])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_505": {
                "variable": {
                    "value": "row1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([num_dx_ids, 1 + num_dx_ids]), tf.ones([num_dx_ids, num_proc_ids])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_511": {
                "variable": {
                    "value": "row2",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_proc_ids, num_codes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_513": {
                "variable": {
                    "value": "guide",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[row0, row1, row2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_515": {
                "variable": {
                    "value": "guide",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "guide[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_527": {
                "variable": {
                    "value": "prior_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prior_indices.values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_528": {
                "variable": {
                    "value": "prior_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prior_batch_idx[:, None], prior_idx[:, :1], prior_idx[:, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argsort_533": {
                "variable": {
                    "value": "sorted_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "temp_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_idx[:, 0] * 1000000 + prior_idx[:, 1] * 1000 + prior_idx[:, 2]",
                            "BinOp"
                        ],
                        [
                            "prior_idx[:, 0] * 1000000 + prior_idx[:, 1] * 1000 + prior_idx[:, 2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_534": {
                "variable": {
                    "value": "prior_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "prior_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(prior_indices.values, [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([prior_batch_idx[:, None], prior_idx[:, :1], prior_idx[:, 1:]], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(prior_idx, sorted_idx)",
                            "Call"
                        ],
                        [
                            "tf.reshape(prior_indices.values, [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([prior_batch_idx[:, None], prior_idx[:, :1], prior_idx[:, 1:]], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(prior_idx, sorted_idx)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "sorted_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.framework.argsort(temp_idx)",
                            "Call"
                        ],
                        [
                            "tf.contrib.framework.argsort(temp_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseTensor_537": {
                "variable": {
                    "value": "sparse_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "prior_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(prior_indices.values, [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([prior_batch_idx[:, None], prior_idx[:, :1], prior_idx[:, 1:]], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(prior_idx, sorted_idx)",
                            "Call"
                        ],
                        [
                            "tf.reshape(prior_indices.values, [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.concat([prior_batch_idx[:, None], prior_idx[:, :1], prior_idx[:, 1:]], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.gather(prior_idx, sorted_idx)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "prior_idx_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_values.values",
                            "Attribute"
                        ],
                        [
                            "prior_values.values",
                            "Attribute"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "prior_idx_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, max_num_codes * 3, max_num_codes * 3]",
                            "List"
                        ],
                        [
                            "[batch_size, max_num_codes * 2, max_num_codes * 2]",
                            "List"
                        ]
                    ]
                }
            },
            "to_dense_539": {
                "variable": {
                    "value": "prior_guide",
                    "type": "variable",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "sparse_prior",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.SparseTensor(indices=prior_idx, values=prior_idx_values, dense_shape=prior_idx_shape)",
                            "Call"
                        ],
                        [
                            "tf.SparseTensor(indices=prior_idx, values=prior_idx_values, dense_shape=prior_idx_shape)",
                            "Call"
                        ]
                    ]
                },
                "validate_indices": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "convert_to_tensor_541": {
                "variable": {
                    "value": "visit_guide",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[prior_scalar] * max_num_codes + [0.0] * max_num_codes * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_544": {
                "variable": {
                    "value": "prior_guide",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.tile(visit_guide[None, None, :], [batch_size, 1, 1]), prior_guide]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_547": {
                "variable": {
                    "value": "visit_guide",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[0.0], visit_guide]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_548": {
                "variable": {
                    "value": "prior_guide",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.tile(visit_guide[None, :, None], [batch_size, 1, 1]), prior_guide]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_554": {
                "variable": {
                    "value": "degrees",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "prior_guide",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.sparse.to_dense(sparse_prior, validate_indices=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.tile(visit_guide[None, None, :], [batch_size, 1, 1]), prior_guide], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.tile(visit_guide[None, :, None], [batch_size, 1, 1]), prior_guide], axis=2)",
                            "Call"
                        ],
                        [
                            "prior_guide * mask[:, :, None] * mask[:, None, :] + prior_scalar * tf.eye(num_codes)[None, :, :]",
                            "BinOp"
                        ],
                        [
                            "prior_guide / degrees[:, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.sparse.to_dense(sparse_prior, validate_indices=True)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.tile(visit_guide[None, None, :], [batch_size, 1, 1]), prior_guide], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.tile(visit_guide[None, :, None], [batch_size, 1, 1]), prior_guide], axis=2)",
                            "Call"
                        ],
                        [
                            "prior_guide * mask[:, :, None] * mask[:, None, :] + prior_scalar * tf.eye(num_codes)[None, :, :]",
                            "BinOp"
                        ],
                        [
                            "prior_guide / degrees[:, :, None]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TFRecordDataset_608": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "tfrecord_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_701": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[embedding_dict[key] for key in keys]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_702": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mask_dict[key] for key in keys]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_724": {
                "variable": {
                    "value": "pre_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pre_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(pre_logit, [-1, self._embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._embedding_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_725": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pre_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(pre_logit, [-1, self._embedding_size])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self._num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "squeeze_726": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(pre_logit, self._num_classes, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_743": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.cast(batch_context[label_key], tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(pre_logit, self._num_classes, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_744": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + self._reg_coef * reg_term",
                            "BinOp"
                        ],
                        [
                            "self.get_loss(logits, labels, attentions)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_793": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(pre_logit, self._num_classes, activation=None)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_47": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "feature_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature_keys",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "(vocab_size, embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_49": {
                "variable": {
                    "value": "self._params[feature_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[emb, dummy_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_dense_85": {
                "variable": {
                    "value": "feature_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "sp_input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.SparseTensor(indices=feature_map[key].indices, values=feature_map[key].values, dense_shape=[feature_map[key].dense_shape[0], feature_map[key].dense_shape[1], max_num_codes])",
                            "Call"
                        ],
                        [
                            "feature_map[key]",
                            "Subscript"
                        ]
                    ]
                },
                "default_value": {
                    "value": "self._vocab_sizes[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_87": {
                "variable": {
                    "value": "feature_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse.to_dense(feature, default_value=self._vocab_sizes[key])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(feature_ids, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_88": {
                "variable": {
                    "value": "embeddings[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "self._params[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ids": {
                    "value": "feature_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sparse.to_dense(feature, default_value=self._vocab_sizes[key])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(feature_ids, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseTensor_90": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "feature.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "tf.ones(tf.shape(feature.values))",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "feature.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_94": {
                "variable": {
                    "value": "masks[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sparse.to_dense(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_258": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pre_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k) / tf.sqrt(tf.cast(self._hidden_size, tf.float32))",
                            "BinOp"
                        ],
                        [
                            "pre_softmax - directed_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_260": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pre_softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k) / tf.sqrt(tf.cast(self._hidden_size, tf.float32))",
                            "BinOp"
                        ],
                        [
                            "pre_softmax - directed_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_300": {
                "variable": {
                    "value": "guide_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(tf.equal(guide, 0.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_301": {
                "variable": {
                    "value": "inf_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(guide_idx)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.float32.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scatter_nd_302": {
                "variable": {
                    "value": "inf_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "guide_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.where(tf.equal(guide, 0.0)), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "inf_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.fill([tf.shape(guide_idx)[0]], tf.float32.max)",
                            "Call"
                        ],
                        [
                            "tf.fill([num_codes, num_codes], tf.float32.max)",
                            "Call"
                        ],
                        [
                            "tf.matrix_set_diag(inf_matrix, tf.zeros(num_codes))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(guide)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fill_307": {
                "variable": {
                    "value": "inf_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[num_codes, num_codes]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.float32.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_326": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._layers['V'][i](features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch_size, num_codes, self._hidden_size, self._num_heads])",
                            "Call"
                        ],
                        [
                            "tf.transpose(v, perm=[0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_codes, self._hidden_size, self._num_heads]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_328": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._layers['V'][i](features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch_size, num_codes, self._hidden_size, self._num_heads])",
                            "Call"
                        ],
                        [
                            "tf.transpose(v, perm=[0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_330": {
                "variable": {
                    "value": "post_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(pre_softmax, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(pre_softmax)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.tile(prior_guide[:, None, :, :], [1, self._num_heads, 1, 1])",
                            "Call"
                        ],
                        [
                            "self.qk_op(features, i, batch_size, num_codes, attention_mask, inf_mask, directed_mask)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._layers['V'][i](features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch_size, num_codes, self._hidden_size, self._num_heads])",
                            "Call"
                        ],
                        [
                            "tf.transpose(v, perm=[0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "parse_single_sequence_example_599": {
                "variable": {
                    "value": "(batch_context, batch_sequence)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "context_features": {
                    "value": "self.context_features_config",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_features": {
                    "value": "self.sequence_features_config",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_603": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(batch_context[label_key], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_748": {
                "variable": {
                    "value": "attention_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_757": {
                "variable": {
                    "value": "reg_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kl_terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "AdamOptimizer_807": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_global_step_810": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_811": {
                "variable": {
                    "value": "update_global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_global_step()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "global_step + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "update_global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SparseTensor_76": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "feature_map[key].indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "feature_map[key].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "[feature_map[key].dense_shape[0], feature_map[key].dense_shape[1], max_num_codes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_96": {
                "input": {
                    "value": "embeddings.values()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_100": {
                "shape": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dx_ids.dense_shape[0]",
                            "Subscript"
                        ],
                        [
                            "dx_ids.dense_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(embeddings.values()[0])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(features)[0]",
                            "Subscript"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_202": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._layers['ffn'][stack_index][i](features)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(features, rate=self._ffn_dropout)",
                            "Call"
                        ],
                        [
                            "masks * features",
                            "BinOp"
                        ],
                        [
                            "post_ffn",
                            "variable"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._ffn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_246": {
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._layers['Q'][stack_index](features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, num_codes, self._hidden_size, self._num_heads])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, perm=[0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._layers['K'][stack_index](features)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch_size, num_codes, self._hidden_size, self._num_heads])",
                            "Call"
                        ],
                        [
                            "tf.transpose(k, perm=[0, 3, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_246": {
                "x": {
                    "value": "tf.cast(self._hidden_size, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_286": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._layers['ffn'][stack_index][i](features)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(features, rate=self._ffn_dropout)",
                            "Call"
                        ],
                        [
                            "masks * features",
                            "BinOp"
                        ],
                        [
                            "post_ffn",
                            "variable"
                        ]
                    ]
                }
            },
            "shape_287": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._layers['ffn'][stack_index][i](features)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(features, rate=self._ffn_dropout)",
                            "Call"
                        ],
                        [
                            "masks * features",
                            "BinOp"
                        ],
                        [
                            "post_ffn",
                            "variable"
                        ]
                    ]
                }
            },
            "where_293": {
                "condition": {
                    "value": "tf.equal(masks[:, :, 0], 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_317": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prior_guide[:, None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self._num_heads, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_333": {
                "variable": {
                    "value": "post_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "post_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(post_attention, axis=1)",
                            "Call"
                        ],
                        [
                            "post_attention + features",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(post_attention, begin_norm_axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(post_attention, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(post_attention, [batch_size, num_codes, -1])",
                            "Call"
                        ],
                        [
                            "self._layers['head_agg'][i](post_attention)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(post_attention, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_418": {
                "a": {
                    "value": "guide",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.concat([row0, row1, row2, row3], axis=0)",
                            "Call"
                        ],
                        [
                            "guide + tf.transpose(guide)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(guide[None, :, :], [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "guide * mask[:, :, None] * mask[:, None, :] + tf.eye(num_codes)[None, :, :]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.concat([row0, row1, row2], axis=0)",
                            "Call"
                        ],
                        [
                            "guide + tf.transpose(guide)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(guide[None, :, :], [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "guide * mask[:, :, None] * mask[:, None, :] + tf.eye(num_codes)[None, :, :]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_514": {
                "a": {
                    "value": "guide",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.concat([row0, row1, row2, row3], axis=0)",
                            "Call"
                        ],
                        [
                            "guide + tf.transpose(guide)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(guide[None, :, :], [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "guide * mask[:, :, None] * mask[:, None, :] + tf.eye(num_codes)[None, :, :]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.concat([row0, row1, row2], axis=0)",
                            "Call"
                        ],
                        [
                            "guide + tf.transpose(guide)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(guide[None, :, :], [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "guide * mask[:, :, None] * mask[:, None, :] + tf.eye(num_codes)[None, :, :]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "VarLenFeature_572": {
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_573": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_574": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_578": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_579": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_580": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_581": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_750": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_tensor[i - 1] + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_751": {
                "variable": {
                    "value": "log_q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_tensor[i] + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_753": {
                "variable": {
                    "value": "kl_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kl_term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_tensor[i - 1] * (log_p - log_q)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(kl_term, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(kl_term)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_754": {
                "variable": {
                    "value": "kl_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kl_term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention_tensor[i - 1] * (log_p - log_q)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(kl_term, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(kl_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "EstimatorSpec_801": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'probabilities': probs, 'logits': logits}",
                            "Dict"
                        ]
                    ]
                }
            },
            "EstimatorSpec_815": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + self._reg_coef * reg_term",
                            "BinOp"
                        ],
                        [
                            "self.get_loss(logits, labels, attentions)",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "tf.group(train_op, update_global_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'probabilities': probs, 'logits': logits}",
                            "Dict"
                        ]
                    ]
                }
            },
            "EstimatorSpec_831": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=labels, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "loss + self._reg_coef * reg_term",
                            "BinOp"
                        ],
                        [
                            "self.get_loss(logits, labels, attentions)",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "metrics_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'AUC-PR': tf.metrics.auc(labels, probs, curve='PR', summation_method='careful_interpolation'), 'AUC-ROC': tf.metrics.auc(labels, probs, curve='ROC', summation_method='careful_interpolation')}",
                            "Dict"
                        ]
                    ]
                }
            },
            "to_dense_94": {
                "sp_input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.SparseTensor(indices=feature.indices, values=tf.ones(tf.shape(feature.values)), dense_shape=feature.dense_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_167": {
                "units": {
                    "value": "self._hidden_size * self._num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_170": {
                "units": {
                    "value": "self._hidden_size * self._num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_173": {
                "units": {
                    "value": "self._hidden_size * self._num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_185": {
                "units": {
                    "value": "self._hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_247": {
                "x": {
                    "value": "self._hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_293": {
                "x": {
                    "value": "masks[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_296": {
                "input": {
                    "value": "masks[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_300": {
                "condition": {
                    "value": "tf.equal(guide, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_308": {
                "shape": {
                    "value": "num_codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 + num_dx_ids + num_proc_ids + num_lab_ids",
                            "BinOp"
                        ],
                        [
                            "1 + num_dx_ids + num_proc_ids",
                            "BinOp"
                        ],
                        [
                            "tf.shape(features)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_336": {
                "variable": {
                    "value": "post_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "post_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(post_attention, axis=1)",
                            "Call"
                        ],
                        [
                            "post_attention + features",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(post_attention, begin_norm_axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(post_attention, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(post_attention, [batch_size, num_codes, -1])",
                            "Call"
                        ],
                        [
                            "self._layers['head_agg'][i](post_attention)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(post_attention, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_338": {
                "variable": {
                    "value": "post_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "post_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(post_attention, axis=1)",
                            "Call"
                        ],
                        [
                            "post_attention + features",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(post_attention, begin_norm_axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(post_attention, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(post_attention, [batch_size, num_codes, -1])",
                            "Call"
                        ],
                        [
                            "self._layers['head_agg'][i](post_attention)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(post_attention, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_codes, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_342": {
                "variable": {
                    "value": "post_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "post_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(post_attention, axis=1)",
                            "Call"
                        ],
                        [
                            "post_attention + features",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(post_attention, begin_norm_axis=2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(post_attention, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(post_attention, [batch_size, num_codes, -1])",
                            "Call"
                        ],
                        [
                            "self._layers['head_agg'][i](post_attention)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(post_attention, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_396": {
                "shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_397": {
                "shape": {
                    "value": "[1, num_dx_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_398": {
                "shape": {
                    "value": "[1, num_proc_ids + num_lab_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_403": {
                "shape": {
                    "value": "[num_dx_ids, 1 + num_dx_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_404": {
                "shape": {
                    "value": "[num_dx_ids, num_proc_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_405": {
                "shape": {
                    "value": "[num_dx_ids, num_lab_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_410": {
                "shape": {
                    "value": "[num_proc_ids, 1 + num_dx_ids + num_proc_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_411": {
                "shape": {
                    "value": "[num_proc_ids, num_lab_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_422": {
                "num_rows": {
                    "value": "num_codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 + num_dx_ids + num_proc_ids + num_lab_ids",
                            "BinOp"
                        ],
                        [
                            "1 + num_dx_ids + num_proc_ids",
                            "BinOp"
                        ],
                        [
                            "tf.shape(features)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tile_449": {
                "input": {
                    "value": "visit_guide[None, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_453": {
                "input": {
                    "value": "visit_guide[None, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_499": {
                "shape": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_500": {
                "shape": {
                    "value": "[1, num_dx_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_501": {
                "shape": {
                    "value": "[1, num_proc_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_506": {
                "shape": {
                    "value": "[num_dx_ids, 1 + num_dx_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_507": {
                "shape": {
                    "value": "[num_dx_ids, num_proc_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_518": {
                "num_rows": {
                    "value": "num_codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 + num_dx_ids + num_proc_ids + num_lab_ids",
                            "BinOp"
                        ],
                        [
                            "1 + num_dx_ids + num_proc_ids",
                            "BinOp"
                        ],
                        [
                            "tf.shape(features)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tile_545": {
                "input": {
                    "value": "visit_guide[None, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_549": {
                "input": {
                    "value": "visit_guide[None, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_603": {
                "x": {
                    "value": "batch_context[label_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "auc_824": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.cast(batch_context[label_key], tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "curve": {
                    "value": "PR",
                    "type": "str",
                    "possible_values": []
                },
                "summation_method": {
                    "value": "careful_interpolation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "auc_826": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.cast(batch_context[label_key], tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                },
                "curve": {
                    "value": "ROC",
                    "type": "str",
                    "possible_values": []
                },
                "summation_method": {
                    "value": "careful_interpolation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_92": {
                "shape": {
                    "value": "tf.shape(feature.values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_178": {
                "units": {
                    "value": "self._hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_184": {
                "units": {
                    "value": "self._hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_294": {
                "input": {
                    "value": "mask_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.where(tf.equal(masks[:, :, 0], 0.0)), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_300": {
                "x": {
                    "value": "guide",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.concat([row0, row1, row2, row3], axis=0)",
                            "Call"
                        ],
                        [
                            "guide + tf.transpose(guide)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(guide[None, :, :], [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "guide * mask[:, :, None] * mask[:, None, :] + tf.eye(num_codes)[None, :, :]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.concat([row0, row1, row2], axis=0)",
                            "Call"
                        ],
                        [
                            "guide + tf.transpose(guide)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(guide[None, :, :], [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "guide * mask[:, :, None] * mask[:, None, :] + tf.eye(num_codes)[None, :, :]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_303": {
                "input": {
                    "value": "guide",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.concat([row0, row1, row2, row3], axis=0)",
                            "Call"
                        ],
                        [
                            "guide + tf.transpose(guide)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(guide[None, :, :], [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "guide * mask[:, :, None] * mask[:, None, :] + tf.eye(num_codes)[None, :, :]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.concat([row0, row1, row2], axis=0)",
                            "Call"
                        ],
                        [
                            "guide + tf.transpose(guide)",
                            "BinOp"
                        ],
                        [
                            "tf.tile(guide[None, :, :], [batch_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "guide * mask[:, :, None] * mask[:, None, :] + tf.eye(num_codes)[None, :, :]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_457": {
                "num_rows": {
                    "value": "num_codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 + num_dx_ids + num_proc_ids + num_lab_ids",
                            "BinOp"
                        ],
                        [
                            "1 + num_dx_ids + num_proc_ids",
                            "BinOp"
                        ],
                        [
                            "tf.shape(features)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_553": {
                "num_rows": {
                    "value": "num_codes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 + num_dx_ids + num_proc_ids + num_lab_ids",
                            "BinOp"
                        ],
                        [
                            "1 + num_dx_ids + num_proc_ids",
                            "BinOp"
                        ],
                        [
                            "tf.shape(features)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "group_818": {
                "*inputs": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "update_global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.assign(global_step, global_step + 1, name='update_global_step')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_92": {
                "input": {
                    "value": "feature.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_301": {
                "input": {
                    "value": "guide_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.where(tf.equal(guide, 0.0)), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "graph-convolutional-transformer/train.py": {
        "tensorflow": {
            "RunConfig_46": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "save_checkpoints_steps": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Estimator_48": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "argv[2]",
                            "Subscript"
                        ]
                    ]
                },
                "model_fn": {
                    "value": "model.model_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.RunConfig(save_checkpoints_steps=100)",
                            "Call"
                        ]
                    ]
                }
            },
            "TrainSpec_51": {
                "variable": {
                    "value": "train_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "lambda : model.input_fn(input_path + './train.tfrecord', True)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "max_steps": {
                    "value": "num_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000000",
                            "int"
                        ]
                    ]
                }
            },
            "EvalSpec_55": {
                "variable": {
                    "value": "eval_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "lambda : model.input_fn(input_path + './validation.tfrecord', False)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "throttle_secs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_and_evaluate_59": {
                "estimator": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.Estimator(model_dir=model_dir, model_fn=model.model_fn, config=config)",
                            "Call"
                        ]
                    ]
                },
                "train_spec": {
                    "value": "train_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.TrainSpec(input_fn=lambda : model.input_fn(input_path + './train.tfrecord', True), max_steps=num_iter)",
                            "Call"
                        ]
                    ]
                },
                "eval_spec": {
                    "value": "eval_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.EvalSpec(input_fn=lambda : model.input_fn(input_path + './validation.tfrecord', False), throttle_secs=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_verbosity_65": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_66": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "meta-learn-forecast-task/customized_layers.py": {
        "tensorflow": {
            "Dense_34": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_output_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.output_activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_85": {
                "variable": {
                    "value": "self.attention_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(self.attention_tensor, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "[self.num_predict]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_32": {
                "variable": {
                    "value": "self.hidden_layers[layer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_hidden_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_78": {
                "variable": {
                    "value": "self.attention_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_80": {
                "variable": {
                    "value": "positive_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_81": {
                "variable": {
                    "value": "kernel_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "positive_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.softplus(self.kernel)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_no_nan_82": {
                "variable": {
                    "value": "self.attention_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "positive_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.softplus(self.kernel)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "kernel_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(positive_kernel)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_89": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "self.attention_tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_86": {
                "input": {
                    "value": "self.attention_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Constant_65": {
                "value": {
                    "value": "tf.constant(val_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_66": {
                "value": {
                    "value": "val_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[float(val_str) for val_str in val_str_list]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "meta-learn-forecast-task/encoder_decoder.py": {
        "tensorflow": {
            "LSTM_28": {
                "variable": {
                    "value": "self.lstm_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_state": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_30": {
                "variable": {
                    "value": "self.obs_emission",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.num_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(self.state_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "dummy_input_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_predict]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scan_50": {
                "variable": {
                    "value": "(forecast_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "self.state_tran_step_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "dummy_input_sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([self.num_predict])",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "obs_forecast_scan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_58": {
                "variable": {
                    "value": "forecast_output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "forecast_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(forecast_output, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTM_92": {
                "variable": {
                    "value": "self.hidden_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.state_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_state": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "LSTM_encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_35": {
                "input": {
                    "value": "previous_output",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "meta-learn-forecast-task/meta_trainer.py": {
        "tensorflow": {
            "concat_210": {
                "variable": {
                    "value": "flatten_gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(var, [-1]) for var in grad_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_216": {
                "variable": {
                    "value": "flattened_hessians",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(hess, [hess.shape[0], -1]) for hess in hessian_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_593": {
                "variable": {
                    "value": "unsupervised_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.unsupervised_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clipvalue": {
                    "value": "_GRADIENT_CLIP_VALUE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_596": {
                "variable": {
                    "value": "supervised_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.supervised_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clipvalue": {
                    "value": "_GRADIENT_CLIP_VALUE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_599": {
                "variable": {
                    "value": "attention_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.attention_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clipvalue": {
                    "value": "_GRADIENT_CLIP_VALUE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_731": {
                "variable": {
                    "value": "unsupervised_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.unsupervised_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clipvalue": {
                    "value": "_GRADIENT_CLIP_VALUE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_734": {
                "variable": {
                    "value": "supervised_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.supervised_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clipvalue": {
                    "value": "_GRADIENT_CLIP_VALUE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_737": {
                "variable": {
                    "value": "attention_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.attention_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clipvalue": {
                    "value": "_GRADIENT_CLIP_VALUE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_871": {
                "variable": {
                    "value": "unsupervised_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.unsupervised_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clipvalue": {
                    "value": "_GRADIENT_CLIP_VALUE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_874": {
                "variable": {
                    "value": "supervised_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.supervised_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clipvalue": {
                    "value": "_GRADIENT_CLIP_VALUE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                }
            },
            "Adam_975": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.unsupervised_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_1077": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.supervised_learning_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_238": {
                "variable": {
                    "value": "feature_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "feature_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(feature_mask, dtype=feature_value.dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(feature_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(feature_mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "feature_value.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_239": {
                "variable": {
                    "value": "feature_value_with_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[feature_value, feature_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_556": {
                "variable": {
                    "value": "feature_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "feature_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(feature_mask, dtype=feature_value.dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(feature_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(feature_mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_557": {
                "variable": {
                    "value": "feature_value_with_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[feature_value, feature_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_680": {
                "variable": {
                    "value": "beta_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_flatten_gradient(beta)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_687": {
                "variable": {
                    "value": "attention_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros_initializer()(shape=[num_feature], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientTape_259": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_312": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_349": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_379": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_399": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_430": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_462": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_525": {
                "variable": {
                    "value": "feature_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "feature_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(feature_mask, dtype=feature_value.dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(feature_mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(feature_mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_526": {
                "variable": {
                    "value": "feature_value_with_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[feature_value, feature_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_684": {
                "variable": {
                    "value": "beta_reshape",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "beta_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(_flatten_gradient(beta), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(beta_reshape, 1 - hessian_encoder_list[-(index + 1)])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "1 - hessian_encoder_list[-(index + 1)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_695": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta_reshape",
                            "variable"
                        ],
                        [
                            "tf.matmul(alpha, 1 - hessian_encoder_reshape)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "1 - hessian_encoder_reshape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_833": {
                "variable": {
                    "value": "dphi_dlambda",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.math.reciprocal(dLu_dphi_reshape), axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.expand_dims(dLu_dlambda_reshape, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_836": {
                "variable": {
                    "value": "dphi_dlambda",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "dphi_dlambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(tf.math.reciprocal(dLu_dphi_reshape), axis=1), tf.expand_dims(dLu_dlambda_reshape, axis=0))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(dphi_dlambda, -10000, 10000, name=None)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-10000",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "squeeze_838": {
                "variable": {
                    "value": "attention_grad_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(tf.expand_dims(dLs_dphi_reshape, axis=0), dphi_dlambda)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_841": {
                "variable": {
                    "value": "attention_grad_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "attention_grad_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.matmul(tf.expand_dims(dLs_dphi_reshape, axis=0), dphi_dlambda), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(attention_grad_tensor, -10000, 10000, name=None)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-10000",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reshape_210": {
                "tensor": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_217": {
                "tensor": {
                    "value": "hess",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hess.shape[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradientTape_260": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_313": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_initializer_687": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_692": {
                "a": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta_reshape",
                            "variable"
                        ],
                        [
                            "tf.matmul(alpha, 1 - hessian_encoder_reshape)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "j_encoder_list[-(index + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_834": {
                "input": {
                    "value": "tf.math.reciprocal(dLu_dphi_reshape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_835": {
                "input": {
                    "value": "dLu_dlambda_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_flatten_gradient(dLu_dlambda)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_839": {
                "a": {
                    "value": "tf.expand_dims(dLs_dphi_reshape, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "dphi_dlambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(tf.math.reciprocal(dLu_dphi_reshape), axis=1), tf.expand_dims(dLu_dlambda_reshape, axis=0))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(dphi_dlambda, -10000, 10000, name=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "MeanSquaredError_983": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BinaryCrossentropy_1089": {
                "from_logits": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reciprocal_834": {
                "x": {
                    "value": "dLu_dphi_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_flatten_gradient(dLu_dphi)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_839": {
                "input": {
                    "value": "dLs_dphi_reshape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_flatten_gradient(dLs_dphi)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MeanSquaredError_984": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AUC_1091": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AUC_1092": {
                "curve": {
                    "value": "PR",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "meta-learn-forecast-task/tasks.py": {
        "tensorflow": {
            "create_file_writer_25": {
                "logdir": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(experiment_log_path, job_prefix, 'scalars', task, mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_93": {
                "variable": {
                    "value": "supervised_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "supervised_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(supervised_label, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_98": {
                "variable": {
                    "value": "self.loss[mode]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.keras.losses.binary_crossentropy(y_true=label, y_pred=prediction, from_logits=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_256": {
                "variable": {
                    "value": "batch_loss_with_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "loss_func(future_obs - prediction)",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "future_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "future_mask[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(future_mask, self.feature_index_included, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(future_mask)",
                            "Call"
                        ],
                        [
                            "future_mask[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.ones_like(future_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_258": {
                "variable": {
                    "value": "self.loss[mode]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "batch_loss_with_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(loss_func(future_obs - prediction), future_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_275": {
                "variable": {
                    "value": "future_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "future_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "future_obs[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(future_obs, self.feature_index_included, axis=2)",
                            "Call"
                        ],
                        [
                            "self.attention(future_obs)",
                            "Call"
                        ],
                        [
                            "future_obs[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(future_obs, future_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "future_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "future_mask[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(future_mask, self.feature_index_included, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(future_mask)",
                            "Call"
                        ],
                        [
                            "future_mask[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.ones_like(future_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_276": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(prediction, self.feature_index_included, axis=2)",
                            "Call"
                        ],
                        [
                            "self.attention(prediction)",
                            "Call"
                        ],
                        [
                            "prediction[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(prediction, future_mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "future_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "future_mask[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(future_mask, self.feature_index_included, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(future_mask)",
                            "Call"
                        ],
                        [
                            "future_mask[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.ones_like(future_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "count_nonzero_115": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.process_label(label)",
                            "Call"
                        ],
                        [
                            "self.process_label(label)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_240": {
                "variable": {
                    "value": "future_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "future_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "future_obs[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(future_obs, self.feature_index_included, axis=2)",
                            "Call"
                        ],
                        [
                            "self.attention(future_obs)",
                            "Call"
                        ],
                        [
                            "future_obs[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(future_obs, future_mask)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.feature_index_included",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_241": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(prediction, self.feature_index_included, axis=2)",
                            "Call"
                        ],
                        [
                            "self.attention(prediction)",
                            "Call"
                        ],
                        [
                            "prediction[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(prediction, future_mask)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.feature_index_included",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_242": {
                "variable": {
                    "value": "future_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "future_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "future_mask[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(future_mask, self.feature_index_included, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(future_mask)",
                            "Call"
                        ],
                        [
                            "future_mask[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.ones_like(future_mask)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.feature_index_included",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_246": {
                "variable": {
                    "value": "future_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "future_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "future_mask[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(future_mask, self.feature_index_included, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(future_mask)",
                            "Call"
                        ],
                        [
                            "future_mask[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.ones_like(future_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_273": {
                "variable": {
                    "value": "future_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "future_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "future_mask[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(future_mask, self.feature_index_included, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(future_mask)",
                            "Call"
                        ],
                        [
                            "future_mask[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.ones_like(future_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_287": {
                "input_tensor": {
                    "value": "future_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "future_obs[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(future_obs, self.feature_index_included, axis=2)",
                            "Call"
                        ],
                        [
                            "self.attention(future_obs)",
                            "Call"
                        ],
                        [
                            "future_obs[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(future_obs, future_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "AUC_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AUC_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AUC_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AUC_76": {
                "curve": {
                    "value": "PR",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AUC_77": {
                "curve": {
                    "value": "PR",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AUC_78": {
                "curve": {
                    "value": "PR",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_crossentropy_99": {
                "y_true": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.process_label(label)",
                            "Call"
                        ],
                        [
                            "self.process_label(label)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.gather(prediction, self.feature_index_included, axis=2)",
                            "Call"
                        ],
                        [
                            "self.attention(prediction)",
                            "Call"
                        ],
                        [
                            "prediction[:, :, self.target_feature_index]",
                            "Subscript"
                        ],
                        [
                            "tf.boolean_mask(prediction, future_mask)",
                            "Call"
                        ]
                    ]
                },
                "from_logits": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MeanSquaredError_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MeanSquaredError_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MeanSquaredError_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MeanAbsoluteError_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MeanAbsoluteError_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MeanAbsoluteError_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_124": {
                "name": {
                    "value": "mode + '/classification/loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss[mode]",
                            "Subscript"
                        ],
                        [
                            "self.loss[mode]",
                            "Subscript"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_125": {
                "name": {
                    "value": "mode + '/classification/auc'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.auc[mode].result().numpy()",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_126": {
                "name": {
                    "value": "mode + '/classification/aucpr'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "aucpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.aucpr[mode].result().numpy()",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_127": {
                "name": {
                    "value": "mode + '/classification/positive'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "pos_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.positive[mode] / self.total[mode]",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_296": {
                "name": {
                    "value": "mode + '/regression/loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss[mode]",
                            "Subscript"
                        ],
                        [
                            "self.loss[mode]",
                            "Subscript"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_297": {
                "name": {
                    "value": "mode + '/regression/mse'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mse[mode].result().numpy()",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_298": {
                "name": {
                    "value": "mode + '/regression/mae'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mae",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mae[mode].result().numpy()",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_299": {
                "name": {
                    "value": "mode + '/regression/label_val'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "avg_feature_label_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.label_val[mode] / self.total[mode] / self.num_predict / self.num_feature",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_305": {
                "name": {
                    "value": "'attention/' + self.feature_keys[j]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "feature_w",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model-uncertainty/bayesian_rnn_eager_main.py": {
        "tensorflow": {
            "Mean_136": {
                "variable": {
                    "value": "nll_metric",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AUC_138": {
                "variable": {
                    "value": "aucpr_metric",
                    "type": "variable",
                    "possible_values": []
                },
                "curve": {
                    "value": "PR",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AUC_139": {
                "variable": {
                    "value": "aucroc_metric",
                    "type": "variable",
                    "possible_values": []
                },
                "curve": {
                    "value": "ROC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Accuracy_140": {
                "variable": {
                    "value": "acc_metric",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Recall_142": {
                "variable": {
                    "value": "sensitivity_metric",
                    "type": "variable",
                    "possible_values": []
                },
                "top_k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5 if task.logits_dimension >= 5 else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Precision_143": {
                "variable": {
                    "value": "ppv_metric",
                    "type": "variable",
                    "possible_values": []
                },
                "top_k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5 if task.logits_dimension >= 5 else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "concat_214": {
                "variable": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "all_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_logits, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_473": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_475": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate_fn(global_step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Checkpoint_477": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "model": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bayesian_rnn_model.BayesianRNNWithEmbeddings(embedding_config=task.embedding_config(), sequence_features=FLAGS.sequence_features, context_features=FLAGS.context_features, rnn_dim=FLAGS.rnn_dim, num_rnn_layers=FLAGS.num_rnn_layers, hidden_layer_dim=FLAGS.hidden_layer_dim, output_layer_dim=task.logits_dimension, rnn_uncertainty=FLAGS.uncertainty_rnn, hidden_uncertainty=FLAGS.uncertainty_hidden, output_uncertainty=FLAGS.uncertainty_output, bias_uncertainty=FLAGS.uncertainty_biases, embeddings_uncertainty=FLAGS.uncertainty_embeddings, prior_stddev=FLAGS.prior_stddev, l2=float(FLAGS.l2), clip_norm=FLAGS.clip_norm, bagging_time_precision=FLAGS.bagging_time_precision, bagging_aggregate_older_than=FLAGS.bagging_aggregate_older_than, embedding_dimension_multiplier=FLAGS.embedding_dimension_multiplier, dense_feature_name=FLAGS.dense_feature_name, dense_feature_value=FLAGS.dense_feature_value, dense_feature_unit=FLAGS.dense_feature_unit, dense_embedding_dimension=FLAGS.dense_embedding_dimension, top_n_dense=FLAGS.top_n_dense, num_ids_per_dense_feature=FLAGS.num_ids_per_dense_feature, dense_stats_config_path=FLAGS.stats_config_path)",
                            "Call"
                        ],
                        [
                            "bayesian_rnn_model.Rank1BayesianRNNWithEmbeddings(embedding_config=task.embedding_config(), sequence_features=FLAGS.sequence_features, context_features=FLAGS.context_features, rnn_dim=FLAGS.rnn_dim, num_rnn_layers=FLAGS.num_rnn_layers, hidden_layer_dim=FLAGS.hidden_layer_dim, output_layer_dim=task.logits_dimension, embeddings_initializer=FLAGS.embeddings_initializer, embeddings_regularizer=FLAGS.embeddings_regularizer, alpha_initializer=FLAGS.alpha_initializer, gamma_initializer=FLAGS.gamma_initializer, alpha_regularizer=FLAGS.alpha_regularizer, gamma_regularizer=FLAGS.gamma_regularizer, use_additive_perturbation=FLAGS.use_additive_perturbation, ensemble_size=ensemble_size, random_sign_init=float(FLAGS.random_sign_init), dropout_rate=float(FLAGS.dropout_rate), prior_mean=float(FLAGS.prior_mean), prior_stddev=float(FLAGS.prior_stddev), l2=float(FLAGS.l2), clip_norm=float(FLAGS.clip_norm), bagging_time_precision=FLAGS.bagging_time_precision, bagging_aggregate_older_than=FLAGS.bagging_aggregate_older_than, embedding_dimension_multiplier=FLAGS.embedding_dimension_multiplier, dense_feature_name=FLAGS.dense_feature_name, dense_feature_value=FLAGS.dense_feature_value, dense_feature_unit=FLAGS.dense_feature_unit, dense_embedding_dimension=FLAGS.dense_embedding_dimension, top_n_dense=FLAGS.top_n_dense, num_ids_per_dense_feature=FLAGS.num_ids_per_dense_feature, dense_stats_config_path=FLAGS.stats_config_path)",
                            "Call"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.optimizers.Adam(learning_rate_fn(global_step))",
                            "Call"
                        ]
                    ]
                }
            },
            "CheckpointManager_479": {
                "variable": {
                    "value": "checkpoint_manager",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Checkpoint(model=model, global_step=global_step, optimizer=optimizer)",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "FLAGS.max_to_keep if FLAGS.max_to_keep > 0 else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "reshape_146": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "[model(inputs, training=False) for _ in range(num_samples)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_samples, ensemble_size, -1, task.logits_dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_157": {
                "variable": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-tf.reduce_logsumexp(label_dist.log_prob(labels), axis=[0, 1]) + tf.math.log(float(num_samples * ensemble_size))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_160": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_mean(probs, axis=[0, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_209": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape([model(inputs, training=False) for _ in range(num_samples)], [num_samples, ensemble_size, -1, task.logits_dimension])",
                            "Call"
                        ],
                        [
                            "[model(inputs, training=False) for _ in range(num_samples)]",
                            "ListComp"
                        ],
                        [
                            "tf.split(logits, num_or_size_splits=ensemble_size, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape([model(inputs) for _ in range(FLAGS.num_train_samples)], [FLAGS.num_train_samples, ensemble_size, -1, task.logits_dimension])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "ensemble_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FLAGS.ensemble_size",
                            "Attribute"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_gpu_available_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_v2_behavior_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_seed_352": {
                "seed": {
                    "value": "FLAGS.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "create_file_writer_497": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "f'{FLAGS.logdir}/{name}_eval'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "create_file_writer_521": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "f'{FLAGS.logdir}/train'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "sigmoid_152": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape([model(inputs, training=False) for _ in range(num_samples)], [num_samples, ensemble_size, -1, task.logits_dimension])",
                            "Call"
                        ],
                        [
                            "[model(inputs, training=False) for _ in range(num_samples)]",
                            "ListComp"
                        ],
                        [
                            "tf.split(logits, num_or_size_splits=ensemble_size, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape([model(inputs) for _ in range(FLAGS.num_train_samples)], [FLAGS.num_train_samples, ensemble_size, -1, task.logits_dimension])",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_155": {
                "variable": {
                    "value": "labels_1d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "task.extract_labels(inputs)[task.label_key]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_156": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape([model(inputs, training=False) for _ in range(num_samples)], [num_samples, ensemble_size, -1, task.logits_dimension])",
                            "Call"
                        ],
                        [
                            "[model(inputs, training=False) for _ in range(num_samples)]",
                            "ListComp"
                        ],
                        [
                            "tf.split(logits, num_or_size_splits=ensemble_size, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape([model(inputs) for _ in range(FLAGS.num_train_samples)], [FLAGS.num_train_samples, ensemble_size, -1, task.logits_dimension])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_162": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "probs >= 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "labels.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_164": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_mean(probs, axis=[0, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scalar_195": {
                "name": {
                    "value": "f'loss/{k}'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "data": {
                    "value": "metrics[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_197": {
                "name": {
                    "value": "f'metrics/{k}'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "data": {
                    "value": "metrics[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_215": {
                "values": {
                    "value": "all_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(all_labels, 0) if all_labels else None",
                            "IfExp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_gpu_available_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_292": {
                "variable": {
                    "value": "self.best_metric",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "best_metric",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Checkpoint_293": {
                "variable": {
                    "value": "self.state_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "best_metric": {
                    "value": "self.best_metric",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_306": {
                "variable": {
                    "value": "self.best_metric",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "current_metric",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "best_metric",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Checkpoint_307": {
                "variable": {
                    "value": "self.state_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "best_metric": {
                    "value": "self.best_metric",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exists_333": {
                "path": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "makedirs_334": {
                "path": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exists_287": {
                "path": {
                    "value": "directory",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "makedirs_288": {
                "path": {
                    "value": "directory",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exists_341": {
                "path": {
                    "value": "flag_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.model_dir, 'flags.cfg')",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_342": {
                "name": {
                    "value": "flag_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.model_dir, 'flags.cfg')",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_498": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/gpu:0' if tf.test.is_gpu_available() else '/cpu:0'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "device_522": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/gpu:0' if tf.test.is_gpu_available() else '/cpu:0'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_562": {
                "variable": {
                    "value": "(grads, global_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(loss, model.trainable_variables)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "FLAGS.clip_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_159": {
                "x": {
                    "value": "float(num_samples * ensemble_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_391": {
                "variable": {
                    "value": "new_inputs[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "sp_inputs": {
                    "value": "[v] * ensemble_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_394": {
                "variable": {
                    "value": "new_inputs[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[v] * ensemble_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_526": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "[model(inputs) for _ in range(FLAGS.num_train_samples)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.num_train_samples, ensemble_size, -1, task.logits_dimension]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_158": {
                "input_tensor": {
                    "value": "label_dist.log_prob(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradientTape_525": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_536": {
                "variable": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-tf.reduce_logsumexp(label_dist.log_prob(labels), axis=[0, 1]) + tf.math.log(float(FLAGS.num_train_samples * ensemble_size))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_550": {
                "name": {
                    "value": "loss/nll",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "nll",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nll_metric.result()",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(-tf.reduce_logsumexp(label_dist.log_prob(labels), axis=[0, 1]) + tf.math.log(float(num_samples * ensemble_size)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(-tf.reduce_logsumexp(label_dist.log_prob(labels), axis=[0, 1]) + tf.math.log(float(FLAGS.num_train_samples * ensemble_size)))",
                            "Call"
                        ],
                        [
                            "-tf.reduce_mean(label_dist.log_prob(labels))",
                            "UnaryOp"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_551": {
                "name": {
                    "value": "loss/kl",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(model.losses)",
                            "Call"
                        ],
                        [
                            "sum(model.losses)",
                            "Call"
                        ],
                        [
                            "kl / num_train_examples * FLAGS.kl_scale * tf.minimum(1.0, tf.cast(global_step + 1, tf.float32) / FLAGS.kl_annealing_steps)",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_552": {
                "name": {
                    "value": "loss/loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nll + kl / acc_metric.count",
                            "BinOp"
                        ],
                        [
                            "nll + kl",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_553": {
                "name": {
                    "value": "loss/learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "optimizer.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_564": {
                "name": {
                    "value": "loss/grads/global_norm",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "global_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step', dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_653": {
                "device_name": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/gpu:0' if tf.test.is_gpu_available() else '/cpu:0'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "exists_664": {
                "path": {
                    "value": "save_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.predict_dir, 'train')",
                            "Call"
                        ],
                        [
                            "os.path.join(FLAGS.predict_dir, 'val')",
                            "Call"
                        ],
                        [
                            "os.path.join(FLAGS.predict_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "makedirs_665": {
                "path": {
                    "value": "save_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.predict_dir, 'train')",
                            "Call"
                        ],
                        [
                            "os.path.join(FLAGS.predict_dir, 'val')",
                            "Call"
                        ],
                        [
                            "os.path.join(FLAGS.predict_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_666": {
                "name": {
                    "value": "os.path.join(save_dir, 'global_step.txt')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_668": {
                "name": {
                    "value": "os.path.join(save_dir, 'logits.npy')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_543": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(global_step + 1, tf.float32) / FLAGS.kl_annealing_steps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "latest_checkpoint_613": {
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GFile_671": {
                "name": {
                    "value": "os.path.join(save_dir, 'labels.npy')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_540": {
                "input_tensor": {
                    "value": "label_dist.log_prob(labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_538": {
                "x": {
                    "value": "float(FLAGS.num_train_samples * ensemble_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_545": {
                "x": {
                    "value": "global_step + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_537": {
                "input_tensor": {
                    "value": "label_dist.log_prob(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "model-uncertainty/bayesian_rnn_eager_main_test.py": {
        "tensorflow": {
            "enable_v2_behavior_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model-uncertainty/bayesian_rnn_model.py": {
        "tensorflow": {
            "RNN_140": {
                "variable": {
                    "value": "self.rnn_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cell": {
                    "value": "cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "return_sequences": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sequence_mask_190": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "return_dict[constants.C_SEQUENCE_LENGTH_KEY]",
                            "Subscript"
                        ],
                        [
                            "return_dict[constants.C_SEQUENCE_LENGTH_KEY]",
                            "Subscript"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "tf.shape(sequence_embeddings)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sequence_embeddings.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_193": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=tf.shape(sequence_embeddings)[1], dtype=sequence_embeddings.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, tf.concat([tf.shape(sequence_embeddings)[:-1], [1]], axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(sequence_length, maxlen=tf.shape(sequence_embeddings)[1], dtype=sequence_embeddings.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, tf.concat([tf.shape(sequence_embeddings)[:-1], [1]], axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([tf.shape(sequence_embeddings)[:-1], [1]], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RNN_430": {
                "variable": {
                    "value": "self.rnn_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cell": {
                    "value": "cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "return_sequences": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sequence_mask_485": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "return_dict[constants.C_SEQUENCE_LENGTH_KEY]",
                            "Subscript"
                        ],
                        [
                            "return_dict[constants.C_SEQUENCE_LENGTH_KEY]",
                            "Subscript"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "tf.shape(sequence_embeddings)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sequence_embeddings.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_488": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(sequence_length, maxlen=tf.shape(sequence_embeddings)[1], dtype=sequence_embeddings.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, tf.concat([tf.shape(sequence_embeddings)[:-1], [1]], axis=-1))",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(sequence_length, maxlen=tf.shape(sequence_embeddings)[1], dtype=sequence_embeddings.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mask, tf.concat([tf.shape(sequence_embeddings)[:-1], [1]], axis=-1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([tf.shape(sequence_embeddings)[:-1], [1]], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_168": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "output_layer_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(l2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "tf.keras.regularizers.l2(l2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_198": {
                "variable": {
                    "value": "combined_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[last_output, context_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_493": {
                "variable": {
                    "value": "combined_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[last_output, context_embeddings]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_56": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "name_scope_69": {
                "name": {
                    "value": "clip_gradient",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMCell_134": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "rnn_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(l2)",
                    "type": "Call",
                    "possible_values": []
                },
                "recurrent_regularizer": {
                    "value": "tf.keras.regularizers.l2(l2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "tf.keras.regularizers.l2(l2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_153": {
                "variable": {
                    "value": "self.hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.hidden_layer_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(l2)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "tf.keras.regularizers.l2(l2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_193": {
                "values": {
                    "value": "[tf.shape(sequence_embeddings)[:-1], [1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_488": {
                "values": {
                    "value": "[tf.shape(sequence_embeddings)[:-1], [1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_56": {
                "t_list": {
                    "value": "[dy]",
                    "type": "List",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_191": {
                "input": {
                    "value": "sequence_embeddings",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_486": {
                "input": {
                    "value": "sequence_embeddings",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_194": {
                "input": {
                    "value": "sequence_embeddings",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_489": {
                "input": {
                    "value": "sequence_embeddings",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model-uncertainty/bayesian_rnn_model_test.py": {
        "tensorflow": {
            "constant_39": {
                "variable": {
                    "value": "dx_unclipped",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2, 3)",
                            "Tuple"
                        ],
                        [
                            "(2, 4)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "constant_46": {
                "variable": {
                    "value": "grad_ys",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2, 3)",
                            "Tuple"
                        ],
                        [
                            "(2, 4)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "constant_71": {
                "variable": {
                    "value": "grad_ys",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1000000.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "y1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "enable_v2_behavior_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2, 3)",
                            "Tuple"
                        ],
                        [
                            "(2, 4)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "identity_33": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2, 3)",
                            "Tuple"
                        ],
                        [
                            "(2, 4)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "GradientTape_30": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_41": {
                "x": {
                    "value": "tf.linalg.global_norm([dx_unclipped])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "clip_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ],
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "GradientTape_56": {
                "persistent": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_74": {
                "tensor": {
                    "value": "dy1dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(y1, x)",
                            "Call"
                        ],
                        [
                            "tape.gradient(y1, x, output_gradients=grad_ys)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_75": {
                "tensor": {
                    "value": "dy2dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(y2, x)",
                            "Call"
                        ],
                        [
                            "tape.gradient(y2, x, output_gradients=grad_ys)",
                            "Call"
                        ],
                        [
                            "tape.gradient(y2, x, output_gradients=grad_ys)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_82": {
                "tensor": {
                    "value": "dy1dh0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(y1, h0, output_gradients=grad_ys)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_83": {
                "tensor": {
                    "value": "dy2dh0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(y2, h0, output_gradients=grad_ys)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_90": {
                "tensor": {
                    "value": "dy1dc0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(y1, c0, output_gradients=grad_ys)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_91": {
                "tensor": {
                    "value": "dy2dc0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tape.gradient(y2, c0, output_gradients=grad_ys)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_norm_41": {
                "t_list": {
                    "value": "[dx_unclipped]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "multimodal-architecture-search/experiment.py": {
        "tensorflow": {
            "train_and_evaluate_165": {
                "variable": {
                    "value": "(model_eval_metrics, export_results)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "estimator": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.Estimator(model_fn=model_instance.create_model_fn(hparams), config=run_config)",
                            "Call"
                        ]
                    ]
                },
                "train_spec": {
                    "value": "train_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.TrainSpec(input_fn=train_input_fn, max_steps=num_train_steps)",
                            "Call"
                        ]
                    ]
                },
                "eval_spec": {
                    "value": "eval_specs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "RunConfig_63": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir_override",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "save_checkpoints_secs": {
                    "value": "save_checkpoints_secs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "save_checkpoints_steps": {
                    "value": "save_checkpoints_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TrainSpec_113": {
                "variable": {
                    "value": "train_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "train_input_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_input_fn(tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "max_steps": {
                    "value": "num_train_steps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Estimator_123": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_instance.create_model_fn(hparams)",
                    "type": "Call",
                    "possible_values": []
                },
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.estimator.RunConfig(model_dir=model_dir_override, save_checkpoints_secs=save_checkpoints_secs, save_checkpoints_steps=save_checkpoints_steps)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_73": {
                "msg": {
                    "value": "Creating experiment, storing model files in %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_config.model_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "info_153": {
                "msg": {
                    "value": "Ignoring save_checkpoints_secs since save_checkpoints_steps was provided.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "EvalSpec_118": {
                "input_fn": {
                    "value": "eval_input_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_input_fn(tf.estimator.ModeKeys.EVAL)",
                            "Call"
                        ]
                    ]
                },
                "steps": {
                    "value": "num_eval_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "start_delay_secs": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "continuous",
                    "type": "str",
                    "possible_values": []
                },
                "throttle_secs": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "multimodal-architecture-search/experimental_main.py": {
        "tensorflow": {
            "run_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "multimodal-architecture-search/multimodal_transformer_model.py": {
        "tensorflow": {
            "dense_43": {
                "variable": {
                    "value": "categorical_data",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_tensors[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_44": {
                "variable": {
                    "value": "continuous_features",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_tensors[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_45": {
                "variable": {
                    "value": "clinical_notes",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_tensors[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_70": {
                "variable": {
                    "value": "continuous_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "continuous_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_layers.layer_preprocess(continuous_features, hparams)",
                            "Call"
                        ],
                        [
                            "common_attention.multihead_attention(query_antecedent=continuous_hs, memory_antecedent=None, bias=None, total_key_depth=128, total_value_depth=128, output_depth=128, num_heads=8, dropout_rate=hparams.attention_dropout, attention_type=hparams.self_attention_type, max_relative_position=hparams.max_relative_position, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(continuous_hs)",
                            "Call"
                        ],
                        [
                            "continuous_hs + continuous_res",
                            "BinOp"
                        ],
                        [
                            "common_layers.layer_preprocess(continuous_hs, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(continuous_hs, 512)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(continuous_hs)",
                            "Call"
                        ],
                        [
                            "common_layers.layer_preprocess(continuous_hs, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(continuous_hs, 128)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_77": {
                "variable": {
                    "value": "continuous_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "continuous_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_layers.layer_preprocess(continuous_features, hparams)",
                            "Call"
                        ],
                        [
                            "common_attention.multihead_attention(query_antecedent=continuous_hs, memory_antecedent=None, bias=None, total_key_depth=128, total_value_depth=128, output_depth=128, num_heads=8, dropout_rate=hparams.attention_dropout, attention_type=hparams.self_attention_type, max_relative_position=hparams.max_relative_position, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(continuous_hs)",
                            "Call"
                        ],
                        [
                            "continuous_hs + continuous_res",
                            "BinOp"
                        ],
                        [
                            "common_layers.layer_preprocess(continuous_hs, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(continuous_hs, 512)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(continuous_hs)",
                            "Call"
                        ],
                        [
                            "common_layers.layer_preprocess(continuous_hs, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(continuous_hs, 128)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "continuous_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "continuous_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_layers.layer_preprocess(continuous_features, hparams)",
                            "Call"
                        ],
                        [
                            "common_attention.multihead_attention(query_antecedent=continuous_hs, memory_antecedent=None, bias=None, total_key_depth=128, total_value_depth=128, output_depth=128, num_heads=8, dropout_rate=hparams.attention_dropout, attention_type=hparams.self_attention_type, max_relative_position=hparams.max_relative_position, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(continuous_hs)",
                            "Call"
                        ],
                        [
                            "continuous_hs + continuous_res",
                            "BinOp"
                        ],
                        [
                            "common_layers.layer_preprocess(continuous_hs, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(continuous_hs, 512)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(continuous_hs)",
                            "Call"
                        ],
                        [
                            "common_layers.layer_preprocess(continuous_hs, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(continuous_hs, 128)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_83": {
                "variable": {
                    "value": "continuous_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "continuous_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_layers.layer_preprocess(continuous_features, hparams)",
                            "Call"
                        ],
                        [
                            "common_attention.multihead_attention(query_antecedent=continuous_hs, memory_antecedent=None, bias=None, total_key_depth=128, total_value_depth=128, output_depth=128, num_heads=8, dropout_rate=hparams.attention_dropout, attention_type=hparams.self_attention_type, max_relative_position=hparams.max_relative_position, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(continuous_hs)",
                            "Call"
                        ],
                        [
                            "continuous_hs + continuous_res",
                            "BinOp"
                        ],
                        [
                            "common_layers.layer_preprocess(continuous_hs, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(continuous_hs, 512)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(continuous_hs)",
                            "Call"
                        ],
                        [
                            "common_layers.layer_preprocess(continuous_hs, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(continuous_hs, 128)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_112": {
                "variable": {
                    "value": "clinical_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "clinical_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_layers.layer_preprocess(clinical_notes, hparams)",
                            "Call"
                        ],
                        [
                            "common_attention.multihead_attention(query_antecedent=clinical_hs, memory_antecedent=None, bias=None, total_key_depth=128, total_value_depth=128, output_depth=128, num_heads=8, dropout_rate=hparams.attention_dropout, attention_type=hparams.self_attention_type, max_relative_position=hparams.max_relative_position, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "clinical_hs + clinical_hs",
                            "BinOp"
                        ],
                        [
                            "common_layers.layer_preprocess(clinical_hs, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(clinical_hs, 512)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(clinical_hs)",
                            "Call"
                        ],
                        [
                            "common_layers.layer_preprocess(clinical_hs, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(clinical_hs, 128)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_114": {
                "variable": {
                    "value": "clinical_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "clinical_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_layers.layer_preprocess(clinical_notes, hparams)",
                            "Call"
                        ],
                        [
                            "common_attention.multihead_attention(query_antecedent=clinical_hs, memory_antecedent=None, bias=None, total_key_depth=128, total_value_depth=128, output_depth=128, num_heads=8, dropout_rate=hparams.attention_dropout, attention_type=hparams.self_attention_type, max_relative_position=hparams.max_relative_position, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "clinical_hs + clinical_hs",
                            "BinOp"
                        ],
                        [
                            "common_layers.layer_preprocess(clinical_hs, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(clinical_hs, 512)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(clinical_hs)",
                            "Call"
                        ],
                        [
                            "common_layers.layer_preprocess(clinical_hs, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(clinical_hs, 128)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_118": {
                "variable": {
                    "value": "clinical_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "clinical_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_layers.layer_preprocess(clinical_notes, hparams)",
                            "Call"
                        ],
                        [
                            "common_attention.multihead_attention(query_antecedent=clinical_hs, memory_antecedent=None, bias=None, total_key_depth=128, total_value_depth=128, output_depth=128, num_heads=8, dropout_rate=hparams.attention_dropout, attention_type=hparams.self_attention_type, max_relative_position=hparams.max_relative_position, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "clinical_hs + clinical_hs",
                            "BinOp"
                        ],
                        [
                            "common_layers.layer_preprocess(clinical_hs, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(clinical_hs, 512)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(clinical_hs)",
                            "Call"
                        ],
                        [
                            "common_layers.layer_preprocess(clinical_hs, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(clinical_hs, 128)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_142": {
                "variable": {
                    "value": "categorical_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[categorical_hs, categorical_res]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_145": {
                "variable": {
                    "value": "categorical_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "categorical_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_layers.layer_preprocess(categorical_data, hparams)",
                            "Call"
                        ],
                        [
                            "common_attention.multihead_attention(query_antecedent=categorical_hs, memory_antecedent=None, bias=None, total_key_depth=128, total_value_depth=128, output_depth=128, num_heads=8, dropout_rate=hparams.attention_dropout, attention_type=hparams.self_attention_type, max_relative_position=hparams.max_relative_position, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.concat([categorical_hs, categorical_res], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(categorical_hs, 512)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(categorical_hs)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_147": {
                "variable": {
                    "value": "categorical_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "categorical_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_layers.layer_preprocess(categorical_data, hparams)",
                            "Call"
                        ],
                        [
                            "common_attention.multihead_attention(query_antecedent=categorical_hs, memory_antecedent=None, bias=None, total_key_depth=128, total_value_depth=128, output_depth=128, num_heads=8, dropout_rate=hparams.attention_dropout, attention_type=hparams.self_attention_type, max_relative_position=hparams.max_relative_position, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.concat([categorical_hs, categorical_res], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(categorical_hs, 512)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(categorical_hs)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_154": {
                "variable": {
                    "value": "categorical_res",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "categorical_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "categorical_data",
                            "variable"
                        ],
                        [
                            "categorical_hs",
                            "variable"
                        ],
                        [
                            "common_layers.layer_preprocess(categorical_res, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(categorical_res, 512)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_156": {
                "variable": {
                    "value": "categorical_late_point",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "categorical_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "categorical_data",
                            "variable"
                        ],
                        [
                            "categorical_hs",
                            "variable"
                        ],
                        [
                            "common_layers.layer_preprocess(categorical_res, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(categorical_res, 512)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_159": {
                "variable": {
                    "value": "fusion_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[clinical_hs, categorical_hybrid_point]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "SeparableConv1D_164": {
                "variable": {
                    "value": "separable_conv_1d",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "separable_conv_3x1",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_168": {
                "variable": {
                    "value": "fusion_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fusion_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([clinical_hs, categorical_hybrid_point], axis=-1)",
                            "Call"
                        ],
                        [
                            "common_layers.layer_preprocess(fusion_hs, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fusion_hs, 1536)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fusion_hs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fusion_hs, 384)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1536",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_170": {
                "variable": {
                    "value": "fusion_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fusion_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([clinical_hs, categorical_hybrid_point], axis=-1)",
                            "Call"
                        ],
                        [
                            "common_layers.layer_preprocess(fusion_hs, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fusion_hs, 1536)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fusion_hs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fusion_hs, 384)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_172": {
                "variable": {
                    "value": "fusion_hs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "fusion_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([clinical_hs, categorical_hybrid_point], axis=-1)",
                            "Call"
                        ],
                        [
                            "common_layers.layer_preprocess(fusion_hs, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fusion_hs, 1536)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fusion_hs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fusion_hs, 384)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_278": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_279": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[indices, sequence_length - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_280": {
                "variable": {
                    "value": "last_output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mufasa_model(input_tensors=all_sequence_embeddings_list, hparams=params)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(tf.cast(tf.shape(sequence_length)[0], dtype=tf.int64))",
                            "Call"
                        ],
                        [
                            "tf.stack([indices, sequence_length - 1], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_307": {
                "variable": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "hparams.batch_size * [10]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_312": {
                "variable": {
                    "value": "context_output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hparams.batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_313": {
                "variable": {
                    "value": "combined_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[last_output, context_output]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_403": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_fn(features, mode)",
                            "Call"
                        ],
                        [
                            "predictions['logits']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argmax_404": {
                "variable": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "merge_all_470": {
                "variable": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "continuous_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "clinical_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "categorical_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_151": {
                "tensor": {
                    "value": "categorical_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "categorical_data",
                            "variable"
                        ],
                        [
                            "categorical_hs",
                            "variable"
                        ],
                        [
                            "common_layers.layer_preprocess(categorical_res, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(categorical_res, 512)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 256]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_176": {
                "tensor": {
                    "value": "continuous_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common_layers.layer_preprocess(continuous_features, hparams)",
                            "Call"
                        ],
                        [
                            "common_attention.multihead_attention(query_antecedent=continuous_hs, memory_antecedent=None, bias=None, total_key_depth=128, total_value_depth=128, output_depth=128, num_heads=8, dropout_rate=hparams.attention_dropout, attention_type=hparams.self_attention_type, max_relative_position=hparams.max_relative_position, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.leaky_relu(continuous_hs)",
                            "Call"
                        ],
                        [
                            "continuous_hs + continuous_res",
                            "BinOp"
                        ],
                        [
                            "common_layers.layer_preprocess(continuous_hs, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(continuous_hs, 512)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(continuous_hs)",
                            "Call"
                        ],
                        [
                            "common_layers.layer_preprocess(continuous_hs, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(continuous_hs, 128)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 512]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "info_270": {
                "msg": {
                    "value": "Projected all_sequence_embeddings_list:\\n%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "all_sequence_embeddings_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.keras.layers.Conv1D(filters=single_hidden_size, padding='valid', kernel_size=1)(sequence_embeddings) for (single_hidden_size, sequence_embeddings) in zip(hidden_size_for_all_modalities, all_sequence_embeddings_list)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "dense_319": {
                "variable": {
                    "value": "combined_features",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "combined_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([last_output, context_output], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(combined_features, hparams.hidden_layer_dim, activation=tf.nn.relu6)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(combined_features, rate=1.0 - hparams.hidden_layer_keep_prob, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hparams.hidden_layer_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu6",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_365": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_389": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_fn(features, mode)",
                            "Call"
                        ],
                        [
                            "predictions['logits']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_450": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._compute_loss(label_tensor, predictions)",
                            "Call"
                        ],
                        [
                            "loss + regularization_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_regularization_losses_451": {
                "variable": {
                    "value": "regularization_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "EstimatorSpec_476": {
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'logits': logits, 'probabilities': probabilities, 'classes': classes}",
                            "Dict"
                        ],
                        [
                            "self._create_prediction_dict(logits)",
                            "Call"
                        ]
                    ]
                },
                "loss": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._compute_loss(label_tensor, predictions)",
                            "Call"
                        ],
                        [
                            "loss + regularization_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "optimizer.minimize(loss, tf.train.get_or_create_global_step())",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "eval_metric_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "extra_eval_metrics",
                            "variable"
                        ]
                    ]
                },
                "training_hooks": {
                    "value": "training_hooks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "accuracy_486": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions['classes']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'logits': logits, 'probabilities': probabilities, 'classes': classes}",
                            "Dict"
                        ],
                        [
                            "self._create_prediction_dict(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_175": {
                "tensor": {
                    "value": "categorical_late_point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(categorical_res)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 128]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_278": {
                "x": {
                    "value": "tf.shape(sequence_length)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_322": {
                "variable": {
                    "value": "combined_features",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "combined_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([last_output, context_output], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(combined_features, hparams.hidden_layer_dim, activation=tf.nn.relu6)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(combined_features, rate=1.0 - hparams.hidden_layer_keep_prob, training=mode == tf.estimator.ModeKeys.TRAIN)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - hparams.hidden_layer_keep_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "training": {
                    "value": "mode == tf.estimator.ModeKeys.TRAIN",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "dense_344": {
                "inputs": {
                    "value": "prelogits_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "logits_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias_initializer": {
                    "value": "tf.constant_initializer(hparams.output_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_454": {
                "variable": {
                    "value": "regularization_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "regularization_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.get_regularization_losses()",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_457": {
                "name": {
                    "value": "loss/train/",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._compute_loss(label_tensor, predictions)",
                            "Call"
                        ],
                        [
                            "loss + regularization_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_174": {
                "tensor": {
                    "value": "fusion_hs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([clinical_hs, categorical_hybrid_point], axis=-1)",
                            "Call"
                        ],
                        [
                            "common_layers.layer_preprocess(fusion_hs, hparams)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fusion_hs, 1536)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fusion_hs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(fusion_hs, 384)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 256]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv1D_262": {
                "filters": {
                    "value": "single_hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_453": {
                "name": {
                    "value": "loss/prior_regularization",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self._compute_loss(label_tensor, predictions)",
                            "Call"
                        ],
                        [
                            "loss + regularization_loss",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_455": {
                "name": {
                    "value": "loss/regularization_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "regularization_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(regularization_losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_461": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummarySaverHook_474": {
                "save_steps": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "summary_op": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.summary.merge_all()",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_278": {
                "input": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(hparams.batch_size * [10], dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_347": {
                "value": {
                    "value": "hparams.output_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "state-space-model/config_utils.py": {
        "tensorflow": {}
    },
    "state-space-model/data_provider.py": {
        "tensorflow": {
            "placeholder_159": {
                "variable": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_serialized_examples",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_229": {
                "variable": {
                    "value": "input_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_keys",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_208": {
                "variable": {
                    "value": "batched",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dynamic_pad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "capacity": {
                    "value": "QUEUE_SCALING_FACTOR * self._batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_217": {
                "variable": {
                    "value": "labels[label_tuple[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "batched[label_tuple[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_240": {
                "variable": {
                    "value": "features[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_242": {
                "msg": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{key: batched[key] for key in self._feature_keys}",
                            "DictComp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "ServingInputReceiver_249": {
                "features": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{key: batched[key] for key in self._feature_keys}",
                            "DictComp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "receiver_tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'input_keys': input_keys, 'input_examples': serialized_example}",
                            "Dict"
                        ]
                    ]
                }
            },
            "name_scope_203": {
                "name": {
                    "value": "ReadData",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_207": {
                "name": {
                    "value": "Batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_220": {
                "variable": {
                    "value": "labels[label_tuple[0] + .time_to_event]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "batched[label_tuple[0] + '.time_of_event'] - batched['trigger_time_sec']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_232": {
                "name": {
                    "value": "ReadInferenceData",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_241": {
                "msg": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "state-space-model/datasets.py": {
        "tensorflow": {
            "FixedLenFeature_54": {
                "variable": {
                    "value": "keys_to_features[context_window_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_57": {
                "variable": {
                    "value": "items_to_handlers[context_window_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "op": {
                    "value": "context_window_size",
                    "type": "str",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FixedLenFeature_60": {
                "variable": {
                    "value": "keys_to_features[context_window_start_time_sec]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_63": {
                "variable": {
                    "value": "items_to_handlers[context_window_start_time_sec]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "op": {
                    "value": "context_window_start_time_sec",
                    "type": "str",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FixedLenFeature_66": {
                "variable": {
                    "value": "keys_to_features[trigger_time_sec]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_68": {
                "variable": {
                    "value": "items_to_handlers[trigger_time_sec]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "op": {
                    "value": "trigger_time_sec",
                    "type": "str",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FixedLenFeature_72": {
                "variable": {
                    "value": "keys_to_features[true_length_hr]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_75": {
                "variable": {
                    "value": "items_to_handlers[true_length_hr]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "op": {
                    "value": "true_length_hr",
                    "type": "str",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_78": {
                "msg": {
                    "value": "Labels are:",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_81": {
                "variable": {
                    "value": "keys_to_features[label[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_84": {
                "variable": {
                    "value": "items_to_handlers[label[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "op": {
                    "value": "label[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "info_94": {
                "msg": {
                    "value": "Features are:",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_97": {
                "variable": {
                    "value": "keys_to_features[observation]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[context_window_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_99": {
                "variable": {
                    "value": "items_to_handlers[observation]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "op": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "observation_codes",
                            "variable"
                        ],
                        [
                            "strip_raw_feature(observation)",
                            "Call"
                        ]
                    ]
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "FixedLenFeature_110": {
                "variable": {
                    "value": "keys_to_features[intervention]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[context_window_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_112": {
                "variable": {
                    "value": "items_to_handlers[intervention]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "op": {
                    "value": "intervention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intervention_codes",
                            "variable"
                        ],
                        [
                            "strip_raw_feature(intervention)",
                            "Call"
                        ]
                    ]
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "info_80": {
                "msg": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "variable"
                        ]
                    ]
                }
            },
            "FixedLenFeature_88": {
                "variable": {
                    "value": "keys_to_features[label[0] + .time_of_event]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_91": {
                "variable": {
                    "value": "items_to_handlers[label[0] + .time_of_event]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "op": {
                    "value": "label[0] + '.time_of_event'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_96": {
                "msg": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "observation_codes",
                            "variable"
                        ],
                        [
                            "strip_raw_feature(observation)",
                            "Call"
                        ]
                    ]
                }
            },
            "FixedLenFeature_103": {
                "variable": {
                    "value": "keys_to_features[observation + _mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[context_window_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_105": {
                "variable": {
                    "value": "items_to_handlers[observation + _mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "op": {
                    "value": "observation + '_mask'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_109": {
                "msg": {
                    "value": "intervention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intervention_codes",
                            "variable"
                        ],
                        [
                            "strip_raw_feature(intervention)",
                            "Call"
                        ]
                    ]
                }
            },
            "FixedLenFeature_117": {
                "variable": {
                    "value": "keys_to_features[intervention + _mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[context_window_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_119": {
                "variable": {
                    "value": "items_to_handlers[intervention + _mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "op": {
                    "value": "intervention + '_mask'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "default_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_87": {
                "msg": {
                    "value": "label[0] + '.time_of_event'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "state-space-model/experiment.py": {
        "tensorflow": {
            "Estimator_61": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "models.build_model_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "config.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "warm_start_from": {
                    "value": "warm_start_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_58": {
                "msg": {
                    "value": "'experiment config: ' + text_format.MessageToString(config)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_59": {
                "msg": {
                    "value": "'run config:' + text_format.MessageToString(run_config.tf_config)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_54": {
                "msg": {
                    "value": "Using command-line hyperparameters %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "hparams",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "state-space-model/models.py": {
        "tensorflow": {
            "concat_76": {
                "variable": {
                    "value": "tensor_dict[obs_full_tensor]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(features[obs], 2) for obs in config.observation_codes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_87": {
                "variable": {
                    "value": "tensor_dict[obs_to_trigger_tensor]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "tensor_dict['obs_full_tensor']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._config.context_len_to_trigger, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_308": {
                "variable": {
                    "value": "time_first_input",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "seq_output",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_309": {
                "variable": {
                    "value": "init_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self._out_obs_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scan_310": {
                "variable": {
                    "value": "current_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "self.lstm_obs_emit_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "time_first_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(seq_output, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self._out_obs_dim])",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, self._out_obs_dim])",
                            "Call"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "PARALLEL_ITER_SCAN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "name": {
                    "value": "lstm_emit_obs_scan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_338": {
                "variable": {
                    "value": "seqlen",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "context_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs_to_trigger_tensor.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "obs_tensor.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "obs_tensor.get_shape().as_list()[1]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_366": {
                "variable": {
                    "value": "output[obs_est]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "t": {
                    "value": "obs_estimation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=lstm_output, units=self._out_obs_dim, activation=None, name='obs_dense')",
                            "Call"
                        ],
                        [
                            "self.lstm_emit_obs(seq_output)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-99999",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "99999",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "clip_by_value_371": {
                "variable": {
                    "value": "output[state_encoding]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "t": {
                    "value": "state_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_output[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-99999",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "99999",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "stack_374": {
                "variable": {
                    "value": "output[lstm_forecast_state]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[state[0].c, state[0].h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_378": {
                "variable": {
                    "value": "output[last_obs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(obs_to_trigger_tensor, [0, self._config.context_len_to_trigger - 1, 0], [-1, 1, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_418": {
                "variable": {
                    "value": "self.state_noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "state_noise",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.eye(self._z_dim, num_columns=self._z_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "config.noise_trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_424": {
                "variable": {
                    "value": "self.obs_noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "obs_noise",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.eye(self._out_obs_dim, num_columns=self._out_obs_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "config.noise_trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_430": {
                "variable": {
                    "value": "self.interv_noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "interv_noise",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.eye(self._u_dim, num_columns=self._u_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "config.noise_trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_447": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(outputs, (batch_size * context_size, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, (batch_size * context_size, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * context_size, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_472": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(outputs, (batch_size * context_size, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, (batch_size * context_size, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size * context_size, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_488": {
                "variable": {
                    "value": "sigma_smooth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sigma_smooth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.softplus(tf.layers.dense(inputs=outputs, units=self._z_dim * self._z_dim, activation=None, name='sigma_smooth' + name))",
                            "Call"
                        ],
                        [
                            "tf.reshape(sigma_smooth, [batch_size, context_size, self._z_dim, self._z_dim])",
                            "Call"
                        ],
                        [
                            "tf.math.softplus(tf.layers.dense(inputs=outputs, units=self._z_dim, activation=None, name='sigma_smooth' + name))",
                            "Call"
                        ],
                        [
                            "tf.reshape(sigma_smooth, [batch_size, context_size, self._z_dim])",
                            "Call"
                        ],
                        [
                            "states[1]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, context_size, self._z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_521": {
                "variable": {
                    "value": "seqlen",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "context_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs_to_trigger_tensor.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "obs_tensor.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "obs_tensor.get_shape().as_list()[1]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_652": {
                "variable": {
                    "value": "seqlen",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "context_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs_to_trigger_tensor.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "obs_tensor.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "obs_tensor.get_shape().as_list()[1]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_690": {
                "variable": {
                    "value": "init_interv",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self._u_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_692": {
                "variable": {
                    "value": "time_first_state",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(combined_output, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scan_694": {
                "variable": {
                    "value": "next_interv",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "interv_forecast_step_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "time_first_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(state, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(state, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(state, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_interv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self._u_dim])",
                            "Call"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "PARALLEL_ITER_SCAN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "name": {
                    "value": "interv_forecast_scan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_730": {
                "variable": {
                    "value": "init_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self._out_obs_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_732": {
                "variable": {
                    "value": "time_first_state",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(combined_output, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scan_734": {
                "variable": {
                    "value": "current_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "obs_emission_step_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "time_first_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(state, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(state, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(state, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self._out_obs_dim])",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, self._out_obs_dim])",
                            "Call"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "PARALLEL_ITER_SCAN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "name": {
                    "value": "obs_emission_scan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_763": {
                "variable": {
                    "value": "init_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self._z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_765": {
                "variable": {
                    "value": "time_first_state",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(combined_output, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scan_767": {
                "variable": {
                    "value": "next_state",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "state_tran_step_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "time_first_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(state, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(state, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(state, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self._z_dim])",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, self._z_dim])",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, self._z_dim])",
                            "Call"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "PARALLEL_ITER_SCAN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "name": {
                    "value": "state_tran_scan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_798": {
                "variable": {
                    "value": "init_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self._z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_800": {
                "variable": {
                    "value": "time_first_interv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "interv",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scan_802": {
                "variable": {
                    "value": "next_state",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "control_tran_step_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "time_first_interv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(interv, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, self._z_dim])",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, self._z_dim])",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, self._z_dim])",
                            "Call"
                        ]
                    ]
                },
                "parallel_iterations": {
                    "value": "PARALLEL_ITER_SCAN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "name": {
                    "value": "control_tran_scan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_875": {
                "variable": {
                    "value": "mu_transition",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.state_tran(z_tm1) + self.control_tran(u_t)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self._z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_879": {
                "variable": {
                    "value": "z_t_transition",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z_smooth[:, 1:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self._z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_896": {
                "variable": {
                    "value": "obs_emission_z_t_resh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "obs_emission_z_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.obs_emission(z_smooth)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._out_obs_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_902": {
                "variable": {
                    "value": "y_t_resh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(tf.boolean_mask(tf.transpose(obs_train_tensor, [2, 0, 1]), biomarker_boolean_mask_tensor), [1, 2, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self._out_obs_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_909": {
                "variable": {
                    "value": "mask_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(tf.boolean_mask(tf.transpose(obs_train_mask_tensor, [2, 0, 1]), biomarker_boolean_mask_tensor), [1, 2, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self._out_obs_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_917": {
                "variable": {
                    "value": "emiss_centered",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(tf.boolean_mask(tf.transpose(obs_train_mask_tensor, [2, 0, 1]), biomarker_boolean_mask_tensor), [1, 2, 0]), [-1, self._out_obs_dim])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "emiss_centered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_t_resh - obs_emission_z_t_resh",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(mask_flat, emiss_centered)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_941": {
                "variable": {
                    "value": "init_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self._z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_942": {
                "variable": {
                    "value": "init_sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(tf.eye(self._z_dim, num_columns=self._z_dim), tf.constant([batch_size, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self._z_dim, self._z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_952": {
                "variable": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-mvn_smooth.log_prob(z_smooth)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(entropy, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_964": {
                "variable": {
                    "value": "kf_elbo",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reduce_mean(log_prob_transition), tf.reduce_mean(log_prob_emission), tf.reduce_mean(log_prob_0), tf.reduce_mean(entropy)]",
                            "List"
                        ],
                        [
                            "log_probs + [tf.reduce_mean(log_prob_interv)]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_971": {
                "variable": {
                    "value": "state_only_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "state_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.reduce_mean(log_prob_transition), tf.reduce_mean(log_prob_0), tf.reduce_mean(entropy)]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_981": {
                "variable": {
                    "value": "output[obs_est]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "obs_emission_z_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.obs_emission(z_smooth)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tlen, self._out_obs_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_994": {
                "variable": {
                    "value": "output[full_state_encoding]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(mu_prediction[:, -1, :], axis=-1), sigma_prediction[:, -1, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_1004": {
                "variable": {
                    "value": "output[last_obs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(obs_to_trigger_tensor, [0, self._config.context_len_to_trigger - 1, 0], [-1, 1, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_75": {
                "msg": {
                    "value": "features.keys()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_85": {
                "variable": {
                    "value": "tensor_dict[obs_full_mask_tensor]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "mask_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "mask_list + [tf.expand_dims(features[obs + '_mask'], 2)]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_92": {
                "variable": {
                    "value": "tensor_dict[obs_to_trigger_mask_tensor]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "tensor_dict['obs_full_mask_tensor']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._config.context_len_to_trigger, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_97": {
                "variable": {
                    "value": "tensor_dict[intervention_full_tensor]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(features[intv], 2) for intv in config.intervention_codes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_102": {
                "variable": {
                    "value": "tensor_dict[intervention_to_trigger_tensor]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_": {
                    "value": "tensor_dict['intervention_full_tensor']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, self._config.context_len_to_trigger, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_116": {
                "variable": {
                    "value": "tensor_dict[biomarker_boolean_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "biomarker_mask_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_119": {
                "variable": {
                    "value": "tensor_dict[biomarker_boolean_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(config.observation_codes)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_130": {
                "variable": {
                    "value": "obs_full_mask_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tensor_dict['obs_full_mask_tensor']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_133": {
                "variable": {
                    "value": "obs_full_mask_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs_full_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict['obs_full_tensor']",
                            "Subscript"
                        ],
                        [
                            "tf.slice(obs_full_tensor, [0, 0, 0], [-1, train_len, -1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_136": {
                "variable": {
                    "value": "obs_full_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "obs_full_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict['obs_full_tensor']",
                            "Subscript"
                        ],
                        [
                            "tf.slice(obs_full_tensor, [0, 0, 0], [-1, train_len, -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, train_len, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_138": {
                "variable": {
                    "value": "intervention_full_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "intervention_full_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict['intervention_full_tensor']",
                            "Subscript"
                        ],
                        [
                            "tf.slice(intervention_full_tensor, [0, 0, 0], [-1, train_len, -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, train_len, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_140": {
                "variable": {
                    "value": "obs_full_mask_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "obs_full_mask_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tensor_dict['obs_full_mask_tensor'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(obs_full_tensor, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.slice(obs_full_mask_tensor, [0, 0, 0], [-1, train_len, -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, train_len, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_147": {
                "variable": {
                    "value": "obs_to_trigger_mask_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tensor_dict['obs_to_trigger_mask_tensor']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_150": {
                "variable": {
                    "value": "obs_to_trigger_mask_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs_to_trigger_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict['obs_to_trigger_tensor']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_156": {
                "variable": {
                    "value": "biomarker_boolean_mask_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(self._config.observation_codes)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "info_195": {
                "msg": {
                    "value": "tensor_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "self._feature_to_tensor(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_251": {
                "msg": {
                    "value": "tensor_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "self._feature_to_tensor(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMCell_280": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "config.ds_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiRNNCell_281": {
                "variable": {
                    "value": "rnn_cells",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[cell] * config.ds_nrl",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dynamic_rnn_283": {
                "variable": {
                    "value": "(outputs, state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "rnn_cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([cell] * config.ds_nrl)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([cell] * config.ds_nrl)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([cell] * config.ds_nrl)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([cell] * config.ds_nrl)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs_to_trigger_tensor",
                            "variable"
                        ],
                        [
                            "tf.concat([obs_to_trigger_tensor, intervention_to_trigger_tensor], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([obs_to_trigger_tensor[:, config.lstm_interv_delay:, :], intervention_to_trigger_tensor[:, :-config.lstm_interv_delay, :]], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([obs_tensor, intervention_tensor], axis=2)",
                            "Call"
                        ],
                        [
                            "obs_tensor",
                            "variable"
                        ],
                        [
                            "tf.concat([obs_tensor, intervention_tensor], axis=2)",
                            "Call"
                        ],
                        [
                            "obs_tensor",
                            "variable"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_cells.zero_state(batch_size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "rnn_cells.zero_state(batch_size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "rnn_cells.zero_state(batch_size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "rnn_cells.zero_state(batch_size, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "seqlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(context_size, shape=[batch_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(context_size, shape=[batch_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(context_size, shape=[batch_size])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_297": {
                "variable": {
                    "value": "obs_estimation",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "lstm_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_input",
                            "variable"
                        ]
                    ]
                },
                "units": {
                    "value": "self._out_obs_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "obs_dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_317": {
                "a": {
                    "value": "current_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scan(self.lstm_obs_emit_step, time_first_input, initializer=init_obs, parallel_iterations=PARALLEL_ITER_SCAN, name='lstm_emit_obs_scan')",
                            "Call"
                        ],
                        [
                            "tf.scan(obs_emission_step_fn, time_first_state, initializer=init_obs, parallel_iterations=PARALLEL_ITER_SCAN, name='obs_emission_scan')",
                            "Call"
                        ],
                        [
                            "modules._obs_emission_module(current_state, self._out_obs_dim, self._config.obs_nmlp, self._config.obs_smlp, self._tag, emission_activation)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "info_340": {
                "msg": {
                    "value": "obs_to_trigger_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict['obs_to_trigger_tensor']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "info_341": {
                "msg": {
                    "value": "intervention_to_trigger_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict['intervention_to_trigger_tensor']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "info_375": {
                "msg": {
                    "value": "output['lstm_forecast_state']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "boolean_mask_383": {
                "variable": {
                    "value": "output[last_obs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(output['last_obs'])",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "biomarker_boolean_mask_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict['biomarker_boolean_mask']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(True, shape=[len(self._config.observation_codes)])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_386": {
                "variable": {
                    "value": "output[last_obs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "output['last_obs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dense_449": {
                "variable": {
                    "value": "mu_smooth",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(outputs, (batch_size * context_size, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, (batch_size * context_size, -1))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self._z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "'mu_smooth' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_454": {
                "variable": {
                    "value": "mu_smooth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mu_smooth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=outputs, units=self._z_dim, activation=None, name='mu_smooth' + name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mu_smooth, [batch_size, context_size, self._z_dim])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=outputs, units=self._z_dim, activation=None, name='mu_smooth' + name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mu_smooth, [batch_size, context_size, self._z_dim])",
                            "Call"
                        ],
                        [
                            "states[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, context_size, self._z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softplus_457": {
                "variable": {
                    "value": "sigma_smooth",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.dense(inputs=outputs, units=self._z_dim * self._z_dim, activation=None, name='sigma_smooth' + name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_463": {
                "variable": {
                    "value": "sigma_smooth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sigma_smooth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.softplus(tf.layers.dense(inputs=outputs, units=self._z_dim * self._z_dim, activation=None, name='sigma_smooth' + name))",
                            "Call"
                        ],
                        [
                            "tf.reshape(sigma_smooth, [batch_size, context_size, self._z_dim, self._z_dim])",
                            "Call"
                        ],
                        [
                            "tf.math.softplus(tf.layers.dense(inputs=outputs, units=self._z_dim, activation=None, name='sigma_smooth' + name))",
                            "Call"
                        ],
                        [
                            "tf.reshape(sigma_smooth, [batch_size, context_size, self._z_dim])",
                            "Call"
                        ],
                        [
                            "states[1]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, context_size, self._z_dim, self._z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_474": {
                "variable": {
                    "value": "mu_smooth",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(outputs, (batch_size * context_size, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, (batch_size * context_size, -1))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self._z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "'mu_smooth' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_479": {
                "variable": {
                    "value": "mu_smooth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mu_smooth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=outputs, units=self._z_dim, activation=None, name='mu_smooth' + name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mu_smooth, [batch_size, context_size, self._z_dim])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=outputs, units=self._z_dim, activation=None, name='mu_smooth' + name)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mu_smooth, [batch_size, context_size, self._z_dim])",
                            "Call"
                        ],
                        [
                            "states[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, context_size, self._z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softplus_482": {
                "variable": {
                    "value": "sigma_smooth",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.dense(inputs=outputs, units=self._z_dim, activation=None, name='sigma_smooth' + name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_518": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[obs_tensor, intervention_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_591": {
                "variable": {
                    "value": "time_first_forward_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "forward_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(inputs, [0, 0, 0], [-1, -1, self._z_dim])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_592": {
                "variable": {
                    "value": "time_first_backward_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "backward_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(inputs, [0, 0, self._z_dim], [-1, -1, self._z_dim])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_593": {
                "variable": {
                    "value": "z_0",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self._z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_602": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "combined_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "forward_outputs + backward_outputs",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "divide_618": {
                "variable": {
                    "value": "mu_combine",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(l_state[0], r_state[1]) + tf.multiply(r_state[0], l_state[1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "l_state[1] + r_state[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "divide_621": {
                "variable": {
                    "value": "sigma_combine",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(l_state[1], r_state[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "l_state[1] + r_state[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_623": {
                "variable": {
                    "value": "sigma_combine_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(sigma_combine, [1, 1, self._z_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, context_size, self._z_dim, self._z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_649": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[obs_tensor, intervention_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_657": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "config.ds_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiRNNCell_658": {
                "variable": {
                    "value": "rnn_cells",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[cell] * config.ds_nrl",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dynamic_rnn_660": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "rnn_cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([cell] * config.ds_nrl)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([cell] * config.ds_nrl)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([cell] * config.ds_nrl)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([cell] * config.ds_nrl)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs_to_trigger_tensor",
                            "variable"
                        ],
                        [
                            "tf.concat([obs_to_trigger_tensor, intervention_to_trigger_tensor], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([obs_to_trigger_tensor[:, config.lstm_interv_delay:, :], intervention_to_trigger_tensor[:, :-config.lstm_interv_delay, :]], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([obs_tensor, intervention_tensor], axis=2)",
                            "Call"
                        ],
                        [
                            "obs_tensor",
                            "variable"
                        ],
                        [
                            "tf.concat([obs_tensor, intervention_tensor], axis=2)",
                            "Call"
                        ],
                        [
                            "obs_tensor",
                            "variable"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_cells.zero_state(batch_size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "rnn_cells.zero_state(batch_size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "rnn_cells.zero_state(batch_size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "rnn_cells.zero_state(batch_size, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "seqlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(context_size, shape=[batch_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(context_size, shape=[batch_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(context_size, shape=[batch_size])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_701": {
                "a": {
                    "value": "next_interv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scan(interv_forecast_step_fn, time_first_state, initializer=init_interv, parallel_iterations=PARALLEL_ITER_SCAN, name='interv_forecast_scan')",
                            "Call"
                        ],
                        [
                            "modules._interv_forecast_module(current_state, self._u_dim, self._config.interv_nmlp, self._config.interv_smlp, self._tag)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_741": {
                "a": {
                    "value": "current_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scan(self.lstm_obs_emit_step, time_first_input, initializer=init_obs, parallel_iterations=PARALLEL_ITER_SCAN, name='lstm_emit_obs_scan')",
                            "Call"
                        ],
                        [
                            "tf.scan(obs_emission_step_fn, time_first_state, initializer=init_obs, parallel_iterations=PARALLEL_ITER_SCAN, name='obs_emission_scan')",
                            "Call"
                        ],
                        [
                            "modules._obs_emission_module(current_state, self._out_obs_dim, self._config.obs_nmlp, self._config.obs_smlp, self._tag, emission_activation)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_774": {
                "a": {
                    "value": "next_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scan(state_tran_step_fn, time_first_state, initializer=init_mu, parallel_iterations=PARALLEL_ITER_SCAN, name='state_tran_scan')",
                            "Call"
                        ],
                        [
                            "modules._state_tran_module(current_state, self._z_dim, self._config.stran_nmlp, self._config.stran_smlp, self._tag)",
                            "Call"
                        ],
                        [
                            "tf.scan(control_tran_step_fn, time_first_interv, initializer=init_mu, parallel_iterations=PARALLEL_ITER_SCAN, name='control_tran_scan')",
                            "Call"
                        ],
                        [
                            "modules._control_tran_module(current_interv, self._z_dim, self._config.ctran_nmlp, self._config.ctran_smlp, self._tag)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_809": {
                "a": {
                    "value": "next_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scan(state_tran_step_fn, time_first_state, initializer=init_mu, parallel_iterations=PARALLEL_ITER_SCAN, name='state_tran_scan')",
                            "Call"
                        ],
                        [
                            "modules._state_tran_module(current_state, self._z_dim, self._config.stran_nmlp, self._config.stran_smlp, self._tag)",
                            "Call"
                        ],
                        [
                            "tf.scan(control_tran_step_fn, time_first_interv, initializer=init_mu, parallel_iterations=PARALLEL_ITER_SCAN, name='control_tran_scan')",
                            "Call"
                        ],
                        [
                            "modules._control_tran_module(current_interv, self._z_dim, self._config.ctran_nmlp, self._config.ctran_smlp, self._tag)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "info_813": {
                "msg": {
                    "value": "deep_smooth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_816": {
                "msg": {
                    "value": "states",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_873": {
                "msg": {
                    "value": "u_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intervention_train_tensor[:, 1:, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "info_900": {
                "msg": {
                    "value": "biomarker_boolean_mask_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict['biomarker_boolean_mask']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(True, shape=[len(self._config.observation_codes)])",
                            "Call"
                        ]
                    ]
                }
            },
            "info_901": {
                "msg": {
                    "value": "obs_train_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_928": {
                "variable": {
                    "value": "interv_forecast_z_t_resh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "interv_forecast_z_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.interv_forecast(z_tm1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._u_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_930": {
                "variable": {
                    "value": "u_t_resh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "u_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intervention_train_tensor[:, 1:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self._u_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_1009": {
                "variable": {
                    "value": "output[last_obs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(output['last_obs'])",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "biomarker_boolean_mask_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict['biomarker_boolean_mask']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(True, shape=[len(self._config.observation_codes)])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_1012": {
                "variable": {
                    "value": "output[last_obs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "output['last_obs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "info_1016": {
                "msg": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modules._fully_connected_module(input_tensor=network_input, num_dense_layers=config.ndl, dense_layer_size=config.sdl, output_layer_size=config.sdl, output_activation=tf.nn.sigmoid, is_training=is_training, drop_rate=config.drdl, name='MLP')",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "dict()",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_1095": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "network_output['state_encoding']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "logits_dimension",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.logits_dimension",
                            "Attribute"
                        ],
                        [
                            "network_output['state_encoding'].get_shape()[1]",
                            "Subscript"
                        ],
                        [
                            "label.num_classes",
                            "Attribute"
                        ],
                        [
                            "len(params.labels)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_1167": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_192": {
                "name": {
                    "value": "Feature_to_tensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_196": {
                "name": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_279": {
                "name_or_scope": {
                    "value": "'lstm_ds' + self._tag",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_296": {
                "name_or_scope": {
                    "value": "'lstm_ds_obs_emit' + self._tag",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_344": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[obs_to_trigger_tensor, intervention_to_trigger_tensor]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_349": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[obs_to_trigger_tensor[:, config.lstm_interv_delay:, :], intervention_to_trigger_tensor[:, :-config.lstm_interv_delay, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_379": {
                "input_": {
                    "value": "obs_to_trigger_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict['obs_to_trigger_tensor']",
                            "Subscript"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, self._config.context_len_to_trigger - 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_448": {
                "name_or_scope": {
                    "value": "'get_mu_sigma_sq' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_473": {
                "name_or_scope": {
                    "value": "'get_mu_sigma' + name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_527": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "config.ds_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiRNNCell_528": {
                "variable": {
                    "value": "rnn_cells",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[cell] * config.ds_nrl",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dynamic_rnn_530": {
                "variable": {
                    "value": "(forward_outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "rnn_cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([cell] * config.ds_nrl)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([cell] * config.ds_nrl)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([cell] * config.ds_nrl)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([cell] * config.ds_nrl)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs_to_trigger_tensor",
                            "variable"
                        ],
                        [
                            "tf.concat([obs_to_trigger_tensor, intervention_to_trigger_tensor], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([obs_to_trigger_tensor[:, config.lstm_interv_delay:, :], intervention_to_trigger_tensor[:, :-config.lstm_interv_delay, :]], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([obs_tensor, intervention_tensor], axis=2)",
                            "Call"
                        ],
                        [
                            "obs_tensor",
                            "variable"
                        ],
                        [
                            "tf.concat([obs_tensor, intervention_tensor], axis=2)",
                            "Call"
                        ],
                        [
                            "obs_tensor",
                            "variable"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_cells.zero_state(batch_size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "rnn_cells.zero_state(batch_size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "rnn_cells.zero_state(batch_size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "rnn_cells.zero_state(batch_size, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "seqlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(context_size, shape=[batch_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(context_size, shape=[batch_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(context_size, shape=[batch_size])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_539": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "config.ds_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiRNNCell_540": {
                "variable": {
                    "value": "rnn_cells",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[cell] * config.ds_nrl",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dynamic_rnn_542": {
                "variable": {
                    "value": "(backward_outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "rnn_cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([cell] * config.ds_nrl)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([cell] * config.ds_nrl)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([cell] * config.ds_nrl)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([cell] * config.ds_nrl)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "tf.reverse(input_tensor, axis=[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_cells.zero_state(batch_size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "rnn_cells.zero_state(batch_size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "rnn_cells.zero_state(batch_size, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "rnn_cells.zero_state(batch_size, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "seqlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(context_size, shape=[batch_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(context_size, shape=[batch_size])",
                            "Call"
                        ],
                        [
                            "tf.constant(context_size, shape=[batch_size])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_553": {
                "variable": {
                    "value": "forward_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, self._z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_554": {
                "variable": {
                    "value": "backward_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, self._z_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, self._z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_557": {
                "variable": {
                    "value": "h_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, self._z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_577": {
                "variable": {
                    "value": "h_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 / count",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "z_transform + h_comb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_580": {
                "variable": {
                    "value": "mu_combine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_combine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.multiply(l_state[0], r_state[1]) + tf.multiply(r_state[0], l_state[1]), l_state[1] + r_state[1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(mu_combine, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_581": {
                "variable": {
                    "value": "sigma_combine",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma_combine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.multiply(l_state[1], r_state[1]), l_state[1] + r_state[1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(sigma_combine, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_605": {
                "msg": {
                    "value": "combined_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_mu_sigma_sq(state, batch_size, context_size, 'st')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_626": {
                "msg": {
                    "value": "mu_combine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.multiply(l_state[0], r_state[1]) + tf.multiply(r_state[0], l_state[1]), l_state[1] + r_state[1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(mu_combine, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "*args": {
                    "value": "sigma_combine_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.tile(sigma_combine, [1, 1, self._z_dim]), [batch_size, context_size, self._z_dim, self._z_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_656": {
                "name_or_scope": {
                    "value": "dkf_ds_encode",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_682": {
                "msg": {
                    "value": "current_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_input",
                            "variable"
                        ],
                        [
                            "current_input",
                            "variable"
                        ],
                        [
                            "current_input",
                            "variable"
                        ]
                    ]
                }
            },
            "info_716": {
                "msg": {
                    "value": "current_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_input",
                            "variable"
                        ],
                        [
                            "current_input",
                            "variable"
                        ],
                        [
                            "current_input",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_886": {
                "shape": {
                    "value": "self._z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cholesky_886": {
                "input": {
                    "value": "self.state_noise",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_903": {
                "a": {
                    "value": "tf.boolean_mask(tf.transpose(obs_train_tensor, [2, 0, 1]), biomarker_boolean_mask_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_910": {
                "a": {
                    "value": "tf.boolean_mask(tf.transpose(obs_train_mask_tensor, [2, 0, 1]), biomarker_boolean_mask_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_920": {
                "shape": {
                    "value": "self._out_obs_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cholesky_920": {
                "input": {
                    "value": "self.obs_noise",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_943": {
                "input": {
                    "value": "tf.eye(self._z_dim, num_columns=self._z_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.constant([batch_size, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cholesky_947": {
                "input": {
                    "value": "init_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.tile(tf.eye(self._z_dim, num_columns=self._z_dim), tf.constant([batch_size, 1])), [batch_size, self._z_dim, self._z_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_956": {
                "input_tensor": {
                    "value": "log_prob_transition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mvn_transition.log_prob(trans_centered)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_957": {
                "input_tensor": {
                    "value": "log_prob_emission",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mvn_emission.log_prob(emiss_centered)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_958": {
                "input_tensor": {
                    "value": "log_prob_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mvn_0.log_prob(z_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_959": {
                "input_tensor": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-mvn_smooth.log_prob(z_smooth)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(entropy, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_967": {
                "input_tensor": {
                    "value": "log_prob_transition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mvn_transition.log_prob(trans_centered)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_968": {
                "input_tensor": {
                    "value": "log_prob_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mvn_0.log_prob(z_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_969": {
                "input_tensor": {
                    "value": "entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-mvn_smooth.log_prob(z_smooth)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(entropy, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_1005": {
                "input_": {
                    "value": "obs_to_trigger_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict['obs_to_trigger_tensor']",
                            "Subscript"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, self._config.context_len_to_trigger - 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_1169": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_77": {
                "input": {
                    "value": "features[obs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_384": {
                "a": {
                    "value": "output['last_obs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_420": {
                "num_rows": {
                    "value": "self._z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_columns": {
                    "value": "self._z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_426": {
                "num_rows": {
                    "value": "self._out_obs_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_columns": {
                    "value": "self._out_obs_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_432": {
                "num_rows": {
                    "value": "self._u_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_columns": {
                    "value": "self._u_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_458": {
                "inputs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(outputs, (batch_size * context_size, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, (batch_size * context_size, -1))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self._z_dim * self._z_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "'sigma_smooth' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_483": {
                "inputs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(outputs, (batch_size * context_size, -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, (batch_size * context_size, -1))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self._z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "'sigma_smooth' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_526": {
                "name_or_scope": {
                    "value": "dkf_ds_strl_forward",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_538": {
                "name_or_scope": {
                    "value": "dkf_ds_strl_backward",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_622": {
                "x": {
                    "value": "l_state[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "r_state[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tile_624": {
                "input": {
                    "value": "sigma_combine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.multiply(l_state[1], r_state[1]), l_state[1] + r_state[1])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(sigma_combine, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, self._z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_851": {
                "num_rows": {
                    "value": "tf.shape(sigma_smooth)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "tf.shape(sigma_smooth)[0:-2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "boolean_mask_904": {
                "tensor": {
                    "value": "tf.transpose(obs_train_tensor, [2, 0, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "biomarker_boolean_mask_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict['biomarker_boolean_mask']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(True, shape=[len(self._config.observation_codes)])",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_911": {
                "tensor": {
                    "value": "tf.transpose(obs_train_mask_tensor, [2, 0, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "biomarker_boolean_mask_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_dict['biomarker_boolean_mask']",
                            "Subscript"
                        ],
                        [
                            "tf.constant(True, shape=[len(self._config.observation_codes)])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_934": {
                "shape": {
                    "value": "self._u_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cholesky_934": {
                "input": {
                    "value": "self.interv_noise",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_944": {
                "num_rows": {
                    "value": "self._z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_columns": {
                    "value": "self._z_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_945": {
                "value": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_995": {
                "input": {
                    "value": "mu_prediction[:, -1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_1010": {
                "a": {
                    "value": "output['last_obs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_1171": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_98": {
                "input": {
                    "value": "features[intv]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reverse_544": {
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs_to_trigger_tensor",
                            "variable"
                        ],
                        [
                            "tf.concat([obs_to_trigger_tensor, intervention_to_trigger_tensor], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([obs_to_trigger_tensor[:, config.lstm_interv_delay:, :], intervention_to_trigger_tensor[:, :-config.lstm_interv_delay, :]], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([obs_tensor, intervention_tensor], axis=2)",
                            "Call"
                        ],
                        [
                            "obs_tensor",
                            "variable"
                        ],
                        [
                            "tf.concat([obs_tensor, intervention_tensor], axis=2)",
                            "Call"
                        ],
                        [
                            "obs_tensor",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_619": {
                "x": {
                    "value": "l_state[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "r_state[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_620": {
                "x": {
                    "value": "r_state[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "l_state[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_905": {
                "a": {
                    "value": "obs_train_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_912": {
                "a": {
                    "value": "obs_train_mask_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_962": {
                "input_tensor": {
                    "value": "log_prob_interv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mvn_interv.log_prob(interv_centered)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_1173": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_84": {
                "input": {
                    "value": "features[obs + '_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_560": {
                "input": {
                    "value": "tf.slice(forward_outputs, [0, 0, 0], [-1, t, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_564": {
                "input": {
                    "value": "tf.slice(backward_outputs, [0, 0, 0], [-1, t, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_852": {
                "input": {
                    "value": "sigma_smooth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.softplus(tf.layers.dense(inputs=outputs, units=self._z_dim * self._z_dim, activation=None, name='sigma_smooth' + name))",
                            "Call"
                        ],
                        [
                            "tf.reshape(sigma_smooth, [batch_size, context_size, self._z_dim, self._z_dim])",
                            "Call"
                        ],
                        [
                            "tf.math.softplus(tf.layers.dense(inputs=outputs, units=self._z_dim, activation=None, name='sigma_smooth' + name))",
                            "Call"
                        ],
                        [
                            "tf.reshape(sigma_smooth, [batch_size, context_size, self._z_dim])",
                            "Call"
                        ],
                        [
                            "states[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "AdagradOptimizer_1175": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "slice_561": {
                "input_": {
                    "value": "forward_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(inputs, [0, 0, 0], [-1, -1, self._z_dim])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, t, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_565": {
                "input_": {
                    "value": "backward_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(inputs, [0, 0, self._z_dim], [-1, -1, self._z_dim])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, t, -1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "state-space-model/modules.py": {
        "tensorflow": {
            "dense_64": {
                "variable": {
                    "value": "net_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "net_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(net_output, dense_layer_size, activation=tf.nn.relu, trainable=trainable, name=name + '_' + str(layer_num))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(net_output, output_layer_size, activation=output_activation, trainable=trainable, name=name + '_' + str(num_dense_layers - 1))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(net_output, rate=drop_rate, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "output_layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "output_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name + '_' + str(num_dense_layers - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_71": {
                "variable": {
                    "value": "net_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(net_output, dense_layer_size, activation=tf.nn.relu, trainable=trainable, name=name + '_' + str(layer_num))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(net_output, output_layer_size, activation=output_activation, trainable=trainable, name=name + '_' + str(num_dense_layers - 1))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(net_output, rate=drop_rate, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_139": {
                "msg": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_57": {
                "variable": {
                    "value": "net_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "net_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(net_output, dense_layer_size, activation=tf.nn.relu, trainable=trainable, name=name + '_' + str(layer_num))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(net_output, output_layer_size, activation=output_activation, trainable=trainable, name=name + '_' + str(num_dense_layers - 1))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(net_output, rate=drop_rate, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "dense_layer_size",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name + '_' + str(layer_num)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_171": {
                "x": {
                    "value": "tf.ones_like(gate) - gate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "linear_state_candidate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_fully_connected_module(input_tensor=state, num_dense_layers=1, dense_layer_size=stran_smlp, output_layer_size=state_size, output_activation=None, is_training=True, drop_rate=0, name='linear_state_candidate' + name_tag, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_172": {
                "x": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_fully_connected_module(input_tensor=state, num_dense_layers=stran_nmlp, dense_layer_size=stran_smlp, output_layer_size=state_size, output_activation=tf.nn.sigmoid, is_training=True, drop_rate=0, name='state_tran_gate' + name_tag, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "nonlinear_state_candidate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_fully_connected_module(input_tensor=state, num_dense_layers=stran_nmlp, dense_layer_size=stran_smlp, output_layer_size=state_size, output_activation=None, is_training=True, drop_rate=0, name='nonlinear_state_candidate' + name_tag, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_224": {
                "x": {
                    "value": "tf.ones_like(control_gate) - control_gate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "control_linear_state_candidate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_fully_connected_module(input_tensor=interv, num_dense_layers=1, dense_layer_size=ctran_smlp, output_layer_size=state_size, output_activation=None, is_training=True, drop_rate=0, name='control_linear_state_candidate' + name_tag, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_226": {
                "x": {
                    "value": "control_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_fully_connected_module(input_tensor=interv, num_dense_layers=ctran_nmlp, dense_layer_size=ctran_smlp, output_layer_size=state_size, output_activation=tf.nn.sigmoid, is_training=True, drop_rate=0, name='control_tran_gate' + name_tag, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "control_nonlinear_state_candidate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_fully_connected_module(input_tensor=interv, num_dense_layers=ctran_nmlp, dense_layer_size=ctran_smlp, output_layer_size=state_size, output_activation=None, is_training=True, drop_rate=0, name='control_nonlinear_state_candidate' + name_tag, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_171": {
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_fully_connected_module(input_tensor=state, num_dense_layers=stran_nmlp, dense_layer_size=stran_smlp, output_layer_size=state_size, output_activation=tf.nn.sigmoid, is_training=True, drop_rate=0, name='state_tran_gate' + name_tag, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_225": {
                "input": {
                    "value": "control_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_fully_connected_module(input_tensor=interv, num_dense_layers=ctran_nmlp, dense_layer_size=ctran_smlp, output_layer_size=state_size, output_activation=tf.nn.sigmoid, is_training=True, drop_rate=0, name='control_tran_gate' + name_tag, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "state-space-model/multi_head_for_survival.py": {
        "tensorflow": {
            "no_op_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_76": {
                "variable": {
                    "value": "per_head_label_map[key][key + .time_to_event]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "labels[key + '.time_to_event']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_124": {
                "variable": {
                    "value": "merged_training_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "training_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tuple(training_losses)",
                            "Call"
                        ],
                        [
                            "head_weighted_training_losses",
                            "variable"
                        ]
                    ]
                }
            },
            "add_n_149": {
                "variable": {
                    "value": "regularization_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "regularization_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_104": {
                "msg": {
                    "value": "head.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_105": {
                "msg": {
                    "value": "per_head_label_map[head.name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_114": {
                "name": {
                    "value": "merge_losses",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "training_losses + (self._head_weights or tuple())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_129": {
                "variable": {
                    "value": "regularization_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "regularization_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_227": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_232": {
                "msg": {
                    "value": "head.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_122": {
                "x": {
                    "value": "training_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "head.loss(logits=logits_dict[head.name], labels=per_head_label_map[head.name], features=features, mode=mode)",
                            "Call"
                        ],
                        [
                            "head.loss(logits=head_logits, labels=head_labels, features=features)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "head_weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_global_step_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "state-space-model/sequence_heads.py": {
        "tensorflow": {
            "concat_88": {
                "variable": {
                    "value": "obs_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(labels[obs], 2) for obs in self._model_hparams.observation_codes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_129": {
                "variable": {
                    "value": "trimmed_processed_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "processed_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._processed_labels(logits, labels, features)",
                            "Call"
                        ],
                        [
                            "self._processed_labels(logits, labels, features)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, seqlen, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_131": {
                "variable": {
                    "value": "trimmed_mask_obs_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "mask_obs_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.expand_dims(features[obs + '_mask'], 2) for obs in self._model_hparams.observation_codes], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.ones_like(processed_labels)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, seqlen, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_135": {
                "variable": {
                    "value": "batch_time_feature_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(trimmed_processed_labels - logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "trimmed_mask_obs_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(mask_obs_tensor, [0, 0, 0], [-1, seqlen, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_137": {
                "variable": {
                    "value": "batch_time_value_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "batch_time_feature_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.square(trimmed_processed_labels - logits), trimmed_mask_obs_tensor)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sequence_mask_146": {
                "variable": {
                    "value": "true_len_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "true_len_hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['true_length_hr']",
                            "Subscript"
                        ],
                        [
                            "tf.fill([batch_size], self._model_hparams.context_window_size)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "seqlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(true_len_hr)",
                            "Call"
                        ],
                        [
                            "self._model_hparams.context_window_size",
                            "Attribute"
                        ],
                        [
                            "seqlen - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_155": {
                "variable": {
                    "value": "trimmed_batch_time_value_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "batch_time_value_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(batch_time_feature_loss, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "selection_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_len_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.logical_xor(true_len_mask, last_obs_len_mask), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_161": {
                "variable": {
                    "value": "scalar_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "batch_value_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.div_no_nan(tf.reduce_sum(trimmed_batch_time_value_loss, axis=1), tf.reduce_sum(selection_mask, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "info_43": {
                "msg": {
                    "value": "self._logits_dimension",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_47": {
                "msg": {
                    "value": "self._model_hparams",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "roll_94": {
                "input": {
                    "value": "obs_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.expand_dims(labels[obs], 2) for obs in self._model_hparams.observation_codes], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "shift": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_104": {
                "variable": {
                    "value": "mask_obs_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(features[obs + '_mask'], 2) for obs in self._model_hparams.observation_codes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_110": {
                "variable": {
                    "value": "mask_obs_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "processed_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._processed_labels(logits, labels, features)",
                            "Call"
                        ],
                        [
                            "self._processed_labels(logits, labels, features)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_114": {
                "variable": {
                    "value": "seqlen",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "true_len_hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['true_length_hr']",
                            "Subscript"
                        ],
                        [
                            "tf.fill([batch_size], self._model_hparams.context_window_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_117": {
                "variable": {
                    "value": "true_len_hr",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "self._model_hparams.context_window_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_149": {
                "variable": {
                    "value": "selection_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "true_len_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(true_len_hr, seqlen)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_151": {
                "variable": {
                    "value": "last_obs_len_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "true_len_hr - last_obs_len",
                    "type": "BinOp",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "seqlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(true_len_hr)",
                            "Call"
                        ],
                        [
                            "self._model_hparams.context_window_size",
                            "Attribute"
                        ],
                        [
                            "seqlen - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_152": {
                "variable": {
                    "value": "selection_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_xor(true_len_mask, last_obs_len_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "compute_weighted_loss_193": {
                "variable": {
                    "value": "training_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "losses": {
                    "value": "unweighted_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_head.get_weights_and_check_match_logits(features=features, weight_column=self._weight_column, logits=logits)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "self._loss_reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Mean_242": {
                "variable": {
                    "value": "eval_metrics[self._loss_mean_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "keys.LOSS_MEAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Mean_243": {
                "variable": {
                    "value": "eval_metrics[self._prediction_mean_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "keys.PREDICTION_MEAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Mean_245": {
                "variable": {
                    "value": "eval_metrics[self._label_mean_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "keys.LABEL_MEAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MeanAbsoluteError_249": {
                "variable": {
                    "value": "eval_metrics[self._mean_abs_error]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "MEAN_ABS_ERROR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mean_abs_error'",
                            "str"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_295": {
                "variable": {
                    "value": "regularization_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "regularization_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_136": {
                "x": {
                    "value": "trimmed_processed_labels - logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_158": {
                "input_tensor": {
                    "value": "trimmed_batch_time_value_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(batch_time_value_loss, selection_mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_159": {
                "input_tensor": {
                    "value": "selection_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(true_len_mask, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.logical_xor(true_len_mask, last_obs_len_mask), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_187": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "(logits, labels, regularization_losses, features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_n_198": {
                "variable": {
                    "value": "regularization_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "regularization_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_230": {
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "(logits,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_239": {
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "(regularization_losses,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Mean_247": {
                "variable": {
                    "value": "eval_metrics[self._loss_regularization_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "keys.LOSS_REGULARIZATION",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_347": {
                "name": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_89": {
                "input": {
                    "value": "labels[obs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_xor_153": {
                "x": {
                    "value": "true_len_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(true_len_hr, seqlen)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "last_obs_len_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(true_len_hr - last_obs_len, seqlen)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_105": {
                "input": {
                    "value": "features[obs + '_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "state-space-model/survival_heads.py": {
        "tensorflow": {
            "concat_227": {
                "variable": {
                    "value": "event_observed",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "event_observed_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "equal_228": {
                "variable": {
                    "value": "event_censored",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "event_observed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(event_observed_list, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant([0], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_229": {
                "variable": {
                    "value": "time_to_event",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "time_to_event_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logical_and_406": {
                "variable": {
                    "value": "time_to_event_within_window",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater_equal(time_to_event, window_start_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less_equal(time_to_event, window_end_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_409": {
                "variable": {
                    "value": "event_within_window",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_not(censored)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "time_to_event_within_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.greater_equal(time_to_event, window_start_t), tf.less_equal(time_to_event, window_end_t))",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_413": {
                "variable": {
                    "value": "censored_within_window",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "censored",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "time_to_event_within_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.greater_equal(time_to_event, window_start_t), tf.less_equal(time_to_event, window_end_t))",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_418": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "event_within_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.logical_not(censored), time_to_event_within_window)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.logical_not(censored_within_window)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_421": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "probabilities_at_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.probability_within_window(window_start_t=window_start_t, window_end_t=window_end_t)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.logical_not(censored_within_window)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "regression_signature_def_67": {
                "examples": {
                    "value": "examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "receiver_tensors['input_examples']",
                            "Subscript"
                        ]
                    ]
                },
                "predictions": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_89": {
                "msg": {
                    "value": "survival_model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'exponential'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_95": {
                "msg": {
                    "value": "self._logits_dimension",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_104": {
                "msg": {
                    "value": "self._all_event_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_111": {
                "msg": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_112": {
                "msg": {
                    "value": "self._event_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_160": {
                "msg": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_head.check_logits_final_dim(all_event_logits, self.logits_dimension)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_166": {
                "variable": {
                    "value": "all_event_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "all_event_logits_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "info_169": {
                "msg": {
                    "value": "self.logits_dimension",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_170": {
                "msg": {
                    "value": "all_event_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "variable"
                        ],
                        [
                            "tf.concat(all_event_logits_list, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_218": {
                "msg": {
                    "value": "self._all_event_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_224": {
                "msg": {
                    "value": "event_observed_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_256": {
                "variable": {
                    "value": "scalar_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "survival_util.negative_log_likelihood_loss(censored=censored, log_pdf_value=log_pdf_value, log_survival_value=log_survival_value)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "compute_weighted_loss_301": {
                "variable": {
                    "value": "training_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "losses": {
                    "value": "unweighted_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_head.get_weights_and_check_match_logits(features=features, weight_column=self._weight_column, logits=logits)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "self._loss_reduction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Mean_381": {
                "variable": {
                    "value": "eval_metrics[self._loss_mean_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "keys.LOSS_MEAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Mean_382": {
                "variable": {
                    "value": "eval_metrics[self._prediction_mean_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "keys.PREDICTION_MEAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Mean_384": {
                "variable": {
                    "value": "eval_metrics[self._label_mean_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "keys.LABEL_MEAN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_423": {
                "msg": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(probabilities_at_window, tf.logical_not(censored_within_window))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(y_pred, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_425": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(probabilities_at_window, tf.logical_not(censored_within_window))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(y_pred, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "boolean_mask_513": {
                "variable": {
                    "value": "observed_time",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "time_to_event[:, self._event_index] / UNITS_IN_HR",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mask": {
                    "value": "tf.logical_not(censored[:, self._event_index])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "boolean_mask_518": {
                "variable": {
                    "value": "predicted_time",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "predicted_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predicted_time()",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(predicted_time, tf.logical_not(censored[:, self._event_index]))",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.logical_not(censored[:, self._event_index])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_529": {
                "variable": {
                    "value": "regularization_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "regularization_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_591": {
                "msg": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_dtype_64": {
                "type_value": {
                    "value": "examples.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_204": {
                "msg": {
                    "value": "correlated event labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_228": {
                "value": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_237": {
                "control_inputs": {
                    "value": "[tf.assert_positive(time_to_event)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "info_246": {
                "msg": {
                    "value": "model.params()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_254": {
                "msg": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "survival_util.negative_log_likelihood_loss(censored=censored, log_pdf_value=log_pdf_value, log_survival_value=log_survival_value)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_286": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "(logits, labels, regularization_losses, features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "info_288": {
                "msg": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_head.check_logits_final_dim(all_event_logits, self.logits_dimension)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_293": {
                "msg": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_n_306": {
                "variable": {
                    "value": "regularization_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "regularization_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_337": {
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "(processed_logits,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_365": {
                "name": {
                    "value": "hazard_rates",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "(logits,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "info_372": {
                "msg": {
                    "value": "hazard_rates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.params()",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_378": {
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "(regularization_losses,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Mean_386": {
                "variable": {
                    "value": "eval_metrics[self._loss_regularization_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "keys.LOSS_REGULARIZATION",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AUC_389": {
                "variable": {
                    "value": "eval_metrics[self._auc_roc_24]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "AUC_ROC % '24'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AUC_390": {
                "variable": {
                    "value": "eval_metrics[self._auc_roc_48]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "AUC_ROC % '48'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AUC_391": {
                "variable": {
                    "value": "eval_metrics[self._auc_pr]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "curve": {
                    "value": "PR",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "AUC_PR % 'avg'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AUC_393": {
                "variable": {
                    "value": "eval_metrics[self._auc_roc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "AUC_ROC % 'avg'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MeanAbsoluteError_394": {
                "variable": {
                    "value": "eval_metrics[self._mean_abs_error]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "MEAN_ABS_ERROR % 'avg'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_equal_407": {
                "x": {
                    "value": "time_to_event",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(time_to_event_list, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "window_start_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i * UNITS_IN_HR * self._model_hparams.da_sslot * SLOT_TO_WINDOW",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_equal_408": {
                "x": {
                    "value": "time_to_event",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(time_to_event_list, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "window_end_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(i + 1) * UNITS_IN_HR * self._model_hparams.da_sslot * SLOT_TO_WINDOW",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logical_not_410": {
                "x": {
                    "value": "censored",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_not_419": {
                "x": {
                    "value": "censored_within_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(censored, time_to_event_within_window)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_422": {
                "x": {
                    "value": "censored_within_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(censored, time_to_event_within_window)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_593": {
                "name": {
                    "value": "self._name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_211": {
                "variable": {
                    "value": "time_to_event_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "labels[key + '.time_to_event']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Mean_398": {
                "variable": {
                    "value": "eval_metrics[self._probablity_within_window_list[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "PROBABILITY_AT_WINDOW % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_492": {
                "msg": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(event_within_window, tf.logical_not(censored_within_window))",
                            "Call"
                        ]
                    ]
                }
            },
            "info_493": {
                "msg": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(probabilities_at_window, tf.logical_not(censored_within_window))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(y_pred, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_496": {
                "values": {
                    "value": "y_pred_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_498": {
                "values": {
                    "value": "y_pred_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_not_515": {
                "x": {
                    "value": "censored[:, self._event_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "logical_not_519": {
                "x": {
                    "value": "censored[:, self._event_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assert_positive_238": {
                "x": {
                    "value": "time_to_event",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(time_to_event_list, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "state-space-model/survival_util.py": {
        "tensorflow": {
            "ones_like_52": {
                "variable": {
                    "value": "idt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_53": {
                "variable": {
                    "value": "jacobian_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater_equal(y, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "idt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(y)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / self.alpha * idt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_54": {
                "variable": {
                    "value": "log_abs_det_jacobian_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(jacobian_inv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_109": {
                "variable": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assert_rank_at_least_110": {
                "variable": {
                    "value": "assert_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "rank": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data": {
                    "value": "[params_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Exponential model params shape must be [batch_size, 1]",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_188": {
                "variable": {
                    "value": "params_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assert_rank_at_least_189": {
                "variable": {
                    "value": "assert_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "rank": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "data": {
                    "value": "[params_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "Cox model params shape must be [batch_size, num_feature]",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_288": {
                "variable": {
                    "value": "hazard_at_trigger",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_292": {
                "variable": {
                    "value": "self._hazard_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "forecast_hazard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._forecast_hazard(init_state, hazard_at_trigger)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_293": {
                "variable": {
                    "value": "self._hazard_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t": {
                    "value": "self._hazard_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0.99999",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self._model_hparams.da_tlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scan_306": {
                "variable": {
                    "value": "(forecast_hazard, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "self._state_tran_and_hazard_emission_step_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([self._model_hparams.da_tlen])",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "(hazard_at_trigger, init_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "hazard_forecast_scan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_353": {
                "variable": {
                    "value": "time_slot",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.div(t, self._slot_size_hr * UNITS_IN_HR)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_355": {
                "variable": {
                    "value": "capped_time_slot",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater_equal(time_slot, self._time_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.fill(tf.shape(time_slot), self._time_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.add(time_slot, tf.ones_like(time_slot))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_360": {
                "variable": {
                    "value": "last_slot_hr",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater_equal(time_slot, self._time_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "time_slot - self._time_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(time_slot)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_385": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(t)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(t)",
                            "Call"
                        ],
                        [
                            "self._bucketize_t(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "fill_388": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.shape(t)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sequence_mask_390": {
                "variable": {
                    "value": "seq_mask_t_1",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "tf.cast(t - ones, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "self._time_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_396": {
                "variable": {
                    "value": "lambda_tensor_t_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.transpose(lambda_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(seq_mask_t_1, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sequence_mask_400": {
                "variable": {
                    "value": "seq_mask_t",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "tf.cast(t, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "self._time_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_xor_402": {
                "variable": {
                    "value": "mask_at_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq_mask_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(tf.cast(t, tf.int32), maxlen=self._time_len)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(tf.cast(t, tf.int32), maxlen=self._time_len)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "seq_mask_t_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(tf.cast(t - ones, tf.int32), maxlen=self._time_len)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(tf.cast(t - ones, tf.int32), maxlen=self._time_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_405": {
                "variable": {
                    "value": "selected_lambda_tensor_at_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(lambda_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask_at_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_xor(seq_mask_t, seq_mask_t_1)",
                            "Call"
                        ],
                        [
                            "tf.logical_xor(seq_mask_t, seq_mask_t_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_438": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(t)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(t)",
                            "Call"
                        ],
                        [
                            "self._bucketize_t(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "sequence_mask_441": {
                "variable": {
                    "value": "seq_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "tf.cast(t, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "self._time_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_447": {
                "variable": {
                    "value": "active_lambda_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.transpose(lambda_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(seq_mask, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_450": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.log(1 - active_lambda_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sequence_mask_479": {
                "variable": {
                    "value": "seq_mask_t",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "tf.cast(t, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "self._time_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_480": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.shape(t)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sequence_mask_481": {
                "variable": {
                    "value": "seq_mask_t_1",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "tf.cast(t - ones, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "self._time_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_xor_483": {
                "variable": {
                    "value": "mask_at_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq_mask_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(tf.cast(t, tf.int32), maxlen=self._time_len)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(tf.cast(t, tf.int32), maxlen=self._time_len)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "seq_mask_t_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(tf.cast(t - ones, tf.int32), maxlen=self._time_len)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(tf.cast(t - ones, tf.int32), maxlen=self._time_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_490": {
                "variable": {
                    "value": "selected_lambda_tensor_at_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(lambda_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask_at_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_xor(seq_mask_t, seq_mask_t_1)",
                            "Call"
                        ],
                        [
                            "tf.logical_xor(seq_mask_t, seq_mask_t_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_537": {
                "variable": {
                    "value": "survival_time_hr",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.concat(survival_list, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_46": {
                "condition": {
                    "value": "tf.greater_equal(x, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "self.alpha * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_49": {
                "condition": {
                    "value": "tf.greater_equal(y, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 / self.alpha * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_118": {
                "variable": {
                    "value": "self._rate_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "params + INITIAL_LN_RATE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_174": {
                "x": {
                    "value": "tf.reciprocal(self._rate_param)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "UNITS_IN_HR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "60 * 60",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reciprocal_264": {
                "x": {
                    "value": "self._rate_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_300": {
                "msg": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "variable"
                        ]
                    ]
                }
            },
            "info_302": {
                "msg": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([self._model_hparams.da_tlen])",
                            "Call"
                        ]
                    ]
                }
            },
            "info_303": {
                "msg": {
                    "value": "hazard_at_trigger",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "info_345": {
                "msg": {
                    "value": "current_hazard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_emission + previous_hazard",
                            "BinOp"
                        ],
                        [
                            "current_emission",
                            "variable"
                        ]
                    ]
                }
            },
            "info_346": {
                "msg": {
                    "value": "current_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modules._state_tran_module(previous_state, self._model_hparams.ds_state, self._model_hparams.stran_nmlp, self._model_hparams.stran_smlp, self._tag)",
                            "Call"
                        ],
                        [
                            "current_state + modules._control_tran_module(current_interv, self._model_hparams.ds_state, self._model_hparams.ctran_nmlp, self._model_hparams.ctran_smlp, self._tag)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_374": {
                "a": {
                    "value": "self._hazard_tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_495": {
                "tensor": {
                    "value": "selected_lambda_tensor_at_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(tf.transpose(lambda_tensor), mask_at_t)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tf.transpose(lambda_tensor), mask_at_t)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_509": {
                "variable": {
                    "value": "window_survival_start",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.shape(shape_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_511": {
                "variable": {
                    "value": "window_survival_start",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.log_survival_func(window_start_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fill_514": {
                "variable": {
                    "value": "window_survival_end",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "tf.shape(shape_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_516": {
                "variable": {
                    "value": "window_survival_end",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.log_survival_func(window_end_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reciprocal_527": {
                "x": {
                    "value": "self.predicted_time()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_558": {
                "condition": {
                    "value": "censored",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_survival_value",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "log_pdf_value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "greater_equal_46": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_49": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_53": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_54": {
                "x": {
                    "value": "jacobian_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.greater_equal(y, 0), idt, 1.0 / self.alpha * idt)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_116": {
                "control_inputs": {
                    "value": "[assert_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_151": {
                "x": {
                    "value": "self._rate_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_163": {
                "x": {
                    "value": "-self._rate_param * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reciprocal_174": {
                "x": {
                    "value": "self._rate_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_177": {
                "x": {
                    "value": "-self._rate_param * window_end_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_195": {
                "control_inputs": {
                    "value": "[assert_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_200": {
                "variable": {
                    "value": "self._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[logits_shape, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.truncated_normal(0, 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_203": {
                "variable": {
                    "value": "self._bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.truncated_normal(0.01, 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_207": {
                "variable": {
                    "value": "self._rate_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "weighted_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(params, self._weights) + self._bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_241": {
                "x": {
                    "value": "self._rate_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_253": {
                "x": {
                    "value": "-self._rate_param * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_267": {
                "x": {
                    "value": "-self._rate_param * window_end_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_353": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(t)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(t)",
                            "Call"
                        ],
                        [
                            "self._bucketize_t(t)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._slot_size_hr * UNITS_IN_HR",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_equal_356": {
                "x": {
                    "value": "time_slot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.div(t, self._slot_size_hr * UNITS_IN_HR), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._time_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_357": {
                "dims": {
                    "value": "tf.shape(time_slot)",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "self._time_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_358": {
                "x": {
                    "value": "time_slot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.div(t, self._slot_size_hr * UNITS_IN_HR), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones_like(time_slot)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_equal_361": {
                "x": {
                    "value": "time_slot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.div(t, self._slot_size_hr * UNITS_IN_HR), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self._time_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_363": {
                "input": {
                    "value": "time_slot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.div(t, self._slot_size_hr * UNITS_IN_HR), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_388": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(t)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(t)",
                            "Call"
                        ],
                        [
                            "self._bucketize_t(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_391": {
                "x": {
                    "value": "t - ones",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_397": {
                "a": {
                    "value": "lambda_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hazard_tensor",
                            "Attribute"
                        ],
                        [
                            "self._hazard_tensor",
                            "Attribute"
                        ],
                        [
                            "self._hazard_tensor",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_397": {
                "x": {
                    "value": "seq_mask_t_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(tf.cast(t - ones, tf.int32), maxlen=self._time_len)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(tf.cast(t - ones, tf.int32), maxlen=self._time_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_400": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(t)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(t)",
                            "Call"
                        ],
                        [
                            "self._bucketize_t(t)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_406": {
                "a": {
                    "value": "lambda_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hazard_tensor",
                            "Attribute"
                        ],
                        [
                            "self._hazard_tensor",
                            "Attribute"
                        ],
                        [
                            "self._hazard_tensor",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_413": {
                "input_tensor": {
                    "value": "tf.log(1 - lambda_tensor_t_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_414": {
                "x": {
                    "value": "1 - lambda_tensor_t_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_441": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(t)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(t)",
                            "Call"
                        ],
                        [
                            "self._bucketize_t(t)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_448": {
                "a": {
                    "value": "lambda_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hazard_tensor",
                            "Attribute"
                        ],
                        [
                            "self._hazard_tensor",
                            "Attribute"
                        ],
                        [
                            "self._hazard_tensor",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_448": {
                "x": {
                    "value": "seq_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(tf.cast(t, tf.int32), maxlen=self._time_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_451": {
                "x": {
                    "value": "1 - active_lambda_tensor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_473": {
                "x": {
                    "value": "self.log_survival_func(t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_479": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(t)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(t)",
                            "Call"
                        ],
                        [
                            "self._bucketize_t(t)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_480": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(t)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(t)",
                            "Call"
                        ],
                        [
                            "self._bucketize_t(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_482": {
                "x": {
                    "value": "t - ones",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_491": {
                "a": {
                    "value": "lambda_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hazard_tensor",
                            "Attribute"
                        ],
                        [
                            "self._hazard_tensor",
                            "Attribute"
                        ],
                        [
                            "self._hazard_tensor",
                            "Attribute"
                        ]
                    ]
                }
            },
            "concat_538": {
                "values": {
                    "value": "survival_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.exp(self.log_survival_func(self._from_slot_to_time_range(time_slot)[1])) * self._slot_size_hr for time_slot in range(MAX_SLOT)]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "logit_to_parameter",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_357": {
                "input": {
                    "value": "time_slot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.div(t, self._slot_size_hr * UNITS_IN_HR), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_358": {
                "input": {
                    "value": "time_slot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.div(t, self._slot_size_hr * UNITS_IN_HR), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_415": {
                "tensor": {
                    "value": "selected_lambda_tensor_at_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(tf.transpose(lambda_tensor), mask_at_t)",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tf.transpose(lambda_tensor), mask_at_t)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_420": {
                "input_tensor": {
                    "value": "tf.multiply(tf.log(1 - lambda_tensor[self._time_len - 1]), tf.cast(last_slot_hr, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_456": {
                "input_tensor": {
                    "value": "tf.multiply(tf.log(1 - lambda_tensor[self._time_len - 1]), tf.cast(last_slot_hr, tf.float32))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_509": {
                "input": {
                    "value": "shape_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_survival_func(window_end_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_514": {
                "input": {
                    "value": "shape_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_survival_func(window_end_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_533": {
                "x": {
                    "value": "self.log_survival_func(self._from_slot_to_time_range(time_slot)[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_206": {
                "a": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self._weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_421": {
                "x": {
                    "value": "tf.log(1 - lambda_tensor[self._time_len - 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(last_slot_hr, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_457": {
                "x": {
                    "value": "tf.log(1 - lambda_tensor[self._time_len - 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(last_slot_hr, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_202": {
                "shape": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_205": {
                "shape": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_421": {
                "x": {
                    "value": "1 - lambda_tensor[self._time_len - 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_422": {
                "x": {
                    "value": "last_slot_hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.greater_equal(time_slot, self._time_len), time_slot - self._time_len + 1, tf.zeros_like(time_slot))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_457": {
                "x": {
                    "value": "1 - lambda_tensor[self._time_len - 1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_458": {
                "x": {
                    "value": "last_slot_hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.greater_equal(time_slot, self._time_len), time_slot - self._time_len + 1, tf.zeros_like(time_slot))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "state-space-model/train.py": {
        "tensorflow": {
            "run_121": {
                "experiment_fn": {
                    "value": "experiment_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "experiment.get_experiment_fn(experiment_config, warm_start_from=best_model_dir, train_steps=FLAGS.num_train_steps, eval_steps=FLAGS.num_eval_steps, continuous_eval_throttle_secs=FLAGS.continuous_eval_throttle_secs, eval_delay_secs=0)",
                            "Call"
                        ]
                    ]
                },
                "run_config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learn_runner.EstimatorConfig(model_dir=FLAGS.output_dir, save_checkpoints_steps=FLAGS.save_checkpoints_steps, save_summary_steps=FLAGS.save_checkpoints_steps, keep_checkpoint_max=FLAGS.keep_checkpoint_max)",
                            "Call"
                        ]
                    ]
                },
                "hparams": {
                    "value": "hparams",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_hparams().parse(FLAGS.hparams)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}