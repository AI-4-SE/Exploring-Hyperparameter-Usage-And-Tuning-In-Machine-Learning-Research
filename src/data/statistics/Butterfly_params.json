{
    "ButterflyNet_Amazon_data.py": {
        "tensorflow": {
            "get_default_graph_130": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_137": {
                "variable": {
                    "value": "pred_lossF1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model.pred_loss_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_138": {
                "variable": {
                    "value": "pred_lossF2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model.pred_loss_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_142": {
                "variable": {
                    "value": "pred_loss_Ftarget",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model.pred_loss_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_143": {
                "variable": {
                    "value": "pred_loss_Ftarget2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model.pred_loss_t2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_152": {
                "variable": {
                    "value": "regular_train_op1",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_153": {
                "variable": {
                    "value": "regular_train_op2",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_154": {
                "variable": {
                    "value": "target_train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_155": {
                "variable": {
                    "value": "target_train_op2",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_159": {
                "variable": {
                    "value": "correct_label_pred1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(model.classify_labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(model.pred_1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_160": {
                "variable": {
                    "value": "correct_label_pred2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(model.classify_labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(model.pred_2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_161": {
                "variable": {
                    "value": "correct_label_pred_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(model.classify_labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(model.pred_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_162": {
                "variable": {
                    "value": "correct_label_pred_t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(model.classify_labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(model.pred_t2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_164": {
                "variable": {
                    "value": "label_acc_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_label_pred_t, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_165": {
                "variable": {
                    "value": "label_acc_t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_label_pred_t2, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_166": {
                "variable": {
                    "value": "label_acc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_label_pred1, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_167": {
                "variable": {
                    "value": "label_acc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_label_pred2, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_177": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 5000]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, N_CLASS]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.KK",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_40": {
                "variable": {
                    "value": "self.classify_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "source_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.slice(self.y, [0, 0], [int(batch_size / 2), -1])",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "all_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : self.y",
                            "Lambda"
                        ]
                    ]
                }
            },
            "cast_41": {
                "variable": {
                    "value": "X_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "weight_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "temp_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_fc0",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "temp_w2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_fc0_2",
                            "Name"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_125": {
                "variable": {
                    "value": "weight_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weight_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.weight_diff",
                            "Attribute"
                        ],
                        [
                            "tf.matmul(temp_w, temp_w2, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.abs(weight_diff)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weight_diff, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_126": {
                "variable": {
                    "value": "weight_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weight_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.weight_diff",
                            "Attribute"
                        ],
                        [
                            "tf.matmul(temp_w, temp_w2, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.abs(weight_diff)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weight_diff, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_127": {
                "variable": {
                    "value": "self.weight_diff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weight_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.weight_diff",
                            "Attribute"
                        ],
                        [
                            "tf.matmul(temp_w, temp_w2, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.abs(weight_diff)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weight_diff, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_45": {
                "variable": {
                    "value": "h_fc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm_fc(tf.matmul(X_input, W_fc0) + b_fc0, 50)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_46": {
                "variable": {
                    "value": "h_fc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm_fc(tf.matmul(X_input, W_fc0) + b_fc0, 50))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_54": {
                "variable": {
                    "value": "classify_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "source_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.slice(logits, [0, 0], [int(batch_size / 2), -1])",
                            "Lambda"
                        ],
                        [
                            "lambda : tf.slice(logits_t, [0, 0], [int(batch_size / 2), -1])",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "all_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : logits",
                            "Lambda"
                        ]
                    ]
                }
            },
            "softmax_55": {
                "variable": {
                    "value": "self.pred_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits, all_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_56": {
                "variable": {
                    "value": "self.pred_loss_1_Full",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits, all_logits)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.classify_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_58": {
                "variable": {
                    "value": "(self.pred_loss_1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * self.pred_loss_1_Full",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "self.KK",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "h_fc0_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm_fc(tf.matmul(X_input, W_fc0_2) + b_fc0_2, 50)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_66": {
                "variable": {
                    "value": "h_fc0_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc0_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm_fc(tf.matmul(X_input, W_fc0_2) + b_fc0_2, 50))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0_2, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_74": {
                "variable": {
                    "value": "classify_logits_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "source_logits_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.slice(logits2, [0, 0], [int(batch_size / 2), -1])",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "all_logits_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : logits2",
                            "Lambda"
                        ]
                    ]
                }
            },
            "softmax_76": {
                "variable": {
                    "value": "self.pred_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits_2, all_logits_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_77": {
                "variable": {
                    "value": "self.pred_loss_2_Full",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits_2, all_logits_2)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.classify_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_79": {
                "variable": {
                    "value": "(self.pred_loss_2, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * self.pred_loss_2_Full",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "self.KK",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "h_fc0_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm_fc(tf.matmul(X_input, W_fc0_t) + b_fc0_t, 50)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_87": {
                "variable": {
                    "value": "h_fc0_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc0_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm_fc(tf.matmul(X_input, W_fc0_t) + b_fc0_t, 50))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0_t, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_94": {
                "variable": {
                    "value": "classify_logits_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "source_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.slice(logits, [0, 0], [int(batch_size / 2), -1])",
                            "Lambda"
                        ],
                        [
                            "lambda : tf.slice(logits_t, [0, 0], [int(batch_size / 2), -1])",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "all_logits_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : logits_t",
                            "Lambda"
                        ]
                    ]
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "self.pred_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits, all_logits_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_97": {
                "variable": {
                    "value": "self.pred_loss_t_Full",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits, all_logits_t)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.classify_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_99": {
                "variable": {
                    "value": "(self.pred_loss_t, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * self.pred_loss_t_Full",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "self.KK",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_106": {
                "variable": {
                    "value": "h_fc0_t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm_fc(tf.matmul(X_input, W_fc0_t2) + b_fc0_t2, 50)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_107": {
                "variable": {
                    "value": "h_fc0_t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc0_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm_fc(tf.matmul(X_input, W_fc0_t2) + b_fc0_t2, 50))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0_t2, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_114": {
                "variable": {
                    "value": "classify_logits_t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "source_logits_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.slice(logits_t2, [0, 0], [int(batch_size / 2), -1])",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "all_logits_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : logits_t2",
                            "Lambda"
                        ]
                    ]
                }
            },
            "softmax_116": {
                "variable": {
                    "value": "self.pred_t2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits_t2, all_logits_t2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_117": {
                "variable": {
                    "value": "self.pred_loss_t2_Full",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits_t2, all_logits_t2)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.classify_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_119": {
                "variable": {
                    "value": "(self.pred_loss_t2, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * self.pred_loss_t2_Full",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "self.KK",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_159": {
                "input": {
                    "value": "model.pred_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_160": {
                "input": {
                    "value": "model.pred_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_161": {
                "input": {
                    "value": "model.pred_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_162": {
                "input": {
                    "value": "model.pred_t2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_164": {
                "x": {
                    "value": "correct_label_pred_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(model.classify_labels, 1), tf.argmax(model.pred_t, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_165": {
                "x": {
                    "value": "correct_label_pred_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(model.classify_labels, 1), tf.argmax(model.pred_t2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_166": {
                "x": {
                    "value": "correct_label_pred1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(model.classify_labels, 1), tf.argmax(model.pred_1, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_167": {
                "x": {
                    "value": "correct_label_pred2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(model.classify_labels, 1), tf.argmax(model.pred_2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_189": {
                "graph": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_default_graph()",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "initialize_all_variables_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "slice_39": {
                "input_": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[int(batch_size / 2), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "label_predictor_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "label_predictor_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "label_predictor_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "label_predictor_target2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "a": {
                    "value": "h_fc0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm_fc(tf.matmul(X_input, W_fc0) + b_fc0, 50))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([50, N_CLASS], stddev=0.01, name='W_fc1')",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_53": {
                "input_": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc0, W_fc1) + b_fc1",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[int(batch_size / 2), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "a": {
                    "value": "h_fc0_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm_fc(tf.matmul(X_input, W_fc0_2) + b_fc0_2, 50))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0_2, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([50, N_CLASS], stddev=0.01, name='W_fc1_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_73": {
                "input_": {
                    "value": "logits2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc0_2, W_fc1_2) + b_fc1_2",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[int(batch_size / 2), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_90": {
                "a": {
                    "value": "h_fc0_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm_fc(tf.matmul(X_input, W_fc0_t) + b_fc0_t, 50))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0_t, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([50, N_CLASS], stddev=0.01, name='W_fc1_t')",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_93": {
                "input_": {
                    "value": "logits_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc0_t, W_fc1_t) + b_fc1_t",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[int(batch_size / 2), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "a": {
                    "value": "h_fc0_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm_fc(tf.matmul(X_input, W_fc0_t2) + b_fc0_t2, 50))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0_t2, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([50, N_CLASS], stddev=0.01, name='W_fc1_t2')",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_113": {
                "input_": {
                    "value": "logits_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc0_t2, W_fc1_t2) + b_fc1_t2",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[int(batch_size / 2), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_189": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=0.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_45": {
                "a": {
                    "value": "X_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.X, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([5000, 50], stddev=0.01, name='W_fc0')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_65": {
                "a": {
                    "value": "X_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.X, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc0_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([5000, 50], stddev=0.01, name='W_fc0_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_86": {
                "a": {
                    "value": "X_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.X, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc0_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([5000, 50], stddev=0.01, name='W_fc0_t')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_106": {
                "a": {
                    "value": "X_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.X, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc0_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([5000, 50], stddev=0.01, name='W_fc0_t2')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ButterflyNet_Obj_data.py": {
        "tensorflow": {
            "get_default_graph_149": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_152": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_156": {
                "variable": {
                    "value": "pred_lossF1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model.pred_loss_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_157": {
                "variable": {
                    "value": "pred_lossF2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model.pred_loss_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_161": {
                "variable": {
                    "value": "pred_loss_Ftarget",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model.pred_loss_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_162": {
                "variable": {
                    "value": "pred_loss_Ftarget2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model.pred_loss_t2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_171": {
                "variable": {
                    "value": "regular_train_op1",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_172": {
                "variable": {
                    "value": "regular_train_op2",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_173": {
                "variable": {
                    "value": "target_train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_174": {
                "variable": {
                    "value": "target_train_op2",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_178": {
                "variable": {
                    "value": "correct_label_pred1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(model.classify_labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(model.pred_1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_179": {
                "variable": {
                    "value": "correct_label_pred2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(model.classify_labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(model.pred_2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_180": {
                "variable": {
                    "value": "correct_label_pred_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(model.classify_labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(model.pred_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_181": {
                "variable": {
                    "value": "correct_label_pred_t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(model.classify_labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(model.pred_t2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_183": {
                "variable": {
                    "value": "label_acc_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_label_pred_t, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_184": {
                "variable": {
                    "value": "label_acc_t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_label_pred_t2, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_185": {
                "variable": {
                    "value": "label_acc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_label_pred1, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_186": {
                "variable": {
                    "value": "label_acc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_label_pred2, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_196": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 4096]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, N_CLASS]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "self.KK",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_44": {
                "variable": {
                    "value": "self.classify_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "source_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.slice(self.y, [0, 0], [int(batch_size / 2), -1])",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "all_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : self.y",
                            "Lambda"
                        ]
                    ]
                }
            },
            "cast_45": {
                "variable": {
                    "value": "X_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_143": {
                "variable": {
                    "value": "weight_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "temp_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_fc0",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "temp_w2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_fc0_2",
                            "Name"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_144": {
                "variable": {
                    "value": "weight_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weight_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.weight_diff",
                            "Attribute"
                        ],
                        [
                            "tf.matmul(temp_w, temp_w2, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.abs(weight_diff)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weight_diff, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_145": {
                "variable": {
                    "value": "weight_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weight_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.weight_diff",
                            "Attribute"
                        ],
                        [
                            "tf.matmul(temp_w, temp_w2, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.abs(weight_diff)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weight_diff, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_146": {
                "variable": {
                    "value": "self.weight_diff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weight_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.weight_diff",
                            "Attribute"
                        ],
                        [
                            "tf.matmul(temp_w, temp_w2, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.abs(weight_diff)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weight_diff, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_49": {
                "variable": {
                    "value": "h_fc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm_fc(tf.matmul(X_input, W_fc0) + b_fc0, N_hidden1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_50": {
                "variable": {
                    "value": "h_fc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm_fc(tf.matmul(X_input, W_fc0) + b_fc0, N_hidden1))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_62": {
                "variable": {
                    "value": "classify_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "source_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.slice(logits, [0, 0], [int(batch_size / 2), -1])",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "all_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : logits",
                            "Lambda"
                        ],
                        [
                            "lambda : logits_t",
                            "Lambda"
                        ]
                    ]
                }
            },
            "softmax_63": {
                "variable": {
                    "value": "self.pred_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits, all_logits)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.train, source_logits_t, all_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_64": {
                "variable": {
                    "value": "self.pred_loss_1_Full",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits, all_logits)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.train, source_logits_t, all_logits)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.classify_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_66": {
                "variable": {
                    "value": "(self.pred_loss_1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * self.pred_loss_1_Full",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "self.KK",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "h_fc0_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm_fc(tf.matmul(X_input, W_fc0_2) + b_fc0_2, N_hidden1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_73": {
                "variable": {
                    "value": "h_fc0_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc0_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm_fc(tf.matmul(X_input, W_fc0_2) + b_fc0_2, N_hidden1))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0_2, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_85": {
                "variable": {
                    "value": "classify_logits_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "source_logits_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.slice(logits2, [0, 0], [int(batch_size / 2), -1])",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "all_logits_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : logits2",
                            "Lambda"
                        ]
                    ]
                }
            },
            "softmax_87": {
                "variable": {
                    "value": "self.pred_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits_2, all_logits_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_88": {
                "variable": {
                    "value": "self.pred_loss_2_Full",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits_2, all_logits_2)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.classify_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_90": {
                "variable": {
                    "value": "(self.pred_loss_2, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * self.pred_loss_2_Full",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "self.KK",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_96": {
                "variable": {
                    "value": "h_fc0_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm_fc(tf.matmul(X_input, W_fc0_t) + b_fc0_t, N_hidden1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_97": {
                "variable": {
                    "value": "h_fc0_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc0_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm_fc(tf.matmul(X_input, W_fc0_t) + b_fc0_t, N_hidden1))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0_t, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_108": {
                "variable": {
                    "value": "classify_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "source_logits_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.slice(logits_t, [0, 0], [int(batch_size / 2), -1])",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "all_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : logits",
                            "Lambda"
                        ],
                        [
                            "lambda : logits_t",
                            "Lambda"
                        ]
                    ]
                }
            },
            "softmax_110": {
                "variable": {
                    "value": "self.pred_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits, all_logits)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.train, source_logits_t, all_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_111": {
                "variable": {
                    "value": "self.pred_loss_t_Full",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits, all_logits)",
                            "Call"
                        ],
                        [
                            "tf.cond(self.train, source_logits_t, all_logits)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.classify_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_113": {
                "variable": {
                    "value": "(self.pred_loss_t, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * self.pred_loss_t_Full",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "self.KK",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_120": {
                "variable": {
                    "value": "h_fc0_t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm_fc(tf.matmul(X_input, W_fc0_t2) + b_fc0_t2, N_hidden1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_121": {
                "variable": {
                    "value": "h_fc0_t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc0_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm_fc(tf.matmul(X_input, W_fc0_t2) + b_fc0_t2, N_hidden1))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0_t2, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_133": {
                "variable": {
                    "value": "classify_logits_t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "source_logits_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.slice(logits_t2, [0, 0], [int(batch_size / 2), -1])",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "all_logits_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : logits_t2",
                            "Lambda"
                        ]
                    ]
                }
            },
            "softmax_135": {
                "variable": {
                    "value": "self.pred_t2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits_t2, all_logits_t2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_136": {
                "variable": {
                    "value": "self.pred_loss_t2_Full",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits_t2, all_logits_t2)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.classify_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_138": {
                "variable": {
                    "value": "(self.pred_loss_t2, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * self.pred_loss_t2_Full",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "self.KK",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_178": {
                "input": {
                    "value": "model.pred_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_179": {
                "input": {
                    "value": "model.pred_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_180": {
                "input": {
                    "value": "model.pred_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_181": {
                "input": {
                    "value": "model.pred_t2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_183": {
                "x": {
                    "value": "correct_label_pred_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(model.classify_labels, 1), tf.argmax(model.pred_t, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_184": {
                "x": {
                    "value": "correct_label_pred_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(model.classify_labels, 1), tf.argmax(model.pred_t2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_185": {
                "x": {
                    "value": "correct_label_pred1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(model.classify_labels, 1), tf.argmax(model.pred_1, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_186": {
                "x": {
                    "value": "correct_label_pred2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(model.classify_labels, 1), tf.argmax(model.pred_2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_208": {
                "graph": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_default_graph()",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "initialize_all_variables_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "slice_43": {
                "input_": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[int(batch_size / 2), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "label_predictor_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "label_predictor_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "label_predictor_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_117": {
                "name_or_scope": {
                    "value": "label_predictor_target2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_54": {
                "a": {
                    "value": "h_fc0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm_fc(tf.matmul(X_input, W_fc0) + b_fc0, N_hidden1))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([N_hidden1, N_hidden2], stddev=0.01, name='W_fc1')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_58": {
                "a": {
                    "value": "h_fc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc0, W_fc1) + b_fc1",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([N_hidden2, N_CLASS], stddev=0.01, name='W_fc2')",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_61": {
                "input_": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1, W_fc2) + b_fc2",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[int(batch_size / 2), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "a": {
                    "value": "h_fc0_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm_fc(tf.matmul(X_input, W_fc0_2) + b_fc0_2, N_hidden1))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0_2, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([N_hidden1, N_hidden2], stddev=0.01, name='W_fc1_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_81": {
                "a": {
                    "value": "h_fc1_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc0_2, W_fc1_2) + b_fc1_2",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([N_hidden2, N_CLASS], stddev=0.01, name='W_fc2_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_84": {
                "input_": {
                    "value": "logits2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1_2, W_fc2_2) + b_fc2_2",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[int(batch_size / 2), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_101": {
                "a": {
                    "value": "h_fc0_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm_fc(tf.matmul(X_input, W_fc0_t) + b_fc0_t, N_hidden1))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0_t, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([N_hidden1, N_hidden2], stddev=0.01, name='W_fc1_t')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_105": {
                "a": {
                    "value": "h_fc1_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc0_t, W_fc1_t) + b_fc1_t",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([N_hidden2, N_CLASS], stddev=0.01, name='W_fc2_t')",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_107": {
                "input_": {
                    "value": "logits_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1_t, W_fc2_t) + b_fc2_t",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[int(batch_size / 2), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_125": {
                "a": {
                    "value": "h_fc0_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm_fc(tf.matmul(X_input, W_fc0_t2) + b_fc0_t2, N_hidden1))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0_t2, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([N_hidden1, N_hidden2], stddev=0.01, name='W_fc1_t2')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_129": {
                "a": {
                    "value": "h_fc1_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc0_t2, W_fc1_t2) + b_fc1_t2",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([N_hidden2, N_CLASS], stddev=0.01, name='W_fc1_t2')",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_132": {
                "input_": {
                    "value": "logits_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1_t2, W_fc2_t2) + b_fc2_t2",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[int(batch_size / 2), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_208": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=0.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_49": {
                "a": {
                    "value": "X_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.X, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([4096, N_hidden1], stddev=0.01, name='W_fc0')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_72": {
                "a": {
                    "value": "X_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.X, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc0_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([4096, N_hidden1], stddev=0.01, name='W_fc0_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_96": {
                "a": {
                    "value": "X_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.X, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc0_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([4096, N_hidden1], stddev=0.01, name='W_fc0_t')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_120": {
                "a": {
                    "value": "X_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(self.X, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc0_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([4096, N_hidden1], stddev=0.01, name='W_fc0_t2')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Butterfly_total.py": {
        "tensorflow": {
            "get_default_graph_322": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_325": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_330": {
                "variable": {
                    "value": "pred_lossF1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model.pred_loss_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_331": {
                "variable": {
                    "value": "pred_lossF2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model.pred_loss_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_336": {
                "variable": {
                    "value": "pred_loss_Ftarget",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model.pred_loss_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_337": {
                "variable": {
                    "value": "pred_loss_Ftarget2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model.pred_loss_t2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_346": {
                "variable": {
                    "value": "regular_train_op1",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_347": {
                "variable": {
                    "value": "regular_train_op2",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_348": {
                "variable": {
                    "value": "target_train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_349": {
                "variable": {
                    "value": "target_train_op2",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_353": {
                "variable": {
                    "value": "correct_label_pred1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(model.classify_labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(model.pred_1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_354": {
                "variable": {
                    "value": "correct_label_pred2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(model.classify_labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(model.pred_2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_355": {
                "variable": {
                    "value": "correct_label_pred_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(model.classify_labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(model.pred_t, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_356": {
                "variable": {
                    "value": "correct_label_pred_t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(model.classify_labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(model.pred_t2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_358": {
                "variable": {
                    "value": "label_acc_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_label_pred_t, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_359": {
                "variable": {
                    "value": "label_acc_t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_label_pred_t2, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_360": {
                "variable": {
                    "value": "label_acc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_label_pred1, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_361": {
                "variable": {
                    "value": "label_acc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_label_pred2, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_372": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_198": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_199": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, N_CLASS]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_200": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_201": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_202": {
                "variable": {
                    "value": "self.KK",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_205": {
                "variable": {
                    "value": "self.classify_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "source_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.slice(self.y, [0, 0], [int(batch_size / 2), -1])",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "all_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : self.y",
                            "Lambda"
                        ]
                    ]
                }
            },
            "matmul_316": {
                "variable": {
                    "value": "weight_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "temp_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_fc0",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "temp_w2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_fc0_2",
                            "Name"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_317": {
                "variable": {
                    "value": "weight_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weight_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.weight_diff",
                            "Attribute"
                        ],
                        [
                            "tf.matmul(temp_w, temp_w2, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.abs(weight_diff)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weight_diff, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_318": {
                "variable": {
                    "value": "weight_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weight_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.weight_diff",
                            "Attribute"
                        ],
                        [
                            "tf.matmul(temp_w, temp_w2, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.abs(weight_diff)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weight_diff, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_319": {
                "variable": {
                    "value": "self.weight_diff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weight_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.weight_diff",
                            "Attribute"
                        ],
                        [
                            "tf.matmul(temp_w, temp_w2, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.abs(weight_diff)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weight_diff, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_212": {
                "variable": {
                    "value": "h_conv0",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(X_input, W_conv0) + b_conv0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_217": {
                "variable": {
                    "value": "h_conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_pool0, W_conv1) + b_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_222": {
                "variable": {
                    "value": "h_conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_pool1, W_conv2) + b_conv2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_225": {
                "variable": {
                    "value": "h_fc1_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_conv2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)",
                            "Call"
                        ],
                        [
                            "batch_norm_conv(h_conv2, 128)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_226": {
                "variable": {
                    "value": "h_fc1_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_fc1_drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(h_conv2, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h_fc1_drop, [-1, 8192])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 8192]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_230": {
                "variable": {
                    "value": "h_fc_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_fc1_drop, W_fc_0) + b_fc_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_231": {
                "variable": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc_0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_fc1_drop, W_fc_0) + b_fc_0)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_236": {
                "variable": {
                    "value": "h_fc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm_fc(tf.matmul(self.feature, W_fc0) + b_fc0, 2048)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_237": {
                "variable": {
                    "value": "h_fc0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm_fc(tf.matmul(self.feature, W_fc0) + b_fc0, 2048))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_245": {
                "variable": {
                    "value": "classify_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "source_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.slice(logits, [0, 0], [int(batch_size / 2), -1])",
                            "Lambda"
                        ],
                        [
                            "lambda : tf.slice(logits_t, [0, 0], [int(batch_size / 2), -1])",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "all_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : logits",
                            "Lambda"
                        ]
                    ]
                }
            },
            "softmax_246": {
                "variable": {
                    "value": "self.pred_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits, all_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_247": {
                "variable": {
                    "value": "self.pred_loss_1_Full",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits, all_logits)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.classify_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_249": {
                "variable": {
                    "value": "(self.pred_loss_1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * self.pred_loss_1_Full",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "self.KK",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_255": {
                "variable": {
                    "value": "h_fc0_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_norm_fc(tf.matmul(self.feature, W_fc0_2) + b_fc0_2, 2048)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_256": {
                "variable": {
                    "value": "h_fc0_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc0_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm_fc(tf.matmul(self.feature, W_fc0_2) + b_fc0_2, 2048))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0_2, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_264": {
                "variable": {
                    "value": "classify_logits_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "source_logits_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.slice(logits2, [0, 0], [int(batch_size / 2), -1])",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "all_logits_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : logits2",
                            "Lambda"
                        ]
                    ]
                }
            },
            "softmax_266": {
                "variable": {
                    "value": "self.pred_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits_2, all_logits_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_267": {
                "variable": {
                    "value": "self.pred_loss_2_Full",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits_2, all_logits_2)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.classify_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_269": {
                "variable": {
                    "value": "(self.pred_loss_2, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * self.pred_loss_2_Full",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "self.KK",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_275": {
                "variable": {
                    "value": "h_fc0_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(self.feature, W_fc0_t) + b_fc0_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_276": {
                "variable": {
                    "value": "h_fc0_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc0_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(self.feature, W_fc0_t) + b_fc0_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0_t, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_283": {
                "variable": {
                    "value": "classify_logits_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "source_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.slice(logits, [0, 0], [int(batch_size / 2), -1])",
                            "Lambda"
                        ],
                        [
                            "lambda : tf.slice(logits_t, [0, 0], [int(batch_size / 2), -1])",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "all_logits_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : logits_t",
                            "Lambda"
                        ]
                    ]
                }
            },
            "softmax_285": {
                "variable": {
                    "value": "self.pred_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits, all_logits_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_286": {
                "variable": {
                    "value": "self.pred_loss_t_Full",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits, all_logits_t)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.classify_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_288": {
                "variable": {
                    "value": "(self.pred_loss_t, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * self.pred_loss_t_Full",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "self.KK",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_296": {
                "variable": {
                    "value": "h_fc0_t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(self.feature, W_fc0_t2) + b_fc0_t2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_297": {
                "variable": {
                    "value": "h_fc0_t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc0_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(self.feature, W_fc0_t2) + b_fc0_t2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0_t2, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_304": {
                "variable": {
                    "value": "classify_logits_t2",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "source_logits_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.slice(logits_t2, [0, 0], [int(batch_size / 2), -1])",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "all_logits_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : logits_t2",
                            "Lambda"
                        ]
                    ]
                }
            },
            "softmax_306": {
                "variable": {
                    "value": "self.pred_t2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits_t2, all_logits_t2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_307": {
                "variable": {
                    "value": "self.pred_loss_t2_Full",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "classify_logits_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cond(self.train, source_logits_t2, all_logits_t2)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.classify_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "top_k_309": {
                "variable": {
                    "value": "(self.pred_loss_t2, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * self.pred_loss_t2_Full",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "self.KK",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_353": {
                "input": {
                    "value": "model.pred_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_354": {
                "input": {
                    "value": "model.pred_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_355": {
                "input": {
                    "value": "model.pred_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_356": {
                "input": {
                    "value": "model.pred_t2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_358": {
                "x": {
                    "value": "correct_label_pred_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(model.classify_labels, 1), tf.argmax(model.pred_t, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_359": {
                "x": {
                    "value": "correct_label_pred_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(model.classify_labels, 1), tf.argmax(model.pred_t2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_360": {
                "x": {
                    "value": "correct_label_pred1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(model.classify_labels, 1), tf.argmax(model.pred_1, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_361": {
                "x": {
                    "value": "correct_label_pred2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(model.classify_labels, 1), tf.argmax(model.pred_2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_373": {
                "graph": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_default_graph()",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "initialize_all_variables_374": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_374": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "slice_204": {
                "input_": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[int(batch_size / 2), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_209": {
                "name_or_scope": {
                    "value": "feature_extractor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "label_predictor_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_252": {
                "name_or_scope": {
                    "value": "label_predictor_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_272": {
                "name_or_scope": {
                    "value": "label_predictor_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_293": {
                "name_or_scope": {
                    "value": "label_predictor_target2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_207": {
                "x": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_241": {
                "a": {
                    "value": "h_fc0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm_fc(tf.matmul(self.feature, W_fc0) + b_fc0, 2048))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([2048, N_CLASS], stddev=0.01, name='W_fc1')",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_244": {
                "input_": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc0, W_fc1) + b_fc1",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[int(batch_size / 2), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_260": {
                "a": {
                    "value": "h_fc0_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_norm_fc(tf.matmul(self.feature, W_fc0_2) + b_fc0_2, 2048))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0_2, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([2048, 10], stddev=0.01, name='W_fc1_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_263": {
                "input_": {
                    "value": "logits2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc0_2, W_fc1_2) + b_fc1_2",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[int(batch_size / 2), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_279": {
                "a": {
                    "value": "h_fc0_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(self.feature, W_fc0_t) + b_fc0_t)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0_t, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([2048, 10], stddev=0.01, name='W_fc1_t')",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_282": {
                "input_": {
                    "value": "logits_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc0_t, W_fc1_t) + b_fc1_t",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[int(batch_size / 2), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_300": {
                "a": {
                    "value": "h_fc0_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(self.feature, W_fc0_t2) + b_fc0_t2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h_fc0_t2, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([2048, 10], stddev=0.01, name='W_fc1_t2')",
                            "Call"
                        ]
                    ]
                }
            },
            "slice_303": {
                "input_": {
                    "value": "logits_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc0_t2, W_fc1_t2) + b_fc1_t2",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[int(batch_size / 2), -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_373": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=0.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_230": {
                "a": {
                    "value": "h_fc1_drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(h_conv2, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h_fc1_drop, [-1, 8192])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc_0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([8192, 3072], stddev=0.01, name='W_fc0')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_275": {
                "a": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "W_fc0_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([3072, 2048], stddev=0.01, name='W_fc0_t')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_296": {
                "a": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "W_fc0_t2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([3072, 2048], stddev=0.01, name='W_fc0_t2')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_236": {
                "a": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "W_fc0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([3072, 2048], stddev=0.01, name='W_fc0')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_255": {
                "a": {
                    "value": "self.feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "W_fc0_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([3072, 2048], stddev=0.01, name='W_fc0_2')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "truncated_normal_181": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_189": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "moments_197": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_198": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([out_channels])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_norm_with_global_normalization_200": {
                "variable": {
                    "value": "batch_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([out_channels]), name='beta')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.zeros([out_channels]), name='beta')",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([out_channels])",
                            "Call"
                        ],
                        [
                            "weight_variable([out_channels])",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "scale_after_normalization": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "moments_206": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_207": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([out_channels])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_norm_with_global_normalization_209": {
                "variable": {
                    "value": "batch_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([out_channels]), name='beta')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.zeros([out_channels]), name='beta')",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([out_channels])",
                            "Call"
                        ],
                        [
                            "weight_variable([out_channels])",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "scale_after_normalization": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_215": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_pool_219": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_224": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_183": {
                "initial_value": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant(init, shape=shape)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_185": {
                "initial_value": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant(init, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_191": {
                "initial_value": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant(init, shape=shape)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_193": {
                "initial_value": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=stddev)",
                            "Call"
                        ],
                        [
                            "tf.constant(init, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_198": {
                "shape": {
                    "value": "[out_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_207": {
                "shape": {
                    "value": "[out_channels]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}