{
    "benchmarks/xgraph/deep_lift.py": {
        "sklearn": {
            "roc_auc_score_102": {
                "y_true": {
                    "value": "motif_edge_mask.float().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "edge_mask.float().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_140": {
                "y_true": {
                    "value": "motif_edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_163": {
                "y_true": {
                    "value": "perturb_motif_edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "config.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_48": {
                "condition": {
                    "value": "node_indices_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dataset.data.y != 0) * dataset.data.test_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_54": {
                "f": {
                    "value": "os.path.join(config.models.gnn_saving_dir, config.datasets.dataset_name, f'{config.models.gnn_name}_{len(config.models.param.gnn_latent_dim)}l_best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_81": {
                "variable": {
                    "value": "edge_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_116": {
                "variable": {
                    "value": "edge_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{node_idx}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_97": {
                "obj": {
                    "value": "edge_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt'))",
                            "Call"
                        ],
                        [
                            "[edge_mask.to(device) for edge_mask in edge_masks]",
                            "ListComp"
                        ],
                        [
                            "[edge_mask.to('cpu') for edge_mask in edge_masks]",
                            "ListComp"
                        ],
                        [
                            "torch.load(os.path.join(explanation_saving_dir, f'example_{node_idx}.pt'))",
                            "Call"
                        ],
                        [
                            "[edge_mask.to(device) for edge_mask in edge_masks]",
                            "ListComp"
                        ],
                        [
                            "[edge_mask.to('cpu') for edge_mask in edge_masks]",
                            "ListComp"
                        ],
                        [
                            "[edge_mask[deep_lift.hard_edge_mask] for edge_mask in edge_masks]",
                            "ListComp"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "perturb_motif_edge_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[motif_edge_mask, torch.zeros(perturb_data.edge_index.shape[1] - motif_edge_mask.shape[0])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_170": {
                "variable": {
                    "value": "related_preds[target_label][stability]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "all_roc_aucs[target_label]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_170": {
                "variable": {
                    "value": "related_preds[target_label][stability]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_159": {
                "*size": {
                    "value": "perturb_data.edge_index.shape[1] - motif_edge_mask.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/xgraph/gnn_explainer.py": {
        "sklearn": {
            "roc_auc_score_114": {
                "y_true": {
                    "value": "motif_edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "edge_mask.detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_151": {
                "y_true": {
                    "value": "motif_edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "edge_mask.detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_174": {
                "y_true": {
                    "value": "perturb_motif_edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "config.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_33": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_49": {
                "condition": {
                    "value": "node_indices_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dataset.data.y != 0) * dataset.data.test_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_55": {
                "f": {
                    "value": "os.path.join(config.models.gnn_saving_dir, config.datasets.dataset_name, f'{config.models.gnn_name}_{len(config.models.param.gnn_latent_dim)}l_best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_95": {
                "variable": {
                    "value": "edge_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_144": {
                "obj": {
                    "value": "edge_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt'))",
                            "Call"
                        ],
                        [
                            "[edge_mask.to(device) for edge_mask in edge_masks]",
                            "ListComp"
                        ],
                        [
                            "[edge_mask.to('cpu') for edge_mask in edge_masks]",
                            "ListComp"
                        ],
                        [
                            "[edge_mask.to('cpu') for edge_mask in edge_masks]",
                            "ListComp"
                        ],
                        [
                            "[edge_mask[gnn_explainer.hard_edge_mask] for edge_mask in edge_masks]",
                            "ListComp"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{node_idx}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_110": {
                "obj": {
                    "value": "edge_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt'))",
                            "Call"
                        ],
                        [
                            "[edge_mask.to(device) for edge_mask in edge_masks]",
                            "ListComp"
                        ],
                        [
                            "[edge_mask.to('cpu') for edge_mask in edge_masks]",
                            "ListComp"
                        ],
                        [
                            "[edge_mask.to('cpu') for edge_mask in edge_masks]",
                            "ListComp"
                        ],
                        [
                            "[edge_mask[gnn_explainer.hard_edge_mask] for edge_mask in edge_masks]",
                            "ListComp"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "perturb_motif_edge_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[motif_edge_mask, torch.zeros(perturb_data.edge_index.shape[1] - motif_edge_mask.shape[0])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "variable": {
                    "value": "related_preds[target_label][stability]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "all_roc_aucs[target_label]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_181": {
                "variable": {
                    "value": "related_preds[target_label][stability]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_171": {
                "*size": {
                    "value": "perturb_data.edge_index.shape[1] - motif_edge_mask.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/xgraph/gnn_gi.py": {
        "sklearn": {
            "roc_auc_score_130": {
                "y_true": {
                    "value": "motif_edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_153": {
                "y_true": {
                    "value": "perturb_motif_edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "config.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_33": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_49": {
                "condition": {
                    "value": "node_indices_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dataset.data.y != 0) * dataset.data.test_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_55": {
                "f": {
                    "value": "os.path.join(config.models.gnn_saving_dir, config.datasets.dataset_name, f'{config.models.gnn_name}_{len(config.models.param.gnn_latent_dim)}l_best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_82": {
                "variable": {
                    "value": "walks",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_107": {
                "variable": {
                    "value": "walks",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{node_idx}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_96": {
                "obj": {
                    "value": "walks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt'))",
                            "Call"
                        ],
                        [
                            "{k: v.to(device) for (k, v) in walks.items()}",
                            "DictComp"
                        ],
                        [
                            "{k: v.to('cpu') for (k, v) in walks.items()}",
                            "DictComp"
                        ],
                        [
                            "torch.load(os.path.join(explanation_saving_dir, f'example_{node_idx}.pt'))",
                            "Call"
                        ],
                        [
                            "{k: v.to(device) for (k, v) in walks.items()}",
                            "DictComp"
                        ],
                        [
                            "{k: v.to('cpu') for (k, v) in walks.items()}",
                            "DictComp"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_123": {
                "obj": {
                    "value": "walks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt'))",
                            "Call"
                        ],
                        [
                            "{k: v.to(device) for (k, v) in walks.items()}",
                            "DictComp"
                        ],
                        [
                            "{k: v.to('cpu') for (k, v) in walks.items()}",
                            "DictComp"
                        ],
                        [
                            "torch.load(os.path.join(explanation_saving_dir, f'example_{node_idx}.pt'))",
                            "Call"
                        ],
                        [
                            "{k: v.to(device) for (k, v) in walks.items()}",
                            "DictComp"
                        ],
                        [
                            "{k: v.to('cpu') for (k, v) in walks.items()}",
                            "DictComp"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{node_idx}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "perturb_motif_edge_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[motif_edge_mask, torch.zeros(perturb_data.edge_index.shape[1] - motif_edge_mask.shape[0])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "variable": {
                    "value": "related_preds[target_label][stability]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "all_roc_aucs[target_label]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_160": {
                "variable": {
                    "value": "related_preds[target_label][stability]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_150": {
                "*size": {
                    "value": "perturb_data.edge_index.shape[1] - motif_edge_mask.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/xgraph/gnn_lrp.py": {
        "sklearn": {
            "roc_auc_score_101": {
                "y_true": {
                    "value": "motif_edge_mask.float().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "edge_mask.float().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_138": {
                "y_true": {
                    "value": "motif_edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_162": {
                "y_true": {
                    "value": "perturb_motif_edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "config.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_48": {
                "condition": {
                    "value": "node_indices_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dataset.data.y != 0) * dataset.data.test_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_54": {
                "f": {
                    "value": "os.path.join(config.models.gnn_saving_dir, config.datasets.dataset_name, f'{config.models.gnn_name}_{len(config.models.param.gnn_latent_dim)}l_best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_80": {
                "variable": {
                    "value": "walks",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_96": {
                "obj": {
                    "value": "walks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt'))",
                            "Call"
                        ],
                        [
                            "{k: v.to(device) for (k, v) in walks.items()}",
                            "DictComp"
                        ],
                        [
                            "{k: v.to('cpu') for (k, v) in walks.items()}",
                            "DictComp"
                        ],
                        [
                            "torch.load(os.path.join(explanation_saving_dir, f'example_{node_idx}.pt'))",
                            "Call"
                        ],
                        [
                            "{k: v.to(device) for (k, v) in walks.items()}",
                            "DictComp"
                        ],
                        [
                            "{k: v.to('cpu') for (k, v) in walks.items()}",
                            "DictComp"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_115": {
                "variable": {
                    "value": "walks",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{node_idx}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_131": {
                "obj": {
                    "value": "walks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt'))",
                            "Call"
                        ],
                        [
                            "{k: v.to(device) for (k, v) in walks.items()}",
                            "DictComp"
                        ],
                        [
                            "{k: v.to('cpu') for (k, v) in walks.items()}",
                            "DictComp"
                        ],
                        [
                            "torch.load(os.path.join(explanation_saving_dir, f'example_{node_idx}.pt'))",
                            "Call"
                        ],
                        [
                            "{k: v.to(device) for (k, v) in walks.items()}",
                            "DictComp"
                        ],
                        [
                            "{k: v.to('cpu') for (k, v) in walks.items()}",
                            "DictComp"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{node_idx}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "perturb_motif_edge_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[motif_edge_mask, torch.zeros(perturb_data.edge_index.shape[1] - motif_edge_mask.shape[0])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "variable": {
                    "value": "related_preds[target_label][stability]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "all_roc_aucs[target_label]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_169": {
                "variable": {
                    "value": "related_preds[target_label][stability]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_158": {
                "*size": {
                    "value": "perturb_data.edge_index.shape[1] - motif_edge_mask.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/xgraph/grad_cam.py": {
        "sklearn": {
            "roc_auc_score_101": {
                "y_true": {
                    "value": "motif_edge_mask.float().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "edge_mask.float().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_138": {
                "y_true": {
                    "value": "motif_edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_162": {
                "y_true": {
                    "value": "perturb_motif_edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "config.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_33": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_48": {
                "condition": {
                    "value": "node_indices_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dataset.data.y != 0) * dataset.data.test_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_54": {
                "f": {
                    "value": "os.path.join(config.models.gnn_saving_dir, config.datasets.dataset_name, f'{config.models.gnn_name}_{len(config.models.param.gnn_latent_dim)}l_best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_81": {
                "variable": {
                    "value": "edge_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_115": {
                "variable": {
                    "value": "edge_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{node_idx}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_96": {
                "obj": {
                    "value": "edge_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt'))",
                            "Call"
                        ],
                        [
                            "[edge_mask.to(device) for edge_mask in edge_masks]",
                            "ListComp"
                        ],
                        [
                            "[edge_mask.to('cpu') for edge_mask in edge_masks]",
                            "ListComp"
                        ],
                        [
                            "torch.load(os.path.join(explanation_saving_dir, f'example_{node_idx}.pt'))",
                            "Call"
                        ],
                        [
                            "[edge_mask.to(device) for edge_mask in edge_masks]",
                            "ListComp"
                        ],
                        [
                            "[edge_mask.to('cpu') for edge_mask in edge_masks]",
                            "ListComp"
                        ],
                        [
                            "[edge_mask[gc_explainer.hard_edge_mask] for edge_mask in edge_masks]",
                            "ListComp"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_131": {
                "obj": {
                    "value": "edge_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt'))",
                            "Call"
                        ],
                        [
                            "[edge_mask.to(device) for edge_mask in edge_masks]",
                            "ListComp"
                        ],
                        [
                            "[edge_mask.to('cpu') for edge_mask in edge_masks]",
                            "ListComp"
                        ],
                        [
                            "torch.load(os.path.join(explanation_saving_dir, f'example_{node_idx}.pt'))",
                            "Call"
                        ],
                        [
                            "[edge_mask.to(device) for edge_mask in edge_masks]",
                            "ListComp"
                        ],
                        [
                            "[edge_mask.to('cpu') for edge_mask in edge_masks]",
                            "ListComp"
                        ],
                        [
                            "[edge_mask[gc_explainer.hard_edge_mask] for edge_mask in edge_masks]",
                            "ListComp"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{node_idx}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "perturb_motif_edge_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[motif_edge_mask, torch.zeros(perturb_data.edge_index.shape[1] - motif_edge_mask.shape[0])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_169": {
                "variable": {
                    "value": "related_preds[target_label][stability]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "all_roc_aucs[target_label]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_169": {
                "variable": {
                    "value": "related_preds[target_label][stability]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_157": {
                "*size": {
                    "value": "perturb_data.edge_index.shape[1] - motif_edge_mask.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/xgraph/pgexplainer_edges.py": {
        "sklearn": {
            "roc_auc_score_224": {
                "y_true": {
                    "value": "motif_edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "edge_mask.detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_253": {
                "y_true": {
                    "value": "motif_edge_mask.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "edge_mask.detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_279": {
                "y_true": {
                    "value": "perturb_motif_edge_mask[pgexplainer_edges.select_edge_mask].cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "perturb_edge_masks[0].cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_124": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "config.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_126": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_191": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pgexplainer_saving_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(config.explainers.explainer_saving_dir, config.datasets.dataset_name, config.explainers.explainer_saving_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_200": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pgexplainer_saving_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(config.explainers.explainer_saving_dir, config.datasets.dataset_name, config.explainers.explainer_saving_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_69": {
                "variable": {
                    "value": "select_edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "edge_index.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_150": {
                "f": {
                    "value": "os.path.join(config.models.gnn_saving_dir, config.datasets.dataset_name, f'{config.models.gnn_name}_{len(config.models.param.gnn_latent_dim)}l_best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_199": {
                "obj": {
                    "value": "pgexplainer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "pgexplainer_saving_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(config.explainers.explainer_saving_dir, config.datasets.dataset_name, config.explainers.explainer_saving_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_83": {
                "condition": {
                    "value": "subset == node_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_236": {
                "condition": {
                    "value": "dataset[0].test_mask * dataset[0].y != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "perturb_motif_edge_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[motif_edge_mask, torch.zeros(perturb_data.edge_index.shape[1] - motif_edge_mask.shape[0])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_284": {
                "data": {
                    "value": "all_roc_aucs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_275": {
                "*size": {
                    "value": "perturb_data.edge_index.shape[1] - motif_edge_mask.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/xgraph/subgraphx.py": {
        "sklearn": {
            "accuracy_score_114": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.edge_index[0].cpu().apply_(lambda x: x in explanation.coalition).bool() & data.edge_index[1].cpu().apply_(lambda x: x in explanation.coalition).bool()",
                            "BinOp"
                        ],
                        [
                            "edge_mask.float().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "motif_edge_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.gen_motif_edge_mask(data).float().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_115": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.edge_index[0].cpu().apply_(lambda x: x in explanation.coalition).bool() & data.edge_index[1].cpu().apply_(lambda x: x in explanation.coalition).bool()",
                            "BinOp"
                        ],
                        [
                            "edge_mask.float().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "motif_edge_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.gen_motif_edge_mask(data).float().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_32": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "config.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_52": {
                "f": {
                    "value": "os.path.join(config.models.gnn_saving_dir, config.datasets.dataset_name, f'{config.models.gnn_name}_{len(config.models.param.gnn_latent_dim)}l_best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_91": {
                "variable": {
                    "value": "saved_MCTSInfo_list",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_100": {
                "obj": {
                    "value": "explain_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "subgraphx.read_from_MCTSInfo_list(explain_result)",
                            "Call"
                        ],
                        [
                            "subgraphx.read_from_MCTSInfo_list(explain_result)",
                            "Call"
                        ],
                        [
                            "[explain_result]",
                            "List"
                        ],
                        [
                            "[explain_result]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{test_indices[i]}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_166": {
                "variable": {
                    "value": "saved_MCTSInfo_list",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{node_idx}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_177": {
                "obj": {
                    "value": "explain_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "subgraphx.read_from_MCTSInfo_list(explain_result)",
                            "Call"
                        ],
                        [
                            "subgraphx.read_from_MCTSInfo_list(explain_result)",
                            "Call"
                        ],
                        [
                            "[explain_result]",
                            "List"
                        ],
                        [
                            "[explain_result]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(explanation_saving_dir, f'example_{node_idx}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_144": {
                "condition": {
                    "value": "dataset[0].test_mask * dataset[0].y != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "dig/sslgraph/evaluation/eval_graph.py": {
        "sklearn": {
            "StratifiedKFold_535": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_folds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12345",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "accuracy_score_196": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_lbls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(test_lbls).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "classifier.predict(test_embs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "StratifiedKFold_547": {
                "variable": {
                    "value": "label_skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "int(1.0 / label_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12345",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GridSearchCV_191": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "SVC()",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': enc.parameters()} for enc in encoder]",
                            "ListComp"
                        ],
                        [
                            "encoder.parameters()",
                            "Call"
                        ],
                        [
                            "{'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "scoring": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SVC_193": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StratifiedKFold_135": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "self.n_folds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "fold_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "12345",
                            "Method Argument"
                        ],
                        [
                            "12345",
                            "Method Argument"
                        ],
                        [
                            "12345",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SVC_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ft_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_203": {
                "variable": {
                    "value": "train_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(train_embs).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_204": {
                "variable": {
                    "value": "train_lbls",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_lbls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(train_lbls).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_205": {
                "variable": {
                    "value": "test_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(test_embs).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_206": {
                "variable": {
                    "value": "test_lbls",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_lbls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(test_lbls).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_208": {
                "variable": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_211": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "log.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "argmax_226": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log(train_embs)",
                            "Call"
                        ],
                        [
                            "log(test_embs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_70": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_279": {
                "variable": {
                    "value": "self.pred_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_286": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pred_head(zg)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_336": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_538": {
                "*size": {
                    "value": "len(dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_549": {
                "variable": {
                    "value": "train_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_561": {
                "variable": {
                    "value": "train_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_72": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % device",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_141": {
                "variable": {
                    "value": "kfold_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "test_scores.view(self.n_folds, self.f_epoch)",
                            "Call"
                        ],
                        [
                            "test_scores[torch.arange(self.n_folds, dtype=torch.long), selection]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_227": {
                "input": {
                    "value": "preds == test_lbls",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_421": {
                "data": {
                    "value": "test_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "test_scores.view(self.n_folds, self.f_epoch)",
                            "Call"
                        ],
                        [
                            "test_scores[torch.arange(self.n_folds, dtype=torch.long), selection]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_539": {
                "ndarray": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(test_scores_m)",
                            "Call"
                        ],
                        [
                            "np.argmax(acc_m_lst)",
                            "Call"
                        ],
                        [
                            "np.argmax(acc_m_lst)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_434": {
                "start": {
                    "value": "self.n_folds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_495": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_510": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_553": {
                "*size": {
                    "value": "idx_train.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_336": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dig/sslgraph/evaluation/eval_node.py": {
        "sklearn": {
            "LabelEncoder_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Linear_12": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ft_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_13": {
                "variable": {
                    "value": "self.sigm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_25": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(seq)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_249": {
                "variable": {
                    "value": "train_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(train_embs).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_250": {
                "variable": {
                    "value": "train_lbls",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_lbls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(train_lbls).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_251": {
                "variable": {
                    "value": "test_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(test_embs).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_252": {
                "variable": {
                    "value": "test_lbls",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_lbls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(test_lbls).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_254": {
                "variable": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_257": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "log.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.logreg_wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_273": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log(train_embs)",
                            "Call"
                        ],
                        [
                            "log(test_embs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_78": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_80": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % device",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "test_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(test_scores)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(test_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_186": {
                "variable": {
                    "value": "test_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "test_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(test_scores)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(test_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_274": {
                "input": {
                    "value": "preds == test_lbls",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dig/sslgraph/method/contrastive/views_fn/structure.py": {
        "sklearn": {
            "MinMaxScaler_193": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_31": {
                "variable": {
                    "value": "idx_add",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "idx_add",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "new_edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx_remain, idx_add)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_40": {
                "variable": {
                    "value": "new_edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_edge_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((idx_remain, idx_add), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.unique(new_edge_index, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_92": {
                "variable": {
                    "value": "orig_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "orig_adj > 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(orig_adj)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "orig_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ],
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_93": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(orig_adj, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_173": {
                "variable": {
                    "value": "orig_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "orig_adj > 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(orig_adj)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "orig_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ],
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_174": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(orig_adj, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_37": {
                "variable": {
                    "value": "idx_add",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "node_num",
                    "type": "variable",
                    "possible_values": []
                },
                "high": {
                    "value": "(2, perturb_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "sl",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[n, n] for n in range(node_num)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "data.x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_86": {
                "variable": {
                    "value": "sl",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data.edge_index, sl)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_96": {
                "variable": {
                    "value": "dinv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "input": {
                    "value": "dinv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(torch.sqrt(d))",
                            "Call"
                        ],
                        [
                            "torch.inverse(torch.sqrt(d))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "orig_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ],
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_167": {
                "variable": {
                    "value": "sl",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[n, n] for n in range(node_num)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "data.x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_167": {
                "variable": {
                    "value": "sl",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data.edge_index, sl)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_177": {
                "variable": {
                    "value": "dinv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_178": {
                "input": {
                    "value": "dinv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(torch.sqrt(d))",
                            "Call"
                        ],
                        [
                            "torch.inverse(torch.sqrt(d))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "orig_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ],
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_195": {
                "variable": {
                    "value": "diff_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "scaler.transform(diff_adj)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "data.x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_92": {
                "input": {
                    "value": "orig_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ],
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_93": {
                "input": {
                    "value": "orig_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ],
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_101": {
                "variable": {
                    "value": "diff_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.t * (torch.matmul(orig_adj, torch.inverse(d)) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_173": {
                "input": {
                    "value": "orig_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ],
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_174": {
                "input": {
                    "value": "orig_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ],
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_182": {
                "variable": {
                    "value": "diff_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.t * (torch.matmul(orig_adj, torch.inverse(d)) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_96": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(torch.sum(orig_adj, 1))",
                            "Call"
                        ],
                        [
                            "torch.diag(torch.sum(orig_adj, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_98": {
                "input": {
                    "value": "torch.eye(orig_adj.shape[0]) - (1 - self.alpha) * at",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_177": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(torch.sum(orig_adj, 1))",
                            "Call"
                        ],
                        [
                            "torch.diag(torch.sum(orig_adj, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_179": {
                "input": {
                    "value": "torch.eye(orig_adj.shape[0]) - (1 - self.alpha) * at",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_189": {
                "input": {
                    "value": "orig_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ],
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmin_190": {
                "input": {
                    "value": "[abs(avg_degree - torch.sum(diff_adj >= e) / diff_adj.shape[0]) for e in epsilons]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "randperm_201": {
                "n": {
                    "value": "node_num",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_98": {
                "n": {
                    "value": "orig_adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_179": {
                "n": {
                    "value": "orig_adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_101": {
                "input": {
                    "value": "orig_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ],
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.inverse(d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_182": {
                "input": {
                    "value": "orig_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ],
                        [
                            "to_dense_adj(edge_index)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(orig_adj > 1, torch.ones_like(orig_adj), orig_adj)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.inverse(d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_101": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(torch.sum(orig_adj, 1))",
                            "Call"
                        ],
                        [
                            "torch.diag(torch.sum(orig_adj, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_182": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(torch.sum(orig_adj, 1))",
                            "Call"
                        ],
                        [
                            "torch.diag(torch.sum(orig_adj, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_190": {
                "input": {
                    "value": "diff_adj >= e",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "dig/threedgraph/dataset/PygMD17.py": {
        "sklearn": {
            "shuffle_106": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "range(data_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_63": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "R_i",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "R[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "z_i",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['z']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "E_i",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "E[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "F_i",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "F[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_103": {
                "obj": {
                    "value": "(data, slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "data": {
                    "value": "ids[train_size + valid_size:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "dig/threedgraph/dataset/PygQM93D.py": {
        "sklearn": {
            "shuffle_114": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "range(data_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_66": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "R_i",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "R_qm9[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "z_i",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Z_qm9[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_111": {
                "obj": {
                    "value": "(data, slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "data": {
                    "value": "ids[train_size + valid_size:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "target[name][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/xgraph/RandomSelection.py": {
        "torch": {
            "rand_22": {
                "variable": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self_loop_edge_index.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_48": {
                "variable": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self_loop_edge_index.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/xgraph/dataset.py": {
        "torch": {
            "Subset_40": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(split_indices == 0)[0].numpy().tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_41": {
                "variable": {
                    "value": "eval",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "dev_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(split_indices == 1)[0].numpy().tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_42": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "test_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(split_indices == 2)[0].numpy().tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_36": {
                "condition": {
                    "value": "split_indices == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_37": {
                "condition": {
                    "value": "split_indices == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_38": {
                "condition": {
                    "value": "split_indices == 2",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/xgraph/gnnNets.py": {
        "torch": {
            "cat_40": {
                "tensors": {
                    "value": "[x.max(dim=1)[0], x.sum(dim=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_137": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lin.weight.data.T.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_201": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.propagate(edge_index, x=x, edge_weight=edge_weight, size=None)",
                            "Call"
                        ],
                        [
                            "torch.matmul(out, self.weight)",
                            "Call"
                        ],
                        [
                            "out + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.message_and_aggregate(edge_index, **msg_aggr_kwargs)",
                            "Call"
                        ],
                        [
                            "self.message(**msg_kwargs)",
                            "Call"
                        ],
                        [
                            "self.aggregate(out, **aggr_kwargs)",
                            "Call"
                        ],
                        [
                            "out * edge_mask.view([-1] + [1] * (out.dim() - 1))",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_298": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_307": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_329": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1, num_node, node_dim)",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "kwargs.get('x')",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "self.convs[i](x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.gnn_nonlinear(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.gnn_dropout)",
                            "Call"
                        ],
                        [
                            "self.readout_layer(emb, batch)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](x)",
                            "Call"
                        ],
                        [
                            "self.fc_nonlinear(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.fc_dropout)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.gnn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_347": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1, num_node, node_dim)",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "kwargs.get('x')",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "self.convs[i](x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.gnn_nonlinear(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.gnn_dropout)",
                            "Call"
                        ],
                        [
                            "self.readout_layer(emb, batch)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](x)",
                            "Call"
                        ],
                        [
                            "self.fc_nonlinear(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.fc_dropout)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.fc_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_327": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(-1, num_node, node_dim)",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "kwargs.get('x')",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "self.convs[i](x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.gnn_nonlinear(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.gnn_dropout)",
                            "Call"
                        ],
                        [
                            "self.readout_layer(emb, batch)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](x)",
                            "Call"
                        ],
                        [
                            "self.fc_nonlinear(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.fc_dropout)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_333": {
                "tensors": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_309": {
                "in_features": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_latent_dim[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_313": {
                "in_features": {
                    "value": "self.fc_latent_dim[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_315": {
                "in_features": {
                    "value": "self.emb_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_mask, loop]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_312": {
                "in_features": {
                    "value": "self.fc_latent_dim[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_latent_dim[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_173": {
                "variable": {
                    "value": "edge_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(edge_index.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/xgraph/random_explain.py": {
        "torch": {
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_22": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "config.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_40": {
                "condition": {
                    "value": "node_indices_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dataset.data.y != 0) * dataset.data.test_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_46": {
                "f": {
                    "value": "os.path.join(config.models.gnn_saving_dir, config.datasets.dataset_name, f'{config.models.gnn_name}_{len(config.models.param.gnn_latent_dim)}l_best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/xgraph/train_gnns.py": {
        "torch": {
            "is_available_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_200": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "config.device_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_202": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_43": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(data=data)",
                            "Call"
                        ],
                        [
                            "self.model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_grad_value__54": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "eval_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_83": {
                "variable": {
                    "value": "eval_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "eval_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_84": {
                "variable": {
                    "value": "eval_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_104": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.argmax(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat(preds, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "test_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "accs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_106": {
                "variable": {
                    "value": "test_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_121": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_123": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiStepLR_126": {
                "variable": {
                    "value": "lr_schedule",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_params['milestones']",
                            "Subscript"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_params['gamma']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_180": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'net': self.model.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, latest_pth_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_67": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "labels.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_92": {
                "f": {
                    "value": "os.path.join(self.save_dir, f'{self.save_name}_best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_145": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_187": {
                "f": {
                    "value": "os.path.join(self.save_dir, f'{self.save_name}_best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "benchmarks/xgraph/utils.py": {
        "torch": {
            "arange_37": {
                "variable": {
                    "value": "mappings[subset]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "subset.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "row.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "subgraph_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[subgraph_x, torch.ones(2, subgraph_x.shape[1]).to(subgraph_x.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "subgraph_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[subgraph_y, torch.zeros(num_add_node).type(torch.long).to(subgraph_y.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_23": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randint_53": {
                "variable": {
                    "value": "to_node",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "num_node_subgraph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "subgraph_x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(num_add_node,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_54": {
                "variable": {
                    "value": "frm_node",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_node_subgraph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "subgraph_x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "end": {
                    "value": "num_node_subgraph + num_add_node",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "add_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.stack([to_node, frm_node], dim=0), torch.stack([frm_node, to_node], dim=0), torch.stack([frm_node, frm_node], dim=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "perturb_subgraph_edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[subgraph_edge_index, add_edges.to(subgraph_edge_index.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_46": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "subgraph_x.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "num_add_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "stack_55": {
                "tensors": {
                    "value": "[to_node, frm_node]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_56": {
                "tensors": {
                    "value": "[frm_node, to_node]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_57": {
                "tensors": {
                    "value": "[frm_node, frm_node]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/dataset/PygDataset.py": {
        "torch": {
            "load_92": {
                "variable": {
                    "value": "(self.data, self.slices, self.all_smiles)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_153": {
                "obj": {
                    "value": "(self.data, self.slices, self.all_smiles)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Tensor_203": {
                "variable": {
                    "value": "data[bfs_perm_origin]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_173": {
                "obj": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_234": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "atom_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((self.num_max_node, len(self.atom_list)), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((len(self.atom_list), self.num_max_node), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_249": {
                "variable": {
                    "value": "data.adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "adj_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([4, self.num_max_node, self.num_max_node], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "adj_array + np.eye(self.num_max_node)",
                            "BinOp"
                        ],
                        [
                            "np.zeros([4, self.num_max_node, self.num_max_node], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_308": {
                "variable": {
                    "value": "data.adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "adj_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([4, self.num_max_node, self.num_max_node], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "adj_array + np.eye(self.num_max_node)",
                            "BinOp"
                        ],
                        [
                            "np.zeros([4, self.num_max_node, self.num_max_node], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_352": {
                "data": {
                    "value": "valid_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ],
                        [
                            "json.load(f)['valid_idxs']",
                            "Subscript"
                        ],
                        [
                            "list(map(int, valid_idx))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_252": {
                "variable": {
                    "value": "data.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[float(prop_list[i])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_292": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.concatenate((atom_array, virtual_node), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_294": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "atom_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((self.num_max_node, len(self.atom_list)), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((len(self.atom_list), self.num_max_node), dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_311": {
                "variable": {
                    "value": "data.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[float(prop_list[i])]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/method/GraphAF/graphaf.py": {
        "torch": {
            "load_36": {
                "variable": {
                    "value": "load_key",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_146": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_229": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__160": {
                "parameters": {
                    "value": "filter(lambda p: p.requires_grad, self.model.flow_core.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_grad_norm__253": {
                "parameters": {
                    "value": "filter(lambda p: p.requires_grad, self.model.flow_core.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_32": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_86": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'rand_gen_ckpt_{}.pth'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_167": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'prop_opt_net_{}.pth'.format(cur_iter))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_260": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'const_prop_opt_net_{}.pth'.format(cur_iter))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/method/GraphAF/model/graphaf.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "self.mask_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mask_node.view(1, self.repeat_num, graph_size, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.mask_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mask_edge.view(1, self.repeat_num, 1, graph_size, graph_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.index_select_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "index_select_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_39": {
                "variable": {
                    "value": "self.node_st_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[st_net_fn(nout, self.num_node_type, hid_dim=nhid, bias=True) for _ in range(num_flow_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_40": {
                "variable": {
                    "value": "self.edge_st_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[st_net_fn(nout * 3, self.num_edge_type, hid_dim=nhid, bias=True) for _ in range(num_flow_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_240": {
                "variable": {
                    "value": "graph_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "node_emb.view(batch_size, self.repeat_num, self.graph_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_263": {
                "variable": {
                    "value": "graph_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "node_emb.view(batch_size, self.repeat_num, self.graph_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "graph_node_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.gather(node_emb, dim=1, index=index), graph_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_284": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.mask_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "x.unsqueeze(1).repeat(1, self.repeat_num, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros([1], device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_287": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.mask_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "adj.unsqueeze(1).repeat(1, self.repeat_num, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros([1], device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_297": {
                "variable": {
                    "value": "graph_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "node_emb.view(batch_size, self.repeat_num, self.graph_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_313": {
                "variable": {
                    "value": "graph_node_emb_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.gather(all_node_emb_edge, dim=2, index=index), graph_emb_edge)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_33": {
                "variable": {
                    "value": "self.batchNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "isnan_71": {
                "input": {
                    "value": "x_deq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_deq.view(-1, self.num_node_type)",
                            "Call"
                        ],
                        [
                            "x_deq.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "x_deq * node_s + node_t",
                            "BinOp"
                        ],
                        [
                            "(x_deq + node_t) * node_s",
                            "BinOp"
                        ],
                        [
                            "(x_deq + node_t) * node_s",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_91": {
                "input": {
                    "value": "adj_deq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj_deq.view(-1, self.num_edge_type)",
                            "Call"
                        ],
                        [
                            "adj_deq.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "adj_deq * edge_s + edge_t",
                            "BinOp"
                        ],
                        [
                            "(adj_deq + edge_t) * edge_s",
                            "BinOp"
                        ],
                        [
                            "(adj_deq + edge_t) * edge_s",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_131": {
                "input": {
                    "value": "x_cont",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_cont * node_s + node_t",
                            "BinOp"
                        ],
                        [
                            "(x_cont + node_t) * node_s",
                            "BinOp"
                        ],
                        [
                            "(x_cont + node_t) * node_s",
                            "BinOp"
                        ],
                        [
                            "x_cont * edge_s + edge_t",
                            "BinOp"
                        ],
                        [
                            "(x_cont + edge_t) * edge_s",
                            "BinOp"
                        ],
                        [
                            "(x_cont + edge_t) * edge_s",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_171": {
                "input": {
                    "value": "x_cont",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_cont * node_s + node_t",
                            "BinOp"
                        ],
                        [
                            "(x_cont + node_t) * node_s",
                            "BinOp"
                        ],
                        [
                            "(x_cont + node_t) * node_s",
                            "BinOp"
                        ],
                        [
                            "x_cont * edge_s + edge_t",
                            "BinOp"
                        ],
                        [
                            "(x_cont + edge_t) * edge_s",
                            "BinOp"
                        ],
                        [
                            "(x_cont + edge_t) * edge_s",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_266": {
                "input": {
                    "value": "node_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "node_emb.view(batch_size, self.repeat_num, self.graph_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index.view(batch_size, -1, 1).repeat(1, 1, self.emb_size)",
                            "Call"
                        ],
                        [
                            "self.index_select_edge.view(1, -1, 2, 1).repeat(batch_size, 1, 1, self.emb_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_313": {
                "input": {
                    "value": "all_node_emb_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_emb[:, self.graph_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index.view(batch_size, -1, 1).repeat(1, 1, self.emb_size)",
                            "Call"
                        ],
                        [
                            "self.index_select_edge.view(1, -1, 2, 1).repeat(batch_size, 1, 1, self.emb_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_284": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_287": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_75": {
                "input": {
                    "value": "node_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_s.exp()",
                            "Call"
                        ],
                        [
                            "node_s.exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_77": {
                "input": {
                    "value": "node_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_s.exp()",
                            "Call"
                        ],
                        [
                            "node_s.exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_95": {
                "input": {
                    "value": "edge_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_s.exp()",
                            "Call"
                        ],
                        [
                            "edge_s.exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_97": {
                "input": {
                    "value": "edge_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_s.exp()",
                            "Call"
                        ],
                        [
                            "edge_s.exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_136": {
                "input": {
                    "value": "node_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_s.exp()",
                            "Call"
                        ],
                        [
                            "node_s.exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_138": {
                "input": {
                    "value": "node_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_s.exp()",
                            "Call"
                        ],
                        [
                            "node_s.exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_176": {
                "input": {
                    "value": "edge_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_s.exp()",
                            "Call"
                        ],
                        [
                            "edge_s.exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_178": {
                "input": {
                    "value": "edge_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_s.exp()",
                            "Call"
                        ],
                        [
                            "edge_s.exp()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dig/ggraph/method/GraphAF/model/graphflow.py": {
        "torch": {
            "zeros_31": {
                "variable": {
                    "value": "prior_ln_var",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_209": {
                "variable": {
                    "value": "node_masks1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_210": {
                "variable": {
                    "value": "adj_masks1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_node_unroll, max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_211": {
                "variable": {
                    "value": "node_masks2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_mask_edge, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_212": {
                "variable": {
                    "value": "adj_masks2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_mask_edge, max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_213": {
                "variable": {
                    "value": "link_prediction_index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_mask_edge, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_214": {
                "variable": {
                    "value": "flow_core_edge_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "node_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(node_masks1, node_masks2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_275": {
                "variable": {
                    "value": "adj_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj_masks1, adj_masks2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_277": {
                "variable": {
                    "value": "node_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "node_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((node_masks1, node_masks2), dim=0)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(node_masks, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_278": {
                "variable": {
                    "value": "adj_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((adj_masks1, adj_masks2), dim=0)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(adj_masks, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_279": {
                "variable": {
                    "value": "link_prediction_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "link_prediction_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([num_mask_edge, 2]).long()",
                            "Call"
                        ],
                        [
                            "nn.Parameter(link_prediction_index, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_280": {
                "variable": {
                    "value": "flow_core_edge_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flow_core_edge_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([max_node_unroll, max_node_unroll]).bool()",
                            "Call"
                        ],
                        [
                            "nn.Parameter(flow_core_edge_masks, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_303": {
                "variable": {
                    "value": "node_base_log_probs_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.node_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_304": {
                "variable": {
                    "value": "ll_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_deq * node_base_log_probs_sm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_softmax_305": {
                "variable": {
                    "value": "edge_base_log_probs_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.edge_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_306": {
                "variable": {
                    "value": "ll_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj_deq * edge_base_log_probs_sm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_35": {
                "variable": {
                    "value": "self.flow_core",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.flow_core",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.constant_pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "constant_pi.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.prior_ln_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "prior_ln_var.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.constant_pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "constant_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([3.1415926535])",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.prior_ln_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "prior_ln_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([1])",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_58": {
                "*size": {
                    "value": "inp_node_features_cont.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "inp_adj_features_cont.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_59": {
                "*size": {
                    "value": "inp_adj_features_cont.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "inp_adj_features_cont.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_77": {
                "variable": {
                    "value": "prior_node_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.node_dim]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature * torch.ones([self.node_dim]).cuda()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_79": {
                "variable": {
                    "value": "prior_edge_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.bond_dim]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature * torch.ones([self.bond_dim]).cuda()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "cur_node_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, max_atoms, self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "cur_adj_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.bond_dim, max_atoms, max_atoms]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Normal_84": {
                "variable": {
                    "value": "prior_node_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.node_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature * torch.ones([self.node_dim])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_86": {
                "variable": {
                    "value": "prior_edge_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.bond_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature * torch.ones([self.bond_dim])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "variable": {
                    "value": "cur_node_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, max_atoms, self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "cur_adj_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.bond_dim, max_atoms, max_atoms]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_121": {
                "variable": {
                    "value": "feature_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_node_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_298": {
                "input": {
                    "value": "ll_node + ll_edge",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_307": {
                "input": {
                    "value": "ll_node + ll_edge",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "*size": {
                    "value": "[self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "*size": {
                    "value": "[self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "*size": {
                    "value": "[self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "*size": {
                    "value": "[self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_289": {
                "input": {
                    "value": "2 * self.constant_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_289": {
                "input": {
                    "value": "-self.prior_ln_var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_292": {
                "input": {
                    "value": "2 * self.constant_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_292": {
                "input": {
                    "value": "-self.prior_ln_var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_78": {
                "*size": {
                    "value": "[self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_80": {
                "*size": {
                    "value": "[self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_85": {
                "*size": {
                    "value": "[self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_87": {
                "*size": {
                    "value": "[self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_146": {
                "variable": {
                    "value": "edge_discrete_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long()).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_145": {}
        }
    },
    "dig/ggraph/method/GraphAF/model/graphflow_con_rl.py": {
        "torch": {
            "zeros_29": {
                "variable": {
                    "value": "prior_ln_var",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_475": {
                "variable": {
                    "value": "reward_baseline",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_size_rl + 5, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1234": {
                "variable": {
                    "value": "node_inputs_node_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['node_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1235": {
                "variable": {
                    "value": "node_inputs_adj_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['adj_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1236": {
                "variable": {
                    "value": "node_inputs_node_features_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['node_features_cont']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1237": {
                "variable": {
                    "value": "node_inputs_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['rewards']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1238": {
                "variable": {
                    "value": "node_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['baseline_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_1239": {
                "variable": {
                    "value": "node_inputs_baseline",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward_baseline_per_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward_baseline[:, 1] / reward_baseline[:, 0]",
                            "BinOp"
                        ],
                        [
                            "reward_baseline_per_step * (1.0 - self.conf_rl['moving_coeff']) + in_baseline * self.conf_rl['moving_coeff']",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "node_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(node_inputs['baseline_index'], dim=0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1242": {
                "variable": {
                    "value": "adj_inputs_node_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['node_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1243": {
                "variable": {
                    "value": "adj_inputs_adj_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['adj_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1244": {
                "variable": {
                    "value": "adj_inputs_edge_features_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['edge_features_cont']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1245": {
                "variable": {
                    "value": "adj_inputs_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1246": {
                "variable": {
                    "value": "adj_inputs_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['rewards']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1247": {
                "variable": {
                    "value": "adj_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['baseline_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_1248": {
                "variable": {
                    "value": "adj_inputs_baseline",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward_baseline_per_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward_baseline[:, 1] / reward_baseline[:, 0]",
                            "BinOp"
                        ],
                        [
                            "reward_baseline_per_step * (1.0 - self.conf_rl['moving_coeff']) + in_baseline * self.conf_rl['moving_coeff']",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "adj_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(adj_inputs['baseline_index'], dim=0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_1298": {
                "variable": {
                    "value": "ratio_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(ll_node - ll_node_old.detach()).clamp(max=10.0, min=-10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_1299": {
                "variable": {
                    "value": "ratio_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(ll_edge - ll_edge_old.detach()).clamp(max=10.0, min=-10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1345": {
                "variable": {
                    "value": "node_masks1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1346": {
                "variable": {
                    "value": "adj_masks1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_node_unroll, max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1347": {
                "variable": {
                    "value": "node_masks2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_mask_edge, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1348": {
                "variable": {
                    "value": "adj_masks2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_mask_edge, max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1349": {
                "variable": {
                    "value": "link_prediction_index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_mask_edge, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1350": {
                "variable": {
                    "value": "flow_core_edge_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1412": {
                "variable": {
                    "value": "node_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(node_masks1, node_masks2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1413": {
                "variable": {
                    "value": "adj_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj_masks1, adj_masks2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_1415": {
                "variable": {
                    "value": "node_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "node_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((node_masks1, node_masks2), dim=0)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(node_masks, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_1416": {
                "variable": {
                    "value": "adj_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((adj_masks1, adj_masks2), dim=0)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(adj_masks, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_1417": {
                "variable": {
                    "value": "link_prediction_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "link_prediction_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([num_mask_edge, 2]).long()",
                            "Call"
                        ],
                        [
                            "nn.Parameter(link_prediction_index, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_1418": {
                "variable": {
                    "value": "flow_core_edge_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flow_core_edge_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([max_node_unroll, max_node_unroll]).byte()",
                            "Call"
                        ],
                        [
                            "nn.Parameter(flow_core_edge_masks, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_1425": {
                "variable": {
                    "value": "node_base_log_probs_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.node_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_1426": {
                "variable": {
                    "value": "ll_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_deq * node_base_log_probs_sm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_softmax_1427": {
                "variable": {
                    "value": "edge_base_log_probs_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.edge_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_1428": {
                "variable": {
                    "value": "ll_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj_deq * edge_base_log_probs_sm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_35": {
                "variable": {
                    "value": "self.flow_core",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.flow_core",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_36": {
                "variable": {
                    "value": "self.flow_core_old",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.flow_core_old",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.constant_pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "constant_pi.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.prior_ln_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "prior_ln_var.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.constant_pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "constant_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([3.1415926535])",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.prior_ln_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "prior_ln_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([1])",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Normal_48": {
                "variable": {
                    "value": "prior_node_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.node_dim]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature * torch.ones([self.node_dim]).cuda()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_50": {
                "variable": {
                    "value": "prior_edge_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.bond_dim]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature * torch.ones([self.bond_dim]).cuda()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_53": {
                "variable": {
                    "value": "prior_node_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.node_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature * torch.ones([self.node_dim])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_55": {
                "variable": {
                    "value": "prior_edge_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.bond_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature * torch.ones([self.bond_dim])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_448": {
                "variable": {
                    "value": "prior_node_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.node_dim]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature * torch.ones([self.node_dim]).cuda()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_450": {
                "variable": {
                    "value": "prior_edge_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.bond_dim]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature * torch.ones([self.bond_dim]).cuda()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_453": {
                "variable": {
                    "value": "prior_node_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.node_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature * torch.ones([self.node_dim])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_455": {
                "variable": {
                    "value": "prior_edge_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.bond_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature * torch.ones([self.bond_dim])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isinf_1301": {
                "input": {
                    "value": "ratio_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp((ll_node - ll_node_old.detach()).clamp(max=10.0, min=-10.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "any_1301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_1304": {
                "input": {
                    "value": "ratio_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp((ll_edge - ll_edge_old.detach()).clamp(max=10.0, min=-10.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "any_1304": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_1319": {
                "input": {
                    "value": "surr1_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio_node * advantage_node",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_1319": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_1321": {
                "input": {
                    "value": "surr2_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(ratio_node, 1 - 0.2, 1 + 0.2) * advantage_node",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_1321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_1323": {
                "input": {
                    "value": "surr1_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio_edge * advantage_edge",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_1323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_1325": {
                "input": {
                    "value": "surr2_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(ratio_edge, 1 - 0.2, 1 + 0.2) * advantage_edge",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_1325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_95": {
                "variable": {
                    "value": "node_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "org_node_features[0, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_176": {
                "variable": {
                    "value": "feature_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_node_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "prior_node_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_489": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_1250": {
                "*size": {
                    "value": "node_inputs_node_features_cont.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "'cuda:%d' % node_inputs_node_features_cont.get_device()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_1251": {
                "*size": {
                    "value": "adj_inputs_edge_features_cont.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "'cuda:%d' % adj_inputs_edge_features_cont.get_device()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_1273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_1314": {
                "input": {
                    "value": "ratio_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp((ll_node - ll_node_old.detach()).clamp(max=10.0, min=-10.0))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - 0.2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + 0.2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_1317": {
                "input": {
                    "value": "ratio_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp((ll_edge - ll_edge_old.detach()).clamp(max=10.0, min=-10.0))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - 0.2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + 0.2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "*size": {
                    "value": "[self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "[self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "*size": {
                    "value": "[self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "[self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_109": {
                "variable": {
                    "value": "edge_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "org_adj_features[0, :, i, j + start]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_448": {
                "*size": {
                    "value": "[self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_450": {
                "*size": {
                    "value": "[self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_453": {
                "*size": {
                    "value": "[self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_455": {
                "*size": {
                    "value": "[self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_540": {
                "variable": {
                    "value": "node_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "org_node_features[0, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_617": {
                "variable": {
                    "value": "feature_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_node_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "prior_node_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_619": {
                "variable": {
                    "value": "node_feature_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1190": {
                "variable": {
                    "value": "traj_node_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj_node_inputs['baseline_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1191": {
                "variable": {
                    "value": "traj_node_inputs_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj_node_inputs['rewards']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1208": {
                "variable": {
                    "value": "traj_adj_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj_adj_inputs['baseline_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1209": {
                "variable": {
                    "value": "traj_adj_inputs_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj_adj_inputs['rewards']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1429": {
                "input": {
                    "value": "ll_node + ll_edge",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_49": {
                "*size": {
                    "value": "[self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_51": {
                "*size": {
                    "value": "[self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_54": {
                "*size": {
                    "value": "[self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_56": {
                "*size": {
                    "value": "[self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_449": {
                "*size": {
                    "value": "[self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_451": {
                "*size": {
                    "value": "[self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_454": {
                "*size": {
                    "value": "[self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_456": {
                "*size": {
                    "value": "[self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_554": {
                "variable": {
                    "value": "edge_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "org_adj_features[0, :, i, j + start]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_1283": {
                "input": {
                    "value": "2 * self.constant_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_1283": {
                "input": {
                    "value": "-self.prior_ln_var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_1285": {
                "input": {
                    "value": "2 * self.constant_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_1285": {
                "input": {
                    "value": "-self.prior_ln_var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_1291": {
                "input": {
                    "value": "2 * self.constant_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_1291": {
                "input": {
                    "value": "-self.prior_ln_var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_1293": {
                "input": {
                    "value": "2 * self.constant_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_1293": {
                "input": {
                    "value": "-self.prior_ln_var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_203": {
                "variable": {
                    "value": "edge_discrete_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_626": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1.0",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "full_627": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1.0",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "zeros_661": {
                "variable": {
                    "value": "edge_feature_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1186": {
                "tensors": {
                    "value": "traj_node_inputs['node_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1187": {
                "tensors": {
                    "value": "traj_node_inputs['adj_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1188": {
                "tensors": {
                    "value": "traj_node_inputs['node_features_cont']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_1193": {
                "input": {
                    "value": "reward_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conf_rl['reward_decay']",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "step_cnt - 1.0 - traj_node_inputs_rewards[traj_node_inputs_rewards > 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_1202": {
                "tensors": {
                    "value": "traj_adj_inputs['node_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1203": {
                "tensors": {
                    "value": "traj_adj_inputs['adj_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1204": {
                "tensors": {
                    "value": "traj_adj_inputs['edge_features_cont']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1205": {
                "tensors": {
                    "value": "traj_adj_inputs['index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_1211": {
                "input": {
                    "value": "reward_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conf_rl['reward_decay']",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "step_cnt - 1.0 - traj_adj_inputs_rewards[traj_adj_inputs_rewards > 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_305": {
                "variable": {
                    "value": "neighbor_edge_type",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_adj_list[:, neighbor_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_655": {
                "variable": {
                    "value": "edge_discrete_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_1012": {
                "variable": {
                    "value": "neighbor_edge_type",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_adj_list[:, neighbor_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_1328": {
                "input": {
                    "value": "surr1_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio_edge * advantage_edge",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_1328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_779": {
                "variable": {
                    "value": "neighbor_edge_type",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_adj_list[:, neighbor_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "full_700": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1.0",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "full_701": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1.0",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "zeros_1082": {
                "variable": {
                    "value": "node_feature_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1098": {
                "variable": {
                    "value": "edge_feature_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_704": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_705": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1.0",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "zeros_847": {
                "variable": {
                    "value": "node_feature_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_863": {
                "variable": {
                    "value": "edge_feature_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_1087": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1.0",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "full_1088": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1.0",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "full_1104": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1.0",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "full_1105": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1.0",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "float"
                        ]
                    ]
                }
            },
            "full_852": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step_cnt",
                            "variable"
                        ]
                    ]
                }
            },
            "full_853": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step_cnt",
                            "variable"
                        ]
                    ]
                }
            },
            "full_869": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step_cnt",
                            "variable"
                        ]
                    ]
                }
            },
            "full_870": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step_cnt",
                            "variable"
                        ]
                    ]
                }
            },
            "Tensor_654": {}
        }
    },
    "dig/ggraph/method/GraphAF/model/graphflow_rl.py": {
        "torch": {
            "zeros_37": {
                "variable": {
                    "value": "prior_ln_var",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_223": {
                "variable": {
                    "value": "reward_baseline",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_size_rl + 5, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_524": {
                "variable": {
                    "value": "node_inputs_node_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['node_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_525": {
                "variable": {
                    "value": "node_inputs_adj_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['adj_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_526": {
                "variable": {
                    "value": "node_inputs_node_features_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['node_features_cont']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_527": {
                "variable": {
                    "value": "node_inputs_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['rewards']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_528": {
                "variable": {
                    "value": "node_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['baseline_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_529": {
                "variable": {
                    "value": "node_inputs_baseline",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward_baseline_per_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward_baseline[:, 1] / reward_baseline[:, 0]",
                            "BinOp"
                        ],
                        [
                            "reward_baseline_per_step * (1.0 - self.conf_rl['moving_coeff']) + in_baseline * self.conf_rl['moving_coeff']",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "node_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(node_inputs['baseline_index'], dim=0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_531": {
                "variable": {
                    "value": "adj_inputs_node_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['node_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_532": {
                "variable": {
                    "value": "adj_inputs_adj_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['adj_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_533": {
                "variable": {
                    "value": "adj_inputs_edge_features_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['edge_features_cont']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_534": {
                "variable": {
                    "value": "adj_inputs_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_535": {
                "variable": {
                    "value": "adj_inputs_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['rewards']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_536": {
                "variable": {
                    "value": "adj_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['baseline_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_537": {
                "variable": {
                    "value": "adj_inputs_baseline",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward_baseline_per_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward_baseline[:, 1] / reward_baseline[:, 0]",
                            "BinOp"
                        ],
                        [
                            "reward_baseline_per_step * (1.0 - self.conf_rl['moving_coeff']) + in_baseline * self.conf_rl['moving_coeff']",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "adj_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(adj_inputs['baseline_index'], dim=0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_538": {
                "variable": {
                    "value": "adj_inputs_edge_cnts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['edge_cnt']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_624": {
                "variable": {
                    "value": "ratio_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(ll_node - ll_node_old.detach()).clamp(max=10.0, min=-10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_625": {
                "variable": {
                    "value": "ratio_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(ll_edge - ll_edge_old.detach()).clamp(max=10.0, min=-10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_672": {
                "variable": {
                    "value": "node_masks1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_673": {
                "variable": {
                    "value": "adj_masks1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_node_unroll, max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_674": {
                "variable": {
                    "value": "node_masks2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_mask_edge, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_675": {
                "variable": {
                    "value": "adj_masks2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_mask_edge, max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_676": {
                "variable": {
                    "value": "link_prediction_index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_mask_edge, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_677": {
                "variable": {
                    "value": "flow_core_edge_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_739": {
                "variable": {
                    "value": "node_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(node_masks1, node_masks2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_740": {
                "variable": {
                    "value": "adj_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj_masks1, adj_masks2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_742": {
                "variable": {
                    "value": "node_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "node_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((node_masks1, node_masks2), dim=0)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(node_masks, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_743": {
                "variable": {
                    "value": "adj_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((adj_masks1, adj_masks2), dim=0)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(adj_masks, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_744": {
                "variable": {
                    "value": "link_prediction_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "link_prediction_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([num_mask_edge, 2]).long()",
                            "Call"
                        ],
                        [
                            "nn.Parameter(link_prediction_index, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_745": {
                "variable": {
                    "value": "flow_core_edge_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flow_core_edge_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([max_node_unroll, max_node_unroll]).byte()",
                            "Call"
                        ],
                        [
                            "nn.Parameter(flow_core_edge_masks, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_768": {
                "variable": {
                    "value": "node_base_log_probs_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.node_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_769": {
                "variable": {
                    "value": "ll_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_deq * node_base_log_probs_sm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_softmax_770": {
                "variable": {
                    "value": "edge_base_log_probs_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.edge_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_771": {
                "variable": {
                    "value": "ll_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj_deq * edge_base_log_probs_sm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_43": {
                "variable": {
                    "value": "self.flow_core",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.flow_core",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_44": {
                "variable": {
                    "value": "self.flow_core_old",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.flow_core_old",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "self.constant_pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "constant_pi.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.prior_ln_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "prior_ln_var.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.constant_pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "constant_pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor([3.1415926535])",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.prior_ln_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "prior_ln_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([1])",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Normal_58": {
                "variable": {
                    "value": "prior_node_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.node_dim]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature * torch.ones([self.node_dim]).cuda()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_60": {
                "variable": {
                    "value": "prior_edge_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.bond_dim]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature * torch.ones([self.bond_dim]).cuda()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "cur_node_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, max_size_rl, self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "cur_adj_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.bond_dim, max_size_rl, max_size_rl]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Normal_65": {
                "variable": {
                    "value": "prior_node_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.node_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature * torch.ones([self.node_dim])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_67": {
                "variable": {
                    "value": "prior_edge_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.bond_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature * torch.ones([self.bond_dim])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "cur_node_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, max_size_rl, self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "cur_adj_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.bond_dim, max_size_rl, max_size_rl]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Normal_197": {
                "variable": {
                    "value": "prior_node_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.node_dim]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature * torch.ones([self.node_dim]).cuda()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_199": {
                "variable": {
                    "value": "prior_edge_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.bond_dim]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature * torch.ones([self.bond_dim]).cuda()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_202": {
                "variable": {
                    "value": "prior_node_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.node_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature * torch.ones([self.node_dim])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_204": {
                "variable": {
                    "value": "prior_edge_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.bond_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature * torch.ones([self.bond_dim])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_569": {
                "variable": {
                    "value": "z_node",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_node1, z_node2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_570": {
                "variable": {
                    "value": "logdet_node",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logdet_node1, logdet_node2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_577": {
                "variable": {
                    "value": "z_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_edge1, z_edge2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_578": {
                "variable": {
                    "value": "logdet_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logdet_edge1, logdet_edge2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isinf_627": {
                "input": {
                    "value": "ratio_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp((ll_node - ll_node_old.detach()).clamp(max=10.0, min=-10.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "any_627": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_630": {
                "input": {
                    "value": "ratio_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp((ll_edge - ll_edge_old.detach()).clamp(max=10.0, min=-10.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "any_630": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_645": {
                "input": {
                    "value": "surr1_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio_node * advantage_node",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_645": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_647": {
                "input": {
                    "value": "surr2_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(ratio_node, 1 - 0.2, 1 + 0.2) * advantage_node",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_647": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_649": {
                "input": {
                    "value": "surr1_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio_edge * advantage_edge",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_649": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_651": {
                "input": {
                    "value": "surr2_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(ratio_edge, 1 - 0.2, 1 + 0.2) * advantage_edge",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_651": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_104": {
                "variable": {
                    "value": "feature_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_node_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "prior_node_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_259": {
                "variable": {
                    "value": "cur_node_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, max_size_rl, self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_260": {
                "variable": {
                    "value": "cur_adj_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.bond_dim, max_size_rl, max_size_rl]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_479": {
                "variable": {
                    "value": "traj_node_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj_node_inputs['baseline_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_480": {
                "variable": {
                    "value": "traj_node_inputs_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj_node_inputs['rewards']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_540": {
                "*size": {
                    "value": "node_inputs_node_features_cont.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "'cuda:%d' % node_inputs_node_features_cont.get_device()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_541": {
                "*size": {
                    "value": "adj_inputs_edge_features_cont.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "'cuda:%d' % adj_inputs_edge_features_cont.get_device()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_581": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_594": {
                "variable": {
                    "value": "z_node_old",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_node_old1, z_node_old2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_595": {
                "variable": {
                    "value": "logdet_node_old",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logdet_node_old1, logdet_node_old2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_602": {
                "variable": {
                    "value": "z_edge_old",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_edge_old1, z_edge_old2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_603": {
                "variable": {
                    "value": "logdet_edge_old",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logdet_edge_old1, logdet_edge_old2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_640": {
                "input": {
                    "value": "ratio_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp((ll_node - ll_node_old.detach()).clamp(max=10.0, min=-10.0))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - 0.2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + 0.2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_643": {
                "input": {
                    "value": "ratio_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp((ll_edge - ll_edge_old.detach()).clamp(max=10.0, min=-10.0))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - 0.2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + 0.2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "*size": {
                    "value": "[self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "*size": {
                    "value": "[self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "*size": {
                    "value": "[self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "*size": {
                    "value": "[self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "*size": {
                    "value": "[self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_199": {
                "*size": {
                    "value": "[self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_202": {
                "*size": {
                    "value": "[self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "*size": {
                    "value": "[self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_291": {
                "variable": {
                    "value": "feature_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_node_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "prior_node_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_293": {
                "variable": {
                    "value": "node_feature_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_497": {
                "variable": {
                    "value": "traj_adj_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj_adj_inputs['baseline_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_498": {
                "variable": {
                    "value": "traj_adj_inputs_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj_adj_inputs['rewards']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_763": {
                "input": {
                    "value": "ll_node + ll_edge",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_772": {
                "input": {
                    "value": "ll_node + ll_edge",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_59": {
                "*size": {
                    "value": "[self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_61": {
                "*size": {
                    "value": "[self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_66": {
                "*size": {
                    "value": "[self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_68": {
                "*size": {
                    "value": "[self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_198": {
                "*size": {
                    "value": "[self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_200": {
                "*size": {
                    "value": "[self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_203": {
                "*size": {
                    "value": "[self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_205": {
                "*size": {
                    "value": "[self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_475": {
                "tensors": {
                    "value": "traj_node_inputs['node_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_476": {
                "tensors": {
                    "value": "traj_node_inputs['adj_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_477": {
                "tensors": {
                    "value": "traj_node_inputs['node_features_cont']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_482": {
                "input": {
                    "value": "reward_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conf_rl['reward_decay']",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "step_cnt - 1.0 - traj_node_inputs_rewards[traj_node_inputs_rewards > 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_609": {
                "input": {
                    "value": "2 * self.constant_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_609": {
                "input": {
                    "value": "-self.prior_ln_var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_611": {
                "input": {
                    "value": "2 * self.constant_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_611": {
                "input": {
                    "value": "-self.prior_ln_var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_616": {
                "input": {
                    "value": "2 * self.constant_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_616": {
                "input": {
                    "value": "-self.prior_ln_var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_618": {
                "input": {
                    "value": "2 * self.constant_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_618": {
                "input": {
                    "value": "-self.prior_ln_var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_754": {
                "input": {
                    "value": "2 * self.constant_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_754": {
                "input": {
                    "value": "-self.prior_ln_var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_757": {
                "input": {
                    "value": "2 * self.constant_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_757": {
                "input": {
                    "value": "-self.prior_ln_var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_129": {
                "variable": {
                    "value": "edge_discrete_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_300": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_301": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_332": {
                "variable": {
                    "value": "edge_feature_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_491": {
                "tensors": {
                    "value": "traj_adj_inputs['node_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_492": {
                "tensors": {
                    "value": "traj_adj_inputs['adj_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_493": {
                "tensors": {
                    "value": "traj_adj_inputs['edge_features_cont']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_494": {
                "tensors": {
                    "value": "traj_adj_inputs['index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_495": {
                "tensors": {
                    "value": "traj_adj_inputs['edge_cnt']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_500": {
                "input": {
                    "value": "reward_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conf_rl['reward_decay']",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "step_cnt - 1.0 - traj_adj_inputs_rewards[traj_adj_inputs_rewards > 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_326": {
                "variable": {
                    "value": "edge_discrete_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_654": {
                "input": {
                    "value": "surr1_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio_edge * advantage_edge",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_654": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_340": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "edge_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "edge_idx + 1",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_361": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_362": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_365": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_366": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_325": {}
        }
    },
    "dig/ggraph/method/GraphAF/model/model_utils.py": {
        "torch": {
            "manual_seed_61": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_64": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_65": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/method/GraphAF/model/rgcn.py": {
        "torch": {
            "Parameter_28": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.edge_dim, self.in_features, self.out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.emb(x)",
                            "Call"
                        ],
                        [
                            "self.gc1(x, adj)",
                            "Call"
                        ],
                        [
                            "self.gc2[i](x, adj)",
                            "Call"
                        ],
                        [
                            "self.gc3(x, adj)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_55": {
                "variable": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bid, edh-> beih",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.emb(x)",
                            "Call"
                        ],
                        [
                            "self.gc1(x, adj)",
                            "Call"
                        ],
                        [
                            "self.gc2[i](x, adj)",
                            "Call"
                        ],
                        [
                            "self.gc3(x, adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_56": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "beij, bejh-> beih",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_111": {
                "variable": {
                    "value": "self.gc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[RelationGraphConvolution(nhid, nhid, edge_dim=self.edge_dim, aggregate='sum', use_relu=True, dropout=self.dropout, bias=False) for i in range(self.num_layers - 2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_31": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.edge_dim, 1, self.out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_68": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('beij, bejh-> beih', adj, support)",
                            "Call"
                        ],
                        [
                            "output + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.act(output)",
                            "Call"
                        ],
                        [
                            "output.view(batch_size, self.edge_dim, x.size(1), self.out_features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_71": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('beij, bejh-> beih', adj, support)",
                            "Call"
                        ],
                        [
                            "output + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.act(output)",
                            "Call"
                        ],
                        [
                            "output.view(batch_size, self.edge_dim, x.size(1), self.out_features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_74": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('beij, bejh-> beih', adj, support)",
                            "Call"
                        ],
                        [
                            "output + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.act(output)",
                            "Call"
                        ],
                        [
                            "output.view(batch_size, self.edge_dim, x.size(1), self.out_features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(output, dim=1, split_size_or_sections=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_79": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(output, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.max(output, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.mean(output, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(output, dim=1, split_size_or_sections=1), dim=3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(node_embedding, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_77": {
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('beij, bejh-> beih', adj, support)",
                            "Call"
                        ],
                        [
                            "output + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.act(output)",
                            "Call"
                        ],
                        [
                            "output.view(batch_size, self.edge_dim, x.size(1), self.out_features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/method/GraphAF/model/st_net.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_30": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_31": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_83": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_136": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_137": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_171": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_186": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([num_channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_21": {
                "variable": {
                    "value": "self.bn_before",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "weight_norm_23": {
                "variable": {
                    "value": "self.rescale1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "Rescale()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_24": {
                "variable": {
                    "value": "self.rescale2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "Rescale()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_74": {
                "variable": {
                    "value": "self.bn_before",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "weight_norm_76": {
                "variable": {
                    "value": "self.rescale1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "Rescale()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_129": {
                "variable": {
                    "value": "self.bn_before",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "weight_norm_131": {
                "variable": {
                    "value": "self.rescale1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "Rescale_channel(self.output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_174": {
                "input": {
                    "value": "torch.exp(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "any_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_189": {
                "input": {
                    "value": "torch.exp(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "any_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_106": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :self.output_dim]",
                            "Subscript"
                        ],
                        [
                            "self.sigmoid(s + self.sigmoid_shift)",
                            "Call"
                        ],
                        [
                            "self.rescale2(s)",
                            "Call"
                        ],
                        [
                            "x[:, :self.output_dim]",
                            "Subscript"
                        ],
                        [
                            "self.rescale1(torch.tanh(s))",
                            "Call"
                        ],
                        [
                            "x[:, :self.output_dim]",
                            "Subscript"
                        ],
                        [
                            "self.softplus(s)",
                            "Call"
                        ],
                        [
                            "self.rescale1(s)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_171": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_178": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_186": {
                "*size": {
                    "value": "[num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_192": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_174": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_189": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/method/GraphDF/graphdf.py": {
        "torch": {
            "load_37": {
                "variable": {
                    "value": "load_key",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_61": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_146": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_229": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__160": {
                "parameters": {
                    "value": "filter(lambda p: p.requires_grad, self.model.flow_core.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_grad_norm__253": {
                "parameters": {
                    "value": "filter(lambda p: p.requires_grad, self.model.flow_core.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_33": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_87": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'rand_gen_ckpt_{}.pth'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_167": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'prop_opt_net_{}.pth'.format(cur_iter))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_260": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'const_prop_opt_net_{}.pth'.format(cur_iter))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/method/GraphDF/model/df_utils.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.max() + 1",
                            "BinOp"
                        ],
                        [
                            "inputs.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "a.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_27": {
                "variable": {
                    "value": "soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_42": {
                "variable": {
                    "value": "sparse_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.nditer(batched_a)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "sparse_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "py_multiplicative_inverse(sparse_a, n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_99": {
                "variable": {
                    "value": "shift_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.roll(shift, i, dims=-1) for i in range(vocab_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_101": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "...v,...uv->...u",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.flatten().unsqueeze(1).long()",
                            "Call"
                        ],
                        [
                            "torch.stack((inputs, torch.zeros_like(inputs)), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_117": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(inputs, torch.zeros_like(inputs))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_118": {
                "variable": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shift, torch.zeros_like(shift))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_128": {
                "variable": {
                    "value": "result_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(result_fft_real, result_fft_imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_158": {
                "variable": {
                    "value": "scaled_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "...v,avu->...au",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.flatten().unsqueeze(1).long()",
                            "Call"
                        ],
                        [
                            "torch.stack((inputs, torch.zeros_like(inputs)), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_159": {
                "variable": {
                    "value": "scaled_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(batch_shape + [1, vocab_size]), scaled_inputs[..., 1:, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_163": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "...v,...vu->...u",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale.type(inputs.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_real_124": {
                "variable": {
                    "value": "inputs_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.fft.fft(torch.view_as_complex(inputs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "view_as_real_125": {
                "variable": {
                    "value": "shift_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.fft.fft(torch.view_as_complex(shift))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_26": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.flatten().unsqueeze(1).long()",
                            "Call"
                        ],
                        [
                            "torch.stack((inputs, torch.zeros_like(inputs)), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fft_121": {
                "variable": {
                    "value": "inputs_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.flatten().unsqueeze(1).long()",
                            "Call"
                        ],
                        [
                            "torch.stack((inputs, torch.zeros_like(inputs)), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fft_122": {
                "variable": {
                    "value": "shift_fft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shift.type(inputs.dtype)",
                            "Call"
                        ],
                        [
                            "torch.stack((shift, torch.zeros_like(shift)), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_155": {
                "start": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.max() + 1",
                            "BinOp"
                        ],
                        [
                            "inputs.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "a.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_155": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fmod_156": {
                "input": {
                    "value": "to_perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(vocab_size).unsqueeze(1).repeat(1, vocab_size) * torch.arange(vocab_size).unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.max() + 1",
                            "BinOp"
                        ],
                        [
                            "inputs.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "a.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[-1]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "roll_99": {
                "input": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shift.type(inputs.dtype)",
                            "Call"
                        ],
                        [
                            "torch.stack((shift, torch.zeros_like(shift)), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_117": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.flatten().unsqueeze(1).long()",
                            "Call"
                        ],
                        [
                            "torch.stack((inputs, torch.zeros_like(inputs)), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_118": {
                "input": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shift.type(inputs.dtype)",
                            "Call"
                        ],
                        [
                            "torch.stack((shift, torch.zeros_like(shift)), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "fft_124": {
                "input": {
                    "value": "torch.view_as_complex(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fft_125": {
                "input": {
                    "value": "torch.view_as_complex(shift)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "view_as_real_133": {
                "input": {
                    "value": "torch.fft.ifft(torch.view_as_complex(result_fft))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "*size": {
                    "value": "batch_shape + [1, vocab_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "view_as_complex_124": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.flatten().unsqueeze(1).long()",
                            "Call"
                        ],
                        [
                            "torch.stack((inputs, torch.zeros_like(inputs)), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_125": {
                "input": {
                    "value": "shift",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shift.type(inputs.dtype)",
                            "Call"
                        ],
                        [
                            "torch.stack((shift, torch.zeros_like(shift)), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ifft_131": {
                "input": {
                    "value": "result_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((result_fft_real, result_fft_imag), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ifft_133": {
                "input": {
                    "value": "torch.view_as_complex(result_fft)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "view_as_complex_133": {
                "input": {
                    "value": "result_fft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((result_fft_real, result_fft_imag), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dig/ggraph/method/GraphDF/model/disgraphaf.py": {
        "torch": {
            "Parameter_20": {
                "variable": {
                    "value": "self.mask_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mask_node.view(1, self.repeat_num, graph_size, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.mask_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mask_edge.view(1, self.repeat_num, 1, graph_size, graph_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_22": {
                "variable": {
                    "value": "self.index_select_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "index_select_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.node_st_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ST_Dis(nout, self.num_node_type, hid_dim=nhid, bias=True) for _ in range(num_flow_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.edge_st_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ST_Dis(nout * 3, self.num_edge_type, hid_dim=nhid, bias=True) for _ in range(num_flow_layer)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_145": {
                "variable": {
                    "value": "graph_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "node_emb.view(batch_size, self.repeat_num, self.graph_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_168": {
                "variable": {
                    "value": "graph_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "node_emb.view(batch_size, self.repeat_num, self.graph_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "graph_node_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.gather(node_emb, dim=1, index=index), graph_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_189": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.mask_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "x.unsqueeze(1).repeat(1, self.repeat_num, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros([1], device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_192": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.mask_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "adj.unsqueeze(1).repeat(1, self.repeat_num, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros([1], device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_202": {
                "variable": {
                    "value": "graph_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "node_emb.view(batch_size, self.repeat_num, self.graph_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "graph_node_emb_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.gather(all_node_emb_edge, dim=2, index=index), graph_emb_edge)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_31": {
                "variable": {
                    "value": "self.batchNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_171": {
                "input": {
                    "value": "node_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.rgcn(x, adj)",
                            "Call"
                        ],
                        [
                            "self.batchNorm(node_emb.transpose(1, 2)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "node_emb.view(batch_size, self.repeat_num, self.graph_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index.view(batch_size, -1, 1).repeat(1, 1, self.emb_size)",
                            "Call"
                        ],
                        [
                            "self.index_select_edge.view(1, -1, 2, 1).repeat(batch_size, 1, 1, self.emb_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_218": {
                "input": {
                    "value": "all_node_emb_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_emb[:, self.graph_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index.view(batch_size, -1, 1).repeat(1, 1, self.emb_size)",
                            "Call"
                        ],
                        [
                            "self.index_select_edge.view(1, -1, 2, 1).repeat(batch_size, 1, 1, self.emb_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_189": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_192": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/method/GraphDF/model/graphflow.py": {
        "torch": {
            "randn_25": {
                "variable": {
                    "value": "node_base_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.node_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_26": {
                "variable": {
                    "value": "edge_base_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.latent_step - self.max_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.bond_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_244": {
                "variable": {
                    "value": "node_masks1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_245": {
                "variable": {
                    "value": "adj_masks1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_node_unroll, max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_246": {
                "variable": {
                    "value": "node_masks2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_mask_edge, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_247": {
                "variable": {
                    "value": "adj_masks2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_mask_edge, max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_248": {
                "variable": {
                    "value": "link_prediction_index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_mask_edge, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_249": {
                "variable": {
                    "value": "flow_core_edge_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_309": {
                "variable": {
                    "value": "node_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(node_masks1, node_masks2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "adj_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj_masks1, adj_masks2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_312": {
                "variable": {
                    "value": "node_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "node_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((node_masks1, node_masks2), dim=0)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(node_masks, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_313": {
                "variable": {
                    "value": "adj_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((adj_masks1, adj_masks2), dim=0)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(adj_masks, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_314": {
                "variable": {
                    "value": "link_prediction_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "link_prediction_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([num_mask_edge, 2]).long()",
                            "Call"
                        ],
                        [
                            "nn.Parameter(link_prediction_index, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_315": {
                "variable": {
                    "value": "flow_core_edge_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flow_core_edge_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([max_node_unroll, max_node_unroll]).bool()",
                            "Call"
                        ],
                        [
                            "nn.Parameter(flow_core_edge_masks, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_322": {
                "variable": {
                    "value": "node_base_log_probs_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.node_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_323": {
                "variable": {
                    "value": "ll_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_deq * node_base_log_probs_sm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_softmax_324": {
                "variable": {
                    "value": "edge_base_log_probs_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.edge_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_325": {
                "variable": {
                    "value": "ll_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj_deq * edge_base_log_probs_sm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_31": {
                "variable": {
                    "value": "self.flow_core",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.flow_core",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.node_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "node_base_log_probs.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.edge_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_base_log_probs.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.node_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "node_base_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(self.max_size, self.node_dim)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.edge_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_base_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(self.latent_step - self.max_size, self.bond_dim)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "cur_node_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, max_atoms, self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "cur_adj_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.bond_dim, max_atoms, max_atoms]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "cur_node_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, max_atoms, self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "cur_adj_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.bond_dim, max_atoms, max_atoms]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "OneHotCategorical_98": {
                "variable": {
                    "value": "prior_node_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.node_base_log_probs[i] * temperature[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_106": {
                "variable": {
                    "value": "feature_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_node_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_326": {
                "input": {
                    "value": "ll_node + ll_edge",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "OneHotCategorical_123": {
                "variable": {
                    "value": "prior_edge_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "edge_dis / temperature[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_125": {
                "variable": {
                    "value": "latent_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long()).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_133": {
                "variable": {
                    "value": "edge_discrete_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long()).view(-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dig/ggraph/method/GraphDF/model/graphflow_con_rl.py": {
        "torch": {
            "randn_27": {
                "variable": {
                    "value": "node_base_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.node_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_28": {
                "variable": {
                    "value": "edge_base_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.latent_step - self.max_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.bond_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_424": {
                "variable": {
                    "value": "reward_baseline",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_size_rl + 5, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1010": {
                "variable": {
                    "value": "node_inputs_node_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['node_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1011": {
                "variable": {
                    "value": "node_inputs_adj_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['adj_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1012": {
                "variable": {
                    "value": "node_inputs_node_features_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['node_features_cont']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1013": {
                "variable": {
                    "value": "node_inputs_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['rewards']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1014": {
                "variable": {
                    "value": "node_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['baseline_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_1015": {
                "variable": {
                    "value": "node_inputs_baseline",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward_baseline_per_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward_baseline[:, 1] / reward_baseline[:, 0]",
                            "BinOp"
                        ],
                        [
                            "reward_baseline_per_step * (1.0 - self.conf_rl['moving_coeff']) + in_baseline * self.conf_rl['moving_coeff']",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "node_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(node_inputs['baseline_index'], dim=0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1016": {
                "variable": {
                    "value": "node_inputs_node_cnts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['node_cnt']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1018": {
                "variable": {
                    "value": "adj_inputs_node_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['node_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1019": {
                "variable": {
                    "value": "adj_inputs_adj_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['adj_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1020": {
                "variable": {
                    "value": "adj_inputs_edge_features_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['edge_features_cont']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1021": {
                "variable": {
                    "value": "adj_inputs_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1022": {
                "variable": {
                    "value": "adj_inputs_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['rewards']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1023": {
                "variable": {
                    "value": "adj_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['baseline_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_1024": {
                "variable": {
                    "value": "adj_inputs_baseline",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward_baseline_per_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward_baseline[:, 1] / reward_baseline[:, 0]",
                            "BinOp"
                        ],
                        [
                            "reward_baseline_per_step * (1.0 - self.conf_rl['moving_coeff']) + in_baseline * self.conf_rl['moving_coeff']",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "adj_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(adj_inputs['baseline_index'], dim=0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1025": {
                "variable": {
                    "value": "adj_inputs_edge_cnts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['edge_cnt']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_1057": {
                "variable": {
                    "value": "node_base_log_probs_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.node_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_1058": {
                "variable": {
                    "value": "node_base_log_probs_sm_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_base_log_probs_sm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(self.node_base_log_probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(self.node_base_log_probs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "node_inputs_node_cnts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(node_inputs['node_cnt'], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_1059": {
                "variable": {
                    "value": "ll_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_node * node_base_log_probs_sm_select",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_softmax_1060": {
                "variable": {
                    "value": "edge_base_log_probs_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.edge_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_1061": {
                "variable": {
                    "value": "edge_base_log_probs_sm_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_base_log_probs_sm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(self.edge_base_log_probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(self.edge_base_log_probs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "adj_inputs_edge_cnts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(adj_inputs['edge_cnt'], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_1062": {
                "variable": {
                    "value": "ll_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_edge * edge_base_log_probs_sm_select",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_softmax_1064": {
                "variable": {
                    "value": "node_base_log_probs_sm_old",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.node_base_log_probs_old",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_1065": {
                "variable": {
                    "value": "node_base_log_probs_sm_old_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_base_log_probs_sm_old",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(self.node_base_log_probs_old, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "node_inputs_node_cnts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(node_inputs['node_cnt'], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_1066": {
                "variable": {
                    "value": "ll_node_old",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_node_old * node_base_log_probs_sm_old_select",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_softmax_1067": {
                "variable": {
                    "value": "edge_base_log_probs_sm_old",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.edge_base_log_probs_old",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_1068": {
                "variable": {
                    "value": "edge_base_log_probs_sm_old_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_base_log_probs_sm_old",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(self.edge_base_log_probs_old, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "adj_inputs_edge_cnts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(adj_inputs['edge_cnt'], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_1069": {
                "variable": {
                    "value": "ll_edge_old",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_edge_old * edge_base_log_probs_sm_old_select",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_1071": {
                "variable": {
                    "value": "ratio_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(ll_node - ll_node_old.detach()).clamp(max=10.0, min=-10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_1072": {
                "variable": {
                    "value": "ratio_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(ll_edge - ll_edge_old.detach()).clamp(max=10.0, min=-10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_1118": {
                "variable": {
                    "value": "node_masks1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1119": {
                "variable": {
                    "value": "adj_masks1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_node_unroll, max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1120": {
                "variable": {
                    "value": "node_masks2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_mask_edge, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1121": {
                "variable": {
                    "value": "adj_masks2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_mask_edge, max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1122": {
                "variable": {
                    "value": "link_prediction_index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_mask_edge, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1123": {
                "variable": {
                    "value": "flow_core_edge_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_1185": {
                "variable": {
                    "value": "node_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(node_masks1, node_masks2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1186": {
                "variable": {
                    "value": "adj_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj_masks1, adj_masks2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_1188": {
                "variable": {
                    "value": "node_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "node_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((node_masks1, node_masks2), dim=0)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(node_masks, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_1189": {
                "variable": {
                    "value": "adj_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((adj_masks1, adj_masks2), dim=0)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(adj_masks, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_1190": {
                "variable": {
                    "value": "link_prediction_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "link_prediction_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([num_mask_edge, 2]).long()",
                            "Call"
                        ],
                        [
                            "nn.Parameter(link_prediction_index, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_1191": {
                "variable": {
                    "value": "flow_core_edge_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flow_core_edge_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([max_node_unroll, max_node_unroll]).byte()",
                            "Call"
                        ],
                        [
                            "nn.Parameter(flow_core_edge_masks, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_1198": {
                "variable": {
                    "value": "node_base_log_probs_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.node_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_1199": {
                "variable": {
                    "value": "ll_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_deq * node_base_log_probs_sm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_softmax_1200": {
                "variable": {
                    "value": "edge_base_log_probs_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.edge_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_1201": {
                "variable": {
                    "value": "ll_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj_deq * edge_base_log_probs_sm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_34": {
                "variable": {
                    "value": "self.flow_core",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.flow_core",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_35": {
                "variable": {
                    "value": "self.flow_core_old",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.flow_core_old",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.node_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "node_base_log_probs.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.edge_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_base_log_probs.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.node_base_log_probs_old",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "node_base_log_probs.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.edge_base_log_probs_old",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_base_log_probs.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.node_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "node_base_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(self.max_size, self.node_dim)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.edge_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_base_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(self.latent_step - self.max_size, self.bond_dim)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.node_base_log_probs_old",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "node_base_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(self.max_size, self.node_dim)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "self.edge_base_log_probs_old",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_base_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(self.latent_step - self.max_size, self.bond_dim)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_400": {
                "variable": {
                    "value": "self.node_base_log_probs_old",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.node_base_log_probs.detach().clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_401": {
                "variable": {
                    "value": "self.edge_base_log_probs_old",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.edge_base_log_probs.detach().clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "isinf_1074": {
                "input": {
                    "value": "ratio_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp((ll_node - ll_node_old.detach()).clamp(max=10.0, min=-10.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "any_1074": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_1077": {
                "input": {
                    "value": "ratio_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp((ll_edge - ll_edge_old.detach()).clamp(max=10.0, min=-10.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "any_1077": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_1092": {
                "input": {
                    "value": "surr1_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio_node * advantage_node",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_1092": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_1094": {
                "input": {
                    "value": "surr2_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(ratio_node, 1 - 0.2, 1 + 0.2) * advantage_node",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_1094": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_1096": {
                "input": {
                    "value": "surr1_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio_edge * advantage_edge",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_1096": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_1098": {
                "input": {
                    "value": "surr2_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(ratio_edge, 1 - 0.2, 1 + 0.2) * advantage_edge",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_1098": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_83": {
                "variable": {
                    "value": "node_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "org_node_features[0, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "OneHotCategorical_156": {
                "variable": {
                    "value": "prior_node_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.node_base_log_probs[i] * temperature[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_164": {
                "variable": {
                    "value": "feature_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_node_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "prior_node_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_438": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1047": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_1087": {
                "input": {
                    "value": "ratio_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp((ll_node - ll_node_old.detach()).clamp(max=10.0, min=-10.0))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - 0.2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + 0.2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_1090": {
                "input": {
                    "value": "ratio_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp((ll_edge - ll_edge_old.detach()).clamp(max=10.0, min=-10.0))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - 0.2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + 0.2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_97": {
                "variable": {
                    "value": "edge_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "org_adj_features[0, :, i, j + start]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_485": {
                "variable": {
                    "value": "node_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "org_node_features[0, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "OneHotCategorical_557": {
                "variable": {
                    "value": "prior_node_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.node_base_log_probs_old[i] * temperature[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_565": {
                "variable": {
                    "value": "feature_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_node_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "prior_node_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_567": {
                "variable": {
                    "value": "node_feature_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_966": {
                "variable": {
                    "value": "traj_node_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj_node_inputs['baseline_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_967": {
                "variable": {
                    "value": "traj_node_inputs_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj_node_inputs['rewards']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_984": {
                "variable": {
                    "value": "traj_adj_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj_adj_inputs['baseline_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_985": {
                "variable": {
                    "value": "traj_adj_inputs_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj_adj_inputs['rewards']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_1202": {
                "input": {
                    "value": "ll_node + ll_edge",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_499": {
                "variable": {
                    "value": "edge_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "org_adj_features[0, :, i, j + start]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "OneHotCategorical_183": {
                "variable": {
                    "value": "prior_edge_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "edge_dis / temperature[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_185": {
                "variable": {
                    "value": "latent_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_193": {
                "variable": {
                    "value": "edge_discrete_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_574": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_575": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_576": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_611": {
                "variable": {
                    "value": "edge_feature_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_711": {
                "variable": {
                    "value": "node_feature_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_962": {
                "tensors": {
                    "value": "traj_node_inputs['node_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_963": {
                "tensors": {
                    "value": "traj_node_inputs['adj_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_964": {
                "tensors": {
                    "value": "traj_node_inputs['node_features_cont']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_969": {
                "input": {
                    "value": "reward_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conf_rl['reward_decay']",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "step_cnt - 1.0 - traj_node_inputs_rewards[traj_node_inputs_rewards > 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_972": {
                "tensors": {
                    "value": "traj_node_inputs['node_cnt']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_978": {
                "tensors": {
                    "value": "traj_adj_inputs['node_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_979": {
                "tensors": {
                    "value": "traj_adj_inputs['adj_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_980": {
                "tensors": {
                    "value": "traj_adj_inputs['edge_features_cont']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_981": {
                "tensors": {
                    "value": "traj_adj_inputs['index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_982": {
                "tensors": {
                    "value": "traj_adj_inputs['edge_cnt']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_987": {
                "input": {
                    "value": "reward_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conf_rl['reward_decay']",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "step_cnt - 1.0 - traj_adj_inputs_rewards[traj_adj_inputs_rewards > 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "OneHotCategorical_595": {
                "variable": {
                    "value": "prior_edge_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "edge_dis / temperature[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_597": {
                "variable": {
                    "value": "latent_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_605": {
                "variable": {
                    "value": "edge_discrete_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_1101": {
                "input": {
                    "value": "surr1_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio_edge * advantage_edge",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_1101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_619": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float(edge_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_714": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_715": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_716": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_649": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_650": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_737": {
                "variable": {
                    "value": "edge_feature_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_653": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_654": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_828": {
                "variable": {
                    "value": "edge_feature_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_747": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float(edge_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_748": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_749": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_779": {
                "variable": {
                    "value": "edge_feature_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_838": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float(edge_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_839": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_840": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_789": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float(edge_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_790": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_791": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "dig/ggraph/method/GraphDF/model/graphflow_rl.py": {
        "torch": {
            "randn_27": {
                "variable": {
                    "value": "node_base_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.max_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.node_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_28": {
                "variable": {
                    "value": "edge_base_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.latent_step - self.max_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.bond_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_207": {
                "variable": {
                    "value": "reward_baseline",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_size_rl + 5, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_515": {
                "variable": {
                    "value": "node_inputs_node_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['node_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_516": {
                "variable": {
                    "value": "node_inputs_adj_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['adj_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_517": {
                "variable": {
                    "value": "node_inputs_node_features_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['node_features_cont']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_518": {
                "variable": {
                    "value": "node_inputs_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['rewards']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_519": {
                "variable": {
                    "value": "node_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "node_inputs['baseline_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_520": {
                "variable": {
                    "value": "node_inputs_baseline",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward_baseline_per_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward_baseline[:, 1] / reward_baseline[:, 0]",
                            "BinOp"
                        ],
                        [
                            "reward_baseline_per_step * (1.0 - self.conf_rl['moving_coeff']) + in_baseline * self.conf_rl['moving_coeff']",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "node_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(node_inputs['baseline_index'], dim=0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_522": {
                "variable": {
                    "value": "adj_inputs_node_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['node_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_523": {
                "variable": {
                    "value": "adj_inputs_adj_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['adj_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_524": {
                "variable": {
                    "value": "adj_inputs_edge_features_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['edge_features_cont']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_525": {
                "variable": {
                    "value": "adj_inputs_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_526": {
                "variable": {
                    "value": "adj_inputs_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['rewards']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_527": {
                "variable": {
                    "value": "adj_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['baseline_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_528": {
                "variable": {
                    "value": "adj_inputs_baseline",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reward_baseline_per_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward_baseline[:, 1] / reward_baseline[:, 0]",
                            "BinOp"
                        ],
                        [
                            "reward_baseline_per_step * (1.0 - self.conf_rl['moving_coeff']) + in_baseline * self.conf_rl['moving_coeff']",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "adj_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(adj_inputs['baseline_index'], dim=0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_529": {
                "variable": {
                    "value": "adj_inputs_edge_cnts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "adj_inputs['edge_cnt']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_561": {
                "variable": {
                    "value": "node_base_log_probs_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.node_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_562": {
                "variable": {
                    "value": "node_base_log_probs_sm_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_base_log_probs_sm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(self.node_base_log_probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(self.node_base_log_probs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "node_inputs_baseline_index - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_564": {
                "variable": {
                    "value": "ll_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_node * node_base_log_probs_sm_select",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_softmax_565": {
                "variable": {
                    "value": "edge_base_log_probs_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.edge_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_566": {
                "variable": {
                    "value": "edge_base_log_probs_sm_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_base_log_probs_sm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(self.edge_base_log_probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.log_softmax(self.edge_base_log_probs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "adj_inputs_edge_cnts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(adj_inputs['edge_cnt'], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_568": {
                "variable": {
                    "value": "ll_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_edge * edge_base_log_probs_sm_select",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_softmax_570": {
                "variable": {
                    "value": "node_base_log_probs_sm_old",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.node_base_log_probs_old",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_571": {
                "variable": {
                    "value": "node_base_log_probs_sm_old_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_base_log_probs_sm_old",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(self.node_base_log_probs_old, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "node_inputs_baseline_index - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_572": {
                "variable": {
                    "value": "ll_node_old",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_node_old * node_base_log_probs_sm_old_select",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_softmax_573": {
                "variable": {
                    "value": "edge_base_log_probs_sm_old",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.edge_base_log_probs_old",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_574": {
                "variable": {
                    "value": "edge_base_log_probs_sm_old_select",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_base_log_probs_sm_old",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(self.edge_base_log_probs_old, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "adj_inputs_edge_cnts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(adj_inputs['edge_cnt'], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_575": {
                "variable": {
                    "value": "ll_edge_old",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_edge_old * edge_base_log_probs_sm_old_select",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_577": {
                "variable": {
                    "value": "ratio_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(ll_node - ll_node_old.detach()).clamp(max=10.0, min=-10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_578": {
                "variable": {
                    "value": "ratio_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(ll_edge - ll_edge_old.detach()).clamp(max=10.0, min=-10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_624": {
                "variable": {
                    "value": "node_masks1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_625": {
                "variable": {
                    "value": "adj_masks1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_node_unroll, max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_626": {
                "variable": {
                    "value": "node_masks2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_mask_edge, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_627": {
                "variable": {
                    "value": "adj_masks2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_mask_edge, max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_628": {
                "variable": {
                    "value": "link_prediction_index",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_mask_edge, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_629": {
                "variable": {
                    "value": "flow_core_edge_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[max_node_unroll, max_node_unroll]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_691": {
                "variable": {
                    "value": "node_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(node_masks1, node_masks2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_692": {
                "variable": {
                    "value": "adj_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(adj_masks1, adj_masks2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_694": {
                "variable": {
                    "value": "node_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "node_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((node_masks1, node_masks2), dim=0)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(node_masks, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_695": {
                "variable": {
                    "value": "adj_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((adj_masks1, adj_masks2), dim=0)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(adj_masks, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_696": {
                "variable": {
                    "value": "link_prediction_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "link_prediction_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([num_mask_edge, 2]).long()",
                            "Call"
                        ],
                        [
                            "nn.Parameter(link_prediction_index, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_697": {
                "variable": {
                    "value": "flow_core_edge_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flow_core_edge_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([max_node_unroll, max_node_unroll]).byte()",
                            "Call"
                        ],
                        [
                            "nn.Parameter(flow_core_edge_masks, requires_grad=False)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_704": {
                "variable": {
                    "value": "node_base_log_probs_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.node_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_705": {
                "variable": {
                    "value": "ll_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_deq * node_base_log_probs_sm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_softmax_706": {
                "variable": {
                    "value": "edge_base_log_probs_sm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.edge_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_707": {
                "variable": {
                    "value": "ll_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj_deq * edge_base_log_probs_sm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-1, -2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_34": {
                "variable": {
                    "value": "self.flow_core",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.flow_core.cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_35": {
                "variable": {
                    "value": "self.flow_core_old",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.flow_core_old.cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.node_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "node_base_log_probs.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.edge_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_base_log_probs.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_38": {
                "variable": {
                    "value": "self.node_base_log_probs_old",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "node_base_log_probs.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.edge_base_log_probs_old",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_base_log_probs.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_41": {
                "variable": {
                    "value": "self.node_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "node_base_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(self.max_size, self.node_dim)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.edge_base_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_base_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(self.latent_step - self.max_size, self.bond_dim)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.node_base_log_probs_old",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "node_base_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(self.max_size, self.node_dim)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "self.edge_base_log_probs_old",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_base_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(self.latent_step - self.max_size, self.bond_dim)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "cur_node_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, max_size_rl, self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "cur_adj_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.bond_dim, max_size_rl, max_size_rl]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "cur_node_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, max_size_rl, self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "cur_adj_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.bond_dim, max_size_rl, max_size_rl]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_184": {
                "variable": {
                    "value": "self.node_base_log_probs_old",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.node_base_log_probs.detach().clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_185": {
                "variable": {
                    "value": "self.edge_base_log_probs_old",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.edge_base_log_probs.detach().clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "isinf_580": {
                "input": {
                    "value": "ratio_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp((ll_node - ll_node_old.detach()).clamp(max=10.0, min=-10.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "any_580": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_583": {
                "input": {
                    "value": "ratio_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp((ll_edge - ll_edge_old.detach()).clamp(max=10.0, min=-10.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "any_583": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_598": {
                "input": {
                    "value": "surr1_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio_node * advantage_node",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_598": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_600": {
                "input": {
                    "value": "surr2_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(ratio_node, 1 - 0.2, 1 + 0.2) * advantage_node",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_600": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_602": {
                "input": {
                    "value": "surr1_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio_edge * advantage_edge",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_602": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_604": {
                "input": {
                    "value": "surr2_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(ratio_edge, 1 - 0.2, 1 + 0.2) * advantage_edge",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_604": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OneHotCategorical_80": {
                "variable": {
                    "value": "prior_node_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.node_base_log_probs[i] * temperature[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_89": {
                "variable": {
                    "value": "feature_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_node_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "prior_node_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "cur_node_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, max_size_rl, self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_244": {
                "variable": {
                    "value": "cur_adj_features",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.bond_dim, max_size_rl, max_size_rl]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_471": {
                "variable": {
                    "value": "traj_node_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj_node_inputs['baseline_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_472": {
                "variable": {
                    "value": "traj_node_inputs_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj_node_inputs['rewards']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_551": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_593": {
                "input": {
                    "value": "ratio_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp((ll_node - ll_node_old.detach()).clamp(max=10.0, min=-10.0))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - 0.2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + 0.2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_596": {
                "input": {
                    "value": "ratio_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp((ll_edge - ll_edge_old.detach()).clamp(max=10.0, min=-10.0))",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - 0.2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + 0.2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "OneHotCategorical_270": {
                "variable": {
                    "value": "prior_node_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.node_base_log_probs_old[i] * temperature[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_278": {
                "variable": {
                    "value": "feature_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_node_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "prior_node_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_node, mode=0).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_280": {
                "variable": {
                    "value": "node_feature_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.node_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_489": {
                "variable": {
                    "value": "traj_adj_inputs_baseline_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj_adj_inputs['baseline_index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_490": {
                "variable": {
                    "value": "traj_adj_inputs_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "traj_adj_inputs['rewards']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_708": {
                "input": {
                    "value": "ll_node + ll_edge",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_467": {
                "tensors": {
                    "value": "traj_node_inputs['node_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_468": {
                "tensors": {
                    "value": "traj_node_inputs['adj_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_469": {
                "tensors": {
                    "value": "traj_node_inputs['node_features_cont']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_474": {
                "input": {
                    "value": "reward_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conf_rl['reward_decay']",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "step_cnt - 1.0 - traj_node_inputs_rewards[traj_node_inputs_rewards > 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "OneHotCategorical_108": {
                "variable": {
                    "value": "prior_edge_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "edge_dis / temperature[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_110": {
                "variable": {
                    "value": "latent_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_118": {
                "variable": {
                    "value": "edge_discrete_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_287": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_288": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_323": {
                "variable": {
                    "value": "edge_feature_cont",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.bond_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_483": {
                "tensors": {
                    "value": "traj_adj_inputs['node_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_484": {
                "tensors": {
                    "value": "traj_adj_inputs['adj_features']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_485": {
                "tensors": {
                    "value": "traj_adj_inputs['edge_features_cont']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_486": {
                "tensors": {
                    "value": "traj_adj_inputs['index']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_487": {
                "tensors": {
                    "value": "traj_adj_inputs['edge_cnt']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_492": {
                "input": {
                    "value": "reward_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conf_rl['reward_decay']",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "step_cnt - 1.0 - traj_adj_inputs_rewards[traj_adj_inputs_rewards > 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "OneHotCategorical_307": {
                "variable": {
                    "value": "prior_edge_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "edge_dis / temperature[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_309": {
                "variable": {
                    "value": "latent_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_317": {
                "variable": {
                    "value": "edge_discrete_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "prior_edge_dist.sample().view(1, -1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.module.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ],
                        [
                            "self.flow_core_old.reverse(cur_node_features, cur_adj_features, latent_edge, mode=1, edge_index=torch.Tensor([[j + start, i]]).long().cuda()).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_607": {
                "input": {
                    "value": "surr1_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratio_edge * advantage_edge",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_607": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_331": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "float(edge_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_353": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_354": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_357": {
                "size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_358": {
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "step_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "step_cnt + 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "dig/ggraph/method/GraphDF/model/rgcn.py": {
        "torch": {
            "Parameter_27": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.edge_dim, self.in_features, self.out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.emb(x)",
                            "Call"
                        ],
                        [
                            "self.gc1(x, adj)",
                            "Call"
                        ],
                        [
                            "self.gc2[i](x, adj)",
                            "Call"
                        ],
                        [
                            "self.gc3(x, adj)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_54": {
                "variable": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bid, edh-> beih",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.emb(x)",
                            "Call"
                        ],
                        [
                            "self.gc1(x, adj)",
                            "Call"
                        ],
                        [
                            "self.gc2[i](x, adj)",
                            "Call"
                        ],
                        [
                            "self.gc3(x, adj)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_55": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "beij, bejh-> beih",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_110": {
                "variable": {
                    "value": "self.gc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[RelationGraphConvolution(nhid, nhid, edge_dim=self.edge_dim, aggregate='sum', use_relu=True, dropout=self.dropout, bias=False) for i in range(self.num_layers - 2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(self.edge_dim, 1, self.out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_67": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('beij, bejh-> beih', adj, support)",
                            "Call"
                        ],
                        [
                            "output + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.act(output)",
                            "Call"
                        ],
                        [
                            "output.view(batch_size, self.edge_dim, x.size(1), self.out_features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_70": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('beij, bejh-> beih', adj, support)",
                            "Call"
                        ],
                        [
                            "output + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.act(output)",
                            "Call"
                        ],
                        [
                            "output.view(batch_size, self.edge_dim, x.size(1), self.out_features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_73": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('beij, bejh-> beih', adj, support)",
                            "Call"
                        ],
                        [
                            "output + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.act(output)",
                            "Call"
                        ],
                        [
                            "output.view(batch_size, self.edge_dim, x.size(1), self.out_features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.split(output, dim=1, split_size_or_sections=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_78": {
                "variable": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(output, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.max(output, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.mean(output, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.cat(torch.split(output, dim=1, split_size_or_sections=1), dim=3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(node_embedding, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_76": {
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('beij, bejh-> beih', adj, support)",
                            "Call"
                        ],
                        [
                            "output + self.bias",
                            "BinOp"
                        ],
                        [
                            "self.act(output)",
                            "Call"
                        ],
                        [
                            "output.view(batch_size, self.edge_dim, x.size(1), self.out_features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/method/GraphDF/model/st_net.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_31": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_32": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_84": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_137": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_138": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_159": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear2(F.relu(self.linear1(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_172": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_187": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([num_channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_207": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_208": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_209": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_22": {
                "variable": {
                    "value": "self.bn_before",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "weight_norm_24": {
                "variable": {
                    "value": "self.rescale1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "Rescale()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_25": {
                "variable": {
                    "value": "self.rescale2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "Rescale()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_75": {
                "variable": {
                    "value": "self.bn_before",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "weight_norm_77": {
                "variable": {
                    "value": "self.rescale1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "Rescale()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_130": {
                "variable": {
                    "value": "self.bn_before",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "weight_norm_132": {
                "variable": {
                    "value": "self.rescale1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "Rescale_channel(self.output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_175": {
                "input": {
                    "value": "torch.exp(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "any_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_190": {
                "input": {
                    "value": "torch.exp(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "any_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_107": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, :self.output_dim]",
                            "Subscript"
                        ],
                        [
                            "self.sigmoid(s + self.sigmoid_shift)",
                            "Call"
                        ],
                        [
                            "self.rescale2(s)",
                            "Call"
                        ],
                        [
                            "x[:, :self.output_dim]",
                            "Subscript"
                        ],
                        [
                            "self.rescale1(torch.tanh(s))",
                            "Call"
                        ],
                        [
                            "x[:, :self.output_dim]",
                            "Subscript"
                        ],
                        [
                            "self.softplus(s)",
                            "Call"
                        ],
                        [
                            "self.rescale1(s)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_172": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_179": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "*size": {
                    "value": "[num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_193": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_159": {
                "input": {
                    "value": "self.linear1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_175": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_190": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/method/GraphEBM/energy_func.py": {
        "torch": {
            "matmul_94": {
                "variable": {
                    "value": "hr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_edge(h)",
                            "Call"
                        ],
                        [
                            "m.reshape(mb, node, self.out_ch, self.num_edge_type)",
                            "Call"
                        ],
                        [
                            "m.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_112": {
                "variable": {
                    "value": "self.graphconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(GraphConv(hidden, hidden, num_edge_type, std=1e-10, add_self=add_self) for i in range(self.depth))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_122": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.graphconv1(adj, h)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "swish(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.graphconv[i](adj, out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "out.sum(1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "swish(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_8": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "leaky_relu_127": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.graphconv1(adj, h)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "swish(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.graphconv[i](adj, out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "out.sum(1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "swish(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dropout_133": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.graphconv1(adj, h)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "swish(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.graphconv[i](adj, out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "out.sum(1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "swish(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_82": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels * num_edge_type",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_137": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.graphconv1(adj, h)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "swish(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out, negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.graphconv[i](adj, out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "out.sum(1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "swish(out)",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_32": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u @ weight_mat @ v",
                            "BinOp"
                        ]
                    ]
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/method/GraphEBM/graphebm.py": {
        "torch": {
            "Adam_65": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.energy_function.parameters()",
                            "Call"
                        ],
                        [
                            "self.energy_function.parameters()",
                            "Call"
                        ],
                        [
                            "self.energy_function.parameters()",
                            "Call"
                        ],
                        [
                            "self.energy_function.parameters()",
                            "Call"
                        ],
                        [
                            "self.energy_function.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_186": {
                "variable": {
                    "value": "gen_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_edge_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.n_atom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.n_atom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_193": {
                "variable": {
                    "value": "noise_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(n_samples, self.n_atom_type, self.n_atom, device=self.device) * (1 + c)",
                            "BinOp"
                        ],
                        [
                            "gen_x.detach()",
                            "Call"
                        ],
                        [
                            "batch.x.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "batch.x.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.rand(n_samples, self.n_atom_type, self.n_atom, device=self.device) * (1 + c)",
                            "BinOp"
                        ],
                        [
                            "gen_x.detach()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_194": {
                "variable": {
                    "value": "noise_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(n_samples, self.n_edge_type, self.n_atom, self.n_atom, device=self.device)",
                            "Call"
                        ],
                        [
                            "gen_adj.detach()",
                            "Call"
                        ],
                        [
                            "(gen_adj + gen_adj.permute(0, 1, 3, 2)) / 2",
                            "BinOp"
                        ],
                        [
                            "batch.adj.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "batch.adj.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.rand(n_samples, self.n_edge_type, self.n_atom, self.n_atom, device=self.device)",
                            "Call"
                        ],
                        [
                            "gen_adj.detach()",
                            "Call"
                        ],
                        [
                            "(gen_adj + gen_adj.permute(0, 1, 3, 2)) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_253": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.energy_function.parameters()",
                            "Call"
                        ],
                        [
                            "self.energy_function.parameters()",
                            "Call"
                        ],
                        [
                            "self.energy_function.parameters()",
                            "Call"
                        ],
                        [
                            "self.energy_function.parameters()",
                            "Call"
                        ],
                        [
                            "self.energy_function.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_568": {
                "variable": {
                    "value": "gen_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_edge_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.n_atom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.n_atom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_577": {
                "variable": {
                    "value": "noise_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(n_samples, self.n_atom_type, self.n_atom, device=self.device) * (1 + c)",
                            "BinOp"
                        ],
                        [
                            "gen_x.detach()",
                            "Call"
                        ],
                        [
                            "batch.x.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "batch.x.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.rand(n_samples, self.n_atom_type, self.n_atom, device=self.device) * (1 + c)",
                            "BinOp"
                        ],
                        [
                            "gen_x.detach()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_578": {
                "variable": {
                    "value": "noise_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(n_samples, self.n_edge_type, self.n_atom, self.n_atom, device=self.device)",
                            "Call"
                        ],
                        [
                            "gen_adj.detach()",
                            "Call"
                        ],
                        [
                            "(gen_adj + gen_adj.permute(0, 1, 3, 2)) / 2",
                            "BinOp"
                        ],
                        [
                            "batch.adj.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "batch.adj.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.rand(n_samples, self.n_edge_type, self.n_atom, self.n_atom, device=self.device)",
                            "Call"
                        ],
                        [
                            "gen_adj.detach()",
                            "Call"
                        ],
                        [
                            "(gen_adj + gen_adj.permute(0, 1, 3, 2)) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_35": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "randn_like_387": {
                "variable": {
                    "value": "noise_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(n_samples, self.n_atom_type, self.n_atom, device=self.device) * (1 + c)",
                            "BinOp"
                        ],
                        [
                            "gen_x.detach()",
                            "Call"
                        ],
                        [
                            "batch.x.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "batch.x.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.rand(n_samples, self.n_atom_type, self.n_atom, device=self.device) * (1 + c)",
                            "BinOp"
                        ],
                        [
                            "gen_x.detach()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_388": {
                "variable": {
                    "value": "noise_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(n_samples, self.n_edge_type, self.n_atom, self.n_atom, device=self.device)",
                            "Call"
                        ],
                        [
                            "gen_adj.detach()",
                            "Call"
                        ],
                        [
                            "(gen_adj + gen_adj.permute(0, 1, 3, 2)) / 2",
                            "BinOp"
                        ],
                        [
                            "batch.adj.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "batch.adj.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.rand(n_samples, self.n_edge_type, self.n_atom, self.n_atom, device=self.device)",
                            "Call"
                        ],
                        [
                            "gen_adj.detach()",
                            "Call"
                        ],
                        [
                            "(gen_adj + gen_adj.permute(0, 1, 3, 2)) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_480": {
                "variable": {
                    "value": "noise_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(n_samples, self.n_atom_type, self.n_atom, device=self.device) * (1 + c)",
                            "BinOp"
                        ],
                        [
                            "gen_x.detach()",
                            "Call"
                        ],
                        [
                            "batch.x.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "batch.x.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.rand(n_samples, self.n_atom_type, self.n_atom, device=self.device) * (1 + c)",
                            "BinOp"
                        ],
                        [
                            "gen_x.detach()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_481": {
                "variable": {
                    "value": "noise_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(n_samples, self.n_edge_type, self.n_atom, self.n_atom, device=self.device)",
                            "Call"
                        ],
                        [
                            "gen_adj.detach()",
                            "Call"
                        ],
                        [
                            "(gen_adj + gen_adj.permute(0, 1, 3, 2)) / 2",
                            "BinOp"
                        ],
                        [
                            "batch.adj.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "batch.adj.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.rand(n_samples, self.n_edge_type, self.n_atom, self.n_atom, device=self.device)",
                            "Call"
                        ],
                        [
                            "gen_adj.detach()",
                            "Call"
                        ],
                        [
                            "(gen_adj + gen_adj.permute(0, 1, 3, 2)) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_85": {
                "variable": {
                    "value": "neg_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.adj.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "pos_adj + c * torch.rand_like(pos_adj, device=self.device)",
                            "BinOp"
                        ],
                        [
                            "rescale_adj(pos_adj)",
                            "Call"
                        ],
                        [
                            "batch.adj.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "rescale_adj(pos_adj)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_98": {
                "variable": {
                    "value": "noise_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand_like(pos_x, device=self.device) * (1 + c)",
                            "BinOp"
                        ],
                        [
                            "neg_x.detach()",
                            "Call"
                        ],
                        [
                            "torch.rand_like(pos_x, device=self.device) * (1 + c)",
                            "BinOp"
                        ],
                        [
                            "neg_x.detach()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_99": {
                "variable": {
                    "value": "noise_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand_like(pos_adj, device=self.device)",
                            "Call"
                        ],
                        [
                            "neg_adj.detach()",
                            "Call"
                        ],
                        [
                            "torch.rand_like(pos_adj, device=self.device)",
                            "Call"
                        ],
                        [
                            "neg_adj.detach()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_180": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_185": {
                "*size": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_atom_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.n_atom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_275": {
                "variable": {
                    "value": "neg_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.adj.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "pos_adj + c * torch.rand_like(pos_adj, device=self.device)",
                            "BinOp"
                        ],
                        [
                            "rescale_adj(pos_adj)",
                            "Call"
                        ],
                        [
                            "batch.adj.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "rescale_adj(pos_adj)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_288": {
                "variable": {
                    "value": "noise_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand_like(pos_x, device=self.device) * (1 + c)",
                            "BinOp"
                        ],
                        [
                            "neg_x.detach()",
                            "Call"
                        ],
                        [
                            "torch.rand_like(pos_x, device=self.device) * (1 + c)",
                            "BinOp"
                        ],
                        [
                            "neg_x.detach()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_289": {
                "variable": {
                    "value": "noise_adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand_like(pos_adj, device=self.device)",
                            "Call"
                        ],
                        [
                            "neg_adj.detach()",
                            "Call"
                        ],
                        [
                            "torch.rand_like(pos_adj, device=self.device)",
                            "Call"
                        ],
                        [
                            "neg_adj.detach()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_371": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_454": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_559": {
                "f": {
                    "value": "checkpoint_path_qed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_562": {
                "f": {
                    "value": "checkpoint_path_plogp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_567": {
                "*size": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_atom_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.n_atom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_154": {
                "obj": {
                    "value": "self.energy_function.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'epoch_{}.pt'.format(epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_344": {
                "obj": {
                    "value": "self.energy_function.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'epoch_{}.pt'.format(epoch + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_like_78": {
                "input": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.x.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "pos_x + c * torch.rand_like(pos_x, device=self.device)",
                            "BinOp"
                        ],
                        [
                            "batch.x.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_80": {
                "input": {
                    "value": "pos_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.adj.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "pos_adj + c * torch.rand_like(pos_adj, device=self.device)",
                            "BinOp"
                        ],
                        [
                            "rescale_adj(pos_adj)",
                            "Call"
                        ],
                        [
                            "batch.adj.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "rescale_adj(pos_adj)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_84": {
                "input": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.x.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "pos_x + c * torch.rand_like(pos_x, device=self.device)",
                            "BinOp"
                        ],
                        [
                            "batch.x.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_266": {
                "input": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.x.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "pos_x + c * torch.rand_like(pos_x, device=self.device)",
                            "BinOp"
                        ],
                        [
                            "batch.x.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_268": {
                "input": {
                    "value": "pos_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.adj.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "pos_adj + c * torch.rand_like(pos_adj, device=self.device)",
                            "BinOp"
                        ],
                        [
                            "rescale_adj(pos_adj)",
                            "Call"
                        ],
                        [
                            "batch.adj.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "rescale_adj(pos_adj)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_like_274": {
                "input": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.x.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "pos_x + c * torch.rand_like(pos_x, device=self.device)",
                            "BinOp"
                        ],
                        [
                            "batch.x.to(self.device).to(dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_327": {
                "input": {
                    "value": "pos_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.y.to(self.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dig/ggraph/method/GraphEBM/util.py": {
        "torch": {
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_39": {
                "input": {
                    "value": "torch.min(p.grad.data, bound)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_38": {
                "input": {
                    "value": "exp_avg_sq / (1 - beta2 ** step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_39": {
                "input": {
                    "value": "p.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/method/JTVAE/fast_jtnn/datautils.py": {
        "torch": {
            "DataLoader_78": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PairTreeDataset(batches, self.vocab, self.y_assm)",
                            "Call"
                        ],
                        [
                            "MolTreeDataset(batches, self.vocab, self.assm)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_44": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PairTreeDataset(batches, self.vocab, self.y_assm)",
                            "Call"
                        ],
                        [
                            "MolTreeDataset(batches, self.vocab, self.assm)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/method/JTVAE/fast_jtnn/jtmpn.py": {
        "torch": {
            "Linear_43": {
                "variable": {
                    "value": "self.W_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ATOM_FDIM + BOND_FDIM",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.W_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ATOM_FDIM + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "graph_message",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "binput",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W_i(fbonds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_65": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tree_message, graph_message]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "ainput",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fatoms, nei_message]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_69": {
                "variable": {
                    "value": "atom_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_o(ainput)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "mol_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mol_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mol_vecs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_133": {
                "variable": {
                    "value": "fatoms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fatoms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_var(fatoms)",
                            "Call"
                        ],
                        [
                            "torch.stack(fatoms, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_134": {
                "variable": {
                    "value": "fbonds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fbonds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_var(fbonds)",
                            "Call"
                        ],
                        [
                            "torch.stack(fbonds, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "agraph",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_atoms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "total_atoms + n_atoms",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "MAX_NB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_136": {
                "variable": {
                    "value": "bgraph",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_bonds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(all_bonds)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "MAX_NB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "int"
                        ]
                    ]
                }
            },
            "cat_58": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tree_message, graph_message]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "graph_message",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "binput + nei_message",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_113": {
                "tensors": {
                    "value": "[fatoms[x], bfeature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_118": {
                "tensors": {
                    "value": "[fatoms[y], bfeature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/method/JTVAE/fast_jtnn/jtmpn_bo.py": {
        "torch": {
            "Linear_42": {
                "variable": {
                    "value": "self.W_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ATOM_FDIM + BOND_FDIM",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.W_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ATOM_FDIM + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_101": {
                "variable": {
                    "value": "fatoms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fatoms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(fatoms, 0)",
                            "Call"
                        ],
                        [
                            "create_var(fatoms)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_102": {
                "variable": {
                    "value": "fbonds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fbonds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(fbonds, 0)",
                            "Call"
                        ],
                        [
                            "create_var(fbonds)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "agraph",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_atoms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "total_atoms + n_atoms",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "MAX_NB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "bgraph",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_bonds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(all_bonds)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "MAX_NB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "stack_105": {
                "variable": {
                    "value": "tree_message",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_mess",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tree_message, graph_message]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "ainput",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fatoms, nei_message]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_144": {
                "variable": {
                    "value": "mol_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mol_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(mol_vecs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tree_message, graph_message]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_80": {
                "tensors": {
                    "value": "[fatoms[x], bfeature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "tensors": {
                    "value": "[fatoms[y], bfeature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/method/JTVAE/fast_jtnn/jtnn_dec.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.W_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.U_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.W_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + latent_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + latent_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.U_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.W_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.U_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_44": {
                "variable": {
                    "value": "self.pred_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_45": {
                "variable": {
                    "value": "self.stop_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "input_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hiddens, tree_contexts]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "output_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "V(input_vec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_169": {
                "variable": {
                    "value": "cur_o_nei",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cur_o_nei",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(cur_o_nei, dim=0).view(-1, MAX_NB, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "torch.stack(cur_o_nei, dim=0).view(-1, MAX_NB, self.hidden_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_173": {
                "variable": {
                    "value": "stop_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_x, cur_o]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "pred_contexts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(pred_contexts, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "pred_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(pred_hiddens, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_186": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.aggregate(pred_hiddens, pred_contexts, x_tree_vecs, 'word')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_187": {
                "variable": {
                    "value": "pred_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "pred_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_var(torch.LongTensor(pred_targets))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_191": {
                "variable": {
                    "value": "stop_contexts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "stop_contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(stop_contexts, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "stop_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "stop_hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(stop_hiddens, dim=0)",
                            "Call"
                        ],
                        [
                            "F.relu(self.U_i(stop_hiddens))",
                            "Call"
                        ],
                        [
                            "torch.cat([cur_x, cur_h], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.U_i(stop_hiddens))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_193": {
                "variable": {
                    "value": "stop_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.U_i(stop_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ge_200": {
                "variable": {
                    "value": "stops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stop_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.aggregate(stop_hiddens, stop_contexts, x_tree_vecs, 'stop')",
                            "Call"
                        ],
                        [
                            "stop_scores.squeeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_201": {
                "variable": {
                    "value": "stop_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ge(stop_scores, 0).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "stop_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_var(torch.Tensor(stop_targets))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_217": {
                "variable": {
                    "value": "(_, root_wid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "root_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.aggregate(init_hiddens, contexts, x_tree_vecs, 'word')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_22": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_116": {
                "variable": {
                    "value": "cur_h_nei",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cur_h_nei",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(cur_h_nei, dim=0).view(-1, MAX_NB, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "[h[node_y.idx, node_x.idx] for node_y in node_x.neighbors]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(cur_h_nei, dim=0).view(1, -1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "zero_pad",
                            "variable"
                        ],
                        [
                            "[h[node_y.idx, node_x.idx] for node_y in node_x.neighbors if node_y.idx != node_fa.idx]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(cur_h_nei, dim=0).view(1, -1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "zero_pad",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_122": {
                "variable": {
                    "value": "cur_o_nei",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cur_o_nei",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(cur_o_nei, dim=0).view(-1, MAX_NB, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "torch.stack(cur_o_nei, dim=0).view(-1, MAX_NB, self.hidden_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "stop_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_x, cur_o]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "stop_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_x, cur_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_243": {
                "variable": {
                    "value": "stop_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.U_i(stop_hiddens)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "*size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_188": {
                "input": {
                    "value": "pred_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eq(preds, pred_targets).float()",
                            "Call"
                        ],
                        [
                            "torch.sum(pred_acc) / pred_targets.nelement()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_202": {
                "input": {
                    "value": "stop_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eq(stops, stop_targets).float()",
                            "Call"
                        ],
                        [
                            "torch.sum(stop_acc) / stop_targets.nelement()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_210": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_211": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_232": {
                "variable": {
                    "value": "cur_h_nei",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cur_h_nei",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(cur_h_nei, dim=0).view(-1, MAX_NB, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "[h[node_y.idx, node_x.idx] for node_y in node_x.neighbors]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(cur_h_nei, dim=0).view(1, -1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "zero_pad",
                            "variable"
                        ],
                        [
                            "[h[node_y.idx, node_x.idx] for node_y in node_x.neighbors if node_y.idx != node_fa.idx]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(cur_h_nei, dim=0).view(1, -1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "zero_pad",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "*size": {
                    "value": "len(mol_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_260": {
                "variable": {
                    "value": "sort_wid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(pred_score, dim=1).squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_263": {
                "variable": {
                    "value": "(_, sort_wid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.aggregate(new_h, contexts, x_tree_vecs, 'word')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_295": {
                "variable": {
                    "value": "cur_h_nei",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cur_h_nei",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(cur_h_nei, dim=0).view(-1, MAX_NB, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "[h[node_y.idx, node_x.idx] for node_y in node_x.neighbors]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(cur_h_nei, dim=0).view(1, -1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "zero_pad",
                            "variable"
                        ],
                        [
                            "[h[node_y.idx, node_x.idx] for node_y in node_x.neighbors if node_y.idx != node_fa.idx]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(cur_h_nei, dim=0).view(1, -1, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "zero_pad",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bernoulli_248": {
                "input": {
                    "value": "torch.sigmoid(stop_score)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_261": {
                "input": {
                    "value": "pred_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.aggregate(new_h, contexts, x_tree_vecs, 'word')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_249": {
                "input": {
                    "value": "stop_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.aggregate(stop_hiddens, contexts, x_tree_vecs, 'stop')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dig/ggraph/method/JTVAE/fast_jtnn/jtnn_enc.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.outputNN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * hidden_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "node_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fnode, mess_nei.sum(dim=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "tree_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.W_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.W_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.U_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_112": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "h.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "z_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, sum_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_119": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_z(z_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_1 + r_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "h_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, sum_gated_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_128": {
                "variable": {
                    "value": "pre_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_h(h_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_27": {
                "*size": {
                    "value": "mess_graph.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/method/JTVAE/fast_jtnn/jtnn_enc_bo.py": {
        "torch": {
            "cat_116": {
                "variable": {
                    "value": "h_nei",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_nei",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(h_nei, dim=0).view(-1, MAX_NB, hidden_size)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "node_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_vec, sum_h_nei]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.W_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.embedding_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.W_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.U_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.embedding_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.embedding_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.embedding_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.embedding_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Embedding_18": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.embedding_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_63": {
                "variable": {
                    "value": "cur_h_nei",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cur_h_nei",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(cur_h_nei, dim=0).view(-1, MAX_NB, self.hidden_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding.embedding_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/method/JTVAE/fast_jtnn/jtnn_vae.py": {
        "torch": {
            "Linear_36": {
                "variable": {
                    "value": "self.A_assm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_37": {
                "variable": {
                    "value": "self.assm_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.T_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.T_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.G_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.G_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_77": {
                "variable": {
                    "value": "z_tree",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_78": {
                "variable": {
                    "value": "z_mol",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_107": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_mol_vecs.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "cand_vecs.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_107": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_203": {
                "variable": {
                    "value": "aroma_score",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_54": {
                "tensors": {
                    "value": "[tree_vecs, mol_vecs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_213": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multinomial_218": {
                "variable": {
                    "value": "cand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.view(1, -1), dim=1).squeeze() + 1e-07",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "probs.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_220": {
                "variable": {
                    "value": "(_, cand_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(x_mol_vecs.unsqueeze(1), cand_vecs.unsqueeze(-1)).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.mv(cand_vecs, x_mol_vecs) + aroma_score",
                            "BinOp"
                        ],
                        [
                            "torch.Tensor([1.0])",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_29": {
                "num_embeddings": {
                    "value": "vocab.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_31": {
                "num_embeddings": {
                    "value": "vocab.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_61": {
                "input": {
                    "value": "self.T_var(tree_vecs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_62": {
                "input": {
                    "value": "self.G_var(mol_vecs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_63": {
                "tensors": {
                    "value": "[tree_var, mol_var]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_68": {
                "input": {
                    "value": "W_var(z_vecs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_like_72": {
                "input": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W_mean(z_vecs)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_70": {
                "input": {
                    "value": "1.0 + z_log_var - z_mean * z_mean - torch.exp(z_log_var)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_73": {
                "input": {
                    "value": "z_log_var / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mv_211": {
                "input": {
                    "value": "cand_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.jtmpn(fatoms, fbonds, agraph, bgraph, scope, x_tree_mess)",
                            "Call"
                        ],
                        [
                            "self.jtmpn(fatoms, fbonds, agraph, bgraph, scope, y_tree_mess[0])",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "x_mol_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_mol_vecs.index_select(0, batch_idx)",
                            "Call"
                        ],
                        [
                            "self.A_assm(x_mol_vecs)",
                            "Call"
                        ],
                        [
                            "self.A_assm(x_mol_vecs).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_217": {
                "input": {
                    "value": "scores.view(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_71": {
                "input": {
                    "value": "z_log_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.abs(W_var(z_vecs))",
                            "UnaryOp"
                        ]
                    ]
                }
            }
        }
    },
    "dig/ggraph/method/JTVAE/fast_jtnn/jtnn_vae_bo.py": {
        "torch": {
            "Embedding_37": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.T_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_size / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.T_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_size / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.G_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_size / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.G_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_size / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_49": {
                "variable": {
                    "value": "self.assm_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tree_mean, mol_mean]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "z_log_var",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tree_log_var, mol_log_var]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "all_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tree_vec, mol_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_131": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mol_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mpn(mol2graph(smiles_batch))",
                            "Call"
                        ],
                        [
                            "mol_mean + torch.exp(mol_log_var / 2) * epsilon",
                            "BinOp"
                        ],
                        [
                            "mol_vec.index_select(0, batch_idx)",
                            "Call"
                        ],
                        [
                            "mol_vec.view(-1, 1, self.latent_size / 2)",
                            "Call"
                        ],
                        [
                            "mol_mean + torch.exp(mol_log_var / 2) * epsilon",
                            "BinOp"
                        ],
                        [
                            "mol_mean + torch.exp(mol_log_var / 2) * epsilon",
                            "BinOp"
                        ],
                        [
                            "create_var(torch.randn(1, self.latent_size / 2), False)",
                            "Call"
                        ],
                        [
                            "create_var(torch.randn(1, self.latent_size / 2), False)",
                            "Call"
                        ],
                        [
                            "mol_vec.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "cand_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.jtmpn(cands, tree_mess)",
                            "Call"
                        ],
                        [
                            "self.G_mean(cand_vec)",
                            "Call"
                        ],
                        [
                            "cand_vec.view(-1, self.latent_size / 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_131": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_52": {
                "variable": {
                    "value": "self.stereo_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "[tree_mean, mol_mean]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_312": {
                "variable": {
                    "value": "cand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax()(scores.view(1, -1)).squeeze() + 1e-05",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "probs.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_314": {
                "variable": {
                    "value": "(_, cand_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(mol_vec, cand_vec).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.nn.CosineSimilarity()(stereo_cands, stereo_labels)",
                            "Call"
                        ],
                        [
                            "nn.CosineSimilarity()(stereo_vecs, mol_vec)",
                            "Call"
                        ],
                        [
                            "torch.mv(cand_vecs, mol_vec) * 20",
                            "BinOp"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_80": {
                "input": {
                    "value": "self.T_var(tree_vec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_83": {
                "input": {
                    "value": "self.G_var(mol_vec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_91": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(mol_batch)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.latent_size / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_94": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(mol_batch)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.latent_size / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CosineSimilarity_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_197": {
                "input": {
                    "value": "self.T_var(tree_vec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_200": {
                "input": {
                    "value": "self.G_var(mol_vec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_202": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_size / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_204": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_size / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_215": {
                "input": {
                    "value": "self.T_var(tree_vec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_218": {
                "input": {
                    "value": "self.G_var(mol_vec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_232": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_size / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_233": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_size / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_237": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_size / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_238": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_size / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CosineSimilarity_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mv_308": {
                "input": {
                    "value": "cand_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.jtmpn(cands, tree_mess)",
                            "Call"
                        ],
                        [
                            "self.G_mean(cand_vecs)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "mol_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mpn(mol2graph(smiles_batch))",
                            "Call"
                        ],
                        [
                            "mol_mean + torch.exp(mol_log_var / 2) * epsilon",
                            "BinOp"
                        ],
                        [
                            "mol_vec.index_select(0, batch_idx)",
                            "Call"
                        ],
                        [
                            "mol_vec.view(-1, 1, self.latent_size / 2)",
                            "Call"
                        ],
                        [
                            "mol_mean + torch.exp(mol_log_var / 2) * epsilon",
                            "BinOp"
                        ],
                        [
                            "mol_mean + torch.exp(mol_log_var / 2) * epsilon",
                            "BinOp"
                        ],
                        [
                            "create_var(torch.randn(1, self.latent_size / 2), False)",
                            "Call"
                        ],
                        [
                            "create_var(torch.randn(1, self.latent_size / 2), False)",
                            "Call"
                        ],
                        [
                            "mol_vec.squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_88": {
                "input": {
                    "value": "1.0 + z_log_var - z_mean * z_mean - torch.exp(z_log_var)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_93": {
                "input": {
                    "value": "tree_log_var / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_96": {
                "input": {
                    "value": "mol_log_var / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_203": {
                "input": {
                    "value": "tree_log_var / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_205": {
                "input": {
                    "value": "mol_log_var / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_222": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_size / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_224": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_size / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_169": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_223": {
                "input": {
                    "value": "tree_log_var / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_225": {
                "input": {
                    "value": "mol_log_var / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_89": {
                "input": {
                    "value": "z_log_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([tree_log_var, mol_log_var], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_311": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/method/JTVAE/fast_jtnn/jtprop_vae.py": {
        "torch": {
            "Embedding_37": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.T_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.T_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.G_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.G_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.propNN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.latent_size, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_54": {
                "variable": {
                    "value": "self.prop_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_55": {
                "variable": {
                    "value": "self.assm_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_56": {
                "variable": {
                    "value": "self.stereo_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tree_mean, mol_mean]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "z_log_var",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tree_log_var, mol_log_var]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "all_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tree_vec, mol_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_135": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mol_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mpn(mol2graph(smiles_batch))",
                            "Call"
                        ],
                        [
                            "mol_mean + torch.exp(mol_log_var / 2) * epsilon",
                            "BinOp"
                        ],
                        [
                            "mol_vec.index_select(0, batch_idx)",
                            "Call"
                        ],
                        [
                            "mol_vec.view(-1, 1, self.latent_size // 2)",
                            "Call"
                        ],
                        [
                            "mol_mean + torch.exp(mol_log_var / 2) * epsilon",
                            "BinOp"
                        ],
                        [
                            "create_var(torch.randn(1, self.latent_size // 2), False)",
                            "Call"
                        ],
                        [
                            "mol_vec.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "cand_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.jtmpn(cands, tree_mess)",
                            "Call"
                        ],
                        [
                            "self.G_mean(cand_vec)",
                            "Call"
                        ],
                        [
                            "cand_vec.view(-1, self.latent_size // 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_135": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tree_mean, mol_mean]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "log_var",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tree_log_var, mol_log_var]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_270": {
                "variable": {
                    "value": "(tree_vec, mol_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "visited[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_75": {
                "tensors": {
                    "value": "[tree_mean, mol_mean]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_245": {
                "variable": {
                    "value": "(tree_vec, mol_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "visited[mid]",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_348": {
                "variable": {
                    "value": "cand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax()(scores.view(1, -1)).squeeze() + 1e-05",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "probs.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_350": {
                "variable": {
                    "value": "(_, cand_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(mol_vec, cand_vec).squeeze()",
                            "Call"
                        ],
                        [
                            "torch.nn.CosineSimilarity()(stereo_cands, stereo_labels)",
                            "Call"
                        ],
                        [
                            "nn.CosineSimilarity()(stereo_vecs, mol_vec)",
                            "Call"
                        ],
                        [
                            "torch.mv(cand_vecs, mol_vec) * 20",
                            "BinOp"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_84": {
                "input": {
                    "value": "self.T_var(tree_vec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_87": {
                "input": {
                    "value": "self.G_var(mol_vec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_95": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(mol_batch)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.latent_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_98": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(mol_batch)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.latent_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CosineSimilarity_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_199": {
                "input": {
                    "value": "self.T_var(tree_vec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_202": {
                "input": {
                    "value": "self.G_var(mol_vec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_204": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_206": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_211": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_212": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_225": {
                "input": {
                    "value": "self.T_var(tree_vec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_228": {
                "input": {
                    "value": "self.G_var(mol_vec)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CosineSimilarity_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mv_344": {
                "input": {
                    "value": "cand_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.jtmpn(cands, tree_mess)",
                            "Call"
                        ],
                        [
                            "self.G_mean(cand_vecs)",
                            "Call"
                        ]
                    ]
                },
                "vec": {
                    "value": "mol_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mpn(mol2graph(smiles_batch))",
                            "Call"
                        ],
                        [
                            "mol_mean + torch.exp(mol_log_var / 2) * epsilon",
                            "BinOp"
                        ],
                        [
                            "mol_vec.index_select(0, batch_idx)",
                            "Call"
                        ],
                        [
                            "mol_vec.view(-1, 1, self.latent_size // 2)",
                            "Call"
                        ],
                        [
                            "mol_mean + torch.exp(mol_log_var / 2) * epsilon",
                            "BinOp"
                        ],
                        [
                            "create_var(torch.randn(1, self.latent_size // 2), False)",
                            "Call"
                        ],
                        [
                            "mol_vec.squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_92": {
                "input": {
                    "value": "1.0 + z_log_var - z_mean * z_mean - torch.exp(z_log_var)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_97": {
                "input": {
                    "value": "tree_log_var / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_100": {
                "input": {
                    "value": "mol_log_var / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_205": {
                "input": {
                    "value": "tree_log_var / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_207": {
                "input": {
                    "value": "mol_log_var / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_236": {
                "outputs": {
                    "value": "prop_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.propNN(cur_vec).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "cur_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_var(mean.data, True)",
                            "Call"
                        ],
                        [
                            "cur_vec.data + lr * grad.data",
                            "BinOp"
                        ],
                        [
                            "create_var(cur_vec, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_347": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_172": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_93": {
                "input": {
                    "value": "z_log_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([tree_log_var, mol_log_var], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_347": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/method/JTVAE/fast_jtnn/mpn.py": {
        "torch": {
            "zeros_42": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ATOM_FDIM + BOND_FDIM",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "fatoms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fatoms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(fatoms, 0)",
                            "Call"
                        ],
                        [
                            "create_var(fatoms)",
                            "Call"
                        ],
                        [
                            "torch.stack(fatoms, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_77": {
                "variable": {
                    "value": "fbonds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fbonds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(fbonds, 0)",
                            "Call"
                        ],
                        [
                            "create_var(fbonds)",
                            "Call"
                        ],
                        [
                            "torch.stack(fbonds, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "agraph",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_atoms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "total_atoms + n_atoms",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "MAX_NB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "bgraph",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_bonds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(all_bonds)",
                            "Call"
                        ],
                        [
                            "len(all_bonds)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "MAX_NB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.W_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ATOM_FDIM + BOND_FDIM",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.W_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.W_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ATOM_FDIM + hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "binput",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W_i(fbonds)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_122": {
                "variable": {
                    "value": "ainput",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fatoms, nei_message]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_123": {
                "variable": {
                    "value": "atom_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_o(ainput)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_131": {
                "variable": {
                    "value": "mol_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ATOM_FDIM + BOND_FDIM",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_170": {
                "variable": {
                    "value": "fatoms",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fatoms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(fatoms, 0)",
                            "Call"
                        ],
                        [
                            "create_var(fatoms)",
                            "Call"
                        ],
                        [
                            "torch.stack(fatoms, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_171": {
                "variable": {
                    "value": "fbonds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fbonds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(fbonds, 0)",
                            "Call"
                        ],
                        [
                            "create_var(fbonds)",
                            "Call"
                        ],
                        [
                            "torch.stack(fbonds, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_172": {
                "variable": {
                    "value": "agraph",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_atoms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "total_atoms + n_atoms",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "MAX_NB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "int"
                        ]
                    ]
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "bgraph",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_bonds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(all_bonds)",
                            "Call"
                        ],
                        [
                            "len(all_bonds)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "MAX_NB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "int"
                        ]
                    ]
                }
            },
            "relu_118": {
                "variable": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "binput + nei_message",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_64": {
                "tensors": {
                    "value": "[fatoms[x], bond_features(bond)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "[fatoms[y], bond_features(bond)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_158": {
                "tensors": {
                    "value": "[fatoms[x], bond_features(bond)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "tensors": {
                    "value": "[fatoms[y], bond_features(bond)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/method/JTVAE/fast_jtnn/nnutils.py": {
        "torch": {
            "cat_62": {
                "variable": {
                    "value": "z_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, sum_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_63": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_z(z_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_67": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_1 + r_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "h_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, sum_gated_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_72": {
                "variable": {
                    "value": "pre_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_h(h_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_31": {
                "variable": {
                    "value": "tensor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, pad_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_32": {
                "tensors": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_43": {
                "tensors": {
                    "value": "tlist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_53": {
                "variable": {
                    "value": "cur_vecs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor[st:st + le]",
                            "Subscript"
                        ],
                        [
                            "F.pad(cur_vecs, (0, 0, 0, max_len - le))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, max_len - le)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_56": {
                "tensors": {
                    "value": "batch_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph/method/JTVAE/jtvae.py": {
        "torch": {
            "Adam_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.vae.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ExponentialLR_132": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(self.vae.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "optim.Adam(self.prop_vae.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "anneal_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_216": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.prop_vae.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ExponentialLR_217": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(self.vae.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "optim.Adam(self.prop_vae.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_188": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_125": {
                "f": {
                    "value": "'checkpoints' + '/model.iter-' + str(load_epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__150": {
                "parameters": {
                    "value": "self.vae.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip_norm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_167": {
                "obj": {
                    "value": "self.vae.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'saved' + '/model.iter-' + str(total_step)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph3D/dataset/ggraph3D_dataset.py": {
        "torch": {
            "tensor_31": {
                "variable": {
                    "value": "num_steps_list",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0] + [len(data_batch_list[i]['new_atom_type']) for i in range(len(data_batch_list) - 1)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cumsum_32": {
                "variable": {
                    "value": "batch_idx_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_steps_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0] + [len(data_batch_list[i]['new_atom_type']) for i in range(len(data_batch_list) - 1)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "repeats",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[len(mol_dict['batch']) for mol_dict in data_batch_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "repeat_interleave_34": {
                "variable": {
                    "value": "batch_idx_repeated_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_idx_offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cumsum(num_steps_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "repeats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([len(mol_dict['batch']) for mol_dict in data_batch_list])",
                            "Call"
                        ],
                        [
                            "torch.tensor([len(mol_dict[key]) for mol_dict in data_batch_list])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "num_atoms_list",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0] + [len(data_batch_list[i]['atom_type']) for i in range(len(data_batch_list) - 1)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cumsum_39": {
                "variable": {
                    "value": "atom_idx_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_atoms_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0] + [len(data_batch_list[i]['atom_type']) for i in range(len(data_batch_list) - 1)])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "data_batch[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mol_dict[key] for mol_dict in data_batch_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "repeats",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[len(mol_dict[key]) for mol_dict in data_batch_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "repeat_interleave_42": {
                "variable": {
                    "value": "atom_idx_repeated_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "atom_idx_offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cumsum(num_atoms_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "repeats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([len(mol_dict['batch']) for mol_dict in data_batch_list])",
                            "Call"
                        ],
                        [
                            "torch.tensor([len(mol_dict[key]) for mol_dict in data_batch_list])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_211": {
                "variable": {
                    "value": "atom_valency",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "con_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([num_atoms, num_atoms], dtype=int)",
                            "Call"
                        ],
                        [
                            "con_mat[perm][:, perm]",
                            "Subscript"
                        ],
                        [
                            "con_mat[node_perm][:, node_perm]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_213": {
                "variable": {
                    "value": "squared_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.square(position[:, None, :] - position[None, :, :])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "node_perm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.tensor([0]), torch.tensor(target_node_id))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_228": {
                "variable": {
                    "value": "focus_node_id",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "focus_node_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(focus_node_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_232": {
                "variable": {
                    "value": "steps_cannot_focus",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cumsum_234": {
                "variable": {
                    "value": "idx_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(len(atom_type) - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_35": {
                "tensors": {
                    "value": "[mol_dict['batch'] for mol_dict in data_batch_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_87": {
                "variable": {
                    "value": "(self.atom_type_list, self.position_list, self.con_mat_list)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_156": {
                "obj": {
                    "value": "(self.atom_type_list, self.position_list, self.con_mat_list)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "steps_cannot_focus",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(steps_cannot_focus, (valency_sum == atom_valency[:i + 1, None]).float())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_243": {
                "variable": {
                    "value": "one_step_dis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_pos - focus_pos",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "steps_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(steps_dist, one_step_dis.view(1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_280": {
                "variable": {
                    "value": "steps_position",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(steps_position, one_step_position)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_282": {
                "variable": {
                    "value": "steps_atom_type",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(steps_atom_type, one_step_atom_type.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_283": {
                "variable": {
                    "value": "steps_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(steps_batch, torch.tensor([i]).repeat(i + 1).view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_43": {
                "tensors": {
                    "value": "[mol_dict[key] for mol_dict in data_batch_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_213": {
                "input": {
                    "value": "position[:, None, :] - position[None, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_229": {
                "input": {
                    "value": "focus_node_id[:, None] == node_perm[None, :]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "empty_230": {
                "*size": {
                    "value": "[0, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_231": {
                "*size": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "atom_type.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_233": {
                "*size": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_234": {
                "start": {
                    "value": "len(atom_type) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_247": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[i + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmin_250": {
                "variable": {
                    "value": "one_step_c1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c1_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squared_dist[one_step_focus, :i + 1][mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_253": {
                "variable": {
                    "value": "steps_c1_focus",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(steps_c1_focus, torch.tensor([one_step_c1, one_step_focus]).view(1, 2) + idx_offsets[i])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cross_257": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c1_pos - focus_pos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "new_pos - focus_pos",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_257": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan2_258": {
                "variable": {
                    "value": "one_step_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(c1_pos - focus_pos, new_pos - focus_pos).norm(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * (focus_pos - c1_pos)).sum(dim=-1) / torch.norm(focus_pos - c1_pos)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((c1_pos - focus_pos) * (new_pos - focus_pos)).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_259": {
                "variable": {
                    "value": "steps_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(steps_angle, one_step_angle.view(1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "data": {
                    "value": "atom_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([atomic_num_to_type[atom.GetAtomicNum()] for atom in mol.GetAtoms()])",
                            "Call"
                        ],
                        [
                            "atom_type[node_perm]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_153": {
                "data": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mols.GetItemText(idx).split('\\n')[4:4 + num_atoms]",
                            "Subscript"
                        ],
                        [
                            "np.array([[float(x) for x in line.split()[:3]] for line in position], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "position[node_perm]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_154": {
                "data": {
                    "value": "con_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([num_atoms, num_atoms], dtype=int)",
                            "Call"
                        ],
                        [
                            "con_mat[perm][:, perm]",
                            "Subscript"
                        ],
                        [
                            "con_mat[node_perm][:, node_perm]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_220": {
                "data": {
                    "value": "target_node_id",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmin_264": {
                "variable": {
                    "value": "one_step_c2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c2_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squared_dist[one_step_c1, :i + 1][mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_269": {
                "variable": {
                    "value": "steps_c2_c1_focus",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(steps_c2_c1_focus, torch.tensor([one_step_c2, one_step_c1, one_step_focus]).view(1, 3) + idx_offsets[i])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cross_272": {
                "variable": {
                    "value": "plane1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "focus_pos - c1_pos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "new_pos - c1_pos",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_273": {
                "variable": {
                    "value": "plane2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "focus_pos - c1_pos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "c2_pos - c1_pos",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_276": {
                "variable": {
                    "value": "one_step_torsion",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(c1_pos - focus_pos, new_pos - focus_pos).norm(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * (focus_pos - c1_pos)).sum(dim=-1) / torch.norm(focus_pos - c1_pos)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((c1_pos - focus_pos) * (new_pos - focus_pos)).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_277": {
                "variable": {
                    "value": "steps_torsion",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(steps_torsion, one_step_torsion.view(1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_283": {
                "data": {
                    "value": "[i]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_275": {
                "input": {
                    "value": "focus_pos - c1_pos",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_253": {
                "data": {
                    "value": "[one_step_c1, one_step_focus]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_269": {
                "data": {
                    "value": "[one_step_c2, one_step_c1, one_step_focus]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cross_275": {
                "input": {
                    "value": "plane1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(focus_pos - c1_pos, new_pos - c1_pos)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "plane2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(focus_pos - c1_pos, c2_pos - c1_pos)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dig/ggraph3D/evaluation/metric.py": {
        "torch": {
            "tensor_73": {
                "data": {
                    "value": "target_bond_dists[bond_type]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph3D/method/G_SphereNet/gspherenet.py": {
        "torch": {
            "Adam_48": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BCELoss_49": {
                "variable": {
                    "value": "ce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_28": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_64": {
                "variable": {
                    "value": "ll_node",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / 2 * node_out[0] ** 2 - node_out[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_65": {
                "variable": {
                    "value": "ll_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / 2 * dist_out[0] ** 2 - dist_out[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_66": {
                "variable": {
                    "value": "ll_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / 2 * angle_out[0] ** 2 - angle_out[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_67": {
                "variable": {
                    "value": "ll_torsion",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / 2 * torsion_out[0] ** 2 - torsion_out[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_24": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_82": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'model_ckpt_{}.pth'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph3D/method/G_SphereNet/model/att.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.q_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "q_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.k_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "k_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.v_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "v_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "repeat_interleave_27": {
                "variable": {
                    "value": "query_proj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q_proj(query).view(-1, self.n_att_heads, self.d_k)",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(query_proj, query_num_nodes, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "query_num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(key_value_batch[:, None] == query_batch[None, :]).sum(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "repeat_interleave_30": {
                "variable": {
                    "value": "new_query_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(n_querys, device=query_num_nodes.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "query_num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(key_value_batch[:, None] == query_batch[None, :]).sum(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_29": {
                "input": {
                    "value": "query_proj * key_proj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_29": {
                "input": {
                    "value": "torch.tensor(self.d_k, dtype=float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_30": {
                "start": {
                    "value": "n_querys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_proj.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "query_num_nodes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "self.d_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph3D/method/G_SphereNet/model/features.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Parameter_176": {
                "variable": {
                    "value": "self.freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_radial)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_218": {
                "variable": {
                    "value": "rbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(dist) for f in self.bessel_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_221": {
                "variable": {
                    "value": "cbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(angle) for f in self.sph_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_261": {
                "variable": {
                    "value": "rbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(dist) for f in self.bessel_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_262": {
                "variable": {
                    "value": "cbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(angle, phi) for f in self.sph_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_181": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.freq.numel() + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_208": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sym.symbols('x')",
                            "Call"
                        ],
                        [
                            "sym.symbols('x')",
                            "Call"
                        ],
                        [
                            "sym.symbols('x')",
                            "Call"
                        ],
                        [
                            "sym.symbols('x')",
                            "Call"
                        ],
                        [
                            "sym.symbols('x')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_250": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sym.symbols('y')",
                            "Call"
                        ],
                        [
                            "sym.symbols('y')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dig/ggraph3D/method/G_SphereNet/model/geometric_computing.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "arange_28": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "j.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "j.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_48": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_ji",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[idx_i] - pos[idx_j]",
                            "BinOp"
                        ],
                        [
                            "pos[idx_i] - pos[idx_j]",
                            "BinOp"
                        ],
                        [
                            "pos[idx_i] - pos[idx_j]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "pos_jk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[idx_k] - pos[idx_j]",
                            "BinOp"
                        ],
                        [
                            "pos[idx_k] - pos[idx_j]",
                            "BinOp"
                        ],
                        [
                            "pos[idx_k_n] - pos[idx_j]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_48": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan2_49": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(pos_ji, pos_jk).norm(dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cross(pos_ji, pos_jk).norm(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * pos_ji).sum(dim=-1) / dist_ji",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pos_ji * pos_jk).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(pos_ji * pos_jk).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_60": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "j.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "j.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_80": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_ji",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[idx_i] - pos[idx_j]",
                            "BinOp"
                        ],
                        [
                            "pos[idx_i] - pos[idx_j]",
                            "BinOp"
                        ],
                        [
                            "pos[idx_i] - pos[idx_j]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "pos_jk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[idx_k] - pos[idx_j]",
                            "BinOp"
                        ],
                        [
                            "pos[idx_k] - pos[idx_j]",
                            "BinOp"
                        ],
                        [
                            "pos[idx_k_n] - pos[idx_j]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_80": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan2_81": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(pos_ji, pos_jk).norm(dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cross(pos_ji, pos_jk).norm(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * pos_ji).sum(dim=-1) / dist_ji",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pos_ji * pos_jk).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(pos_ji * pos_jk).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_97": {
                "variable": {
                    "value": "plane1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_ji",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[idx_i] - pos[idx_j]",
                            "BinOp"
                        ],
                        [
                            "pos[idx_i] - pos[idx_j]",
                            "BinOp"
                        ],
                        [
                            "pos[idx_i] - pos[idx_j]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "pos_j0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[idx_k] - pos[idx_j]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cross_98": {
                "variable": {
                    "value": "plane2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_ji",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[idx_i] - pos[idx_j]",
                            "BinOp"
                        ],
                        [
                            "pos[idx_i] - pos[idx_j]",
                            "BinOp"
                        ],
                        [
                            "pos[idx_i] - pos[idx_j]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "pos_jk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[idx_k] - pos[idx_j]",
                            "BinOp"
                        ],
                        [
                            "pos[idx_k] - pos[idx_j]",
                            "BinOp"
                        ],
                        [
                            "pos[idx_k_n] - pos[idx_j]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "atan2_101": {
                "variable": {
                    "value": "torsion",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(pos_ji, pos_jk).norm(dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cross(pos_ji, pos_jk).norm(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * pos_ji).sum(dim=-1) / dist_ji",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pos_ji * pos_jk).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(pos_ji * pos_jk).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_110": {
                "input": {
                    "value": "c1c2 * c1f",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_114": {
                "input": {
                    "value": "torsion[:, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_115": {
                "input": {
                    "value": "torsion[:, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_118": {
                "input": {
                    "value": "angle[:, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_119": {
                "input": {
                    "value": "angle[:, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_15": {
                "input": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "j.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_17": {
                "input": {
                    "value": "j2",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "j2.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_115": {
                "input": {
                    "value": "c3c2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c2 - c3",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "c1f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f - c1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_115": {
                "input": {
                    "value": "c1f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f - c1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_118": {
                "input": {
                    "value": "c1f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f - c1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_119": {
                "input": {
                    "value": "c3c4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c3c4_1 + c3c4_2",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_100": {
                "input": {
                    "value": "plane1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(pos_ji, pos_j0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "plane2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(pos_ji, pos_jk)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dig/ggraph3D/method/G_SphereNet/model/net_utils.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_17": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "init_layer(nn.Linear(input_dim, hidden_units))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_46": {
                "input": {
                    "value": "torch.exp(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "any_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_36": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.exp()",
                            "Call"
                        ],
                        [
                            "s.exp()",
                            "Call"
                        ],
                        [
                            "x[:, :self.output_dim]",
                            "Subscript"
                        ],
                        [
                            "self.rescale1(torch.tanh(s))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_43": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_50": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_46": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_90": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.exp()",
                            "Call"
                        ],
                        [
                            "s.exp()",
                            "Call"
                        ],
                        [
                            "x[:, :self.output_dim]",
                            "Subscript"
                        ],
                        [
                            "self.rescale1(torch.tanh(s))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_92": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.exp()",
                            "Call"
                        ],
                        [
                            "s.exp()",
                            "Call"
                        ],
                        [
                            "x[:, :self.output_dim]",
                            "Subscript"
                        ],
                        [
                            "self.rescale1(torch.tanh(s))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dig/ggraph3D/method/G_SphereNet/model/spherenet.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_62": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_node_types",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.lin_rbf_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_radial",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * hidden_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.lin_rbf_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_radial",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.lin_rbf1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_radial",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "basis_emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.lin_rbf2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "basis_emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.lin_sbf1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_spherical * num_radial",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "basis_emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.lin_sbf2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "basis_emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int_emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.lin_t1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_spherical * num_spherical * num_radial",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "basis_emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.lin_t2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "basis_emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int_emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.lin_rbf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_radial",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.lin_kj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.lin_ji",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.lin_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int_emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.lin_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int_emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_102": {
                "variable": {
                    "value": "self.layers_before_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResidualLayer(hidden_channels, act) for _ in range(num_before_skip)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_107": {
                "variable": {
                    "value": "self.layers_after_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResidualLayer(hidden_channels, act) for _ in range(num_after_skip)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "non_iso_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(idx_ji, idx_kj)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "variable": {
                    "value": "self.lin_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_emb_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_181": {
                "variable": {
                    "value": "self.lins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_emb_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_233": {
                "variable": {
                    "value": "self.update_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[update_v(hidden_channels, out_emb_channels, num_output_layers, act) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_236": {
                "variable": {
                    "value": "self.update_es",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[update_e(hidden_channels, int_emb_size, basis_emb_size, num_spherical, num_radial, num_before_skip, num_after_skip, act) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_239": {
                "variable": {
                    "value": "self.update_us",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[update_u() for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[x[i], x[j], rbf0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "in_features": {
                    "value": "out_emb_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_emb_channels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dig/ggraph3D/method/G_SphereNet/model/sphgen.py": {
        "torch": {
            "ModuleList_21": {
                "variable": {
                    "value": "self.node_flow_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ST_Net_Exp(node_feat_dim, num_node_types, hid_dim=hidden_channels, bias=True) for _ in range(num_flow_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_22": {
                "variable": {
                    "value": "self.dist_flow_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ST_Net_Exp(dist_feat_dim, 1, hid_dim=hidden_channels, bias=True) for _ in range(num_flow_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_23": {
                "variable": {
                    "value": "self.angle_flow_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ST_Net_Exp(angle_feat_dim, 1, hid_dim=hidden_channels, bias=True) for _ in range(num_flow_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_24": {
                "variable": {
                    "value": "self.torsion_flow_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ST_Net_Exp(torsion_feat_dim, 1, hid_dim=hidden_channels, bias=True) for _ in range(num_flow_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "one_hot_50": {
                "variable": {
                    "value": "x_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "new_atom_type",
                    "type": "variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.num_node_types",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "node_type_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(local_node_type_feat, global_node_type_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "dist_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(local_dist_feat, global_dist_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "angle_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(local_angle_feat, global_angle_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "torsion_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(local_torsion_feat, global_torsion_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_96": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_gen, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_gen, 1, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "focuses",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_gen, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_51": {
                "*size": {
                    "value": "x_z.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "x_z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_67": {
                "tensors": {
                    "value": "(node_emb[c1_focus[:, 1]], node_emb[c1_focus[:, 0]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "(node_emb[c2_c1_focus[:, 2]], node_emb[c2_c1_focus[:, 1]], node_emb[c2_c1_focus[:, 0]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_85": {
                "variable": {
                    "value": "prior_node",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.num_node_types]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature[0] * torch.ones([self.num_node_types]).cuda()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_86": {
                "variable": {
                    "value": "prior_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([1]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature[1] * torch.ones([1]).cuda()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_87": {
                "variable": {
                    "value": "prior_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([1]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature[2] * torch.ones([1]).cuda()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_88": {
                "variable": {
                    "value": "prior_torsion",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([1]).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature[3] * torch.ones([1]).cuda()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_90": {
                "variable": {
                    "value": "prior_node",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([self.num_node_types])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature[0] * torch.ones([self.num_node_types])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_91": {
                "variable": {
                    "value": "prior_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature[1] * torch.ones([1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_92": {
                "variable": {
                    "value": "prior_angle",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature[2] * torch.ones([1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_93": {
                "variable": {
                    "value": "prior_torsion",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "temperature[3] * torch.ones([1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_108": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(continue_mask).cpu().item()",
                            "Call"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_117": {
                "variable": {
                    "value": "can_focus",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "focus_score < focus_th",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "z > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "logical_not_127": {
                "variable": {
                    "value": "continue_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "complete_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "can_focus.sum(dim=-1) == 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "sum_139": {
                "variable": {
                    "value": "num_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "continue_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_not(complete_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_141": {
                "variable": {
                    "value": "focus_node_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "can_focus.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_146": {
                "variable": {
                    "value": "key_value_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(continue_mask).cpu().item()",
                            "Call"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "node_feat.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "node_type_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(local_node_type_feat, global_node_type_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_151": {
                "variable": {
                    "value": "node_type_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prior_node.sample([num_gen])",
                            "Call"
                        ],
                        [
                            "flow_reverse(self.node_flow_layers, latent_node, node_type_feat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "dist_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(local_dist_feat, global_dist_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z, node_type_id[:, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos, new_pos.view(num_gen, 1, 3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "focuses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(focuses, focus_node_id[:, None])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "new_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dist, torch.zeros_like(dist, device=dist.device), torch.zeros_like(dist, device=dist.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_165": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_gen, i + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_167": {
                "variable": {
                    "value": "c1_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.square(mask_index(mask, pos) - pos_index(focus_node_id, pos))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmin_168": {
                "variable": {
                    "value": "c1_node_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c1_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.square(mask_index(mask, pos) - pos_index(focus_node_id, pos)), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "local_angle_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat_index(focus_node_id, node_emb), feat_index(c1_node_id, node_emb))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "angle_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(local_angle_feat, global_angle_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "*size": {
                    "value": "[self.num_node_types]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "*size": {
                    "value": "[self.num_node_types]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "nonzero_128": {
                "input": {
                    "value": "torch.isnan(focus_score).sum(dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_131": {
                "input": {
                    "value": "torch.isinf(focus_score).sum(dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_135": {
                "input": {
                    "value": "continue_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logical_not(complete_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_145": {
                "start": {
                    "value": "num_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(continue_mask).cpu().item()",
                            "Call"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "node_feat.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "new_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_pos_x, new_pos_y, torch.zeros_like(dist, device=dist.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_186": {
                "variable": {
                    "value": "c2_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.square(mask_index(mask, pos) - pos_index(c1_node_id, pos))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmin_187": {
                "variable": {
                    "value": "c2_node_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c2_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.square(mask_index(mask, pos) - pos_index(c1_node_id, pos)), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "local_torsion_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat_index(focus_node_id, node_emb), feat_index(c1_node_id, node_emb), feat_index(c2_node_id, node_emb))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "torsion_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(local_torsion_feat, global_torsion_feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_85": {
                "*size": {
                    "value": "[self.num_node_types]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_86": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_87": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_90": {
                "*size": {
                    "value": "[self.num_node_types]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_91": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_92": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_93": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_104": {
                "start": {
                    "value": "num_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(continue_mask).cpu().item()",
                            "Call"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_120": {
                "input": {
                    "value": "complete_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "can_focus.sum(dim=-1) == 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "isnan_128": {
                "input": {
                    "value": "focus_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.focus_mlp(node_feat)",
                            "Call"
                        ],
                        [
                            "self.focus_mlp(node_feat).view(num_gen, i + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_128": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "isinf_131": {
                "input": {
                    "value": "focus_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.focus_mlp(node_feat)",
                            "Call"
                        ],
                        [
                            "self.focus_mlp(node_feat).view(num_gen, i + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_131": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_167": {
                "input": {
                    "value": "mask_index(mask, pos) - pos_index(focus_node_id, pos)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_163": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_reverse(self.dist_flow_layers, latent_dist, dist_feat)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "dist.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_166": {
                "start": {
                    "value": "num_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(continue_mask).cpu().item()",
                            "Call"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_186": {
                "input": {
                    "value": "mask_index(mask, pos) - pos_index(c1_node_id, pos)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_105": {
                "start": {
                    "value": "num_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(continue_mask).cpu().item()",
                            "Call"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cos_180": {
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_reverse(self.angle_flow_layers, latent_angle, angle_feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_180": {
                "input": {
                    "value": "fc1[:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_181": {
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_reverse(self.angle_flow_layers, latent_angle, angle_feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_181": {
                "input": {
                    "value": "fc1[:, 0:1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_182": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow_reverse(self.dist_flow_layers, latent_dist, dist_feat)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "dist.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_185": {
                "start": {
                    "value": "num_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(continue_mask).cpu().item()",
                            "Call"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "minimum_188": {
                "input": {
                    "value": "focus_node_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(can_focus.float(), 1).view(num_gen)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "c1_node_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmin(c1_dists, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_189": {
                "input": {
                    "value": "focus_node_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(can_focus.float(), 1).view(num_gen)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "c1_node_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmin(c1_dists, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dig/ggraph3D/utils/eval_bond_mmd_utils.py": {
        "torch": {
            "cat_60": {
                "variable": {
                    "value": "total",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source, target]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_78": {
                "input": {
                    "value": "torch.exp(-(total0[:, :n_source] - total1[:n_source, :]) ** 2 / bandwidth_list[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "(total0 - total1[id:id + batch_size]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_78": {
                "input": {
                    "value": "-(total0[:, :n_source] - total1[:n_source, :]) ** 2 / bandwidth_list[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_85": {
                "input": {
                    "value": "torch.exp(-(total0[:, n_source:] - total1[id:id + batch_size, :]) ** 2 / bandwidth_list[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_93": {
                "input": {
                    "value": "torch.exp(-(total0[:, id:id + batch_size] - total1[:n_source, :]) ** 2 / bandwidth_list[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_85": {
                "input": {
                    "value": "-(total0[:, n_source:] - total1[id:id + batch_size, :]) ** 2 / bandwidth_list[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_93": {
                "input": {
                    "value": "-(total0[:, id:id + batch_size] - total1[:n_source, :]) ** 2 / bandwidth_list[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dig/oodgraph/good_arxiv.py": {
        "torch": {
            "load_46": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[subset_pt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_98": {
                "input": {
                    "value": "dataset.data.env_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_106": {
                "input": {
                    "value": "dataset.data.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dig/oodgraph/good_cbas.py": {
        "torch": {
            "load_44": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[subset_pt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_96": {
                "input": {
                    "value": "dataset.data.env_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_104": {
                "input": {
                    "value": "dataset.data.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dig/oodgraph/good_cmnist.py": {
        "torch": {
            "load_59": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[subset_pt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_120": {
                "input": {
                    "value": "train_dataset.data.env_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_128": {
                "input": {
                    "value": "train_dataset.data.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dig/oodgraph/good_cora.py": {
        "torch": {
            "load_45": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[subset_pt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_97": {
                "input": {
                    "value": "dataset.data.env_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_105": {
                "input": {
                    "value": "dataset.data.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dig/oodgraph/good_hiv.py": {
        "torch": {
            "load_60": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[subset_pt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_126": {
                "input": {
                    "value": "train_dataset.data.env_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_134": {
                "input": {
                    "value": "train_dataset.data.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dig/oodgraph/good_motif.py": {
        "torch": {
            "load_65": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[subset_pt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_131": {
                "input": {
                    "value": "train_dataset.data.env_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_139": {
                "input": {
                    "value": "train_dataset.data.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dig/oodgraph/good_pcba.py": {
        "torch": {
            "load_60": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[subset_pt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_126": {
                "input": {
                    "value": "train_dataset.data.env_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_134": {
                "input": {
                    "value": "train_dataset.data.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dig/oodgraph/good_zinc.py": {
        "torch": {
            "load_60": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[subset_pt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unique_132": {
                "input": {
                    "value": "train_dataset.data.env_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unique_140": {
                "input": {
                    "value": "train_dataset.data.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dig/sslgraph/dataset/TUDataset.py": {
        "torch": {
            "load_76": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_182": {
                "obj": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "sl",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[n, n] for n in range(node_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "t_218": {
                "variable": {
                    "value": "sl",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "data.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data.edge_index, sl)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_85": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_192": {
                "obj": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_209": {
                "obj": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_99": {
                "variable": {
                    "value": "self.data.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_node, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "self.slices[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "dig/sslgraph/dataset/feat_expansion.py": {
        "torch": {
            "cat_38": {
                "variable": {
                    "value": "data.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[deg, data.x, deg_onehot, akx, cent]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_87": {
                "variable": {
                    "value": "loop_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "diag_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "edge_weight.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "edge_weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "edge_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_weight, loop_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_121": {
                "variable": {
                    "value": "deg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "deg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "degree(row, num_nodes)",
                            "Call"
                        ],
                        [
                            "max(deg).item()",
                            "Call"
                        ],
                        [
                            "degree(row, num_nodes)",
                            "Call"
                        ],
                        [
                            "deg.view((-1, 1))",
                            "Call"
                        ],
                        [
                            "self.empty_feature(num_nodes)",
                            "Call"
                        ],
                        [
                            "scatter_add(edge_weight, row, dim=0, dim_size=num_nodes)",
                            "Call"
                        ],
                        [
                            "degree(idx, data.num_nodes, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "F.one_hot(deg, num_classes=self.max_degree + 1).to(torch.float)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.max_degree + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "data.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[data.num_nodes, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "max_deg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.onehot_maxdeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "deg.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_49": {
                "variable": {
                    "value": "deg_capped",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "deg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "degree(row, num_nodes)",
                            "Call"
                        ],
                        [
                            "max(deg).item()",
                            "Call"
                        ],
                        [
                            "degree(row, num_nodes)",
                            "Call"
                        ],
                        [
                            "deg.view((-1, 1))",
                            "Call"
                        ],
                        [
                            "self.empty_feature(num_nodes)",
                            "Call"
                        ],
                        [
                            "scatter_add(edge_weight, row, dim=0, dim_size=num_nodes)",
                            "Call"
                        ],
                        [
                            "degree(idx, data.num_nodes, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "F.one_hot(deg, num_classes=self.max_degree + 1).to(torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_50": {
                "variable": {
                    "value": "deg_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "deg_capped.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.onehot_maxdeg + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "*size": {
                    "value": "[num_nodes, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_78": {
                "variable": {
                    "value": "edge_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(edge_index.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "data.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, deg.to(x.dtype)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "dig/sslgraph/method/contrastive/model/contrastive.py": {
        "torch": {
            "device_79": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "randperm_384": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.x.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_402": {
                "variable": {
                    "value": "proj_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj_out_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_81": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%d' % device",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_371": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, z_crpt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_405": {
                "variable": {
                    "value": "proj_nn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_366": {
                "tensors": {
                    "value": "[z_g, z_g_crpt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_367": {
                "tensors": {
                    "value": "[z_n, z_n_crpt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_405": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj_out_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ReLU_406": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_407": {
                "in_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj_out_dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.proj_out_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_203": {
                "obj": {
                    "value": "encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path + '/enc_best.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_217": {
                "f": {
                    "value": "self.model_path + '/enc_best.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_277": {
                "obj": {
                    "value": "encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path + '/enc_best.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_284": {
                "f": {
                    "value": "self.model_path + '/enc_best.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_347": {
                "obj": {
                    "value": "encoder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path + '/enc_best.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_354": {
                "f": {
                    "value": "self.model_path + '/enc_best.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_201": {
                "obj": {
                    "value": "enc.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path + '/enc%d_best.pkl' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_215": {
                "f": {
                    "value": "self.model_path + '/enc%d_best.pkl' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_275": {
                "obj": {
                    "value": "enc.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path + '/enc%d_best.pkl' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_282": {
                "f": {
                    "value": "self.model_path + '/enc%d_best.pkl' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_345": {
                "obj": {
                    "value": "enc.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path + '/enc%d_best.pkl' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_352": {
                "f": {
                    "value": "self.model_path + '/enc%d_best.pkl' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dig/sslgraph/method/contrastive/model/infograph.py": {
        "torch": {
            "Sequential_8": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.linear_shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_g_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "z_n_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_9": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_13": {
                "in_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dig/sslgraph/method/contrastive/model/mvgrl.py": {
        "torch": {
            "Sequential_49": {
                "variable": {
                    "value": "self.ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_ft, out_ft)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.linear_shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_ft",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "in_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_ft",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "PReLU_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "out_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_ft",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "PReLU_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "out_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_ft",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "PReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dig/sslgraph/method/contrastive/objectives/infonce.py": {
        "torch": {
            "einsum_118": {
                "variable": {
                    "value": "sim_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ik,jk->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_125": {
                "variable": {
                    "value": "sim_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_matrix / tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_77": {
                "variable": {
                    "value": "z1_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z1_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(z1_n)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_78": {
                "variable": {
                    "value": "z2_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z2_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(z2_n)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_79": {
                "input": {
                    "value": "x / tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_80": {
                "input": {
                    "value": "z1_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(z1_n)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "z1_n.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_81": {
                "input": {
                    "value": "z1_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(z1_n)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "z2_n.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_88": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + (infoNCE_local_global(zs[i], zs_n[j], batch, tau, norm) + infoNCE_local_global(zs[j], zs_n[i], batch, tau, norm))",
                            "BinOp"
                        ],
                        [
                            "pos_sim / (intra_sim + inter_pos_sim)",
                            "BinOp"
                        ],
                        [
                            "-torch.log(loss).mean()",
                            "UnaryOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "pos_sim / (sim_matrix.sum(dim=1) - pos_sim)",
                            "BinOp"
                        ],
                        [
                            "-torch.log(loss).mean()",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "mean_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_128": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + (infoNCE_local_global(zs[i], zs_n[j], batch, tau, norm) + infoNCE_local_global(zs[j], zs_n[i], batch, tau, norm))",
                            "BinOp"
                        ],
                        [
                            "pos_sim / (intra_sim + inter_pos_sim)",
                            "BinOp"
                        ],
                        [
                            "-torch.log(loss).mean()",
                            "UnaryOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "pos_sim / (sim_matrix.sum(dim=1) - pos_sim)",
                            "BinOp"
                        ],
                        [
                            "-torch.log(loss).mean()",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "mean_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_123": {
                "equation": {
                    "value": "i,j->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "z1_abs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z1.norm(dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dig/sslgraph/method/contrastive/objectives/jse.py": {
        "torch": {
            "split_75": {
                "variable": {
                    "value": "(z_g, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z_g",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "num_graphs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(z_g.shape[0] / 2)",
                            "Call"
                        ],
                        [
                            "z_g.shape[0]",
                            "Subscript"
                        ],
                        [
                            "z1.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "split_76": {
                "variable": {
                    "value": "(z_n, z_n_crpt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(z_n, num_sample_nodes)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(z_n.shape[0] / 2)",
                            "Call"
                        ],
                        [
                            "z_n.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "split_79": {
                "variable": {
                    "value": "z_n",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(z_n, num_sample_nodes)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "num_sample_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(num_nodes / num_graphs)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_80": {
                "variable": {
                    "value": "z_n_crpt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z_n_crpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(z_n_crpt, num_sample_nodes)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "num_sample_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(num_nodes / num_graphs)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_82": {
                "variable": {
                    "value": "d_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.matmul(z_g[i], z_n[i].t()) for i in range(num_graphs)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "d_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.matmul(z_g[i], z_n_crpt[i].t()) for i in range(num_graphs)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_85": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((d_pos, d_neg))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_86": {
                "variable": {
                    "value": "lb_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, num_nodes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "variable": {
                    "value": "lb_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, num_nodes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lb_pos, lb_neg)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_90": {
                "variable": {
                    "value": "b_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_106": {
                "variable": {
                    "value": "pos_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_nodes, num_graphs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_107": {
                "variable": {
                    "value": "neg_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_nodes, num_graphs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_112": {
                "variable": {
                    "value": "d_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(z_n, num_sample_nodes)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "z_g.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "variable": {
                    "value": "pos_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_graphs, num_graphs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_130": {
                "variable": {
                    "value": "neg_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_graphs, num_graphs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_135": {
                "variable": {
                    "value": "d_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "z2.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_85": {
                "tensors": {
                    "value": "(d_pos, d_neg)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "input": {
                    "value": "z_g[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "z_n[i].t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "input": {
                    "value": "z_g[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "z_n_crpt[i].t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_154": {
                "input": {
                    "value": "-masked_d_prime",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_156": {
                "input": {
                    "value": "-masked_d_prime",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "dig/sslgraph/method/contrastive/views_fn/feature.py": {
        "torch": {
            "zeros_39": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "node_num",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_43": {
                "variable": {
                    "value": "x[idx_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(mask_num, feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(node_num, feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randperm_41": {
                "n": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "node_num",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "x[i][j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.normal(loc=self.mask_mean, scale=self.mask_std)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_62": {
                "n": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_63": {
                "n": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_64": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "mask_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(node_num * self.mask_ratio)",
                            "Call"
                        ],
                        [
                            "int(node_num * self.mask_ratio)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dig/sslgraph/method/contrastive/views_fn/sample.py": {
        "torch": {
            "zeros_like_28": {
                "variable": {
                    "value": "mask_nondrop",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data.x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_94": {
                "variable": {
                    "value": "mask_nondrop",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data.x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "sl",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[n, n] for n in range(node_num)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.x.device",
                            "Attribute"
                        ],
                        [
                            "data.x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "t_72": {
                "variable": {
                    "value": "sl",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(data.edge_index, sl)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_27": {
                "n": {
                    "value": "node_num",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.x.device",
                            "Attribute"
                        ],
                        [
                            "data.x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randint_77": {
                "low": {
                    "value": "node_num",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.x.device",
                            "Attribute"
                        ],
                        [
                            "data.x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randperm_87": {
                "n": {
                    "value": "len(idx_neigh)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.x.device",
                            "Attribute"
                        ],
                        [
                            "data.x.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "dig/sslgraph/utils/encoders.py": {
        "torch": {
            "ModuleList_93": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "global_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xpool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[global_add_pool(x, batch) for x in xs]",
                            "ListComp"
                        ],
                        [
                            "[global_mean_pool(x, batch) for x in xs]",
                            "ListComp"
                        ],
                        [
                            "[global_add_pool(x, batch) for x in xs]",
                            "ListComp"
                        ],
                        [
                            "[global_mean_pool(x, batch) for x in xs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_146": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_147": {
                "variable": {
                    "value": "self.acts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "global_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xpool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[global_add_pool(x, batch) for x in xs]",
                            "ListComp"
                        ],
                        [
                            "[global_mean_pool(x, batch) for x in xs]",
                            "ListComp"
                        ],
                        [
                            "[global_add_pool(x, batch) for x in xs]",
                            "ListComp"
                        ],
                        [
                            "[global_mean_pool(x, batch) for x in xs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_214": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_240": {
                "variable": {
                    "value": "loop_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1 if not improved else 2",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "edge_weight.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "edge_weight.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "edge_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_weight, loop_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_254": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convs[i](x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.bns[i](x)",
                            "Call"
                        ],
                        [
                            "self.convs[i](x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "self.acts[i](x)",
                            "Call"
                        ],
                        [
                            "self.bns[i](x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "self.bn_feat(x) if self.bn else x",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv_feat(x, edge_index))",
                            "Call"
                        ],
                        [
                            "x + x_ if self.conv_residual else x_",
                            "IfExp"
                        ],
                        [
                            "self.global_pool(x * gate, batch)",
                            "Call"
                        ],
                        [
                            "x if xg is None else x + xg",
                            "IfExp"
                        ],
                        [
                            "x + x_ if self.fc_residual else x_",
                            "IfExp"
                        ],
                        [
                            "self.bn_hidden(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_374": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_feat(x, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_90": {
                "variable": {
                    "value": "self.bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "nn",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(start_dim, hidden_dim, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_143": {
                "variable": {
                    "value": "self.bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PReLU_155": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_157": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_217": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_231": {
                "variable": {
                    "value": "edge_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(edge_index.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_309": {
                "variable": {
                    "value": "self.bn1_xg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "xg_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_310": {
                "variable": {
                    "value": "self.lin1_xg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "xg_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_311": {
                "variable": {
                    "value": "self.bn2_xg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_312": {
                "variable": {
                    "value": "self.lin2_xg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_317": {
                "variable": {
                    "value": "self.bn_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_318": {
                "variable": {
                    "value": "self.bns_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_319": {
                "variable": {
                    "value": "self.lins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_333": {
                "variable": {
                    "value": "self.bn_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_344": {
                "variable": {
                    "value": "self.bns_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_345": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_349": {
                "variable": {
                    "value": "self.bn_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_350": {
                "variable": {
                    "value": "self.bns_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_351": {
                "variable": {
                    "value": "self.lins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_367": {
                "variable": {
                    "value": "xg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin1_xg(xg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_369": {
                "variable": {
                    "value": "xg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin2_xg(xg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_377": {
                "variable": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv(x_, edge_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_386": {
                "variable": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lin(x_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_391": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.convs[i](x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.bns[i](x)",
                            "Call"
                        ],
                        [
                            "self.convs[i](x, edge_index, edge_attr)",
                            "Call"
                        ],
                        [
                            "self.acts[i](x)",
                            "Call"
                        ],
                        [
                            "self.bns[i](x)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "self.bn_feat(x) if self.bn else x",
                            "IfExp"
                        ],
                        [
                            "F.relu(self.conv_feat(x, edge_index))",
                            "Call"
                        ],
                        [
                            "x + x_ if self.conv_residual else x_",
                            "IfExp"
                        ],
                        [
                            "self.global_pool(x * gate, batch)",
                            "Call"
                        ],
                        [
                            "x if xg is None else x + xg",
                            "IfExp"
                        ],
                        [
                            "x + x_ if self.fc_residual else x_",
                            "IfExp"
                        ],
                        [
                            "self.bn_hidden(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PReLU_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_321": {
                "variable": {
                    "value": "self.gating",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(feat_dim, feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_337": {
                "variable": {
                    "value": "self.gating",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(hidden_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "start_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim if i else feat_dim",
                            "IfExp"
                        ],
                        [
                            "hidden_dim if i else feat_dim",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_109": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_169": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_322": {
                "in_features": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_324": {
                "in_features": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_329": {
                "num_features": {
                    "value": "hidden_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_330": {
                "in_features": {
                    "value": "hidden_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_338": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_340": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_347": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_353": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_354": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dig/sslgraph/utils/seed.py": {
        "torch": {
            "manual_seed_12": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_13": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dig/threedgraph/evaluation/eval.py": {
        "torch": {
            "mean_32": {
                "input": {
                    "value": "torch.abs(y_pred - y_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_32": {
                "input": {
                    "value": "y_pred - y_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dig/threedgraph/method/comenet/comenet.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_118": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "95",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_167": {
                "variable": {
                    "value": "self.lins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_256": {
                "variable": {
                    "value": "self.interaction_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SimpleInteractionBlock(hidden_channels, num_radial, num_spherical, num_output_layers, hidden_channels, act) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_270": {
                "variable": {
                    "value": "self.lins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_303": {
                "variable": {
                    "value": "add",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vecs.norm(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_316": {
                "variable": {
                    "value": "add_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vecs.norm(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_341": {
                "variable": {
                    "value": "iref",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "j[argmin0]",
                            "Subscript"
                        ],
                        [
                            "n0[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clone_347": {
                "variable": {
                    "value": "jref",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n0_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i[argmin0_j]",
                            "Subscript"
                        ],
                        [
                            "n0_j[j]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cross_362": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-pos_ji",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "pos_in0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_362": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan2_363": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(-pos_ji, pos_in0).norm(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * pos_ji).sum(dim=-1) / dist_ji",
                            "BinOp"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * pos_ji).sum(dim=-1) / dist_ji",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-pos_ji * pos_in0).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_368": {
                "variable": {
                    "value": "plane1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-pos_ji",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "pos_in0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_369": {
                "variable": {
                    "value": "plane2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-pos_ji",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "pos_in1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "atan2_372": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(-pos_ji, pos_in0).norm(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * pos_ji).sum(dim=-1) / dist_ji",
                            "BinOp"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * pos_ji).sum(dim=-1) / dist_ji",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-pos_ji * pos_in0).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_376": {
                "variable": {
                    "value": "plane1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_ji",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "pos_jref_j",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_377": {
                "variable": {
                    "value": "plane2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_ji",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "pos_iref",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "atan2_380": {
                "variable": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(-pos_ji, pos_in0).norm(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * pos_ji).sum(dim=-1) / dist_ji",
                            "BinOp"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * pos_ji).sum(dim=-1) / dist_ji",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-pos_ji * pos_in0).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_83": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin1(x)",
                            "Call"
                        ],
                        [
                            "swish(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "swish(x)",
                            "Call"
                        ],
                        [
                            "self.act(self.emb(x))",
                            "Call"
                        ],
                        [
                            "self.act(self.lin(x))",
                            "Call"
                        ],
                        [
                            "self.emb(z)",
                            "Call"
                        ],
                        [
                            "interaction_block(x, feature1, feature2, edge_index, batch)",
                            "Call"
                        ],
                        [
                            "self.act(lin(x))",
                            "Call"
                        ],
                        [
                            "self.lin_out(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_207": {
                "tensors": {
                    "value": "[h1, h2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_371": {
                "input": {
                    "value": "plane1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(-pos_ji, pos_in0)",
                            "Call"
                        ],
                        [
                            "torch.cross(pos_ji, pos_jref_j)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "plane2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(-pos_ji, pos_in1)",
                            "Call"
                        ],
                        [
                            "torch.cross(pos_ji, pos_iref)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_379": {
                "input": {
                    "value": "plane1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(-pos_ji, pos_in0)",
                            "Call"
                        ],
                        [
                            "torch.cross(pos_ji, pos_jref_j)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "plane2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(-pos_ji, pos_in1)",
                            "Call"
                        ],
                        [
                            "torch.cross(pos_ji, pos_iref)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dig/threedgraph/method/comenet/features.py": {
        "torch": {
            "stack_291": {
                "variable": {
                    "value": "rbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(dist) for f in self.bessel_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_292": {
                "variable": {
                    "value": "sbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(angle) for f in self.sph_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_342": {
                "variable": {
                    "value": "rbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(dist) for f in self.bessel_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_343": {
                "variable": {
                    "value": "sbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(theta, phi) for f in self.sph_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_337": {
                "start": {
                    "value": "num_spherical",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_280": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sym.symbols('theta')",
                            "Call"
                        ],
                        [
                            "sym.symbols('theta')",
                            "Call"
                        ],
                        [
                            "sym.symbols('theta')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_324": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sym.symbols('theta')",
                            "Call"
                        ],
                        [
                            "sym.symbols('theta')",
                            "Call"
                        ],
                        [
                            "sym.symbols('theta')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dig/threedgraph/method/comenet/ocp/comenet-ocp.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_100": {
                "variable": {
                    "value": "self.lins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Linear(in_channels, out_channels, **kwargs) for _ in range(num_tags)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Embedding_158": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "95",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_302": {
                "variable": {
                    "value": "self.interaction_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[SimpleInteractionBlock(hidden_channels, num_radial, num_spherical, num_output_layers, hidden_channels, act, hetero=hetero) for _ in range(num_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_316": {
                "variable": {
                    "value": "self.lins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_380": {
                "variable": {
                    "value": "add",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out['distances']",
                            "Subscript"
                        ],
                        [
                            "vecs.norm(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_393": {
                "variable": {
                    "value": "add_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out['distances']",
                            "Subscript"
                        ],
                        [
                            "vecs.norm(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_418": {
                "variable": {
                    "value": "iref",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "j[argmin0]",
                            "Subscript"
                        ],
                        [
                            "n0[i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clone_424": {
                "variable": {
                    "value": "jref",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n0_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i[argmin0_j]",
                            "Subscript"
                        ],
                        [
                            "n0_j[j]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cross_439": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-pos_ji",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "pos_in0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_439": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan2_440": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(-pos_ji, pos_in0).norm(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * pos_ji).sum(dim=-1) / dist_ji",
                            "BinOp"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * pos_ji).sum(dim=-1) / dist_ji",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-pos_ji * pos_in0).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_445": {
                "variable": {
                    "value": "plane1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-pos_ji",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "pos_in0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_446": {
                "variable": {
                    "value": "plane2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-pos_ji",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "pos_in1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "atan2_449": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(-pos_ji, pos_in0).norm(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * pos_ji).sum(dim=-1) / dist_ji",
                            "BinOp"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * pos_ji).sum(dim=-1) / dist_ji",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-pos_ji * pos_in0).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_453": {
                "variable": {
                    "value": "plane1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_ji",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "pos_jref_j",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_454": {
                "variable": {
                    "value": "plane2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_ji",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "pos_iref",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "atan2_457": {
                "variable": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(-pos_ji, pos_in0).norm(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * pos_ji).sum(dim=-1) / dist_ji",
                            "BinOp"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * pos_ji).sum(dim=-1) / dist_ji",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(-pos_ji * pos_in0).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_88": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin1(x, tags)",
                            "Call"
                        ],
                        [
                            "swish(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x, tags)",
                            "Call"
                        ],
                        [
                            "swish(x)",
                            "Call"
                        ],
                        [
                            "self.act(self.emb(x))",
                            "Call"
                        ],
                        [
                            "self.act(self.lin(x, tags))",
                            "Call"
                        ],
                        [
                            "self.emb(z)",
                            "Call"
                        ],
                        [
                            "interaction_block(x, feature1, feature2, edge_index, batch, tags)",
                            "Call"
                        ],
                        [
                            "self.act(lin(x, tags))",
                            "Call"
                        ],
                        [
                            "self.lin_out(x, tags)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_209": {
                "variable": {
                    "value": "self.lins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_215": {
                "variable": {
                    "value": "self.lins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_255": {
                "tensors": {
                    "value": "[h1, h2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_448": {
                "input": {
                    "value": "plane1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(-pos_ji, pos_in0)",
                            "Call"
                        ],
                        [
                            "torch.cross(pos_ji, pos_jref_j)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "plane2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(-pos_ji, pos_in1)",
                            "Call"
                        ],
                        [
                            "torch.cross(pos_ji, pos_iref)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_456": {
                "input": {
                    "value": "plane1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(-pos_ji, pos_in0)",
                            "Call"
                        ],
                        [
                            "torch.cross(pos_ji, pos_jref_j)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "plane2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(-pos_ji, pos_in1)",
                            "Call"
                        ],
                        [
                            "torch.cross(pos_ji, pos_iref)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dig/threedgraph/method/comenet/ocp/utils.py": {
        "torch": {
            "stack_283": {
                "variable": {
                    "value": "rbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(dist) for f in self.bessel_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_284": {
                "variable": {
                    "value": "sbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(angle) for f in self.sph_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_335": {
                "variable": {
                    "value": "rbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(dist) for f in self.bessel_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_336": {
                "variable": {
                    "value": "sbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(theta, phi) for f in self.sph_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_330": {
                "start": {
                    "value": "num_spherical",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_272": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sym.symbols('theta')",
                            "Call"
                        ],
                        [
                            "sym.symbols('theta')",
                            "Call"
                        ],
                        [
                            "sym.symbols('theta')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_317": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sym.symbols('theta')",
                            "Call"
                        ],
                        [
                            "sym.symbols('theta')",
                            "Call"
                        ],
                        [
                            "sym.symbols('theta')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dig/threedgraph/method/dimenetpp/dimenetpp.py": {
        "torch": {
            "Linear_38": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_57": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "95",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.lin_rbf_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_radial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * hidden_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.lin_rbf_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_radial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.lin_rbf1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_radial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "basis_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.lin_rbf2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "basis_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.lin_sbf1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_spherical * num_radial",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "basis_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.lin_sbf2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "basis_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "int_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.lin_rbf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_radial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.lin_kj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.lin_ji",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.lin_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "int_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.lin_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.layers_before_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResidualLayer(hidden_channels, act) for _ in range(num_before_skip)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_101": {
                "variable": {
                    "value": "self.layers_after_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResidualLayer(hidden_channels, act) for _ in range(num_after_skip)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_168": {
                "variable": {
                    "value": "self.lin_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_emb_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_169": {
                "variable": {
                    "value": "self.lins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_emb_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_244": {
                "variable": {
                    "value": "self.update_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[update_v(hidden_channels, out_emb_channels, out_channels, num_output_layers, act, output_init) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_247": {
                "variable": {
                    "value": "self.update_es",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[update_e(hidden_channels, int_emb_size, basis_emb_size, num_spherical, num_radial, num_before_skip, num_after_skip, act) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_257": {
                "variable": {
                    "value": "self.update_us",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[update_u() for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_like_284": {
                "input": {
                    "value": "scatter(v, batch, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_73": {
                "tensors": {
                    "value": "[x[i], x[j], rbf0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_171": {
                "in_features": {
                    "value": "out_emb_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_emb_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "dig/threedgraph/method/dimenetpp/features.py": {
        "torch": {
            "Parameter_171": {
                "variable": {
                    "value": "self.freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_radial)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_176": {
                "variable": {
                    "value": "self.freq.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.freq.numel() + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_213": {
                "variable": {
                    "value": "rbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(dist) for f in self.bessel_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_216": {
                "variable": {
                    "value": "cbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(angle) for f in self.sph_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_203": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sym.symbols('x')",
                            "Call"
                        ],
                        [
                            "sym.symbols('x')",
                            "Call"
                        ],
                        [
                            "sym.symbols('x')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dig/threedgraph/method/pronet/features.py": {
        "torch": {
            "stack_287": {
                "variable": {
                    "value": "rbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(dist) for f in self.bessel_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_288": {
                "variable": {
                    "value": "sbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(angle) for f in self.sph_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_338": {
                "variable": {
                    "value": "rbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(dist) for f in self.bessel_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_339": {
                "variable": {
                    "value": "sbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(theta, phi) for f in self.sph_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_333": {
                "start": {
                    "value": "num_spherical",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_276": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sym.symbols('theta')",
                            "Call"
                        ],
                        [
                            "sym.symbols('theta')",
                            "Call"
                        ],
                        [
                            "sym.symbols('theta')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_320": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sym.symbols('theta')",
                            "Call"
                        ],
                        [
                            "sym.symbols('theta')",
                            "Call"
                        ],
                        [
                            "sym.symbols('theta')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dig/threedgraph/method/pronet/pronet.py": {
        "torch": {
            "Parameter_47": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_164": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_184": {
                "variable": {
                    "value": "self.lins_cat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_189": {
                "variable": {
                    "value": "self.lins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h0, h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_315": {
                "variable": {
                    "value": "self.interaction_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[InteractionBlock(hidden_channels=hidden_channels, output_channels=hidden_channels, num_radial=num_radial, num_spherical=num_spherical, num_layers=int_emb_layers, mid_emb=mid_emb, act=self.act, num_pos_emb=num_pos_emb, dropout=dropout, level=level) for _ in range(num_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_333": {
                "variable": {
                    "value": "self.lins_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_338": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_339": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_355": {
                "variable": {
                    "value": "frequency",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, num_pos_emb, 2, dtype=torch.float32, device=edge_index.device) * -(np.log(10000.0) / num_pos_emb)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_360": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.cos(angles), torch.sin(angles))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_398": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos[j] - pos[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "pos[refi0] - pos[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_398": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan2_399": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(pos[j] - pos[i], pos[refi0] - pos[i]).norm(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * (pos[refi0] - pos[i])).sum(dim=-1) / (pos[refi0] - pos[i]).norm(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * (pos[j] - pos[i])).sum(dim=-1) / dist",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((pos[j] - pos[i]) * (pos[refi0] - pos[i])).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_401": {
                "variable": {
                    "value": "plane1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos[refi0] - pos[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "pos[refi1] - pos[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_402": {
                "variable": {
                    "value": "plane2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos[refi0] - pos[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "pos[j] - pos[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_405": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(pos[j] - pos[i], pos[refi0] - pos[i]).norm(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * (pos[refi0] - pos[i])).sum(dim=-1) / (pos[refi0] - pos[i]).norm(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * (pos[j] - pos[i])).sum(dim=-1) / dist",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((pos[j] - pos[i]) * (pos[refi0] - pos[i])).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_66": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lin1(x)",
                            "Call"
                        ],
                        [
                            "swish(x)",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "swish(x)",
                            "Call"
                        ],
                        [
                            "(x, x)",
                            "Tuple"
                        ],
                        [
                            "self.embedding(z)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.squeeze(F.one_hot(z, num_classes=num_aa_type).float()), bb_embs], dim=1)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.squeeze(F.one_hot(z, num_classes=num_aa_type).float()), bb_embs, side_chain_embs], dim=1)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "x + gaussian_noise",
                            "BinOp"
                        ],
                        [
                            "interaction_block(x, feature0, feature1, pos_emb, edge_index, batch)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_307": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_aa_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "26",
                            "int"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_412": {
                "input": {
                    "value": "Or1_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_n[i] - pos[i]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "pos_c[i] - pos[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_416": {
                "input": {
                    "value": "Or2_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_n[j] - pos[j]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "pos_c[j] - pos[j]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_419": {
                "variable": {
                    "value": "Or1_Or2_N",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Or1_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(Or1_x, torch.cross(Or1_x, pos_c[i] - pos[i]))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Or2_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(Or2_x, torch.cross(Or2_x, pos_c[j] - pos[j]))",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_421": {
                "variable": {
                    "value": "angle1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(torch.cross(Or1_x, Or1_Or2_N) * Or1_z).sum(dim=-1) / Or1_z_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "(Or1_x * Or1_Or2_N).sum(dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "atan2_422": {
                "variable": {
                    "value": "angle2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(Or1_z, Or2_z).norm(dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "(Or1_z * Or2_z).sum(dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "atan2_423": {
                "variable": {
                    "value": "angle3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(torch.cross(Or1_Or2_N, Or2_x) * Or2_z).sum(dim=-1) / Or2_z_length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "(Or1_Or2_N * Or2_x).sum(dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_431": {
                "variable": {
                    "value": "feature1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.feature1(dist, angle1), self.feature1(dist, angle2), self.feature1(dist, angle3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_309": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_aa_type + num_bb_embs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_365": {
                "input": {
                    "value": "batch_data.x.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_376": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.squeeze(F.one_hot(z, num_classes=num_aa_type).float()), bb_embs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_426": {
                "variable": {
                    "value": "euler_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.empty(3, len(angle1)).to(device).normal_(mean=0.0, std=0.025)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cross_445": {
                "variable": {
                    "value": "plane1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos[j] - pos[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "pos[refi] - pos[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_446": {
                "variable": {
                    "value": "plane2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos[j] - pos[i]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "pos[refj] - pos[j]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_449": {
                "variable": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(pos[j] - pos[i], pos[refi0] - pos[i]).norm(dim=-1)",
                            "Call"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * (pos[refi0] - pos[i])).sum(dim=-1) / (pos[refi0] - pos[i]).norm(dim=-1)",
                            "BinOp"
                        ],
                        [
                            "(torch.cross(plane1, plane2) * (pos[j] - pos[i])).sum(dim=-1) / dist",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "((pos[j] - pos[i]) * (pos[refi0] - pos[i])).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_457": {
                "variable": {
                    "value": "gaussian_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.empty(x.shape).to(device).normal_(mean=0.0, std=0.025)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-0.1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_311": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_aa_type + num_bb_embs + num_side_chain_embs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_356": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_pos_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_360": {
                "input": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d.unsqueeze(-1) * frequency",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_360": {
                "input": {
                    "value": "angles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d.unsqueeze(-1) * frequency",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_379": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.squeeze(F.one_hot(z, num_classes=num_aa_type).float()), bb_embs, side_chain_embs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_422": {
                "input": {
                    "value": "Or1_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(Or1_x, torch.cross(Or1_x, pos_c[i] - pos[i]))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Or2_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(Or2_x, torch.cross(Or2_x, pos_c[j] - pos[j]))",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_422": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_426": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "len(angle1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_457": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_376": {
                "input": {
                    "value": "F.one_hot(z, num_classes=num_aa_type).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_404": {
                "input": {
                    "value": "plane1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(pos[refi0] - pos[i], pos[refi1] - pos[i])",
                            "Call"
                        ],
                        [
                            "torch.cross(pos[j] - pos[i], pos[refi] - pos[i])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "plane2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(pos[refi0] - pos[i], pos[j] - pos[i])",
                            "Call"
                        ],
                        [
                            "torch.cross(pos[j] - pos[i], pos[refj] - pos[j])",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_376": {
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "num_aa_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "26",
                            "int"
                        ]
                    ]
                }
            },
            "squeeze_379": {
                "input": {
                    "value": "F.one_hot(z, num_classes=num_aa_type).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_379": {
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "num_aa_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "26",
                            "int"
                        ]
                    ]
                }
            },
            "cross_421": {
                "input": {
                    "value": "Or1_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_n[i] - pos[i]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "Or1_Or2_N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(Or1_z, Or2_z)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_423": {
                "input": {
                    "value": "Or1_Or2_N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(Or1_z, Or2_z)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Or2_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_n[j] - pos[j]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cross_448": {
                "input": {
                    "value": "plane1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(pos[refi0] - pos[i], pos[refi1] - pos[i])",
                            "Call"
                        ],
                        [
                            "torch.cross(pos[j] - pos[i], pos[refi] - pos[i])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "plane2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(pos[refi0] - pos[i], pos[j] - pos[i])",
                            "Call"
                        ],
                        [
                            "torch.cross(pos[j] - pos[i], pos[refj] - pos[j])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dig/threedgraph/method/run.py": {
        "torch": {
            "Adam_50": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0005",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StepLR_51": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Adam(model.parameters(), lr=lr, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "lr_decay_step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "lr_decay_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_154": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_155": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SummaryWriter_65": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_158": {
                "variable": {
                    "value": "preds_force",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_159": {
                "variable": {
                    "value": "targets_force",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[preds, out.detach_()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[targets, batch_data.y.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "preds_force",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[preds_force, force.detach_()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "targets_force",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[targets_force, batch_data.force]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_93": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict(), 'best_valid_mae': best_valid, 'num_params': num_params}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(save_dir, 'valid_checkpoint.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_126": {
                "outputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch_data)",
                            "Call"
                        ],
                        [
                            "model(batch_data)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "batch_data.pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones_like(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_165": {
                "outputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch_data)",
                            "Call"
                        ],
                        [
                            "model(batch_data)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "batch_data.pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "torch.ones_like(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_126": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch_data)",
                            "Call"
                        ],
                        [
                            "model(batch_data)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_165": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch_data)",
                            "Call"
                        ],
                        [
                            "model(batch_data)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dig/threedgraph/method/schnet/schnet.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(num_gaussians, num_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_88": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "end": {
                    "value": "stop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5.0",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "num_gaussians",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_100": {
                "variable": {
                    "value": "self.shift",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(2.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_131": {
                "variable": {
                    "value": "self.init_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_134": {
                "variable": {
                    "value": "self.update_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[update_v(hidden_channels, num_filters) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_136": {
                "variable": {
                    "value": "self.update_es",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[update_e(hidden_channels, num_filters, num_gaussians, cutoff) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "exp_94": {
                "input": {
                    "value": "self.coeff * torch.pow(dist, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "num_gaussians",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ],
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_103": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cos_31": {
                "input": {
                    "value": "dist * PI / self.cutoff",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_94": {
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.view(-1, 1) - self.offset.view(1, -1)",
                            "BinOp"
                        ],
                        [
                            "(pos[row] - pos[col]).norm(dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "dig/threedgraph/method/spherenet/features.py": {
        "torch": {
            "device_12": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Parameter_173": {
                "variable": {
                    "value": "self.freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_radial)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_178": {
                "variable": {
                    "value": "self.freq.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.freq.numel() + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_215": {
                "variable": {
                    "value": "rbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(dist) for f in self.bessel_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_218": {
                "variable": {
                    "value": "cbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(angle) for f in self.sph_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_258": {
                "variable": {
                    "value": "rbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(dist) for f in self.bessel_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_259": {
                "variable": {
                    "value": "cbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f(angle, phi) for f in self.sph_funcs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_205": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sym.symbols('x')",
                            "Call"
                        ],
                        [
                            "sym.symbols('x')",
                            "Call"
                        ],
                        [
                            "sym.symbols('x')",
                            "Call"
                        ],
                        [
                            "sym.symbols('x')",
                            "Call"
                        ],
                        [
                            "sym.symbols('x')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_247": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sym.symbols('y')",
                            "Call"
                        ],
                        [
                            "sym.symbols('y')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dig/threedgraph/method/spherenet/spherenet.py": {
        "torch": {
            "device_13": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.lin_rbf_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_radial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * hidden_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.lin_rbf_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_radial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.lin_rbf1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_radial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "basis_emb_size_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.lin_rbf2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "basis_emb_size_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.lin_sbf1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_spherical * num_radial",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "basis_emb_size_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.lin_sbf2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "basis_emb_size_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "int_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.lin_t1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_spherical * num_spherical * num_radial",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "basis_emb_size_torsion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.lin_t2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "basis_emb_size_torsion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "int_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.lin_rbf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_radial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.lin_kj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.lin_ji",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.lin_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "int_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.lin_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int_emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_105": {
                "variable": {
                    "value": "self.layers_before_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResidualLayer(hidden_channels, act) for _ in range(num_before_skip)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_110": {
                "variable": {
                    "value": "self.layers_after_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResidualLayer(hidden_channels, act) for _ in range(num_after_skip)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "variable": {
                    "value": "self.lin_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_emb_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_184": {
                "variable": {
                    "value": "self.lins",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_187": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_emb_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_262": {
                "variable": {
                    "value": "self.update_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[update_v(hidden_channels, out_emb_channels, out_channels, num_output_layers, act, output_init) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_265": {
                "variable": {
                    "value": "self.update_es",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[update_e(hidden_channels, int_emb_size, basis_emb_size_dist, basis_emb_size_angle, basis_emb_size_torsion, num_spherical, num_radial, num_before_skip, num_after_skip, act) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_268": {
                "variable": {
                    "value": "self.update_us",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[update_u() for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_57": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "95",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_59": {
                "variable": {
                    "value": "self.node_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty((hidden_channels,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_295": {
                "input": {
                    "value": "scatter(v, batch, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_59": {
                "*size": {
                    "value": "(hidden_channels,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_80": {
                "tensors": {
                    "value": "[x[i], x[j], rbf0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_186": {
                "in_features": {
                    "value": "out_emb_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_emb_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "dig/threedgraph/utils/geometric_computing.py": {
        "torch": {
            "device_9": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "arange_27": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "j.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "j.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_47": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_ji",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[idx_i] - pos[idx_j]",
                            "BinOp"
                        ],
                        [
                            "pos[idx_i_t] - pos[idx_j_t]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "pos_jk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[idx_k] - pos[idx_j]",
                            "BinOp"
                        ],
                        [
                            "pos[idx_k_n] - pos[idx_j_t]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_47": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan2_48": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(pos_ji, pos_jk).norm(dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cross(plane1, plane2).norm(dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pos_ji * pos_jk).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_50": {
                "variable": {
                    "value": "idx_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(idx_i)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_67": {
                "variable": {
                    "value": "plane1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_ji",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[idx_i] - pos[idx_j]",
                            "BinOp"
                        ],
                        [
                            "pos[idx_i_t] - pos[idx_j_t]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "pos_j0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[idx_k_t] - pos[idx_j_t]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cross_68": {
                "variable": {
                    "value": "plane2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_ji",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[idx_i] - pos[idx_j]",
                            "BinOp"
                        ],
                        [
                            "pos[idx_i_t] - pos[idx_j_t]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "pos_jk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos[idx_k] - pos[idx_j]",
                            "BinOp"
                        ],
                        [
                            "pos[idx_k_n] - pos[idx_j_t]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cross_70": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "plane1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(pos_ji, pos_j0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "plane2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(pos_ji, pos_jk)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_70": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan2_71": {
                "variable": {
                    "value": "torsion1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(pos_ji, pos_jk).norm(dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cross(plane1, plane2).norm(dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(pos_ji * pos_jk).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "(plane1 * plane2).sum(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dig/xgraph/dataset/mol_dataset.py": {
        "torch": {
            "load_163": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_307": {
                "obj": {
                    "value": "self.collate(data_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_251": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "line[self.names[self.name][4]]",
                            "Subscript"
                        ],
                        [
                            "ys if isinstance(ys, list) else [ys]",
                            "IfExp"
                        ],
                        [
                            "[float(y) if len(y) > 0 else float('NaN') for y in ys]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_273": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_288": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_indices + [[i, j], [j, i]]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_290": {
                "variable": {
                    "value": "edge_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_attrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_attrs + [e, e]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_232": {
                "ndarray": {
                    "value": "one_hot_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.eye(nb_clss)[targets]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_233": {
                "ndarray": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj_all[idx[0][0]:idx[0][0] + graph_len, idx[0][0]:idx[0][0] + graph_len]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "dig/xgraph/dataset/nlp_dataset.py": {
        "torch": {
            "cat_18": {
                "variable": {
                    "value": "data.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.stack([data.edge_index[1], data.edge_index[0]], dim=0), data.edge_index]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_25": {
                "variable": {
                    "value": "node_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(np.bincount(batch))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "node_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([0]), node_slice]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cumsum_28": {
                "variable": {
                    "value": "edge_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(np.bincount(batch[row]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "edge_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([0]), edge_slice]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_38": {
                "variable": {
                    "value": "slices[y]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch[-1] + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_56": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pickle.load(f)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_61": {
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_file(folder, prefix, 'graph_labels')",
                            "Call"
                        ],
                        [
                            "torch.tensor(y, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "split_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "split_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_file(folder, prefix, 'split_indices')",
                            "Call"
                        ],
                        [
                            "torch.tensor(split_indices, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_111": {
                "variable": {
                    "value": "(self.data, self.slices, self.supplement)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_25": {
                "ndarray": {
                    "value": "np.bincount(batch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_28": {
                "ndarray": {
                    "value": "np.bincount(batch[row])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "data": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_file(folder, prefix, 'edge_index')",
                            "Call"
                        ],
                        [
                            "torch.tensor(edge_index, dtype=torch.long).T",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_153": {
                "obj": {
                    "value": "(self.data, self.slices, self.supplement)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_18": {
                "tensors": {
                    "value": "[data.edge_index[1], data.edge_index[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_26": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dig/xgraph/dataset/syn_dataset.py": {
        "torch": {
            "load_61": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_137": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.where(y)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_140": {
                "variable": {
                    "value": "data.train_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_141": {
                "variable": {
                    "value": "data.val_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "val_mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_142": {
                "variable": {
                    "value": "data.test_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_143": {
                "variable": {
                    "value": "data.edge_label_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "edge_label_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.edge_label_matrix + data.edge_label_matrix.T",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_196": {
                "variable": {
                    "value": "(self.data, self.slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_218": {
                "variable": {
                    "value": "data_list",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "download_url(url, self.raw_dir)",
                            "Call"
                        ],
                        [
                            "download_url(url, self.raw_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_227": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_228": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_246": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1], [1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_247": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_102": {
                "obj": {
                    "value": "self.collate(data_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_223": {
                "obj": {
                    "value": "(data, slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.raw_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "data.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data.x, torch.tensor([[1]], dtype=torch.float)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_233": {
                "variable": {
                    "value": "deg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(data.edge_index[0] == node_idx).float().sum() for node_idx in range(i)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_236": {
                "variable": {
                    "value": "prob_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(deg / sum_deg).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "(deg_reciprocal / sum_deg_reciprocal).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_238": {
                "variable": {
                    "value": "data.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data.edge_index, torch.tensor([[node_pick, i], [i, node_pick]], dtype=torch.long)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "data.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data.y, torch.tensor([[0]], dtype=torch.float)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "data.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data.x, torch.tensor([[1]], dtype=torch.float)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_253": {
                "variable": {
                    "value": "deg_reciprocal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[1 / ((data.edge_index[0] == node_idx).float().sum() + epsilon) for node_idx in range(i)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_256": {
                "variable": {
                    "value": "prob_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(deg / sum_deg).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "(deg_reciprocal / sum_deg_reciprocal).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_279": {
                "obj": {
                    "value": "(data, slices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "logical_and_109": {
                "input": {
                    "value": "data.edge_index[0] >= 20",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "data.edge_index[1] >= 20",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Tensor_126": {
                "variable": {
                    "value": "connected_motif_nodes_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "data.edge_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data.edge_index, torch.tensor([[node_pick, i], [i, node_pick]], dtype=torch.long)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "data.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data.y, torch.tensor([[1]], dtype=torch.float)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_20": {
                "ndarray": {
                    "value": "dense_edges[graph_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "logical_and_129": {
                "input": {
                    "value": "frm_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(edge_index[0].unsqueeze(1) - connected_motif_nodes_tensor.unsqueeze(0) == 0).any(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "to_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(edge_index[1].unsqueeze(1) - connected_motif_nodes_tensor.unsqueeze(0) == 0).any(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_138": {
                "ndarray": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_229": {
                "data": {
                    "value": "[[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_248": {
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_21": {
                "ndarray": {
                    "value": "node_features[graph_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_23": {
                "ndarray": {
                    "value": "np.where(graph_labels[graph_idx])[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_113": {
                "input": {
                    "value": "data.edge_index[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_232": {
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_239": {
                "data": {
                    "value": "[[node_pick, i], [i, node_pick]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_240": {
                "data": {
                    "value": "[[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_252": {
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_264": {
                "data": {
                    "value": "[[node_pick, i], [i, node_pick]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_265": {
                "data": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_124": {
                "condition": {
                    "value": "edge_label_matrix[node] != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "dig/xgraph/dataset/utils_dataset.py": {
        "torch": {
            "tensor_14": {
                "variable": {
                    "value": "self.exclude_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "exclude_mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "variable": {
                    "value": "self.include_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "include_mask",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dig/xgraph/evaluation/metrics.py": {
        "torch": {
            "sort_47": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "isnan_349": {
                "input": {
                    "value": "data.y[y_idx].squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_235": {
                "data": {
                    "value": "self.__related_preds['sparsity']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_244": {
                "data": {
                    "value": "[acc for acc in self.__related_preds['accuracy'] if acc is not None]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_247": {
                "data": {
                    "value": "self.__related_preds['accuracy']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_256": {
                "data": {
                    "value": "[stability for stability in self.__related_preds['stability'] if stability is not None]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_259": {
                "data": {
                    "value": "self.__related_preds['stability']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_198": {
                "data": {
                    "value": "self.__related_preds['origin']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "data": {
                    "value": "self.__related_preds['origin']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_288": {
                "data": {
                    "value": "torch.randn(self.cls.x_batch_size * (self.cls.num_edges + self.cls.num_nodes))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_290": {
                "data": {
                    "value": "torch.randn(1 * (self.cls.num_edges + self.cls.num_nodes))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_311": {
                "*size": {
                    "value": "mask.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_325": {
                "*size": {
                    "value": "mask.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_288": {
                "*size": {
                    "value": "self.cls.x_batch_size * (self.cls.num_edges + self.cls.num_nodes)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_290": {
                "*size": {
                    "value": "1 * (self.cls.num_edges + self.cls.num_nodes)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dig/xgraph/method/base_explainer.py": {
        "torch": {
            "Parameter_51": {
                "variable": {
                    "value": "self.node_feat_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(F, requires_grad=True, device=self.device) * 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.edge_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(E, requires_grad=True, device=self.device) * std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sort_123": {
                "variable": {
                    "value": "(_, sub_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask[self.hard_edge_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_133": {
                "variable": {
                    "value": "(_, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.edge_mask",
                            "Attribute"
                        ],
                        [
                            "self.edge_mask",
                            "Attribute"
                        ],
                        [
                            "self.edge_mask",
                            "Attribute"
                        ],
                        [
                            "self.edge_mask",
                            "Attribute"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clone_168": {
                "variable": {
                    "value": "atomic_num",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(edge_index.max().item() + 1, device=edge_index.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(edge_index.max().item() + 1, device=edge_index.device)",
                            "Call"
                        ],
                        [
                            "y[subset]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_186": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_index.max().item() + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_index.max().item() + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_264": {
                "variable": {
                    "value": "self.edge_mask.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_mask.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_275": {
                "variable": {
                    "value": "self.edge_mask.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_mask.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_444": {
                "variable": {
                    "value": "idx_ensemble",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(walks_ids == i).int().sum(dim=1).unsqueeze(0) for i in range(self.num_edges)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_446": {
                "variable": {
                    "value": "idx_ensemble",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(walks_ids == i).int().sum(dim=1).unsqueeze(0) for i in range(self.num_edges + self.num_nodes)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_402": {
                "variable": {
                    "value": "mask.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_mask.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_416": {
                "variable": {
                    "value": "mask.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "edge_mask.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_448": {
                "data": {
                    "value": "[float('inf'), 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_51": {
                "*size": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_54": {
                "*size": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_91": {
                "obj": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item[subset]",
                            "Subscript"
                        ],
                        [
                            "item[edge_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_120": {
                "condition": {
                    "value": "self.hard_edge_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_93": {
                "obj": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item[subset]",
                            "Subscript"
                        ],
                        [
                            "item[edge_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_463": {
                "data": {
                    "value": "torch.randn(self.cls.x_batch_size * (self.cls.num_edges + self.cls.num_nodes))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_465": {
                "data": {
                    "value": "torch.randn(1 * (self.cls.num_edges + self.cls.num_nodes))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_463": {
                "*size": {
                    "value": "self.cls.x_batch_size * (self.cls.num_edges + self.cls.num_nodes)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_465": {
                "*size": {
                    "value": "1 * (self.cls.num_edges + self.cls.num_nodes)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dig/xgraph/method/deeplift.py": {
        "torch": {
            "cat_69": {
                "variable": {
                    "value": "inp_with_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, torch.zeros(x.shape, device=self.device, dtype=torch.float)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "edge_index_with_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_index, edge_index + x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_71": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grad_91": {
                "variable": {
                    "value": "(m,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unbind(out[:, ex_label])",
                            "Call"
                        ],
                        [
                            "torch.unbind(out[[node_idx, node_idx + x.shape[0]], ex_label])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inp_with_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x, torch.zeros(x.shape, device=self.device, dtype=torch.float)], dim=0).requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_92": {
                "variable": {
                    "value": "(inp, inp_ref)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inp_with_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([x, torch.zeros(x.shape, device=self.device, dtype=torch.float)], dim=0).requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_63": {
                "condition": {
                    "value": "self.subset == node_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unbind_87": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[:, ex_label]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unbind_89": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out[[node_idx, node_idx + x.shape[0]], ex_label]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_93": {
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dig/xgraph/method/gnn_gi.py": {
        "torch": {
            "grad_84": {
                "variable": {
                    "value": "(grads,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "adjs[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[walk_step['module'][0].edge_weight for walk_step in walk_steps]",
                            "ListComp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_105": {
                "variable": {
                    "value": "walk_scores_tensor_list[label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "walk_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_73": {
                "condition": {
                    "value": "self.subset == node_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "unbind_93": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc_step['output'][0, label].unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unbind_96": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc_step['output'][node_idx, label].unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "data": {
                    "value": "walk_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_108": {
                "tensors": {
                    "value": "walk_scores_tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None for i in labels]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "data": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_86": {
                "condition": {
                    "value": "self_loop_edge_index[1] == self_loop_edge_index[0][i]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_97": {
                "condition": {
                    "value": "self_loop_edge_index[1] == node_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "dig/xgraph/method/gnn_lrp.py": {
        "torch": {
            "tensor_63": {
                "variable": {
                    "value": "walk_indices_list",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.walks_pick(edge_index_with_loop.cpu(), list(range(edge_index_with_loop.shape[1])), num_layers=self.num_layers)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_192": {
                "variable": {
                    "value": "walk_scores_tensor_list[label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "walk_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_73": {
                "condition": {
                    "value": "self.subset == node_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_194": {
                "tensors": {
                    "value": "walk_scores_tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None for i in labels]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "mk",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(h.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_181": {
                "outputs": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h[node_idx, label]",
                            "Subscript"
                        ],
                        [
                            "h[0, label]",
                            "Subscript"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_199": {
                "data": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_168": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "*size": {
                    "value": "h.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "*size": {
                    "value": "h.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dig/xgraph/method/gnnexplainer.py": {
        "torch": {
            "cross_entropy_13": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "y_true.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_80": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[self.node_feat_mask, self.edge_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_value__96": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_56": {
                "input": {
                    "value": "1 - m + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "node_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[node_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_136": {
                "variable": {
                    "value": "node_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_143": {
                "condition": {
                    "value": "self.subset == node_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "log_62": {
                "input": {
                    "value": "1 - m + EPS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "data": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dig/xgraph/method/gradcam.py": {
        "torch": {
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_78": {
                "data": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_91": {
                "condition": {
                    "value": "self.subset == node_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "mean_281": {
                "input": {
                    "value": "layer_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "tuple((x for x in range(2, len(layer_grad.shape))))",
                    "type": "Call",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_290": {
                "input": {
                    "value": "summed_grad * layer_eval",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_294": {
                "input": {
                    "value": "scaled_act",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dig/xgraph/method/pgexplainer.py": {
        "torch": {
            "tensor_70": {
                "variable": {
                    "value": "subsets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "(subset, inv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "subsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0])",
                            "Call"
                        ],
                        [
                            "torch.cat([subsets, col[edge_mask]]).unique()",
                            "Call"
                        ],
                        [
                            "[node_idx]",
                            "List"
                        ]
                    ]
                }
            },
            "unique_96": {
                "variable": {
                    "value": "(subset, inv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_107": {
                "variable": {
                    "value": "node_idx[subset]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "subset.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "row.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_409": {
                "variable": {
                    "value": "self.elayers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_592": {
                "variable": {
                    "value": "mask_sparse",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_index[:, edge_mask]",
                            "Subscript"
                        ],
                        [
                            "node_idx[edge_index]",
                            "Subscript"
                        ],
                        [
                            "data.edge_index.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.tensor(list(graph.edges())).T",
                            "Attribute"
                        ],
                        [
                            "edge_index.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h.reshape(-1)",
                            "Call"
                        ],
                        [
                            "self.concrete_sample(values, beta=tmp, training=training)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(nodesize, nodesize)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_606": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.model(data.x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "self.model(data.x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "self.model(x, edge_index)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_613": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.elayers.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_710": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.model(data.x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "self.model(data.x, data.edge_index)",
                            "Call"
                        ],
                        [
                            "self.model(x, edge_index)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "subsets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[subsets, col[edge_mask]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_76": {
                "variable": {
                    "value": "subsets",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "node_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[node_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "row.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_84": {
                "variable": {
                    "value": "node_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_116": {
                "condition": {
                    "value": "hard_mask == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_577": {
                "variable": {
                    "value": "f12self",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f1, f2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_583": {
                "variable": {
                    "value": "f12self",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f1, f2, self_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_75": {
                "input": {
                    "value": "node_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "row.new_empty(num_nodes, dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "row",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "row.new_empty(row.size(0), dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "node_mask[row] & node_mask[col]",
                            "BinOp"
                        ],
                        [
                            "edge_mask.reshape(-1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(edge_mask)",
                            "Call"
                        ],
                        [
                            "self.sparse_mask_values",
                            "Attribute"
                        ],
                        [
                            "edge_mask * 0.99 + 0.005",
                            "BinOp"
                        ],
                        [
                            "sym_mask[edge_index[0], edge_index[1]]",
                            "Subscript"
                        ],
                        [
                            "edge_mask.to('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "node_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[node_idx]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_94": {
                "input": {
                    "value": "node_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "row.new_empty(num_nodes, dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "row",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "row.new_empty(row.size(0), dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "node_mask[row] & node_mask[col]",
                            "BinOp"
                        ],
                        [
                            "edge_mask.reshape(-1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(edge_mask)",
                            "Call"
                        ],
                        [
                            "self.sparse_mask_values",
                            "Attribute"
                        ],
                        [
                            "edge_mask * 0.99 + 0.005",
                            "BinOp"
                        ],
                        [
                            "sym_mask[edge_index[0], edge_index[1]]",
                            "Subscript"
                        ],
                        [
                            "edge_mask.to('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_333": {
                "data": {
                    "value": "list(graph.edges())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_410": {
                "*args": {
                    "value": "nn.Linear(in_channels, 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_411": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_476": {
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob[ori_pred]",
                            "Subscript"
                        ],
                        [
                            "logit + EPS",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_480": {
                "input": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "row.new_empty(row.size(0), dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "node_mask[row] & node_mask[col]",
                            "BinOp"
                        ],
                        [
                            "edge_mask.reshape(-1)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor(edge_mask)",
                            "Call"
                        ],
                        [
                            "self.sparse_mask_values",
                            "Attribute"
                        ],
                        [
                            "edge_mask * 0.99 + 0.005",
                            "BinOp"
                        ],
                        [
                            "sym_mask[edge_index[0], edge_index[1]]",
                            "Subscript"
                        ],
                        [
                            "edge_mask.to('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_485": {
                "input": {
                    "value": "mask_ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-edge_mask * torch.log(edge_mask) - (1 - edge_mask) * torch.log(1 - edge_mask)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_410": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_410": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_484": {
                "input": {
                    "value": "1 - edge_mask",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_526": {
                "obj": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item[subset]",
                            "Subscript"
                        ],
                        [
                            "item[edge_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_540": {
                "input": {
                    "value": "1.0 - random_noise",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_615": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_650": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_743": {
                "condition": {
                    "value": "subset == node_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_802": {
                "condition": {
                    "value": "subset == node_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "randn_439": {
                "*size": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_528": {
                "obj": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item[subset]",
                            "Subscript"
                        ],
                        [
                            "item[edge_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rand_539": {
                "*size": {
                    "value": "log_alpha.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_669": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_654": {
                "condition": {
                    "value": "data.train_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_673": {
                "condition": {
                    "value": "subset == node_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "dig/xgraph/method/shapley.py": {
        "torch": {
            "cat_81": {
                "variable": {
                    "value": "marginal_contributions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "marginal_contribution_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "coeffs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0 / comb(p, S) / (p - S + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_230": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.number_of_nodes()",
                            "Call"
                        ],
                        [
                            "data.num_nodes",
                            "Attribute"
                        ],
                        [
                            "graph.number_of_nodes()",
                            "Call"
                        ],
                        [
                            "data.num_nodes",
                            "Attribute"
                        ],
                        [
                            "graph.number_of_nodes()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "self.exclude_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "exclude_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack(set_exclude_masks, axis=0)",
                            "Call"
                        ],
                        [
                            "np.stack(set_exclude_masks, axis=0)",
                            "Call"
                        ],
                        [
                            "np.stack(set_exclude_masks, axis=0)",
                            "Call"
                        ],
                        [
                            "np.stack(set_exclude_masks, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "self.include_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "include_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack(set_include_masks, axis=0)",
                            "Call"
                        ],
                        [
                            "np.stack(set_include_masks, axis=0)",
                            "Call"
                        ],
                        [
                            "np.stack(set_include_masks, axis=0)",
                            "Call"
                        ],
                        [
                            "np.stack(set_include_masks, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_16": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gnnNets(data=batch)",
                            "Call"
                        ],
                        [
                            "gnnNets_NC(data=data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_26": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gnnNets(data=batch)",
                            "Call"
                        ],
                        [
                            "gnnNets_NC(data=data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_291": {
                "variable": {
                    "value": "node_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dig/xgraph/method/subgraphx.py": {
        "torch": {
            "tensor_117": {
                "variable": {
                    "value": "subsets",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "(subset, inv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "subsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([0])",
                            "Call"
                        ],
                        [
                            "torch.cat([subsets, col[edge_mask]]).unique()",
                            "Call"
                        ],
                        [
                            "[node_idx]",
                            "List"
                        ]
                    ]
                }
            },
            "unique_143": {
                "variable": {
                    "value": "(subset, inv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_154": {
                "variable": {
                    "value": "node_idx[subset]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "subset.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "row.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "subsets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[subsets, col[edge_mask]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_123": {
                "variable": {
                    "value": "subsets",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "node_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[node_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "row.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_131": {
                "variable": {
                    "value": "node_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_727": {
                "variable": {
                    "value": "subgraph_y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[subgraph_y[node].item() for node in tree_node_x.ori_graph.nodes()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "index_select_122": {
                "input": {
                    "value": "node_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "row.new_empty(num_nodes, dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "row",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "row.new_empty(row.size(0), dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "node_mask[row] & node_mask[col]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_133": {
                "variable": {
                    "value": "node_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[node_idx]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_141": {
                "input": {
                    "value": "node_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "row.new_empty(num_nodes, dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "row",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "row.new_empty(row.size(0), dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "node_mask[row] & node_mask[col]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_852": {
                "variable": {
                    "value": "saved_results",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.save_dir, f'{self.filename}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_864": {
                "obj": {
                    "value": "explanation_results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.save_dir, f'{self.filename}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_506": {
                "obj": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item[subset]",
                            "Subscript"
                        ],
                        [
                            "item[edge_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_845": {
                "data": {
                    "value": "[label]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_tensor_508": {
                "obj": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item[subset]",
                            "Subscript"
                        ],
                        [
                            "item[edge_mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_485": {
                "condition": {
                    "value": "subset == self.ori_node_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "dig/xgraph/models/ext/deeplift/deep_lift.py": {
        "torch": {
            "where_857": {
                "variable": {
                    "value": "new_grad_inp[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "abs(delta_in) < eps",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "new_grad_inp[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "grad_output[0] * delta_out / delta_in",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_879": {
                "variable": {
                    "value": "grad_input_unnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "abs(delta_in) < eps",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "new_grad_inp[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "grad_output[0] * delta_out / delta_in",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_991": {
                "variable": {
                    "value": "unpool_grad_out_delta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "2 * [unpool_grad_out_delta]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_1007": {
                "variable": {
                    "value": "new_grad_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "abs(delta_in) < eps",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "grad_input[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "unpool_grad_out_delta / delta_in",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_960": {
                "variable": {
                    "value": "delta_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "2 * [delta_in]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_965": {
                "variable": {
                    "value": "delta_out_xmax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_966": {
                "variable": {
                    "value": "delta_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[delta_out_xmax - output_ref, output - delta_out_xmax]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "chunk_978": {
                "variable": {
                    "value": "(unpool_grad_out_delta, unpool_grad_out_ref_delta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "unpool_func(grad_output_updated * delta_out, indices, module.kernel_size, module.stride, module.padding, list(cast(torch.Size, module.input.shape)))",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_835": {
                "input": {
                    "value": "attribution.view(attr_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_955": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_1029": {
                "tensors": {
                    "value": "2 * [delta_out]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_515": {
                "tensors": {
                    "value": "[input, baseline]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dig/xgraph/models/ext/deeplift/layer_deep_lift.py": {
        "torch": {}
    },
    "dig/xgraph/models/gradient_utils.py": {
        "torch": {
            "grad_103": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "torch.unbind(outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "grad_572": {
                "variable": {
                    "value": "saved_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "torch.unbind(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "grad_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list((layer_tensor for device_id in key_list for layer_tensor in saved_layer[device_id]))",
                            "Call"
                        ],
                        [
                            "tuple(grad_inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_94": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_113": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_484": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unbind_103": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_run_forward(forward_fn, inputs, target_ind, additional_forward_args)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_539": {
                "variable": {
                    "value": "chosen_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[node_idx], output[node_idx + num_node]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_545": {
                "variable": {
                    "value": "saved_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "torch.unbind(chosen_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "grad_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list((layer_tensor for device_id in key_list for layer_tensor in saved_layer[device_id]))",
                            "Call"
                        ],
                        [
                            "tuple(grad_inputs)",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unbind_572": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_run_forward(forward_fn, inputs, target=target_ind, additional_forward_args=additional_forward_args)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_37": {
                "input": {
                    "value": "torch.abs(input.grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_121": {
                "outputs": {
                    "value": "torch.unbind(_verify_select_column(current_out_tensor, gradient_neuron_index))",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unbind_122": {
                "input": {
                    "value": "_verify_select_column(current_out_tensor, gradient_neuron_index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unbind_545": {
                "input": {
                    "value": "chosen_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([output[node_idx], output[node_idx + num_node]])",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_37": {
                "input": {
                    "value": "input.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dig/xgraph/models/model_manager.py": {
        "torch": {
            "load_35": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.ckpt_dir, f'{args.model_name}_last.ckpt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.test_ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dig/xgraph/models/models.py": {
        "torch": {
            "ModuleList_58": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GCNConv(dim_hidden, dim_hidden) for _ in range(num_layer - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_65": {
                "variable": {
                    "value": "self.relus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.ReLU() for _ in range(num_layer - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(dim_hidden, dim_hidden)] + [nn.ReLU(), nn.Dropout(), nn.Linear(dim_hidden, num_classes)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_114": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GCNConv(dim_hidden, dim_hidden) for _ in range(num_layer - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.relus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.ReLU() for _ in range(num_layer - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(dim_hidden, num_classes)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_136": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_174": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GINConv(nn.Sequential(nn.Linear(dim_hidden, dim_hidden), nn.ReLU(), nn.Linear(dim_hidden, dim_hidden), nn.ReLU())) for _ in range(num_layer - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_182": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_183": {
                "variable": {
                    "value": "self.relus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.ReLU() for _ in range(num_layer - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "variable": {
                    "value": "self.ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(dim_hidden, dim_hidden)] + [nn.ReLU(), nn.Dropout(), nn.Linear(dim_hidden, num_classes)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_199": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_236": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GINConv(nn.Sequential(nn.Linear(dim_hidden, dim_hidden), nn.ReLU(), nn.Linear(dim_hidden, dim_hidden), nn.ReLU())) for _ in range(num_layer - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_244": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_245": {
                "variable": {
                    "value": "self.relus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.ReLU() for _ in range(num_layer - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_256": {
                "variable": {
                    "value": "self.ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(dim_hidden, dim_hidden)] + [nn.ReLU(), nn.Dropout(), nn.Linear(dim_hidden, num_classes)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_261": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_294": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lin.weight.data.T.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_326": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "(x, x)",
                            "Tuple"
                        ],
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "(x, x)",
                            "Tuple"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_555": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GCNConv_mask(dim_hidden, dim_hidden) for _ in range(num_layer - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_561": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_562": {
                "variable": {
                    "value": "self.relus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.ReLU() for _ in range(num_layer - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_573": {
                "variable": {
                    "value": "self.ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(dim_hidden, num_classes)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_577": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_613": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GINConv_mask(nn.Sequential(nn.Linear(dim_hidden, dim_hidden), nn.ReLU(), nn.Linear(dim_hidden, dim_hidden), nn.ReLU())) for _ in range(num_layer - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ReLU_621": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_622": {
                "variable": {
                    "value": "self.relus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.ReLU() for _ in range(num_layer - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_633": {
                "variable": {
                    "value": "self.ffn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Linear(dim_hidden, dim_hidden)] + [nn.ReLU(), nn.Dropout(), nn.Linear(dim_hidden, num_classes)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_638": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_671": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lin.weight.data.T.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_703": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "(x, x)",
                            "Tuple"
                        ],
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "(x, x)",
                            "Tuple"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_459": {
                "variable": {
                    "value": "edge_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_j.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "x_j.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_836": {
                "variable": {
                    "value": "edge_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_j.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "x_j.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "*args": {
                    "value": "nn.Linear(dim_node, dim_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_233": {
                "*args": {
                    "value": "nn.Linear(dim_node, dim_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_610": {
                "*args": {
                    "value": "nn.Linear(dim_node, dim_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "kwargs['x'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_171": {
                "in_features": {
                    "value": "dim_node",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_172": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_233": {
                "in_features": {
                    "value": "dim_node",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_234": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_564": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_610": {
                "in_features": {
                    "value": "dim_node",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_610": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_611": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_611": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_624": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_133": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "*args": {
                    "value": "nn.Linear(dim_hidden, dim_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_238": {
                "*args": {
                    "value": "nn.Linear(dim_hidden, dim_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_373": {
                "variable": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_mask, loop]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_499": {
                "variable": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_mask, loop]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_574": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_615": {
                "*args": {
                    "value": "nn.Linear(dim_hidden, dim_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_750": {
                "variable": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_mask, loop]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_876": {
                "variable": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_mask, loop]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_176": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_177": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_195": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_196": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_238": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_239": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_257": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_258": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_258": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_615": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_615": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_616": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_616": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_634": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_635": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_635": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_635": {
                "in_features": {
                    "value": "dim_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dig/xgraph/models/utils.py": {
        "torch": {
            "cat_34": {
                "variable": {
                    "value": "out_readoout",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "ReadOut.divided_graph(x, batch_index)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "node_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[node_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "row.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_87": {
                "variable": {
                    "value": "node_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "(subset, inv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "subsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[node_idx]",
                            "List"
                        ],
                        [
                            "node_idx",
                            "variable"
                        ],
                        [
                            "torch.cat([subsets, col[edge_mask]]).unique()",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_100": {
                "variable": {
                    "value": "(subset, inv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_124": {
                "variable": {
                    "value": "node_idx[subset]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "subset.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "row.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "subsets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[subsets, col[edge_mask]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_109": {
                "variable": {
                    "value": "subsets",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_98": {
                "input": {
                    "value": "node_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "row.new_empty(num_nodes, dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "row",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "row.new_empty(row.size(0), dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "node_mask[row] & node_mask[col]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "index_select_108": {
                "input": {
                    "value": "node_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "row.new_empty(num_nodes, dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "row",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "row.new_empty(row.size(0), dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "node_mask[row] & node_mask[col]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "dig/xgraph/utils/init.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_18": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/ggraph3D/G_SphereNet/run_prop_opt.py": {
        "torch": {
            "DataLoader_25": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset[idxs['train']]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "conf['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/ggraph3D/G_SphereNet/run_rand_gen.py": {
        "torch": {
            "DataLoader_26": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset[idxs['train']]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "conf['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "json.load(f)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "test/ggraph/utils/test_gen_mol_from_one_shot_tensor.py": {
        "torch": {
            "ones_6": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_7": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test/sslgraph/evaluation/test_nce_more_view.py": {
        "torch": {
            "randn_5": {
                "variable": {
                    "value": "zs_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_6": {
                "variable": {
                    "value": "zs_n_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_7": {
                "variable": {
                    "value": "zs_2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_8": {
                "variable": {
                    "value": "zs_n_2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_9": {
                "variable": {
                    "value": "zs_3",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_10": {
                "variable": {
                    "value": "zs_n_3",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_11": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 0], [1, 0, 1], [1, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test/threedgraph/evaluation/test_ThreeDEvaluator.py": {
        "torch": {}
    },
    "test/xgraph/dataset/test_MarginalDataset.py": {
        "torch": {
            "ones_16": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test/xgraph/evaluation/test_metrics.py": {
        "torch": {
            "ones_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(10, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_9": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "data": {
                    "value": "[1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_30": {
                "*size": {
                    "value": "edge_index.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0') if torch.cuda.is_available() else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    }
}