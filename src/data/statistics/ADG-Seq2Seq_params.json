{
    "ADGraphEmbedding/ADGmodeling.py": {
        "torch": {
            "zeros_64": {
                "variable": {
                    "value": "node_list_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(node_list), len(code_dic_w2i))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "device_5": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Embedding_13": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_14": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_33": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_56": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.max_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.attn_combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_61": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_76": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(torch.cat((embedded[0], hidden[0]), 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_78": {
                "variable": {
                    "value": "attn_applied",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "encoder_outputs.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded[0], attn_applied[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedded",
                            "variable"
                        ],
                        [
                            "self.linear(gru_output[0])[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((embedded[0], attn_applied[0]), 1)",
                            "Call"
                        ],
                        [
                            "self.attn_combine(output).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.out(output[0]), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_87": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out(output[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_5": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_91": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "(embedded[0], hidden[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model_tools.py": {
        "torch": {
            "device_18": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_48": {
                "variable": {
                    "value": "b_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(b_onehot, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "f_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(f_onehot, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_51": {
                "variable": {
                    "value": "node_onehot_t[k][m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "node_onehot_t[k][m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "encoder.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[SOS_token]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_151": {
                "variable": {
                    "value": "encoder_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_152": {
                "variable": {
                    "value": "embedder_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_153": {
                "variable": {
                    "value": "decoder_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "decoder.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "NLLLoss_155": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_429": {
                "variable": {
                    "value": "decoded_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_length)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "order_set_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(b_onehot, node_onehot_t[k][m], f_onehot)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "variable": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "encoder.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_195": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[SOS_token]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_445": {
                "obj": {
                    "value": "encoder1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model/ + ds_name + encoder_model.pkl",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_446": {
                "obj": {
                    "value": "embedder.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model/ + ds_name + embedder_model.pkl",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_447": {
                "obj": {
                    "value": "attn_decoder1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model/ + ds_name + decoder_model.pkl",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "order_set_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(b_onehot, node_onehot_t[k][m])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_381": {
                "variable": {
                    "value": "(log_prob, indexes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "beam_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                }
            },
            "cat_59": {
                "variable": {
                    "value": "order_set_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(node_onehot_t[k][m], f_onehot)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_268": {
                "variable": {
                    "value": "(log_prob, indexes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "beam_num",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "node_onehot_t[K][token]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "node_onehot_t[K][token]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "run.py": {
        "torch": {
            "device_18": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "source_batch[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(source_batch[i], dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "target_batch[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(target_batch[i], dtype=np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}