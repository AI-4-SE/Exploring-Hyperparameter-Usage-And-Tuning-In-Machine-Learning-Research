{
    "data/__init__.py": {
        "torch": {}
    },
    "data/cifar10.py": {
        "torch": {
            "DataLoader_38": {
                "variable": {
                    "value": "loader_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root=args.dir_data, train=False, download=True, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_25": {
                "variable": {
                    "value": "loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root=args.dir_data, train=True, download=True, transform=transform_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "data/cifar100.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "loader_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR100(root=args.dir_data, train=False, download=True, transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "256 * args.n_GPUs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_21": {
                "variable": {
                    "value": "loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR100(root=args.dir_data, train=True, download=True, transform=transform_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size * args.n_GPUs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "data/imagenet.py": {
        "torch": {
            "DataLoader_62": {
                "variable": {
                    "value": "loader_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(root=os.path.join(args.dir_data, 'val'), transform=transform_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ],
                        [
                            "batch_test // 10",
                            "BinOp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_28": {
                "variable": {
                    "value": "loader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(root=os.path.join(args.dir_data, 'train'), transform=transform_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_54": {
                "tensors": {
                    "value": "[_fused(crop) for crop in crops]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "loss/__init__.py": {
        "torch": {
            "log_softmax_189": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_190": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "teacher_scores / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_201": {
                "variable": {
                    "value": "student_correlation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "student_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "student_feature.reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "student_feature.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_202": {
                "variable": {
                    "value": "teacher_correlation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "teacher_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "teacher_feature.reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "teacher_feature.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_206": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(student_correlation - teacher_correlation) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_19": {
                "variable": {
                    "value": "self.loss_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_45": {
                "variable": {
                    "value": "self.log_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_46": {
                "variable": {
                    "value": "self.log_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_48": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if self.args.cpu else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "empty_log",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_180": {
                "variable": {
                    "value": "self.log_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'train_log.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_181": {
                "variable": {
                    "value": "self.log_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'test_log.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_53": {
                "variable": {
                    "value": "self.loss_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.loss_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "range(args.n_GPUs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "self.log_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.log_train, empty_log)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "self.log_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.log_test, empty_log)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_170": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'loss.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_171": {
                "obj": {
                    "value": "self.log_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'train_log.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_172": {
                "obj": {
                    "value": "self.log_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'test_log.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_203": {
                "input": {
                    "value": "student_correlation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(student_feature, student_feature.t())",
                            "Call"
                        ],
                        [
                            "student_correlation / torch.norm(student_correlation, p=2, dim=1).unsqueeze(dim=1)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_203": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_204": {
                "input": {
                    "value": "teacher_correlation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(teacher_feature, teacher_feature.t())",
                            "Call"
                        ],
                        [
                            "teacher_correlation / torch.norm(teacher_correlation, p=2, dim=1).unsqueeze(dim=1)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_204": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_23": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_179": {
                "f": {
                    "value": "os.path.join(apath, 'loss.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "kl_div_191": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(y / T, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(teacher_scores / T, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_25": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_27": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main_hinge.py": {
        "torch": {
            "manual_seed_18": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_68": {
                "variable": {
                    "value": "info",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "info_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint.dir, 'compression_information.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_145": {
                "obj": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_model.get_model().state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(checkpoint.dir, 'model/model_merge_latest.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "misc/apg.py": {
        "torch": {
            "norm_10": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param.squeeze().t()",
                            "Call"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_11": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - regularization * lr / (n + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_16": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param.squeeze().t()",
                            "Call"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_17": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - regularization * lr / (n + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_22": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(1 - regularization * lr / (n + eps), torch.zeros_like(n, device=n.device))",
                            "Call"
                        ],
                        [
                            "scale.repeat(ps[0], 1)",
                            "Call"
                        ],
                        [
                            "torch.max(1 - regularization * lr / (n + eps), torch.zeros_like(n, device=n.device))",
                            "Call"
                        ],
                        [
                            "scale.repeat(ps[0], 1).t()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param.squeeze().t()",
                            "Call"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "t_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_13": {
                "input": {
                    "value": "n[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_11": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(p, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.norm(p, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_17": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(p, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.norm(p, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clone_64": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "d_p.add(momentum, buf)",
                            "Call"
                        ],
                        [
                            "buf",
                            "variable"
                        ]
                    ]
                }
            },
            "clone_83": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "d_p.add(momentum, buf)",
                            "Call"
                        ],
                        [
                            "buf",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "misc/custom_sgd.py": {
        "torch": {
            "zeros_like_29": {
                "variable": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "misc/fp2fix.py": {
        "torch": {
            "load_13": {
                "variable": {
                    "value": "model_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ref",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_21": {
                "obj": {
                    "value": "model_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.ref)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}_fix{}{}'.format(path, args.n_bits, ext)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "misc/numpack.py": {
        "torch": {
            "stack_11": {
                "variable": {
                    "value": "bitrep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mods",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randint_44": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "idx_high",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "size": {
                    "value": "(4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(flat, flat.new_zeros(8 - len(flat) % 8))",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "misc/warm_multi_step_lr.py": {
        "torch": {}
    },
    "model/__init__.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if self.args.cpu else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_119": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "pretrain",
                            "variable"
                        ],
                        [
                            "os.path.join(apath, 'model', 'model_{}.pt'.format(resume))",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "self.args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_36": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "range(self.args.n_GPUs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_90": {
                "obj": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_model().state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(apath, 'model', 'model_{}.pt'.format(n))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/common.py": {
        "torch": {
            "Conv2d_110": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_121": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_124": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_127": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_54": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_55": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Conv2d(in_channels, out_channels, kernel_size, padding=kernel_size // 2, stride=stride, bias=bias, groups=groups)",
                            "Call"
                        ],
                        [
                            "net.modules()",
                            "Call"
                        ],
                        [
                            "net.modules()",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, weight=self.weight, padding=self.padding, stride=self.stride)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_61": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_64": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.projection2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_86": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.__save_dir__, 'Batch{}_Device{}.pt'.format(count_data, torch.cuda.current_device()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "self.__feature_map_norm__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.__feature_map_norm__, feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_162": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_163": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "current_device_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/densenet.py": {
        "torch": {
            "Sequential_25": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * k",
                            "BinOp"
                        ],
                        [
                            "c_in + k * n_blocks",
                            "BinOp"
                        ],
                        [
                            "c_out",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "int"
                        ],
                        [
                            "int(args.data_train[5:])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels + k",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "4 * k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AvgPool2d_69": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "*args": {
                    "value": "*module_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AvgPool2d_107": {
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_130": {
                "f": {
                    "value": "pretrain",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/in_use/flops_counter.py": {
        "torch": {}
    },
    "model/resnet.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "variable": {
                    "value": "self.act_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "self.act_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_74": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.downsample(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x.squeeze())",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_75": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, 0, c, c]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args.data_train[5:]) if args.data_train.find('CIFAR') >= 0 else 200",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Sequential_119": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "*args": {
                    "value": "*m",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes * self.expansion",
                            "BinOp"
                        ]
                    ]
                }
            },
            "AvgPool2d_116": {
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_151": {
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/resnext.py": {
        "torch": {
            "Conv2d_20": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "cardinality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality * bottleneck_width",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.expansion * group_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * group_width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.cardinality * self.bottleneck_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ]
                    ]
                }
            },
            "relu_81": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_86": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * group_width, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * group_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "self.expansion * group_width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_94": {
                "f": {
                    "value": "pretrain",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/vgg.py": {
        "torch": {
            "Sequential_55": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*body_list",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_channels, in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.n_colors",
                            "Attribute"
                        ],
                        [
                            "v",
                            "variable"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args.data_train[5:])",
                            "Call"
                        ],
                        [
                            "200",
                            "int"
                        ],
                        [
                            "1000",
                            "int"
                        ]
                    ]
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 7 * 7, 4096)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.n_colors",
                            "Attribute"
                        ],
                        [
                            "v",
                            "variable"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.n_colors",
                            "Attribute"
                        ],
                        [
                            "v",
                            "variable"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.n_colors",
                            "Attribute"
                        ],
                        [
                            "v",
                            "variable"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args.data_train[5:])",
                            "Call"
                        ],
                        [
                            "200",
                            "int"
                        ],
                        [
                            "1000",
                            "int"
                        ]
                    ]
                }
            },
            "load_105": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.n_colors",
                            "Attribute"
                        ],
                        [
                            "v",
                            "variable"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.n_colors",
                            "Attribute"
                        ],
                        [
                            "v",
                            "variable"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.n_colors",
                            "Attribute"
                        ],
                        [
                            "v",
                            "variable"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args.data_train[5:])",
                            "Call"
                        ],
                        [
                            "200",
                            "int"
                        ],
                        [
                            "1000",
                            "int"
                        ]
                    ]
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args.data_train[5:])",
                            "Call"
                        ],
                        [
                            "200",
                            "int"
                        ],
                        [
                            "1000",
                            "int"
                        ]
                    ]
                }
            },
            "load_107": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.extend",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_35": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_44": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/wide_resnet.py": {
        "torch": {
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.dropout_rate",
                            "Attribute"
                        ]
                    ]
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if args.data_train.find('CIFAR') >= 0 else 2",
                            "IfExp"
                        ],
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args.data_train[5:]) if args.data_train.find('CIFAR') >= 0 else 200",
                            "IfExp"
                        ]
                    ]
                }
            },
            "relu_81": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_82": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.conv1(F.relu(self.bn1(x))))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_29": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if args.data_train.find('CIFAR') >= 0 else 2",
                            "IfExp"
                        ],
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_28": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_90": {
                "f": {
                    "value": "pretrain",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model_hinge/__init__.py": {
        "torch": {
            "device_42": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if args.cpu else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_162": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(pretrain, 'model/model_latest.pt') if pretrain.find('.pt') < 0 else pretrain",
                            "IfExp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "os.path.join(pretrain, 'model/model_latest.pt') if pretrain.find('.pt') < 0 else pretrain",
                            "IfExp"
                        ],
                        [
                            "os.path.join(load, 'model', 'model_{}.pt'.format(resume))",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_62": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_65": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "range(args.n_GPUs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_109": {
                "obj": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_model().state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(apath, 'model', 'model_{}.pt'.format(n))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model_hinge/hinge_densenet.py": {
        "torch": {
            "Parameter_133": {
                "variable": {
                    "value": "batchnorm.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bn_weight, dim=0, index=pindex_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_134": {
                "variable": {
                    "value": "batchnorm.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bn_bias, dim=0, index=pindex_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_135": {
                "variable": {
                    "value": "batchnorm.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm.running_mean.data",
                            "Attribute"
                        ],
                        [
                            "batchnorm_final.running_mean.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(range(24)).to(device=weight1.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([pindex_in] + network_pindex[:l], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(network_pindex[12:l], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(network_pindex[25:l], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_136": {
                "variable": {
                    "value": "batchnorm.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm.running_var.data",
                            "Attribute"
                        ],
                        [
                            "batchnorm_final.running_var.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(range(24)).to(device=weight1.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([pindex_in] + network_pindex[:l], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(network_pindex[12:l], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(network_pindex[25:l], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_142": {
                "variable": {
                    "value": "weight1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1.weight.data.view(ws1[0], ws1[1] * ws1[2] * ws1[3]).t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(weight1, dim=0, index=index)",
                            "Call"
                        ],
                        [
                            "module_cur.state_dict()['body.2.weight']",
                            "Subscript"
                        ],
                        [
                            "module_cur.state_dict()['2.weight']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.repeat_interleave(pindex_in, ws1[2] * ws1[3]) * ws1[2] * ws1[3] + torch.tensor(range(0, ws1[2] * ws1[3])).repeat(pindex_in.shape[0]).to(device=weight1.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_144": {
                "variable": {
                    "value": "conv1.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight1.t().view(ws1[0], pl_in, ws1[2], ws1[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_148": {
                "variable": {
                    "value": "conv2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(weight2, dim=1, index=pindex_out).t().view(pl_out, ws2[1], ws2[2], ws2[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "module._modules[body]._modules[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module._modules['body']._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['body']._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['2'].weight.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module._modules['body']._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['body']._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['2'].weight.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "pindex_in",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "range(24)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "pindex_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pindex_in] + network_pindex[:l]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_224": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sparse_param(modules[l])",
                            "Call"
                        ],
                        [
                            "param.data",
                            "Attribute"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "pindex",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.network_pindex[25:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_313": {
                "variable": {
                    "value": "batchnorm_final.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bn_weight, dim=0, index=pindex)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_314": {
                "variable": {
                    "value": "batchnorm_final.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bn_bias, dim=0, index=pindex)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_315": {
                "variable": {
                    "value": "batchnorm_final.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm.running_mean.data",
                            "Attribute"
                        ],
                        [
                            "batchnorm_final.running_mean.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_pindex[l]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(self.network_pindex[25:], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_316": {
                "variable": {
                    "value": "batchnorm_final.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm.running_var.data",
                            "Attribute"
                        ],
                        [
                            "batchnorm_final.running_var.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_pindex[l]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(self.network_pindex[25:], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_320": {
                "variable": {
                    "value": "classifier.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(classifier_weight, dim=0, index=pindex).t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "module._modules[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module._modules['body']._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['body']._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['2'].weight.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module._modules['body']._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['body']._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['2'].weight.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "pindex_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "network_pindex[12:l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "pindex_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "network_pindex[25:l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_133": {
                "input": {
                    "value": "bn_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm.weight.data",
                            "Attribute"
                        ],
                        [
                            "batchnorm_final.weight.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(range(24)).to(device=weight1.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([pindex_in] + network_pindex[:l], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(network_pindex[12:l], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(network_pindex[25:l], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_134": {
                "input": {
                    "value": "bn_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm.bias.data",
                            "Attribute"
                        ],
                        [
                            "batchnorm_final.bias.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(range(24)).to(device=weight1.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([pindex_in] + network_pindex[:l], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(network_pindex[12:l], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(network_pindex[25:l], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_141": {
                "data": {
                    "value": "range(0, ws1[2] * ws1[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_148": {
                "input": {
                    "value": "weight2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2.weight.data.squeeze().t()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_pindex[l]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "t_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_226": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - reg / (n + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_263": {
                "variable": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(1 - reg / (n + eps), torch.zeros_like(n, device=n.device))",
                            "Call"
                        ],
                        [
                            "(1 + reg / w_norm) * torch.max(1 - reg / (n + eps), torch.zeros_like(n, device=n.device))",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(n, device=n.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(n, device=n.device)",
                            "Call"
                        ],
                        [
                            "self.calc_sparsity_solution(param.squeeze().t(), reg, self.args.sparsity_regularizer)",
                            "Call"
                        ],
                        [
                            "scale.repeat(param.shape[1], 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "param.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_263": {
                "variable": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_263": {
                "variable": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_365": {
                "obj": {
                    "value": "info_compress",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edict({'flops_original': self.flops / 10.0 ** 9, 'flops_remaining': self.flops_compress / 10.0 ** 9, 'flops_ratio': self.flops_compress / self.flops * 100, 'params_original': self.params / 10.0 ** 3, 'params_remaining': self.params_compress / 10.0 ** 3, 'params_ratio': self.params_compress / self.params * 100, 'epoch_continue': epoch_continue})",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.dir_save, self.args.save, 'compression_information.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_382": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2.weight.squeeze().t()",
                            "Call"
                        ],
                        [
                            "conv2.weight.data.view(ws[0], -1).t()",
                            "Call"
                        ],
                        [
                            "torch.mm(weight, projection).t().view(ps[0], ws[1], ws[2], ws[3])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "projection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sparse_param(modules[l])",
                            "Call"
                        ],
                        [
                            "self.sparse_param(modules[l])",
                            "Call"
                        ],
                        [
                            "conv3.weight.data.squeeze().t()",
                            "Call"
                        ]
                    ]
                }
            },
            "t_382": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_390": {
                "variable": {
                    "value": "body._modules[2].weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2.weight.squeeze().t()",
                            "Call"
                        ],
                        [
                            "conv2.weight.data.view(ws[0], -1).t()",
                            "Call"
                        ],
                        [
                            "torch.mm(weight, projection).t().view(ps[0], ws[1], ws[2], ws[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_228": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n - reg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_229": {
                "variable": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(n - reg, torch.zeros_like(n, device=n.device))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_313": {
                "input": {
                    "value": "bn_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm.weight.data",
                            "Attribute"
                        ],
                        [
                            "batchnorm_final.weight.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_pindex[l]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(self.network_pindex[25:], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_314": {
                "input": {
                    "value": "bn_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm.bias.data",
                            "Attribute"
                        ],
                        [
                            "batchnorm_final.bias.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_pindex[l]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(self.network_pindex[25:], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_320": {
                "input": {
                    "value": "classifier_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier.weight.data.t()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_pindex[l]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(self.network_pindex[25:], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_397": {
                "variable": {
                    "value": "module._modules[body]._modules[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module._modules['body']._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['body']._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['2'].weight.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module._modules['body']._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['body']._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['2'].weight.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "repeat_interleave_140": {
                "input": {
                    "value": "pindex_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(range(24)).to(device=weight1.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([pindex_in] + network_pindex[:l], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(network_pindex[12:l], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(network_pindex[25:l], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "ws1[2] * ws1[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_226": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param, p=2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_233": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(n > threshold).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "acos_234": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reg / 8 * (n[idx[0]] / 3) ** (-3 / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_235": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param, p=2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_293": {
                "input": {
                    "value": "projection.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_401": {
                "variable": {
                    "value": "module._modules[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module._modules['body']._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['body']._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['2'].weight.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module._modules['body']._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['body']._modules['2'].weight.shape[0]",
                            "Subscript"
                        ],
                        [
                            "module._modules['2'].weight.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_228": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param, p=2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_230": {
                "input": {
                    "value": "1 - reg / (n + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_240": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param, p=2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_241": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(c2 > 0).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_275": {
                "input": {
                    "value": "projection.squeeze().t() ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_230": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param, p=2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_243": {
                "input": {
                    "value": "torch.sum(scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_236": {
                "input": {
                    "value": "2 / 3 * (-phi + math.pi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_243": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(1 - reg / (n + eps), torch.zeros_like(n, device=n.device))",
                            "Call"
                        ],
                        [
                            "(1 + reg / w_norm) * torch.max(1 - reg / (n + eps), torch.zeros_like(n, device=n.device))",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(n, device=n.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(n, device=n.device)",
                            "Call"
                        ],
                        [
                            "self.calc_sparsity_solution(param.squeeze().t(), reg, self.args.sparsity_regularizer)",
                            "Call"
                        ],
                        [
                            "scale.repeat(param.shape[1], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_242": {
                "input": {
                    "value": "c2[idx[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model_hinge/hinge_densenet_svd.py": {
        "torch": {
            "index_select_113": {
                "variable": {
                    "value": "weight1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1.weight.data.view(ws1[0], ws1[1] * ws1[2] * ws1[3]).t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(weight1, dim=1, index=pindex)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_pindex[l]",
                            "Subscript"
                        ],
                        [
                            "network_pindex[l]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_114": {
                "variable": {
                    "value": "conv1.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight1.t().view(pl, ws1[1], ws1[2], ws1[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "conv2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(weight2, dim=0, index=pindex).t().view(ws2[0], pl, ws2[2], ws2[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_166": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sparse_param(modules[l])",
                            "Call"
                        ],
                        [
                            "param.data",
                            "Attribute"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_118": {
                "input": {
                    "value": "weight2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2.weight.data.squeeze().t()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_pindex[l]",
                            "Subscript"
                        ],
                        [
                            "network_pindex[l]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "t_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_168": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - reg / (n + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_205": {
                "variable": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(1 - reg / (n + eps), torch.zeros_like(n, device=n.device))",
                            "Call"
                        ],
                        [
                            "(1 + reg / w_norm) * torch.max(1 - reg / (n + eps), torch.zeros_like(n, device=n.device))",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(n, device=n.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(n, device=n.device)",
                            "Call"
                        ],
                        [
                            "self.calc_sparsity_solution(param.squeeze().t(), reg, self.args.sparsity_regularizer)",
                            "Call"
                        ],
                        [
                            "scale.repeat(param.shape[0], 1).t()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "param.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_205": {
                "variable": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_205": {
                "variable": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_279": {
                "obj": {
                    "value": "info_compress",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edict({'flops_original': self.flops / 10.0 ** 9, 'flops_remaining': self.flops_compress / 10.0 ** 9, 'flops_ratio': self.flops_compress / self.flops * 100, 'params_original': self.params / 10.0 ** 3, 'params_remaining': self.params_compress / 10.0 ** 3, 'params_ratio': self.params_compress / self.params * 100, 'epoch_continue': epoch_continue})",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.dir_save, self.args.save, 'compression_information.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_170": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n - reg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_171": {
                "variable": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(n - reg, torch.zeros_like(n, device=n.device))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_168": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_175": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(n > threshold).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "acos_176": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reg / 8 * (n[idx[0]] / 3) ** (-3 / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_177": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_235": {
                "input": {
                    "value": "projection.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_170": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_172": {
                "input": {
                    "value": "1 - reg / (n + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_182": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_183": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(c2 > 0).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_217": {
                "input": {
                    "value": "projection.squeeze().t() ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_172": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_185": {
                "input": {
                    "value": "torch.sum(scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_178": {
                "input": {
                    "value": "2 / 3 * (-phi + math.pi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_185": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(1 - reg / (n + eps), torch.zeros_like(n, device=n.device))",
                            "Call"
                        ],
                        [
                            "(1 + reg / w_norm) * torch.max(1 - reg / (n + eps), torch.zeros_like(n, device=n.device))",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(n, device=n.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(n, device=n.device)",
                            "Call"
                        ],
                        [
                            "self.calc_sparsity_solution(param.squeeze().t(), reg, self.args.sparsity_regularizer)",
                            "Call"
                        ],
                        [
                            "scale.repeat(param.shape[0], 1).t()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_184": {
                "input": {
                    "value": "c2[idx[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model_hinge/hinge_resnet_basic.py": {
        "torch": {
            "Sequential_64": {
                "variable": {
                    "value": "module._modules[body]._modules[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "module._modules[body]._modules[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "index_select_158": {
                "variable": {
                    "value": "projection1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projection1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv12.weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "conv12.weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(projection1, dim=1, index=pindex1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_159": {
                "variable": {
                    "value": "conv12.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "projection1.t().view(pindex1.shape[0], ws1[0], 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_165": {
                "variable": {
                    "value": "batchnorm1.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bn_weight1, dim=0, index=pindex1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_166": {
                "variable": {
                    "value": "batchnorm1.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bn_bias1, dim=0, index=pindex1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_167": {
                "variable": {
                    "value": "batchnorm1.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_mean1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm1.running_mean.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_168": {
                "variable": {
                    "value": "batchnorm1.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_var1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm1.running_var.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_173": {
                "variable": {
                    "value": "weight2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv21.weight.data.view(ws2[0], -1).t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(weight2, dim=0, index=index)",
                            "Call"
                        ],
                        [
                            "torch.index_select(weight2, dim=1, index=pindex2)",
                            "Call"
                        ],
                        [
                            "module_cur.state_dict()['body.3.weight']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.repeat_interleave(pindex1, ws2[2] * ws2[3]) * ws2[2] * ws2[3] + torch.tensor(range(0, ws2[2] * ws2[3])).repeat(pindex1.shape[0]).cuda()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "index_select_174": {
                "variable": {
                    "value": "weight2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv21.weight.data.view(ws2[0], -1).t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(weight2, dim=0, index=index)",
                            "Call"
                        ],
                        [
                            "torch.index_select(weight2, dim=1, index=pindex2)",
                            "Call"
                        ],
                        [
                            "module_cur.state_dict()['body.3.weight']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_175": {
                "variable": {
                    "value": "conv21.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight2.t().view(pindex2.shape[0], pindex1.shape[0], ws2[2], ws2[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_178": {
                "variable": {
                    "value": "projection2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projection2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv22.weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "conv22.weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(projection2, dim=0, index=pindex2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_179": {
                "variable": {
                    "value": "conv22.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "projection2.t().view(-1, pindex2.shape[0], 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_52": {
                "variable": {
                    "value": "self.slope_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.slope_n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "variable": {
                    "value": "conv12.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "params.bias1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_113": {
                "variable": {
                    "value": "conv22.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "params.bias2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_161": {
                "variable": {
                    "value": "conv12.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bias1, dim=0, index=pindex1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_252": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "index_select_165": {
                "input": {
                    "value": "bn_weight1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm1.weight.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_166": {
                "input": {
                    "value": "bn_bias1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm1.bias.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_171": {
                "data": {
                    "value": "range(0, ws2[2] * ws2[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_256": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - reg / (n + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_334": {
                "variable": {
                    "value": "param1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scale1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calc_sparsity_solution(param1, 0, reg, self.args.sparsity_regularizer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "param1.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_334": {
                "variable": {
                    "value": "param1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_335": {
                "variable": {
                    "value": "param2.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calc_sparsity_solution(param2, 1, reg, self.args.sparsity_regularizer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "param2.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_335": {
                "variable": {
                    "value": "param2.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_408": {
                "obj": {
                    "value": "info_compress",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edict({'flops_original': self.flops / 10.0 ** 9, 'flops_remaining': self.flops_compress / 10.0 ** 9, 'flops_ratio': self.flops_compress / self.flops * 100, 'params_original': self.params / 10.0 ** 3, 'params_remaining': self.params_compress / 10.0 ** 3, 'params_ratio': self.params_compress / self.params * 100, 'epoch_continue': epoch_continue})",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.dir_save, self.args.save, 'compression_information.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_438": {
                "variable": {
                    "value": "body._modules[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "index_select_161": {
                "input": {
                    "value": "bias1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv12.bias.data if conv12.bias is not None else None",
                            "IfExp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_258": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n - reg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_259": {
                "variable": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(n - reg, torch.zeros_like(n, device=n.device))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_429": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convs._modules['0'].weight.data.view(ws[0], -1).t()",
                            "Call"
                        ],
                        [
                            "torch.mm(weight, projection).t().view(ps[0], ws[1], ws[2], ws[3])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "projection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convs._modules['1'].weight.data.squeeze().t()",
                            "Call"
                        ]
                    ]
                }
            },
            "t_429": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_431": {
                "variable": {
                    "value": "body._modules[0].weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convs._modules['0'].weight.data.view(ws[0], -1).t()",
                            "Call"
                        ],
                        [
                            "torch.mm(weight, projection).t().view(ps[0], ws[1], ws[2], ws[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_56": {
                "input": {
                    "value": "-x",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "repeat_interleave_170": {
                "input": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                },
                "repeats": {
                    "value": "ws2[2] * ws2[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_256": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_263": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(n > threshold).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "acos_264": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reg / 8 * (n[idx[0]] / 3) ** (-3 / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_268": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_296": {
                "input": {
                    "value": "torch.norm(projection1.grad.squeeze().t(), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_297": {
                "input": {
                    "value": "torch.norm(projection2.grad.squeeze().t(), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_310": {
                "data": {
                    "value": "5 / 9",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_grad_ratio.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_437": {
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_258": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_260": {
                "input": {
                    "value": "1 - reg / (n + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_277": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_278": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(c2 > 0).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_296": {
                "input": {
                    "value": "projection1.grad.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_297": {
                "input": {
                    "value": "projection2.grad.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_351": {
                "input": {
                    "value": "projection1.squeeze().t() ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_352": {
                "input": {
                    "value": "projection2.squeeze().t() ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_260": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_280": {
                "input": {
                    "value": "torch.sum(scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_269": {
                "input": {
                    "value": "2 / 3 * (-phi + math.pi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_280": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(1 - reg / (n + eps), torch.zeros_like(n, device=n.device))",
                            "Call"
                        ],
                        [
                            "(1 + reg / w_norm) * torch.max(1 - reg / (n + eps), torch.zeros_like(n, device=n.device))",
                            "BinOp"
                        ],
                        [
                            "scale.repeat(param.shape[1], 1)",
                            "Call"
                        ],
                        [
                            "scale.repeat(param.shape[0], 1).t()",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(n, device=n.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(n, device=n.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_279": {
                "input": {
                    "value": "c2[idx[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model_hinge/hinge_resnet_basic_svd.py": {
        "torch": {
            "index_select_68": {
                "variable": {
                    "value": "weight1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv11.weight.data.view(ws1[0], -1).t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(weight1, dim=1, index=pindex1)",
                            "Call"
                        ],
                        [
                            "module_cur.state_dict()['body.0.weight']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "conv11.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight1.t().view(pindex1.shape[0], ws1[1], ws1[2], ws1[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_72": {
                "variable": {
                    "value": "projection1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projection1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv12.weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "conv12.weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(projection1, dim=0, index=pindex1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "conv12.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "projection1.t().view(ws1[0], pindex1.shape[0], 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_77": {
                "variable": {
                    "value": "weight2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv21.weight.data.view(ws2[0], -1).t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(weight2, dim=1, index=pindex2)",
                            "Call"
                        ],
                        [
                            "module_cur.state_dict()['body.3.weight']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "conv21.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight2.t().view(pindex2.shape[0], ws2[1], ws2[2], ws2[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_81": {
                "variable": {
                    "value": "projection2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projection2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv22.weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "conv22.weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(projection2, dim=0, index=pindex2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_82": {
                "variable": {
                    "value": "conv22.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "projection2.t().view(ws2[0], pindex2.shape[0], 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_168": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_161": {
                "variable": {
                    "value": "mean1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param1.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_161": {
                "variable": {
                    "value": "mean1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_162": {
                "variable": {
                    "value": "mean2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param2.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_162": {
                "variable": {
                    "value": "mean2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_172": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - reg / (n + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_262": {
                "variable": {
                    "value": "param1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scale1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calc_sparsity_solution(param1, 1, reg1, self.args.sparsity_regularizer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "param1.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_262": {
                "variable": {
                    "value": "param1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_263": {
                "variable": {
                    "value": "param2.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calc_sparsity_solution(param2, 1, reg2, self.args.sparsity_regularizer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "param2.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_263": {
                "variable": {
                    "value": "param2.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_336": {
                "obj": {
                    "value": "info_compress",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edict({'flops_original': self.flops / 10.0 ** 9, 'flops_remaining': self.flops_compress / 10.0 ** 9, 'flops_ratio': self.flops_compress / self.flops * 100, 'params_original': self.params / 10.0 ** 3, 'params_remaining': self.params_compress / 10.0 ** 3, 'params_ratio': self.params_compress / self.params * 100, 'epoch_continue': epoch_continue})",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.dir_save, self.args.save, 'compression_information.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_174": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n - reg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_175": {
                "variable": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(n - reg, torch.zeros_like(n, device=n.device))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_172": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_179": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(n > threshold).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "acos_180": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reg / 8 * (n[idx[0]] / 3) ** (-3 / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_184": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_212": {
                "input": {
                    "value": "torch.norm(projection1.grad.squeeze().t(), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_213": {
                "input": {
                    "value": "torch.norm(projection2.grad.squeeze().t(), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_226": {
                "data": {
                    "value": "5 / 9",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_grad_ratio.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_like_174": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_176": {
                "input": {
                    "value": "1 - reg / (n + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_193": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_194": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(c2 > 0).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_212": {
                "input": {
                    "value": "projection1.grad.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_213": {
                "input": {
                    "value": "projection2.grad.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_279": {
                "input": {
                    "value": "projection1.squeeze().t() ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_280": {
                "input": {
                    "value": "projection2.squeeze().t() ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_176": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_196": {
                "input": {
                    "value": "torch.sum(scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_185": {
                "input": {
                    "value": "2 / 3 * (-phi + math.pi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_196": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(1 - reg / (n + eps), torch.zeros_like(n, device=n.device))",
                            "Call"
                        ],
                        [
                            "(1 + reg / w_norm) * torch.max(1 - reg / (n + eps), torch.zeros_like(n, device=n.device))",
                            "BinOp"
                        ],
                        [
                            "scale.repeat(param.shape[1], 1)",
                            "Call"
                        ],
                        [
                            "scale.repeat(param.shape[0], 1).t()",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(n, device=n.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(n, device=n.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_195": {
                "input": {
                    "value": "c2[idx[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model_hinge/hinge_resnet_bottleneck.py": {
        "torch": {
            "Parameter_84": {
                "variable": {
                    "value": "conv1.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(weight1, dim=1, index=pindex1).t().view(pl1, -1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_87": {
                "variable": {
                    "value": "batchnorm1.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bn_weight1, dim=0, index=pindex1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_88": {
                "variable": {
                    "value": "batchnorm1.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bn_bias1, dim=0, index=pindex1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_89": {
                "variable": {
                    "value": "batchnorm1.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_mean1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm1.running_mean.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_90": {
                "variable": {
                    "value": "batchnorm1.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_var1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm1.running_var.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_95": {
                "variable": {
                    "value": "weight2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2.weight.data.view(ws2[0], ws2[1] * ws2[2] * ws2[3]).t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(weight2, dim=0, index=index)",
                            "Call"
                        ],
                        [
                            "torch.index_select(weight2, dim=1, index=pindex3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.repeat_interleave(pindex1, ws2[2] * ws2[3]) * ws2[2] * ws2[3] + torch.tensor(range(0, ws2[2] * ws2[3])).repeat(pindex1.shape[0]).cuda()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "index_select_96": {
                "variable": {
                    "value": "weight2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2.weight.data.view(ws2[0], ws2[1] * ws2[2] * ws2[3]).t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(weight2, dim=0, index=index)",
                            "Call"
                        ],
                        [
                            "torch.index_select(weight2, dim=1, index=pindex3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_97": {
                "variable": {
                    "value": "conv2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight2.view(pl3, pl1, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_100": {
                "variable": {
                    "value": "batchnorm2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bn_weight2, dim=0, index=pindex3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_101": {
                "variable": {
                    "value": "batchnorm2.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bn_bias2, dim=0, index=pindex3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_102": {
                "variable": {
                    "value": "batchnorm2.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_mean2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm2.running_mean.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_103": {
                "variable": {
                    "value": "batchnorm2.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_var2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm2.running_var.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "conv3.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(weight3, dim=0, index=pindex3).view(-1, pl3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_84": {
                "input": {
                    "value": "weight1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module._modules['body']._modules['0'].weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "conv1.weight.data.squeeze().t()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "t_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "index_select_87": {
                "input": {
                    "value": "bn_weight1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm1.weight.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_88": {
                "input": {
                    "value": "bn_bias1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm1.bias.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "data": {
                    "value": "range(0, ws2[2] * ws2[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_100": {
                "input": {
                    "value": "bn_weight2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm2.weight.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_101": {
                "input": {
                    "value": "bn_bias2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm2.bias.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_106": {
                "input": {
                    "value": "weight3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module._modules['body']._modules['6'].weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "conv3.weight.data.squeeze().t()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_166": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_159": {
                "variable": {
                    "value": "mean1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projection1.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_159": {
                "variable": {
                    "value": "mean1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_160": {
                "variable": {
                    "value": "mean2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projection2.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_160": {
                "variable": {
                    "value": "mean2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_170": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - reg / (n + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_249": {
                "variable": {
                    "value": "param1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scale1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calc_sparsity_solution(param1, 0, reg1, self.args.sparsity_regularizer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "param1.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_249": {
                "variable": {
                    "value": "param1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_250": {
                "variable": {
                    "value": "param2.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calc_sparsity_solution(param2, 1, reg2, self.args.sparsity_regularizer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "param2.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_250": {
                "variable": {
                    "value": "param2.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_339": {
                "obj": {
                    "value": "info_compress",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edict({'flops_original': self.flops / 10.0 ** 9, 'flops_remaining': self.flops_compress / 10.0 ** 9, 'flops_ratio': self.flops_compress / self.flops * 100, 'params_original': self.params / 10.0 ** 3, 'params_remaining': self.params_compress / 10.0 ** 3, 'params_ratio': self.params_compress / self.params * 100, 'epoch_continue': epoch_continue})",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.dir_save, self.args.save, 'compression_information.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "repeat_interleave_93": {
                "input": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                },
                "repeats": {
                    "value": "ws2[2] * ws2[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_172": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n - reg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_173": {
                "variable": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(n - reg, torch.zeros_like(n, device=n.device))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_170": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_177": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(n > threshold).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "acos_178": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reg / 8 * (n[idx[0]] / 3) ** (-3 / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_182": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_210": {
                "input": {
                    "value": "torch.norm(projection1.grad.squeeze().t(), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_211": {
                "input": {
                    "value": "torch.norm(projection2.grad.squeeze().t(), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "data": {
                    "value": "5 / 9",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_grad_ratio.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_like_172": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_174": {
                "input": {
                    "value": "1 - reg / (n + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_191": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_192": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(c2 > 0).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_210": {
                "input": {
                    "value": "projection1.grad.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_211": {
                "input": {
                    "value": "projection2.grad.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_262": {
                "input": {
                    "value": "projection1.squeeze().t() ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_263": {
                "input": {
                    "value": "projection2.squeeze().t() ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_174": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_194": {
                "input": {
                    "value": "torch.sum(scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_183": {
                "input": {
                    "value": "2 / 3 * (-phi + math.pi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_194": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(1 - reg / (n + eps), torch.zeros_like(n, device=n.device))",
                            "Call"
                        ],
                        [
                            "(1 + reg / w_norm) * torch.max(1 - reg / (n + eps), torch.zeros_like(n, device=n.device))",
                            "BinOp"
                        ],
                        [
                            "scale.repeat(param.shape[1], 1)",
                            "Call"
                        ],
                        [
                            "scale.repeat(param.shape[0], 1).t()",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(n, device=n.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(n, device=n.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_193": {
                "input": {
                    "value": "c2[idx[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model_hinge/hinge_resnext.py": {
        "torch": {
            "cat_32": {
                "variable": {
                    "value": "joint",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight1, weight3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_95": {
                "variable": {
                    "value": "conv1.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(weight1, dim=0, index=pindex).view(pl * gs, ws1[1], 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "variable": {
                    "value": "batchnorm1.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bn_weight1.view(groups, gs), dim=0, index=pindex).view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_99": {
                "variable": {
                    "value": "batchnorm1.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bn_bias1.view(groups, gs), dim=0, index=pindex).view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_100": {
                "variable": {
                    "value": "batchnorm1.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_mean1.view(groups, gs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_101": {
                "variable": {
                    "value": "batchnorm1.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_var1.view(groups, gs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_104": {
                "variable": {
                    "value": "conv2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(weight2, dim=0, index=pindex).view(pl * gs, gs, ws2[2], ws2[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "batchnorm2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bn_weight2.view(groups, gs), dim=0, index=pindex).view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_107": {
                "variable": {
                    "value": "batchnorm2.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bn_bias2.view(groups, gs), dim=0, index=pindex).view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_108": {
                "variable": {
                    "value": "batchnorm2.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_mean2.view(groups, gs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_109": {
                "variable": {
                    "value": "batchnorm2.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_var2.view(groups, gs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_112": {
                "variable": {
                    "value": "conv3.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(weight3, dim=0, index=pindex).view(ws3[0], pl * gs, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "joint",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight1_teach, weight3_teach]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "joint",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[weight1, weight3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_157": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param.data",
                            "Attribute"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_95": {
                "input": {
                    "value": "weight1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv1.weight.data.squeeze().view(groups, -1)",
                            "Call"
                        ],
                        [
                            "conv1.weight.data.squeeze().view(groups, gs * conv1.in_channels)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_98": {
                "input": {
                    "value": "bn_weight1.view(groups, gs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_99": {
                "input": {
                    "value": "bn_bias1.view(groups, gs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_104": {
                "input": {
                    "value": "weight2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2.weight.data.view(groups, ws2[1] * ws2[2] * ws2[3] * gs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_106": {
                "input": {
                    "value": "bn_weight2.view(groups, gs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_107": {
                "input": {
                    "value": "bn_bias2.view(groups, gs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_112": {
                "input": {
                    "value": "weight3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv3.weight.data.squeeze().t().reshape(groups, -1)",
                            "Call"
                        ],
                        [
                            "conv3.weight.data.squeeze().t().reshape(groups, gs * conv3.out_channels)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_159": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - reg / (n + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_199": {
                "variable": {
                    "value": "param1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scale1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale.repeat(int(np.prod(np.array(ws1)) / groups), 1).t()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "param1.squeeze().view(groups, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_200": {
                "variable": {
                    "value": "param2.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale.repeat(int(np.prod(np.array(ws3)) / groups), 1).t()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "param2.squeeze().t().reshape(groups, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_200": {
                "variable": {
                    "value": "param2.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_200": {
                "variable": {
                    "value": "param2.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_293": {
                "obj": {
                    "value": "info_compress",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edict({'flops_original': self.flops / 10.0 ** 9, 'flops_remaining': self.flops_compress / 10.0 ** 9, 'flops_ratio': self.flops_compress / self.flops * 100, 'params_original': self.params / 10.0 ** 3, 'params_remaining': self.params_compress / 10.0 ** 3, 'params_ratio': self.params_compress / self.params * 100, 'epoch_continue': epoch_continue})",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.dir_save, self.args.save, 'compression_information.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_153": {
                "tensors": {
                    "value": "[param1_new, param2_new]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_161": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n - reg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_162": {
                "variable": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(n - reg, torch.zeros_like(n, device=n.device))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_159": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_166": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(n > threshold).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "acos_167": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reg / 8 * (n[idx[0]] / 3) ** (-3 / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_168": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_230": {
                "input": {
                    "value": "projection",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_161": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_163": {
                "input": {
                    "value": "1 - reg / (n + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_173": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_174": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(c2 > 0).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_212": {
                "input": {
                    "value": "projection ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_163": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_176": {
                "input": {
                    "value": "torch.sum(scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_169": {
                "input": {
                    "value": "2 / 3 * (-phi + math.pi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_176": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(1 - reg / (n + eps), torch.zeros_like(n, device=n.device))",
                            "Call"
                        ],
                        [
                            "(1 + reg / w_norm) * torch.max(1 - reg / (n + eps), torch.zeros_like(n, device=n.device))",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(n, device=n.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(n, device=n.device)",
                            "Call"
                        ],
                        [
                            "self.calc_sparsity_solution(param, reg, self.args.sparsity_regularizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_175": {
                "input": {
                    "value": "c2[idx[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model_hinge/hinge_utility.py": {
        "torch": {
            "zeros_29": {
                "variable": {
                    "value": "s_new",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.prod(torch.tensor(ws[1:]))",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "ws[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_31": {
                "variable": {
                    "value": "weight_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "s_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(torch.prod(torch.tensor(ws[1:])), ws[0]).to(torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.zeros(torch.prod(torch.tensor(ws[1:])), ws[0]).to(torch.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_31": {
                "variable": {
                    "value": "weight_out",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_75": {
                "variable": {
                    "value": "projection",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "ws[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight.size()",
                            "Call"
                        ],
                        [
                            "weight.size()",
                            "Call"
                        ],
                        [
                            "weight.size()",
                            "Call"
                        ],
                        [
                            "weight.size()",
                            "Call"
                        ],
                        [
                            "weight.size()",
                            "Call"
                        ],
                        [
                            "weight.size()",
                            "Call"
                        ],
                        [
                            "weight.size()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "projection",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ws[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "ws[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "projection",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ws[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "ws[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_164": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature[:row, :column, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.reshape(feature, (sz[0] * sz[1], 1, sz[2], sz[3]))",
                            "Call"
                        ],
                        [
                            "make_grid(feature, nrow=sz[1], normalize=normalize, padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(sz[0] * sz[1], 1, sz[2], sz[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_195": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0 if dim == 'output' else 1",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "norm_247": {
                "variable": {
                    "value": "filter_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filter_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(filter_matrix, dim=0)",
                            "Call"
                        ],
                        [
                            "filter_matrix.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "s_new",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.prod(torch.tensor(ws[1:]))",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "ws[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_51": {
                "variable": {
                    "value": "projection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(torch.prod(torch.tensor(ws[1:])), ws[0]).to(torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.zeros(torch.prod(torch.tensor(ws[1:])), ws[0]).to(torch.float64)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "t_51": {
                "variable": {
                    "value": "projection",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_54": {
                "variable": {
                    "value": "projection",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s.diag()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "t_54": {
                "variable": {
                    "value": "projection",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_28": {
                "ndarray": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "ndarray": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_111": {
                "n": {
                    "value": "ws[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_125": {
                "n": {
                    "value": "ws[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_111": {
                "*size": {
                    "value": "[ws[0], ws[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_125": {
                "*size": {
                    "value": "[ws[0], ws[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "nonzero_204": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randperm(int(len(n) * percentage)).sort().values.to(n.device)",
                            "Call"
                        ],
                        [
                            "torch.randperm(fix_channel).sort().values.to(n.device)",
                            "Call"
                        ],
                        [
                            "n > min(t, threshold)",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(f).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([f0, f], dim=0).unique().sort().values",
                            "Attribute"
                        ],
                        [
                            "n > t",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(f).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([f0, f], dim=0).unique().sort().values",
                            "Attribute"
                        ],
                        [
                            "n >= t",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(f).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "n > min(t, threshold)",
                            "Compare"
                        ],
                        [
                            "n >= min(t, threshold)",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(f).squeeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_204": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_213": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randperm(int(len(n) * percentage)).sort().values.to(n.device)",
                            "Call"
                        ],
                        [
                            "torch.randperm(fix_channel).sort().values.to(n.device)",
                            "Call"
                        ],
                        [
                            "n > min(t, threshold)",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(f).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([f0, f], dim=0).unique().sort().values",
                            "Attribute"
                        ],
                        [
                            "n > t",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(f).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([f0, f], dim=0).unique().sort().values",
                            "Attribute"
                        ],
                        [
                            "n >= t",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(f).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "n > min(t, threshold)",
                            "Compare"
                        ],
                        [
                            "n >= min(t, threshold)",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(f).squeeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_213": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_221": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randperm(int(len(n) * percentage)).sort().values.to(n.device)",
                            "Call"
                        ],
                        [
                            "torch.randperm(fix_channel).sort().values.to(n.device)",
                            "Call"
                        ],
                        [
                            "n > min(t, threshold)",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(f).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([f0, f], dim=0).unique().sort().values",
                            "Attribute"
                        ],
                        [
                            "n > t",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(f).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([f0, f], dim=0).unique().sort().values",
                            "Attribute"
                        ],
                        [
                            "n >= t",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(f).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "n > min(t, threshold)",
                            "Compare"
                        ],
                        [
                            "n >= min(t, threshold)",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(f).squeeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_221": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_227": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randperm(int(len(n) * percentage)).sort().values.to(n.device)",
                            "Call"
                        ],
                        [
                            "torch.randperm(fix_channel).sort().values.to(n.device)",
                            "Call"
                        ],
                        [
                            "n > min(t, threshold)",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(f).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([f0, f], dim=0).unique().sort().values",
                            "Attribute"
                        ],
                        [
                            "n > t",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(f).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([f0, f], dim=0).unique().sort().values",
                            "Attribute"
                        ],
                        [
                            "n >= t",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(f).squeeze(dim=1)",
                            "Call"
                        ],
                        [
                            "n > min(t, threshold)",
                            "Compare"
                        ],
                        [
                            "n >= min(t, threshold)",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(f).squeeze(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_227": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "prod_29": {
                "input": {
                    "value": "torch.tensor(ws[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "ws[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "prod_48": {
                "input": {
                    "value": "torch.tensor(ws[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_207": {
                "tensors": {
                    "value": "[f0, f]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_224": {
                "tensors": {
                    "value": "[f0, f]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sort_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "ws[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_199": {
                "n": {
                    "value": "int(len(n) * percentage)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_216": {
                "n": {
                    "value": "fix_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_205": {
                "n": {
                    "value": "int(len(n) * percentage)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_222": {
                "n": {
                    "value": "fix_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sort_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model_hinge/hinge_vgg.py": {
        "torch": {
            "Sequential_46": {
                "variable": {
                    "value": "module[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "index_select_102": {
                "variable": {
                    "value": "weight1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv11.weight.data.view(ws1[0], -1).t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(weight1, dim=0, index=index)",
                            "Call"
                        ],
                        [
                            "torch.index_select(weight1, dim=1, index=pindex1)",
                            "Call"
                        ],
                        [
                            "module_cur.state_dict()['0.weight']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_nonzero_index(projection1, dim='input', counter=1, percentage=percentage, threshold=threshold)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_103": {
                "variable": {
                    "value": "conv11.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight1.t().view(pindex1.shape[0], -1, ws1[2], ws1[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_107": {
                "variable": {
                    "value": "projection1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projection1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv12.weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "conv12.weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(projection1, dim=0, index=pindex1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(projection1, dim=1, index=pindex2)",
                            "Call"
                        ],
                        [
                            "self.sparse_param(module)",
                            "Call"
                        ],
                        [
                            "self.sparse_param(m)",
                            "Call"
                        ],
                        [
                            "conv12.weight.data.squeeze().t()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_nonzero_index(projection1, dim='input', counter=1, percentage=percentage, threshold=threshold)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_120": {
                "variable": {
                    "value": "conv12.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "projection1.t().view(-1, pindex1.shape[0], 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "conv12.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "params.bias1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_101": {
                "variable": {
                    "value": "weight1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv11.weight.data.view(ws1[0], -1).t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(weight1, dim=0, index=index)",
                            "Call"
                        ],
                        [
                            "torch.index_select(weight1, dim=1, index=pindex1)",
                            "Call"
                        ],
                        [
                            "module_cur.state_dict()['0.weight']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.repeat_interleave(index_pre, ws1[2] * ws1[3]) * ws1[2] * ws1[3] + torch.tensor(range(0, ws1[2] * ws1[3])).repeat(index_pre.shape[0]).cuda()",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[None] + self.index_pre(self.args.remain_percentage, self.args.threshold)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "index_select_109": {
                "variable": {
                    "value": "projection1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projection1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv12.weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "conv12.weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(projection1, dim=0, index=pindex1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(projection1, dim=1, index=pindex2)",
                            "Call"
                        ],
                        [
                            "self.sparse_param(module)",
                            "Call"
                        ],
                        [
                            "self.sparse_param(m)",
                            "Call"
                        ],
                        [
                            "conv12.weight.data.squeeze().t()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_nonzero_index(projection1, dim='output', counter=1, percentage=percentage, threshold=threshold)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Parameter_114": {
                "variable": {
                    "value": "batchnorm1.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bn_weight1, dim=0, index=pindex2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_115": {
                "variable": {
                    "value": "batchnorm1.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bn_bias1, dim=0, index=pindex2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_116": {
                "variable": {
                    "value": "batchnorm1.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_mean1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm1.running_mean.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_nonzero_index(projection1, dim='output', counter=1, percentage=percentage, threshold=threshold)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_117": {
                "variable": {
                    "value": "batchnorm1.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_var1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm1.running_var.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_nonzero_index(projection1, dim='output', counter=1, percentage=percentage, threshold=threshold)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "norm_190": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_111": {
                "variable": {
                    "value": "conv12.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bias1, dim=0, index=pindex2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_194": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - reg / (n + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_238": {
                "variable": {
                    "value": "param1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scale1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calc_sparsity_solution(param1.data, 1, reg, self.args.sparsity_regularizer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "param1.data.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_238": {
                "variable": {
                    "value": "param1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_240": {
                "variable": {
                    "value": "param1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calc_sparsity_solution(param1.data, 0, reg, self.args.sparsity_regularizer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "param1.data.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_240": {
                "variable": {
                    "value": "param1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_325": {
                "obj": {
                    "value": "info_compress",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edict({'flops_original': self.flops / 10.0 ** 9, 'flops_remaining': self.flops_compress / 10.0 ** 9, 'flops_ratio': self.flops_compress / self.flops * 100, 'params_original': self.params / 10.0 ** 3, 'params_remaining': self.params_compress / 10.0 ** 3, 'params_ratio': self.params_compress / self.params * 100, 'epoch_continue': epoch_continue})",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.dir_save, self.args.save, 'compression_information.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "range(0, ws1[2] * ws1[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_114": {
                "input": {
                    "value": "bn_weight1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm1.weight.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_nonzero_index(projection1, dim='output', counter=1, percentage=percentage, threshold=threshold)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "index_select_115": {
                "input": {
                    "value": "bn_bias1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm1.bias.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_nonzero_index(projection1, dim='output', counter=1, percentage=percentage, threshold=threshold)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_196": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n - reg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_197": {
                "variable": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(n - reg, torch.zeros_like(n, device=n.device))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_111": {
                "input": {
                    "value": "bias1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv12.bias.data if conv12.bias is not None else None",
                            "IfExp"
                        ],
                        [
                            "module_cur.state_dict()['0.bias']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_nonzero_index(projection1, dim='output', counter=1, percentage=percentage, threshold=threshold)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_194": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_201": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(n > threshold).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "acos_202": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reg / 8 * (n[idx[0]] / 3) ** (-3 / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_206": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_interleave_99": {
                "input": {
                    "value": "index_pre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "repeats": {
                    "value": "ws1[2] * ws1[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_184": {
                "input": {
                    "value": "projection1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv12.weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "conv12.weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(projection1, dim=0, index=pindex1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(projection1, dim=1, index=pindex2)",
                            "Call"
                        ],
                        [
                            "self.sparse_param(module)",
                            "Call"
                        ],
                        [
                            "self.sparse_param(m)",
                            "Call"
                        ],
                        [
                            "conv12.weight.data.squeeze().t()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_185": {
                "input": {
                    "value": "projection1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv12.weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "conv12.weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(projection1, dim=0, index=pindex1)",
                            "Call"
                        ],
                        [
                            "torch.index_select(projection1, dim=1, index=pindex2)",
                            "Call"
                        ],
                        [
                            "self.sparse_param(module)",
                            "Call"
                        ],
                        [
                            "self.sparse_param(m)",
                            "Call"
                        ],
                        [
                            "conv12.weight.data.squeeze().t()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_196": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_198": {
                "input": {
                    "value": "1 - reg / (n + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_215": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_216": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(c2 > 0).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_257": {
                "input": {
                    "value": "projection1.squeeze().t() ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_258": {
                "input": {
                    "value": "projection1.squeeze().t() ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_198": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_218": {
                "input": {
                    "value": "torch.sum(scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_207": {
                "input": {
                    "value": "2 / 3 * (-phi + math.pi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_218": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(1 - reg / (n + eps), torch.zeros_like(n, device=n.device))",
                            "Call"
                        ],
                        [
                            "(1 + reg / w_norm) * torch.max(1 - reg / (n + eps), torch.zeros_like(n, device=n.device))",
                            "BinOp"
                        ],
                        [
                            "scale.repeat(param.shape[1], 1)",
                            "Call"
                        ],
                        [
                            "scale.repeat(param.shape[0], 1).t()",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(n, device=n.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(n, device=n.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_217": {
                "input": {
                    "value": "c2[idx[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model_hinge/hinge_wide_resnet.py": {
        "torch": {
            "Sequential_49": {
                "variable": {
                    "value": "module._modules[conv1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "module._modules[conv2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "index_select_131": {
                "variable": {
                    "value": "projection1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projection1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv12.weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "conv12.weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(projection1, dim=1, index=pindex1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_132": {
                "variable": {
                    "value": "conv12.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "projection1.t().view(pindex1.shape[0], ws1[0], 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_133": {
                "variable": {
                    "value": "conv12.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bias1, dim=0, index=pindex1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_136": {
                "variable": {
                    "value": "batchnorm2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bn_weight2, dim=0, index=pindex1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_137": {
                "variable": {
                    "value": "batchnorm2.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.index_select(bn_bias2, dim=0, index=pindex1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_138": {
                "variable": {
                    "value": "batchnorm2.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_mean2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm2.running_mean.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_139": {
                "variable": {
                    "value": "batchnorm2.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_var2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm2.running_var.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_144": {
                "variable": {
                    "value": "weight2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv21.weight.data.view(ws2[0], -1).t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(weight2, dim=0, index=index)",
                            "Call"
                        ],
                        [
                            "torch.index_select(weight2, dim=1, index=pindex2)",
                            "Call"
                        ],
                        [
                            "module_cur.state_dict()['conv2.weight']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.repeat_interleave(pindex1, ws2[2] * ws2[3]) * ws2[2] * ws2[3] + torch.tensor(range(0, ws2[2] * ws2[3])).repeat(pindex1.shape[0]).cuda()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "index_select_145": {
                "variable": {
                    "value": "weight2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv21.weight.data.view(ws2[0], -1).t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(weight2, dim=0, index=index)",
                            "Call"
                        ],
                        [
                            "torch.index_select(weight2, dim=1, index=pindex2)",
                            "Call"
                        ],
                        [
                            "module_cur.state_dict()['conv2.weight']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_146": {
                "variable": {
                    "value": "conv21.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight2.t().view(pindex2.shape[0], pindex1.shape[0], ws2[2], ws2[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_149": {
                "variable": {
                    "value": "projection2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projection2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv22.weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "conv22.weight.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "torch.index_select(projection2, dim=0, index=pindex2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_150": {
                "variable": {
                    "value": "conv22.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "projection2.t().view(-1, pindex2.shape[0], 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_219": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "index_select_133": {
                "input": {
                    "value": "bias1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv12.bias.data",
                            "Attribute"
                        ],
                        [
                            "module_cur.state_dict()['conv1.bias']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_136": {
                "input": {
                    "value": "bn_weight2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm2.weight.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_137": {
                "input": {
                    "value": "bn_bias2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batchnorm2.bias.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "data": {
                    "value": "range(0, ws2[2] * ws2[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_223": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - reg / (n + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_304": {
                "variable": {
                    "value": "param1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scale1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calc_sparsity_solution(param1, 0, reg, self.args.sparsity_regularizer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "param1.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_304": {
                "variable": {
                    "value": "param1.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_305": {
                "variable": {
                    "value": "param2.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scale2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calc_sparsity_solution(param2, 1, reg, self.args.sparsity_regularizer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "param2.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_305": {
                "variable": {
                    "value": "param2.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_379": {
                "obj": {
                    "value": "info_compress",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edict({'flops_original': self.flops / 10.0 ** 9, 'flops_remaining': self.flops_compress / 10.0 ** 9, 'flops_ratio': self.flops_compress / self.flops * 100, 'params_original': self.params / 10.0 ** 3, 'params_remaining': self.params_compress / 10.0 ** 3, 'params_ratio': self.params_compress / self.params * 100, 'epoch_continue': epoch_continue})",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.dir_save, self.args.save, 'compression_information.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_402": {
                "variable": {
                    "value": "m._modules[conv1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "*conv1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "max_225": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n - reg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_226": {
                "variable": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(n - reg, torch.zeros_like(n, device=n.device))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_392": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv._modules['0'].weight.data.view(ws[0], -1).t()",
                            "Call"
                        ],
                        [
                            "torch.mm(weight, projection).t().view(ps[0], ws[1], ws[2], ws[3])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "projection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv._modules['1'].weight.data.squeeze().t()",
                            "Call"
                        ]
                    ]
                }
            },
            "t_392": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_394": {
                "variable": {
                    "value": "m._modules[conv1].weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv._modules['0'].weight.data.view(ws[0], -1).t()",
                            "Call"
                        ],
                        [
                            "torch.mm(weight, projection).t().view(ps[0], ws[1], ws[2], ws[3])",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_395": {
                "variable": {
                    "value": "m._modules[conv1].bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv._modules['1'].bias.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "repeat_interleave_142": {
                "input": {
                    "value": "pindex1",
                    "type": "variable",
                    "possible_values": []
                },
                "repeats": {
                    "value": "ws2[2] * ws2[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_223": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_230": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(n > threshold).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "acos_231": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reg / 8 * (n[idx[0]] / 3) ** (-3 / 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_235": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_264": {
                "input": {
                    "value": "torch.norm(projection1.grad.squeeze().t(), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_265": {
                "input": {
                    "value": "torch.norm(projection2.grad.squeeze().t(), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_281": {
                "data": {
                    "value": "9 / 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_grad_ratio.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Conv2d_401": {
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_225": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_227": {
                "input": {
                    "value": "1 - reg / (n + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_244": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_245": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(c2 > 0).to(torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_264": {
                "input": {
                    "value": "projection1.grad.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_265": {
                "input": {
                    "value": "projection2.grad.squeeze().t()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_280": {
                "data": {
                    "value": "5 / 9",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_grad_ratio.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sum_321": {
                "input": {
                    "value": "projection1.squeeze().t() ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_322": {
                "input": {
                    "value": "projection2.squeeze().t() ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_227": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(param.squeeze().t(), p=2, dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_247": {
                "input": {
                    "value": "torch.sum(scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_236": {
                "input": {
                    "value": "2 / 3 * (-phi + math.pi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_247": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(1 - reg / (n + eps), torch.zeros_like(n, device=n.device))",
                            "Call"
                        ],
                        [
                            "(1 + reg / w_norm) * torch.max(1 - reg / (n + eps), torch.zeros_like(n, device=n.device))",
                            "BinOp"
                        ],
                        [
                            "scale.repeat(param.shape[1], 1)",
                            "Call"
                        ],
                        [
                            "scale.repeat(param.shape[0], 1).t()",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(n, device=n.device)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(n, device=n.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_246": {
                "input": {
                    "value": "c2[idx[0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "util/trainer_clean.py": {
        "torch": {
            "device_41": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if args.cpu else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Tensor_175": {
                "variable": {
                    "value": "flops",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_176": {
                "variable": {
                    "value": "flops_conv",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_177": {
                "variable": {
                    "value": "flops_ori",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util/trainer_hinge.py": {
        "torch": {
            "device_28": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if args.cpu else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "mul_255": {
                "variable": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(n > regularization).to(torch.float32)",
                            "Call"
                        ],
                        [
                            "scale.repeat(ps[0], 1)",
                            "Call"
                        ],
                        [
                            "(n > regularization).to(torch.float32)",
                            "Call"
                        ],
                        [
                            "scale.repeat(ps[0], 1).t()",
                            "Call"
                        ],
                        [
                            "torch.max(1 - regularization * lr / (n + eps), torch.zeros_like(n, device=n.device))",
                            "Call"
                        ],
                        [
                            "scale.repeat(ps[1], 1)",
                            "Call"
                        ],
                        [
                            "torch.max(1 - regularization * lr / (n + eps), torch.zeros_like(n, device=n.device))",
                            "Call"
                        ],
                        [
                            "scale.repeat(ps[0], 1).t()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "param.data.squeeze().t()",
                            "Call"
                        ]
                    ]
                }
            },
            "t_255": {
                "variable": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_276": {
                "variable": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(n > regularization).to(torch.float32)",
                            "Call"
                        ],
                        [
                            "scale.repeat(ps[0], 1)",
                            "Call"
                        ],
                        [
                            "(n > regularization).to(torch.float32)",
                            "Call"
                        ],
                        [
                            "scale.repeat(ps[0], 1).t()",
                            "Call"
                        ],
                        [
                            "torch.max(1 - regularization * lr / (n + eps), torch.zeros_like(n, device=n.device))",
                            "Call"
                        ],
                        [
                            "scale.repeat(ps[1], 1)",
                            "Call"
                        ],
                        [
                            "torch.max(1 - regularization * lr / (n + eps), torch.zeros_like(n, device=n.device))",
                            "Call"
                        ],
                        [
                            "scale.repeat(ps[0], 1).t()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "param.data.squeeze().t()",
                            "Call"
                        ]
                    ]
                }
            },
            "t_276": {
                "variable": {
                    "value": "param.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_244": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "param.data.squeeze().t()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_250": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "param.data.squeeze().t()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_264": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "param.data.squeeze().t()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_265": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - regularization * lr / (n + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_271": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param.data.squeeze().t()",
                            "Call"
                        ],
                        [
                            "param.data.squeeze().t()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_272": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - regularization * lr / (n + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_247": {
                "input": {
                    "value": "n[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "isnan_268": {
                "input": {
                    "value": "n[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_265": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(p, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.norm(p, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(p, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.norm(p, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_272": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(p, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.norm(p, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.norm(p, p=2, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.norm(p, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "n.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util/utility.py": {
        "torch": {
            "load_182": {
                "variable": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.dir_save, args.save, 'epochs.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_89": {
                "obj": {
                    "value": "trainer.optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_90": {
                "obj": {
                    "value": "epoch",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.dir, 'epochs.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_92": {
                "obj": {
                    "value": "trainer.optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.dir, 'optimizer_converging.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_93": {
                "obj": {
                    "value": "epoch",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.dir, 'epochs_converging.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_153": {
                "f": {
                    "value": "os.path.join(ckp.dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_285": {
                "variable": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.dir_save, args.save, 'epochs.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_287": {
                "variable": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.dir_save, args.save, 'epochs_converging.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_259": {
                "f": {
                    "value": "os.path.join(ckp.dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_262": {
                "f": {
                    "value": "os.path.join(ckp.dir, 'optimizer_converging.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}