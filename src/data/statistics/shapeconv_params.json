{
    "rgbd_seg/criteria/registry.py": {
        "torch": {}
    },
    "rgbd_seg/dataloaders/registry.py": {
        "torch": {}
    },
    "rgbd_seg/dataloaders/samplers/distributed.py": {
        "torch": {}
    },
    "rgbd_seg/dataloaders/samplers/non_distributed.py": {
        "torch": {
            "randperm_17": {
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "rgbd_seg/datasets/base.py": {
        "torch": {}
    },
    "rgbd_seg/loggers/builder.py": {
        "torch": {
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rgbd_seg/loggers/summary_writer_dist.py": {
        "torch": {
            "SummaryWriter_15": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "comment": {
                    "value": "comment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                },
                "purge_step": {
                    "value": "purge_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "max_queue": {
                    "value": "max_queue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "flush_secs": {
                    "value": "flush_secs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "120",
                            "Method Argument"
                        ]
                    ]
                },
                "filename_suffix": {
                    "value": "filename_suffix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rgbd_seg/lr_schedulers/base.py": {
        "torch": {}
    },
    "rgbd_seg/lr_schedulers/builder.py": {
        "torch": {}
    },
    "rgbd_seg/models/builder.py": {
        "torch": {
            "Sequential_23": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "rgbd_seg/models/decoders/bricks.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.top_down_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.top_down_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_113": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.lateral_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.post_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_146": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_146": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.lateral_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_60": {
                "variable": {
                    "value": "top_down",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_down",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.top_down_block(top_down)",
                            "Call"
                        ],
                        [
                            "F.interpolate(top_down, size=lateral.size()[-2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "lateral.size()[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[top_down, lateral]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "*args": {
                    "value": "*head_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "rgbd_seg/models/decoders/builder.py": {
        "torch": {
            "ModuleList_14": {
                "variable": {
                    "value": "bricks",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rgbd_seg/models/decoders/gfpn/gfpn.py": {
        "torch": {}
    },
    "rgbd_seg/models/encoders/backbones/resnet.py": {
        "torch": {
            "MaxPool2d_211": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_220": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_221": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_261": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(conv_cfg, self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_278": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_339": {
                "variable": {
                    "value": "conv1_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[conv1_weight, r_weight]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rgbd_seg/models/encoders/builder.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "backbone",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "rgbd_seg/models/encoders/enhance_modules/aspp.py": {
        "torch": {
            "ModuleList_62": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "modules",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ConvModule(in_channels, out_channels, 1, bias=False, conv_cfg=conv_cfg, norm_cfg=norm_cfg, act_cfg=act_cfg)]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_80": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(res, dim=1)",
                            "Call"
                        ],
                        [
                            "self.project(res)",
                            "Call"
                        ],
                        [
                            "self.dropout(res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_29": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "super(ASPPPooling, self).forward(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(x.size(2)), int(x.size(3)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.align_corners",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_69": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_21": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rgbd_seg/models/encoders/enhance_modules/ppm.py": {
        "torch": {
            "ModuleList_38": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "torch.cat(out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_58": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "block(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.align_corners",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(bin_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_42": {
                "output_size": {
                    "value": "bin_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bins",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "rgbd_seg/models/heads/head.py": {
        "torch": {
            "Sequential_50": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "rgbd_seg/models/utils/act.py": {
        "torch": {
            "Parameter_13": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, num_features, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_22": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "rgbd_seg/models/utils/builder.py": {
        "torch": {}
    },
    "rgbd_seg/models/utils/conv_module.py": {
        "torch": {
            "Sequential_213": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout2d_144": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "dropouts[0]",
                            "Subscript"
                        ],
                        [
                            "dropouts[ii]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rgbd_seg/models/utils/norm.py": {
        "torch": {
            "Parameter_13": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, num_features, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_15": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, num_features, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_27": {
                "variable": {
                    "value": "nu2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rsqrt_28": {
                "input": {
                    "value": "nu2 + self.eps.abs()",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "rgbd_seg/models/utils/shape_conv.py": {
        "torch": {
            "Parameter_55": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, M, N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.out_channels // self.groups, self.in_channels, self.D_mul)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_116": {
                "variable": {
                    "value": "W_base",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(self.weight, (self.out_channels // self.groups, self.in_channels, self.D_mul))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "D_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.einsum('ims,ois->oim', Shape, W_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.weight.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_123": {
                "variable": {
                    "value": "D_base",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_base * Base",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.out_channels, self.in_channels // self.groups, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_59": {
                "variable": {
                    "value": "self.Shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, M * N, self.D_mul)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_60": {
                "variable": {
                    "value": "self.Base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "self.Shape.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([in_channels, M * N, self.D_mul], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "self.Base.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones([1], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.eye(M * N, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, M * N, M * N)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_108": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, M * N, self.D_mul % (M * N)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "variable": {
                    "value": "self.D_diag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.cat([D_diag, zeros], dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "self.D_diag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "D_diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eye.repeat((in_channels, 1, self.D_mul // (M * N)))",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_105": {
                "input": {
                    "value": "F.pad(input, self._padding_repeated_twice, mode=self.padding_mode)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_122": {
                "equation": {
                    "value": "ims,ois->oim",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "Shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Shape + self.D_diag",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_67": {
                "n": {
                    "value": "M * N",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_105": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "self._padding_repeated_twice",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.padding_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "[D_diag, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rgbd_seg/models/utils/upsample.py": {
        "torch": {
            "interpolate_38": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.size",
                            "Attribute"
                        ],
                        [
                            "(new_h, new_w)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.align_corners",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rgbd_seg/models/weight_init.py": {
        "torch": {}
    },
    "rgbd_seg/optims/builder.py": {
        "torch": {}
    },
    "rgbd_seg/runners/base.py": {
        "torch": {
            "device_count_56": {
                "variable": {
                    "value": "self.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_69": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "rgbd_seg/runners/inference_runner.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_60": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "output >= 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.full_like(output, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.full_like(output, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_66": {
                "variable": {
                    "value": "(_, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.where(output >= 0.5, torch.full_like(output, 1), torch.full_like(output, 0)).long()",
                            "Call"
                        ],
                        [
                            "output.softmax(dim=1)",
                            "Call"
                        ],
                        [
                            "self.model(image)",
                            "Call"
                        ],
                        [
                            "self.compute(output)",
                            "Call"
                        ],
                        [
                            "output.squeeze().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "current_device_31": {
                "variable": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_45": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[torch.cuda.current_device()]",
                    "type": "List",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_53": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_model(cfg)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model.cuda(), device_ids=[torch.cuda.current_device()], broadcast_buffers=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_like_61": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.where(output >= 0.5, torch.full_like(output, 1), torch.full_like(output, 0)).long()",
                            "Call"
                        ],
                        [
                            "output.softmax(dim=1)",
                            "Call"
                        ],
                        [
                            "self.model(image)",
                            "Call"
                        ],
                        [
                            "self.compute(output)",
                            "Call"
                        ],
                        [
                            "output.squeeze().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_62": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.sigmoid()",
                            "Call"
                        ],
                        [
                            "torch.where(output >= 0.5, torch.full_like(output, 1), torch.full_like(output, 0)).long()",
                            "Call"
                        ],
                        [
                            "output.softmax(dim=1)",
                            "Call"
                        ],
                        [
                            "self.model(image)",
                            "Call"
                        ],
                        [
                            "self.compute(output)",
                            "Call"
                        ],
                        [
                            "output.squeeze().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "current_device_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rgbd_seg/runners/test_runner.py": {
        "torch": {
            "interpolate_107": {
                "variable": {
                    "value": "new_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.cuda()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(new_h, new_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_119": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_119": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_119": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_120": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "prob >= 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.full_like(prob, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.full_like(prob, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_124": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_124": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_124": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_125": {
                "variable": {
                    "value": "(_, prob)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(probs, dim=0).sigmoid().mean(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.where(prob >= 0.5, torch.full_like(prob, 1), torch.full_like(prob, 0)).long()",
                            "Call"
                        ],
                        [
                            "torch.stack(probs, dim=0).softmax(dim=2).mean(dim=0)",
                            "Call"
                        ],
                        [
                            "flip_output.flip(3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_like_121": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(probs, dim=0).sigmoid().mean(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.where(prob >= 0.5, torch.full_like(prob, 1), torch.full_like(prob, 0)).long()",
                            "Call"
                        ],
                        [
                            "torch.stack(probs, dim=0).softmax(dim=2).mean(dim=0)",
                            "Call"
                        ],
                        [
                            "flip_output.flip(3)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_122": {
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(probs, dim=0).sigmoid().mean(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.where(prob >= 0.5, torch.full_like(prob, 1), torch.full_like(prob, 0)).long()",
                            "Call"
                        ],
                        [
                            "torch.stack(probs, dim=0).softmax(dim=2).mean(dim=0)",
                            "Call"
                        ],
                        [
                            "flip_output.flip(3)",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rgbd_seg/runners/train_runner.py": {
        "torch": {
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rgbd_seg/transforms/transforms.py": {
        "torch": {
            "from_numpy_151": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(image).float()",
                            "Call"
                        ],
                        [
                            "image.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_143": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(image).float()",
                            "Call"
                        ],
                        [
                            "image.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_156": {
                "tensors": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.apply_to_mask(mask, **params) for mask in masks]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rgbd_seg/utils/checkpoint.py": {
        "torch": {
            "save_56": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'meta': meta, 'state_dict': weights_to_cpu(model.state_dict())}",
                            "Dict"
                        ],
                        [
                            "torch.load(filename, map_location=map_location)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_61": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rgbd_seg/utils/dist_utils.py": {
        "torch": {
            "device_count_11": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_12": {
                "device": {
                    "value": "rank % num_gpus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_18": {
                "variable": {
                    "value": "initialized",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "gather_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gather_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.ones_like(data) for _ in range(world_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(data).cuda()",
                            "Call"
                        ],
                        [
                            "data / world_size",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(data).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(data).cuda()",
                            "Call"
                        ],
                        [
                            "data / world_size",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(data).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_55": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(data).cuda()",
                            "Call"
                        ],
                        [
                            "data / world_size",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(data).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tools/train.py": {
        "torch": {
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}