{
    "EA/base_model.py": {
        "torch": {
            "Adam_38": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.opts.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.opts.L2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_39": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Adam(model.parameters(), lr=self.opts.learning_rate, weight_decay=self.opts.L2)",
                            "Call"
                        ],
                        [
                            "Adam(model.parameters(), lr=self.opts.learning_rate, weight_decay=self.opts.L2)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "self.opts.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_96": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.opts.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.opts.L2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_97": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Adam(model.parameters(), lr=self.opts.learning_rate, weight_decay=self.opts.L2)",
                            "Call"
                        ],
                        [
                            "Adam(model.parameters(), lr=self.opts.learning_rate, weight_decay=self.opts.L2)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "self.opts.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_134": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.opts.modelname",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_161": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s_em(e)",
                            "Call"
                        ],
                        [
                            "h_embed / torch.norm(h_embed, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "norm_embed.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_138": {
                "f": {
                    "value": "self.opts.modelname",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage.cuda()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "norm_159": {
                "input": {
                    "value": "h_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s_em(e)",
                            "Call"
                        ],
                        [
                            "h_embed / torch.norm(h_embed, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_160": {
                "input": {
                    "value": "norm_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s_em.weight",
                            "Attribute"
                        ],
                        [
                            "norm_embed / torch.norm(norm_embed, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__67": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "EA/model_search.py": {
        "torch": {
            "Embedding_14": {
                "variable": {
                    "value": "self.sub_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "options._ent_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_15": {
                "variable": {
                    "value": "self.rel_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "options._rel_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_16": {
                "variable": {
                    "value": "self.obj_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "options._ent_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_18": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_19": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_20": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "options.drop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.W4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.W5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.W6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "st.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-positive + max_neg + torch.log(torch.sum(torch.exp(negative - max_neg), 1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_51": {
                "input": {
                    "value": "x1 * x2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_54": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "W1(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.obj_embed.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_105": {
                "variable": {
                    "value": "op1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ops(st, h_tm1, 'add', W1, W2)",
                            "Call"
                        ],
                        [
                            "self.ops(st, h_tm1, 'mult', W1, W2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(op1)",
                            "Call"
                        ],
                        [
                            "self.ops(st, h_tm1, 'complx', W1, W2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(op1)",
                            "Call"
                        ],
                        [
                            "self.ops(st, h_tm1, 'gate', W1, W2)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_117": {
                "variable": {
                    "value": "op2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ops(op2_in, rt, ops[struct[1] % 4], W3, W4)",
                            "Call"
                        ],
                        [
                            "torch.tanh(op2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(op2)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_45": {
                "input": {
                    "value": "negative",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_tail(res_outputs)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_47": {
                "input": {
                    "value": "torch.sum(torch.exp(negative - max_neg), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_107": {
                "variable": {
                    "value": "op1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ops(st, h_tm1, 'add', W1, W2)",
                            "Call"
                        ],
                        [
                            "self.ops(st, h_tm1, 'mult', W1, W2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(op1)",
                            "Call"
                        ],
                        [
                            "self.ops(st, h_tm1, 'complx', W1, W2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(op1)",
                            "Call"
                        ],
                        [
                            "self.ops(st, h_tm1, 'gate', W1, W2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_119": {
                "variable": {
                    "value": "op2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ops(op2_in, rt, ops[struct[1] % 4], W3, W4)",
                            "Call"
                        ],
                        [
                            "torch.tanh(op2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(op2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_47": {
                "input": {
                    "value": "torch.exp(negative - max_neg)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_81": {
                "tensors": {
                    "value": "outputs_f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.bn3(self.drop(torch.cat(outputs_f, dim=0)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_139": {
                "variable": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "W1(x)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_140": {
                "variable": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "W2(h)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o1, o2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_47": {
                "input": {
                    "value": "negative - max_neg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_145": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gate(torch.cat([x, h], dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_145": {
                "tensors": {
                    "value": "[x, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "LP/base_model.py": {
        "torch": {
            "Adam_29": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.opts.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.opts.L2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_30": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Adam(model.parameters(), lr=self.opts.learning_rate, weight_decay=self.opts.L2)",
                            "Call"
                        ],
                        [
                            "Adam(model.parameters(), lr=self.opts.learning_rate, weight_decay=self.opts.L2)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "self.opts.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_90": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.opts.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.opts.L2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_91": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Adam(model.parameters(), lr=self.opts.learning_rate, weight_decay=self.opts.L2)",
                            "Call"
                        ],
                        [
                            "Adam(model.parameters(), lr=self.opts.learning_rate, weight_decay=self.opts.L2)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "self.opts.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_131": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.opts.modelname",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_141": {
                "variable": {
                    "value": "Z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.data.clone()",
                            "Call"
                        ],
                        [
                            "X / Z",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_135": {
                "f": {
                    "value": "self.opts.modelname",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, location: storage.cuda()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "LP/model_search.py": {
        "torch": {
            "Embedding_15": {
                "variable": {
                    "value": "self.sub_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "options._ent_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_16": {
                "variable": {
                    "value": "self.rel_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "options._rel_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_17": {
                "variable": {
                    "value": "self.obj_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "options._ent_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "options.drop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.W1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.W2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.W3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.W4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.W5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.W6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "remainder_68": {
                "variable": {
                    "value": "rel_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel + half_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self._options._rel_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "st.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_45": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-positive + max_neg + torch.log(torch.sum(torch.exp(negative - max_neg), 1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_54": {
                "input": {
                    "value": "x1 * x2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_57": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "W1(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.sub_embed.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_60": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "W1(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.obj_embed.weight.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_131": {
                "variable": {
                    "value": "op1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ops(st, h_tm1, 'add', W1, W2)",
                            "Call"
                        ],
                        [
                            "self.ops(st, h_tm1, 'mult', W1, W2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(op1)",
                            "Call"
                        ],
                        [
                            "self.ops(st, h_tm1, 'complx', W1, W2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(op1)",
                            "Call"
                        ],
                        [
                            "self.ops(st, h_tm1, 'gate', W1, W2)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_142": {
                "variable": {
                    "value": "op2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ops(op2_in, rt, ops[struct[1] % 4], W3, W4)",
                            "Call"
                        ],
                        [
                            "torch.tanh(op2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(op2)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_42": {
                "input": {
                    "value": "negative",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.get_tail(res_outputs) + self.get_head(res_outputs_inv)",
                            "BinOp"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_44": {
                "input": {
                    "value": "torch.sum(torch.exp(negative - max_neg), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_104": {
                "tensors": {
                    "value": "outputs_f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.drop(torch.cat(outputs_f, dim=0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_105": {
                "tensors": {
                    "value": "outputs_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.drop(torch.cat(outputs_b, dim=0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_133": {
                "variable": {
                    "value": "op1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ops(st, h_tm1, 'add', W1, W2)",
                            "Call"
                        ],
                        [
                            "self.ops(st, h_tm1, 'mult', W1, W2)",
                            "Call"
                        ],
                        [
                            "torch.tanh(op1)",
                            "Call"
                        ],
                        [
                            "self.ops(st, h_tm1, 'complx', W1, W2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(op1)",
                            "Call"
                        ],
                        [
                            "self.ops(st, h_tm1, 'gate', W1, W2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_144": {
                "variable": {
                    "value": "op2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "op2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ops(op2_in, rt, ops[struct[1] % 4], W3, W4)",
                            "Call"
                        ],
                        [
                            "torch.tanh(op2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(op2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_44": {
                "input": {
                    "value": "torch.exp(negative - max_neg)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "min_50": {
                "input": {
                    "value": "logits",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.get_tail(res_outputs) + self.get_head(res_outputs_inv)",
                            "BinOp"
                        ],
                        [
                            "logits - torch.min(logits, dim=1, keepdim=True)[0]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_164": {
                "variable": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "W1(x)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_165": {
                "variable": {
                    "value": "(h1, h2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "W2(h)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o1, o2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_44": {
                "input": {
                    "value": "negative - max_neg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_170": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gate(torch.cat([x, h], dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_170": {
                "tensors": {
                    "value": "[x, h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "eval_align.py": {
        "torch": {
            "Adam_84": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.L2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_85": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Adam(model.parameters(), lr=args.learning_rate, weight_decay=args.L2)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "args.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_70": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s_em(e)",
                            "Call"
                        ],
                        [
                            "h_embed / torch.norm(h_embed, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "norm_embed.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_137": {
                "device": {
                    "value": "select_gpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_68": {
                "input": {
                    "value": "h_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s_em(e)",
                            "Call"
                        ],
                        [
                            "h_embed / torch.norm(h_embed, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_69": {
                "input": {
                    "value": "norm_embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s_em.weight",
                            "Attribute"
                        ],
                        [
                            "norm_embed / torch.norm(norm_embed, dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__111": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "eval_link.py": {
        "torch": {
            "Adam_71": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.L2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_72": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Adam(model.parameters(), lr=args.learning_rate, weight_decay=args.L2)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "args.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_131": {
                "device": {
                    "value": "select_gpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_103": {
                "variable": {
                    "value": "Z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p.data.clone()",
                            "Call"
                        ],
                        [
                            "X / Z",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "train_align.py": {
        "torch": {
            "set_device_51": {
                "device": {
                    "value": "select_gpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_55": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_link.py": {
        "torch": {
            "set_device_47": {
                "device": {
                    "value": "select_gpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}