{
    "adviser/services/backchannel/acoustic_backchanneller.py": {
        "sklearn": {
            "StandardScaler_99": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_54": {
                "f": {
                    "value": "self.trained_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/utils/common.py": {
        "tensorflow": {
            "set_random_seed_69": {
                "seed": {
                    "value": "GLOBAL_SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tmp_random.randint(2 ** 32 - 1, dtype='uint32')",
                            "Call"
                        ],
                        [
                            "seed",
                            "Name"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "manual_seed_all_61": {
                "seed": {
                    "value": "GLOBAL_SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tmp_random.randint(2 ** 32 - 1, dtype='uint32')",
                            "Call"
                        ],
                        [
                            "seed",
                            "Name"
                        ]
                    ]
                }
            },
            "manual_seed_62": {
                "seed": {
                    "value": "GLOBAL_SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tmp_random.randint(2 ** 32 - 1, dtype='uint32')",
                            "Call"
                        ],
                        [
                            "seed",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "adviser/examples/qa/worldknowledge/neuralmodels/director.py": {
        "torch": {
            "Linear_32": {
                "variable": {
                    "value": "self.diminisher",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTM_33": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.hidden2tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "lstm_out_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_48": {
                "variable": {
                    "value": "tag_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tag_space",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.hidden2tag(lstm_out[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/examples/qa/worldknowledge/neuralmodels/simpledot.py": {
        "torch": {
            "Linear_40": {
                "variable": {
                    "value": "self.diminisher",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTM_41": {
                "variable": {
                    "value": "self.lstm_question",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_42": {
                "variable": {
                    "value": "self.lstm_relation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_88": {
                "variable": {
                    "value": "rel_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_question_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "question_out[0][:, self.hidden:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "last_relation_out.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_90": {
                "variable": {
                    "value": "rel_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(last_question_out, last_relation_out.transpose(0, 1))",
                            "Call"
                        ],
                        [
                            "F.log_softmax(rel_scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_68": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/examples/qa/worldknowledge/neuralmodels/tagger.py": {
        "torch": {
            "Linear_32": {
                "variable": {
                    "value": "self.diminisher",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LSTM_33": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.hidden2label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(TAGS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_48": {
                "variable": {
                    "value": "label_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_space",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.hidden2label(lstm_out[1:])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/examples/qa/worldknowledge/semanticparser.py": {
        "torch": {
            "device_69": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embeddings, embeddings.new_zeros(1, self.max_seq_len - embeddings.size(1), 768))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_165": {
                "variable": {
                    "value": "(_, pred_rel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "rel_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.nn_relation(embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_174": {
                "variable": {
                    "value": "(_, preds_ent)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "ent_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.nn_entity(embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_180": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tag_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.nn_direction(embeddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_82": {
                "f": {
                    "value": "os.path.join(get_root_dir(), 'resources', 'models', 'qa', 'simpledot.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_88": {
                "f": {
                    "value": "os.path.join(get_root_dir(), 'resources', 'models', 'qa', 'tagger.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_94": {
                "f": {
                    "value": "os.path.join(get_root_dir(), 'resources', 'models', 'qa', 'director.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "adviser/services/backchannel/PytorchAcousticBackchanneler.py": {
        "torch": {
            "Conv2d_40": {
                "variable": {
                    "value": "cnn",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(11, 13)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.cnn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "cnn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "cnn",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(12, 13)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.cnn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "cnn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_70": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_77": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "feat_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feat_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(feat_inputs).float()",
                            "Call"
                        ],
                        [
                            "feat_inputs.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_93": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cnn_1, cnn_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "cnn.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(weights).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "cnn.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(parameters[0][1]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "cnn.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(weights).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "cnn.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(parameters[1][1]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.linear1.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(parameters[2][0].T).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.linear1.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(parameters[2][1]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_75": {
                "variable": {
                    "value": "self.linear2.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(parameters[3][0].T).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.linear2.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(parameters[3][1]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_49": {
                "kernel_size": {
                    "value": "(23, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_61": {
                "kernel_size": {
                    "value": "(23, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.transpose(parameters[0][0], (3, 2, 0, 1))",
                            "Call"
                        ],
                        [
                            "np.transpose(parameters[1][0], (3, 2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_44": {
                "data": {
                    "value": "parameters[0][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.transpose(parameters[0][0], (3, 2, 0, 1))",
                            "Call"
                        ],
                        [
                            "np.transpose(parameters[1][0], (3, 2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_57": {
                "data": {
                    "value": "parameters[1][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "parameters[2][0].T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "parameters[2][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "parameters[3][0].T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_76": {
                "data": {
                    "value": "parameters[3][1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/services/emotion/EmotionRecognition.py": {
        "torch": {
            "cat_119": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[:seq_len], features.new_zeros(seq_len - features.size(0) if seq_len > features.size(0) else 0, features.size(1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_137": {
                "variable": {
                    "value": "predictions[emo_representation]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.models[emo_representation](features.unsqueeze(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_77": {
                "f": {
                    "value": "os.path.join(self.model_path, f'{emo_representation}_model_params.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_136": {
                "ndarray": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.args[emo_representation]['norm_std']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_80": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/services/hci/speech/SpeechInputDecoder.py": {
        "torch": {
            "load_84": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_dir, 'cmvn.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_88": {
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm[1][:-1] / count - mean * mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "ndarray": {
                    "value": "speech_features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/services/hci/speech/SpeechInputFeatureExtractor.py": {
        "torch": {
            "from_numpy_53": {
                "variable": {
                    "value": "speech_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "speech_in[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_53": {
                "variable": {
                    "value": "speech_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "pitch",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "filter_bank.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "speech_in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[filter_bank, pitch]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "speech",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "speech_in[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "speech",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "speech",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "speech_in[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_91": {
                "variable": {
                    "value": "speech",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/services/hci/speech/SpeechOutputGenerator.py": {
        "torch": {
            "device_74": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_76": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "randn_147": {
                "variable": {
                    "value": "random_tensor_with_proper_dimensions",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "feature_dimension",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features_from_text.size(0) * self.config['hop_size']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReplicationPad1d_150": {
                "padding": {
                    "value": "auxiliary_content_window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config['generator_params']['aux_context_window']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_90": {
                "f": {
                    "value": "self.vocoder_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/services/policy/rl/dqn.py": {
        "torch": {
            "ModuleList_51": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_95": {
                "variable": {
                    "value": "self.shared_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.value_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_97": {
                "variable": {
                    "value": "self.advantage_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "current_input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state_dim",
                            "Name"
                        ],
                        [
                            "layer_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "in_features": {
                    "value": "value_layer_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shared_layer_dim",
                            "Name"
                        ],
                        [
                            "layer_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "in_features": {
                    "value": "advantage_layer_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shared_layer_dim",
                            "Name"
                        ],
                        [
                            "layer_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "current_input_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state_dim",
                            "Name"
                        ],
                        [
                            "layer_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_layer_sizes",
                            "Name"
                        ],
                        [
                            "shared_layer_sizes",
                            "Name"
                        ],
                        [
                            "value_layer_sizes",
                            "Name"
                        ],
                        [
                            "advantage_layer_sizes",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_102": {
                "in_features": {
                    "value": "shared_layer_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state_dim",
                            "Name"
                        ],
                        [
                            "layer_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_layer_sizes",
                            "Name"
                        ],
                        [
                            "shared_layer_sizes",
                            "Name"
                        ],
                        [
                            "value_layer_sizes",
                            "Name"
                        ],
                        [
                            "advantage_layer_sizes",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_110": {
                "in_features": {
                    "value": "value_layer_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shared_layer_dim",
                            "Name"
                        ],
                        [
                            "layer_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_layer_sizes",
                            "Name"
                        ],
                        [
                            "shared_layer_sizes",
                            "Name"
                        ],
                        [
                            "value_layer_sizes",
                            "Name"
                        ],
                        [
                            "advantage_layer_sizes",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_119": {
                "in_features": {
                    "value": "advantage_layer_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shared_layer_dim",
                            "Name"
                        ],
                        [
                            "layer_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "layer_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_layer_sizes",
                            "Name"
                        ],
                        [
                            "shared_layer_sizes",
                            "Name"
                        ],
                        [
                            "value_layer_sizes",
                            "Name"
                        ],
                        [
                            "advantage_layer_sizes",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_57": {
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_105": {
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_113": {
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_122": {
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/services/policy/rl/dqnpolicy.py": {
        "torch": {
            "Adam_111": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "l2_regularisation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SmoothL1Loss_112": {
                "variable": {
                    "value": "self.loss_fun",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_412": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(path, 'rlpolicy_' + self.domain.get_domain_name() + '_' + version + '.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'rlpolicy_' + self.domain.get_domain_name() + '_' + version + '.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_58": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_grad_enabled_301": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_305": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_311": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_332": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.discount_gamma] * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_398": {
                "obj": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(path, 'rlpolicy_' + self.domain.get_domain_name() + '_' + version + '.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'rlpolicy_' + self.domain.get_domain_name() + '_' + version + '.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_147": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_150": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_330": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_grad_enabled_353": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clip_grad_norm__348": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.gradient_clipping",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_364": {
                "variable": {
                    "value": "current_grad_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/services/policy/rl/experience_buffer.py": {
        "torch": {
            "empty_45": {
                "variable": {
                    "value": "self.mem_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "buffer_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "state_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_46": {
                "variable": {
                    "value": "self.mem_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "buffer_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_47": {
                "variable": {
                    "value": "self.mem_reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "buffer_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_48": {
                "variable": {
                    "value": "self.mem_next_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "buffer_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "state_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_49": {
                "variable": {
                    "value": "self.mem_terminal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "buffer_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_191": {
                "variable": {
                    "value": "data_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(data_indices, dtype=torch.long, device=self.device)",
                            "Call"
                        ],
                        [
                            "[self.buffer_size - 1]",
                            "List"
                        ],
                        [
                            "[self.write_pos - 1]",
                            "List"
                        ],
                        [
                            "torch.empty(self.batch_size, dtype=torch.long, device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_268": {
                "variable": {
                    "value": "data_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_269": {
                "variable": {
                    "value": "probabilities",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_37": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_159": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_212": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/services/policy/rl/policy_rl.py": {
        "torch": {
            "device_59": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_194": {
                "data": {
                    "value": "[belief_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/services/policy/rl/train_dqnpolicy.py": {
        "torch": {
            "SummaryWriter_67": {
                "log_dir": {
                    "value": "logs",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/asr/asr_utils.py": {
        "torch": {
            "load_95": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_81": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_93": {
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "randn_37": {
                "*size": {
                    "value": "_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "param.grad.size()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/asr/pytorch_backend/asr_init.py": {
        "torch": {
            "load_158": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/bin/asr_train.py": {
        "torch": {}
    },
    "adviser/tools/espnet_minimal/nets/batch_beam_search.py": {
        "torch": {
            "tensor_19": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "weighted_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(running_hyps)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_201": {
                "variable": {
                    "value": "remained_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "is_eos == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "arange_136": {
                "variable": {
                    "value": "part_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_198": {
                "input": {
                    "value": "is_eos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "running_hyps.yseq[torch.arange(n_batch), running_hyps.length - 1] == self.eos",
                            "Compare"
                        ]
                    ]
                }
            },
            "pad_sequence_38": {
                "sequences": {
                    "value": "[h.yseq for h in hyps]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.eos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "[len(h.yseq) for h in hyps]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "data": {
                    "value": "[h.score for h in hyps]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "topk_134": {
                "input": {
                    "value": "scores[self.pre_beam_score_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "self.pre_beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "[h.scores[k] for h in hyps]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_197": {
                "start": {
                    "value": "n_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(running_hyps)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/beam_search.py": {
        "torch": {
            "ModuleDict_65": {
                "variable": {
                    "value": "self.nn_dict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "xs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "xs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_251": {
                "variable": {
                    "value": "part_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_124": {
                "tensors": {
                    "value": "(xs, x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_260": {
                "variable": {
                    "value": "weighted_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "data": {
                    "value": "[self.sos]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "topk_256": {
                "input": {
                    "value": "scores[self.pre_beam_score_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "k": {
                    "value": "self.pre_beam_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/ctc_prefix_score.py": {
        "torch": {
            "stack_57": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xn, xb]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_68": {
                "variable": {
                    "value": "self.bb_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.n_bb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_116": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.input_length, 2, self.n_bb, snum)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.logzero",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsumexp_121": {
                "variable": {
                    "value": "r_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_prev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.full((self.input_length, 2, self.batch, self.beam), self.logzero, dtype=torch.float32, device=self.device)",
                            "Call"
                        ],
                        [
                            "r_prev.view(-1, 2, self.n_bb)",
                            "Call"
                        ],
                        [
                            "torch.full((self.input_length, 2, self.n_bb), self.logzero, dtype=torch.float32, device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_176": {
                "variable": {
                    "value": "s_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(best_ids + self.pad_bo).view(-1)",
                            "Call"
                        ],
                        [
                            "score_idx + beam_idx * snum",
                            "BinOp"
                        ]
                    ]
                }
            },
            "index_select_189": {
                "variable": {
                    "value": "r_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r.view(-1, 2, self.n_bb * snum)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(best_ids + self.pad_bo).view(-1)",
                            "Call"
                        ],
                        [
                            "score_idx + beam_idx * snum",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_61": {
                "variable": {
                    "value": "self.frame_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.input_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_102": {
                "variable": {
                    "value": "scoring_idmap",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.n_bb, self.odim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_104": {
                "variable": {
                    "value": "scoring_idmap[self.bb_idx, scoring_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "snum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scoring_ids.size(1)",
                            "Call"
                        ],
                        [
                            "self.odim",
                            "Attribute"
                        ],
                        [
                            "self.scoring_num",
                            "Attribute"
                        ],
                        [
                            "self.odim",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_106": {
                "variable": {
                    "value": "x_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.x.view(2, -1, self.batch * self.odim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "scoring_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(scoring_ids + self.pad_o).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_134": {
                "variable": {
                    "value": "f_arg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.frame_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_147": {
                "variable": {
                    "value": "rr",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rp[0], log_phi[t - 1], rp[0], rp[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "full_153": {
                "variable": {
                    "value": "log_psi",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.n_bb, self.odim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.logzero",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsumexp_154": {
                "variable": {
                    "value": "log_psi_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((log_phi_x[start:end], r[start - 1, 0].unsqueeze(0)), dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_158": {
                "variable": {
                    "value": "log_psi",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((log_phi_x[start:end], r[start - 1, 0].unsqueeze(0)), dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fmod_182": {
                "variable": {
                    "value": "label_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "best_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.odim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_40": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "full_84": {
                "variable": {
                    "value": "r_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.input_length, 2, self.batch, self.beam)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.logzero",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_86": {
                "variable": {
                    "value": "r_prev[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.x[0, :, :, self.blank]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_86": {
                "variable": {
                    "value": "r_prev[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_89": {
                "variable": {
                    "value": "r_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.input_length, 2, self.n_bb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.logzero",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_91": {
                "variable": {
                    "value": "r_prev[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.x[0, :, :, self.blank]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_151": {
                "tensors": {
                    "value": "(log_phi[0].unsqueeze(0), log_phi[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_101": {
                "input": {
                    "value": "pre_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "k": {
                    "value": "self.scoring_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_148": {
                "input": {
                    "value": "rr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([rp[0], log_phi[t - 1], rp[0], rp[1]]).view(2, 2, self.n_bb, snum)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_154": {
                "tensors": {
                    "value": "(log_phi_x[start:end], r[start - 1, 0].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_158": {
                "tensors": {
                    "value": "(log_phi_x[start:end], r[start - 1, 0].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_65": {
                "start": {
                    "value": "self.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_66": {
                "start": {
                    "value": "self.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_181": {
                "input": {
                    "value": "best_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.odim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_63": {
                "data": {
                    "value": "xlens",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_67": {
                "start": {
                    "value": "self.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/ctc.py": {
        "torch": {
            "Linear_24": {
                "variable": {
                    "value": "self.ctc_lo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "odim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "hlens",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.fromiter(hlens, dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "olens",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.fromiter((x.size(0) for x in ys), dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "ys_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[y[y != self.ignore_id] for y in ys_pad]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "CTCLoss_29": {
                "variable": {
                    "value": "self.ctc_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'sum' if reduce else 'none'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "log_softmax_108": {
                "input": {
                    "value": "self.ctc_lo(hs_pad)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_117": {
                "input": {
                    "value": "self.ctc_lo(hs_pad)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_138": {
                "variable": {
                    "value": "ctcs_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_73": {
                "input": {
                    "value": "hs_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/e2e_asr.py": {
        "torch": {
            "as_tensor_345": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x[::self.subsample[0], :]",
                            "Subscript"
                        ],
                        [
                            "x[::self.subsample[0], :]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "p.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "p.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_420": {
                "variable": {
                    "value": "hlens",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(map(int, hlens))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_461": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_482": {
                "ndarray": {
                    "value": "np.array(x, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_283": {
                "data": {
                    "value": "hlens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(list(map(int, hlens)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/e2e_asr_transformer.py": {
        "torch": {
            "as_tensor_231": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(x).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_231": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_308": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "hyp['yseq']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_308": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_325": {
                "variable": {
                    "value": "(local_best_scores, local_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_att_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.decoder.forward_one_step(ys, ys_mask, enc_output)[0]",
                            "Subscript"
                        ],
                        [
                            "traced_decoder(ys, ys_mask, enc_output)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "ctc_beam",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(lpz.shape[-1], int(beam * CTC_SCORING_RATIO))",
                            "Call"
                        ],
                        [
                            "lpz.shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_334": {
                "variable": {
                    "value": "(local_best_scores, joint_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "local_att_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_att_scores",
                            "Name"
                        ],
                        [
                            "(1.0 - ctc_weight) * local_att_scores[:, local_best_ids[0]] + ctc_weight * torch.from_numpy(ctc_scores - hyp['ctc_score_prev'])",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores[:, local_best_ids[0]]",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "beam",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_337": {
                "variable": {
                    "value": "(local_best_scores, local_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "local_att_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_att_scores",
                            "Name"
                        ],
                        [
                            "(1.0 - ctc_weight) * local_att_scores[:, local_best_ids[0]] + ctc_weight * torch.from_numpy(ctc_scores - hyp['ctc_score_prev'])",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores[:, local_best_ids[0]]",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "beam",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trace_312": {
                "variable": {
                    "value": "traced_decoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.decoder.forward_one_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_331": {
                "ndarray": {
                    "value": "ctc_scores - hyp['ctc_score_prev']",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/e2e_tts_fastspeech.py": {
        "torch": {
            "L1Loss_50": {
                "variable": {
                    "value": "self.l1_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'none' if self.use_weighted_masking else 'mean'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Embedding_276": {
                "variable": {
                    "value": "encoder_input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "idim",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_337": {
                "variable": {
                    "value": "self.feat_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "odim * args.reduction_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_534": {
                "variable": {
                    "value": "ilens",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_605": {
                "variable": {
                    "value": "self.encoder.embed[-1].alpha.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_enc_alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_606": {
                "variable": {
                    "value": "self.decoder.embed[-1].alpha.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_dec_alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_301": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.spk_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_303": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.adim + self.spk_embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_489": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_563": {
                "variable": {
                    "value": "spembs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spembs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spemb.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.projection(F.normalize(spembs))",
                            "Call"
                        ],
                        [
                            "F.normalize(spembs).unsqueeze(1).expand(-1, hs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_563": {
                "variable": {
                    "value": "spembs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_559": {
                "input": {
                    "value": "spembs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spemb.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.projection(F.normalize(spembs))",
                            "Call"
                        ],
                        [
                            "F.normalize(spembs).unsqueeze(1).expand(-1, hs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_564": {
                "tensors": {
                    "value": "[hs, spembs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/e2e_tts_tacotron2.py": {
        "torch": {
            "mean_76": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses.masked_select(self.masks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "guided_attn_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n_batches, max_olen, max_ilen)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "meshgrid_116": {
                "variable": {
                    "value": "(grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(olen)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(ilen)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "L1Loss_178": {
                "variable": {
                    "value": "self.l1_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'none' if self.use_weighted_masking else 'mean'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MSELoss_179": {
                "variable": {
                    "value": "self.mse_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'none' if self.use_weighted_masking else 'mean'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_180": {
                "variable": {
                    "value": "self.bce_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'none' if self.use_weighted_masking else 'mean'",
                            "IfExp"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "torch.tensor(bce_pos_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_539": {
                "variable": {
                    "value": "spembs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spembs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(spembs).unsqueeze(1).expand(-1, hs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(spembs).unsqueeze(1).expand(-1, hs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_539": {
                "variable": {
                    "value": "spembs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_540": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hs, spembs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normalize_622": {
                "variable": {
                    "value": "spemb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spemb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(spemb, dim=0).unsqueeze(0).expand(h.size(0), -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_622": {
                "variable": {
                    "value": "spemb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_623": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, spemb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_116": {
                "start": {
                    "value": "ilen",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_118": {
                "input": {
                    "value": "-(grid_y / ilen - grid_x / olen) ** 2 / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_655": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_658": {
                "variable": {
                    "value": "spembs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spembs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(spembs).unsqueeze(1).expand(-1, hs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(spembs).unsqueeze(1).expand(-1, hs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_658": {
                "variable": {
                    "value": "spembs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_659": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hs, spembs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_181": {
                "data": {
                    "value": "bce_pos_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "20.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/e2e_tts_transformer.py": {
        "torch": {
            "mean_61": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "losses.masked_select(self.masks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_405": {
                "variable": {
                    "value": "self.feat_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "odim * args.reduction_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_406": {
                "variable": {
                    "value": "self.prob_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.reduction_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_448": {
                "variable": {
                    "value": "ys_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys.new_zeros((ys.shape[0], 1, ys.shape[2])), ys[:, :-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_661": {
                "variable": {
                    "value": "att_ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "att_ws + [self.decoder.decoders[layer_idx].src_attn.attn[:, :self.num_heads_applied_guided_attn]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "att_ws_",
                            "Name"
                        ],
                        [
                            "[torch.cat([att_w, att_w_], dim=1) for (att_w, att_w_) in zip(att_ws, att_ws_)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(att_ws, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_329": {
                "variable": {
                    "value": "encoder_input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "EncoderPrenet(idim=idim, embed_dim=args.embed_dim, elayers=0, econv_layers=args.eprenet_conv_layers, econv_chans=args.eprenet_conv_chans, econv_filts=args.eprenet_conv_filts, use_batch_norm=args.use_batch_norm, dropout_rate=args.eprenet_dropout_rate, padding_idx=padding_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_344": {
                "variable": {
                    "value": "encoder_input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "idim",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "Sequential_376": {
                "variable": {
                    "value": "decoder_input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "DecoderPrenet(idim=odim, n_layers=args.dprenet_layers, n_units=args.dprenet_units, dropout_rate=args.dprenet_dropout_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_444": {
                "variable": {
                    "value": "self.encoder.embed[-1].alpha.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_enc_alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_445": {
                "variable": {
                    "value": "self.decoder.embed[-1].alpha.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_dec_alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_635": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ys, outs[-1][-1].view(1, 1, self.odim))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_369": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.spk_embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_371": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.adim + self.spk_embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_542": {
                "variable": {
                    "value": "att_ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "att_ws + [self.decoder.decoders[layer_idx].src_attn.attn[:, :self.num_heads_applied_guided_attn]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "att_ws_",
                            "Name"
                        ],
                        [
                            "[torch.cat([att_w, att_w_], dim=1) for (att_w, att_w_) in zip(att_ws, att_ws_)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(att_ws, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_553": {
                "variable": {
                    "value": "att_ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "att_ws + [self.decoder.decoders[layer_idx].src_attn.attn[:, :self.num_heads_applied_guided_attn]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "att_ws_",
                            "Name"
                        ],
                        [
                            "[torch.cat([att_w, att_w_], dim=1) for (att_w, att_w_) in zip(att_ws, att_ws_)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(att_ws, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_564": {
                "variable": {
                    "value": "att_ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "att_ws + [self.decoder.decoders[layer_idx].src_attn.attn[:, :self.num_heads_applied_guided_attn]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "att_ws_",
                            "Name"
                        ],
                        [
                            "[torch.cat([att_w, att_w_], dim=1) for (att_w, att_w_) in zip(att_ws, att_ws_)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(att_ws, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_653": {
                "variable": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outs + [self.feat_out(z).view(self.reduction_factor, self.odim)]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(outs, dim=0).unsqueeze(0).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "outs + self.postnet(outs)",
                            "BinOp"
                        ],
                        [
                            "outs.transpose(2, 1).squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_653": {
                "variable": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_653": {
                "variable": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_657": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs + [torch.sigmoid(self.prob_out(z))[0]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(probs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_682": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_768": {
                "variable": {
                    "value": "spembs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spembs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spemb.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.projection(F.normalize(spembs))",
                            "Call"
                        ],
                        [
                            "F.normalize(spembs).unsqueeze(1).expand(-1, hs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_768": {
                "variable": {
                    "value": "spembs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_341": {
                "in_features": {
                    "value": "args.eprenet_conv_chans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_383": {
                "in_features": {
                    "value": "args.dprenet_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.adim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_764": {
                "input": {
                    "value": "spembs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spemb.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.projection(F.normalize(spembs))",
                            "Call"
                        ],
                        [
                            "F.normalize(spembs).unsqueeze(1).expand(-1, hs.size(1), -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_632": {
                "input": {
                    "value": "self.prob_out(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_646": {
                "tensors": {
                    "value": "[att_w, att_w_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_769": {
                "tensors": {
                    "value": "[hs, spembs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/fastspeech/duration_calculator.py": {
        "torch": {
            "stack_72": {
                "tensors": {
                    "value": "[att_w[:olen, :ilen].argmax(-1).eq(i).sum() for i in range(ilen)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_81": {
                "tensors": {
                    "value": "[att_dict[k] for k in att_dict.keys() if 'src_attn' in k]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "data": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/fastspeech/duration_predictor.py": {
        "torch": {
            "ModuleList_43": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_114": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_132": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets.float() + self.offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_64": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.round(xs.exp() - self.offset)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "*args": {
                    "value": "torch.nn.Conv1d(in_chans, n_chans, kernel_size, stride=1, padding=(kernel_size - 1) // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_47": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idim if idx == 0 else n_chans",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_50": {
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "round_64": {
                "input": {
                    "value": "xs.exp() - self.offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/fastspeech/length_regulator.py": {
        "torch": {
            "round_53": {
                "variable": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ds.float() * alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_82": {
                "tensors": {
                    "value": "[x_.repeat(int(d_), 1) for (x_, d_) in zip(x, d) if d_ != 0]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/nets_utils.py": {
        "torch": {
            "arange_150": {
                "variable": {
                    "value": "seq_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "maxlen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(max(lengths))",
                            "Call"
                        ],
                        [
                            "xs.size(length_dim)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_302": {
                "variable": {
                    "value": "numerator",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad_pred.masked_select(mask) == pad_targets.masked_select(mask)",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_303": {
                "variable": {
                    "value": "denominator",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "seq_range_expand >= seq_length_expand",
                            "Compare"
                        ],
                        [
                            "mask[ind].expand_as(xs).to(xs.device)",
                            "Call"
                        ],
                        [
                            "pad_targets != ignore_label",
                            "Compare"
                        ]
                    ]
                }
            },
            "from_numpy_339": {
                "ndarray": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/rnn/attentions.py": {
        "torch": {
            "ModuleList_1468": {
                "variable": {
                    "value": "att_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_146": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pre_compute_enc_h * torch.tanh(self.mlp_dec(dec_z)).view(batch, 1, self.att_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_153": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_158": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_173": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_174": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_230": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_235": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_256": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_257": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_258": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aconv_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(args, 'aconv_chans', None)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_259": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(args, 'aconv_chans', None)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_261": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_339": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_343": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_362": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_363": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_364": {
                "variable": {
                    "value": "self.wvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_365": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_432": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_438": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_460": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_461": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_462": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aconv_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(args, 'aconv_chans', None)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_463": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(args, 'aconv_chans', None)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(att_win, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_465": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_538": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_543": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_546": {
                "variable": {
                    "value": "att_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att_prev, w.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_568": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_569": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_570": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(args, 'aconv_chans', None)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTMCell_572": {
                "variable": {
                    "value": "self.att_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "aconv_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(args, 'aconv_chans', None)",
                            "Call"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_573": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_637": {
                "variable": {
                    "value": "att_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "F.relu(att_conv)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(att_conv, (1, att_conv.size(3))).view(batch, -1)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(cov_vec.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv[h](att_prev[h].view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att[h](att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv[h](att_prev[h].view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att[h](att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_639": {
                "variable": {
                    "value": "att_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "F.relu(att_conv)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(att_conv, (1, att_conv.size(3))).view(batch, -1)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(cov_vec.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv[h](att_prev[h].view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att[h](att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv[h](att_prev[h].view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att[h](att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ],
                        [
                            "self.loc_conv(att_prev.view(batch, 1, 1, self.h_length))",
                            "Call"
                        ],
                        [
                            "att_conv.squeeze(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.mlp_att(att_conv)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, att_conv.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_654": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_659": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_679": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_680": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_681": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aconv_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(args, 'aconv_chans', None)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_682": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(args, 'aconv_chans', None)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_684": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_757": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_763": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_784": {
                "variable": {
                    "value": "self.mlp_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_785": {
                "variable": {
                    "value": "self.mlp_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_786": {
                "variable": {
                    "value": "self.mlp_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_791": {
                "variable": {
                    "value": "self.mlp_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aheads * att_dim_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_888": {
                "variable": {
                    "value": "self.mlp_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_889": {
                "variable": {
                    "value": "self.mlp_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_890": {
                "variable": {
                    "value": "self.mlp_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_891": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_897": {
                "variable": {
                    "value": "self.mlp_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aheads * att_dim_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_996": {
                "variable": {
                    "value": "self.mlp_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_997": {
                "variable": {
                    "value": "self.mlp_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_998": {
                "variable": {
                    "value": "self.mlp_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_999": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_1000": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_1001": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1010": {
                "variable": {
                    "value": "self.mlp_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aheads * att_dim_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_1125": {
                "variable": {
                    "value": "self.mlp_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_1126": {
                "variable": {
                    "value": "self.mlp_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_1127": {
                "variable": {
                    "value": "self.mlp_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_1128": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_1129": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_1130": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1140": {
                "variable": {
                    "value": "self.mlp_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aheads * att_dim_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1246": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1247": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1248": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aconv_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(args, 'aconv_chans', None)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1249": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(args, 'aconv_chans', None)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1251": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1325": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_1331": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(w, 1e-06)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1336": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1357": {
                "variable": {
                    "value": "self.mlp_enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eunits",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1358": {
                "variable": {
                    "value": "self.mlp_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1359": {
                "variable": {
                    "value": "self.mlp_ta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "eunits + dunits + odim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1360": {
                "variable": {
                    "value": "self.mlp_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "aconv_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(args, 'aconv_chans', None)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_1361": {
                "variable": {
                    "value": "self.loc_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(args, 'aconv_chans', None)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1363": {
                "variable": {
                    "value": "self.gvec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "att_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_1439": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_1445": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(w, 1e-06)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1450": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * w.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_1453": {
                "variable": {
                    "value": "self.trans_agent_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mlp_ta(torch.cat([c, out_prev, dec_z], dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_1559": {
                "variable": {
                    "value": "att_ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aw[:, -1] for aw in att_ws]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_84": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.enc_h * att_prev.view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_139": {
                "variable": {
                    "value": "self.pre_compute_enc_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mlp_enc(self.enc_h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_850": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pre_compute_k[h] * torch.tanh(self.mlp_q[h](dec_z)).view(batch, 1, self.att_dim_k)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1562": {
                "variable": {
                    "value": "att_ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aw[idx] for (idx, aw) in enumerate(att_ws)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_865": {
                "tensors": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "c + [torch.sum(self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1), dim=1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_971": {
                "tensors": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "c + [torch.sum(self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1), dim=1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1097": {
                "tensors": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "c + [torch.sum(self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1), dim=1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1226": {
                "tensors": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "c + [torch.sum(self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1), dim=1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.mlp_o(torch.cat(c, dim=1))",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.unsqueeze(-1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.enc_h * w.view(batch, self.h_length, 1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_1328": {
                "input": {
                    "value": "att_prev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask / mask.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "att_prev.to(self.enc_h)",
                            "Call"
                        ],
                        [
                            "1.0 - make_pad_mask(enc_hs_len).to(device=dec_z.device, dtype=dec_z.dtype)",
                            "BinOp"
                        ],
                        [
                            "att_prev / att_prev.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "to_device(self, 1.0 - make_pad_mask(enc_hs_len).float())",
                            "Call"
                        ],
                        [
                            "att_prev / att_prev.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "att_prev.unsqueeze(1).expand(-1, self.att_win, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([att_prev, w.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "att_prev[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "to_device(self, 1.0 - make_pad_mask(enc_hs_len).float())",
                            "Call"
                        ],
                        [
                            "att_prev / att_prev.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "att_prev_states[0]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "att_prev + [to_device(self, mask / mask.new(enc_hs_len).unsqueeze(-1))]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "enc_hs_pad.new_zeros(*enc_hs_pad.size()[:2])",
                            "Call"
                        ],
                        [
                            "enc_hs_pad.new_zeros(*enc_hs_pad.size()[:2])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clamp_1331": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "w + [F.softmax(self.scaling * e, dim=1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "(att_prev + att_prev_shift) * w",
                            "BinOp"
                        ],
                        [
                            "F.normalize(torch.clamp(w, 1e-06), p=1, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "(self.trans_agent_prob * att_prev + (1 - self.trans_agent_prob) * att_prev_shift) * w",
                            "BinOp"
                        ],
                        [
                            "F.normalize(torch.clamp(w, 1e-06), p=1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_1442": {
                "input": {
                    "value": "att_prev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask / mask.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "att_prev.to(self.enc_h)",
                            "Call"
                        ],
                        [
                            "1.0 - make_pad_mask(enc_hs_len).to(device=dec_z.device, dtype=dec_z.dtype)",
                            "BinOp"
                        ],
                        [
                            "att_prev / att_prev.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "to_device(self, 1.0 - make_pad_mask(enc_hs_len).float())",
                            "Call"
                        ],
                        [
                            "att_prev / att_prev.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "att_prev.unsqueeze(1).expand(-1, self.att_win, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([att_prev, w.unsqueeze(1)], dim=1)",
                            "Call"
                        ],
                        [
                            "att_prev[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "to_device(self, 1.0 - make_pad_mask(enc_hs_len).float())",
                            "Call"
                        ],
                        [
                            "att_prev / att_prev.new(enc_hs_len).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "att_prev_states[0]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "att_prev + [to_device(self, mask / mask.new(enc_hs_len).unsqueeze(-1))]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "enc_hs_pad.new_zeros(*enc_hs_pad.size()[:2])",
                            "Call"
                        ],
                        [
                            "enc_hs_pad.new_zeros(*enc_hs_pad.size()[:2])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clamp_1445": {
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "w + [F.softmax(self.scaling * e, dim=1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "(att_prev + att_prev_shift) * w",
                            "BinOp"
                        ],
                        [
                            "F.normalize(torch.clamp(w, 1e-06), p=1, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(scaling * e, dim=1)",
                            "Call"
                        ],
                        [
                            "(self.trans_agent_prob * att_prev + (1 - self.trans_agent_prob) * att_prev_shift) * w",
                            "BinOp"
                        ],
                        [
                            "F.normalize(torch.clamp(w, 1e-06), p=1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_1486": {
                "variable": {
                    "value": "att_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_1565": {
                "variable": {
                    "value": "att_ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aw[0] for aw in att_ws]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_146": {
                "input": {
                    "value": "self.mlp_dec(dec_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_788": {
                "in_features": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_789": {
                "in_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_790": {
                "in_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_833": {
                "input": {
                    "value": "self.mlp_k[h](self.enc_h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_857": {
                "input": {
                    "value": "self.scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_862": {
                "input": {
                    "value": "self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_893": {
                "in_features": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_894": {
                "in_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_895": {
                "in_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_896": {
                "in_features": {
                    "value": "att_dim_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_963": {
                "input": {
                    "value": "self.scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_968": {
                "input": {
                    "value": "self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1003": {
                "in_features": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1004": {
                "in_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1005": {
                "in_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1006": {
                "in_features": {
                    "value": "att_dim_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_1007": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(args, 'aconv_chans', None)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * aconv_filts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, aconv_filts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1009": {
                "in_features": {
                    "value": "aconv_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(args, 'aconv_chans', None)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_1089": {
                "input": {
                    "value": "scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1094": {
                "input": {
                    "value": "self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1132": {
                "in_features": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1133": {
                "in_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1134": {
                "in_features": {
                    "value": "eprojs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "att_dim_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1135": {
                "in_features": {
                    "value": "att_dim_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_1137": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "aconv_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(args, 'aconv_chans', None)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2 * afilts + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, afilts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_1139": {
                "in_features": {
                    "value": "aconv_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(args, 'aconv_chans', None)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "att_dim_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_1218": {
                "input": {
                    "value": "self.scaling * e",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1223": {
                "input": {
                    "value": "self.pre_compute_v[h] * w[h].view(batch, self.h_length, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1454": {
                "tensors": {
                    "value": "[c, out_prev, dec_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1573": {
                "variable": {
                    "value": "att_ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws_sorted_by_head",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "att_ws_sorted_by_head + [att_ws_head]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1576": {
                "variable": {
                    "value": "att_ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([aw[:, -1] for aw in att_ws], dim=1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack([aw[idx] for (idx, aw) in enumerate(att_ws)], dim=1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack([aw[0] for aw in att_ws], dim=1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack(att_ws, dim=1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.stack(att_ws_sorted_by_head, dim=1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_224": {
                "input": {
                    "value": "self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_328": {
                "input": {
                    "value": "att_conv + self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_426": {
                "input": {
                    "value": "cov_vec + self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_532": {
                "input": {
                    "value": "att_conv + self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_648": {
                "input": {
                    "value": "att_h.unsqueeze(1) + self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_751": {
                "input": {
                    "value": "att_conv + self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_850": {
                "input": {
                    "value": "self.mlp_q[h](dec_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_1314": {
                "input": {
                    "value": "self.pre_compute_enc_h + dec_z_tiled + att_conv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_1428": {
                "input": {
                    "value": "att_conv + self.pre_compute_enc_h + dec_z_tiled",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_1571": {
                "variable": {
                    "value": "att_ws_head",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aw[h] for aw in att_ws]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_956": {
                "input": {
                    "value": "self.pre_compute_k[h] + self.mlp_q[h](dec_z).view(batch, 1, self.att_dim_k)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_1081": {
                "input": {
                    "value": "self.pre_compute_k[h] + att_conv + self.mlp_q[h](dec_z).view(batch, 1, self.att_dim_k)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_1210": {
                "input": {
                    "value": "self.pre_compute_k[h] + att_conv + self.mlp_q[h](dec_z).view(batch, 1, self.att_dim_k)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/rnn/decoders.py": {
        "torch": {
            "Embedding_56": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "odim",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_57": {
                "variable": {
                    "value": "self.dropout_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_59": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.dropout_dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_214": {
                "variable": {
                    "value": "z_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "z_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(z_all, dim=1).view(batch * olength, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_221": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.output(z_all)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "ys_out_pad.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.ignore_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction_str",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'elementwise_mean'",
                            "Constant"
                        ],
                        [
                            "'mean'",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_889": {
                "variable": {
                    "value": "ey",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ey, att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_895": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat((self.dropout_dec[-1](z_list[-1]), att_c), dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(self.dropout_dec[-1](z_list[-1]))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat((self.dropout_dec[-1](z_list[-1]), att_c), dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(self.dropout_dec[-1](z_list[-1]))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat((self.dropout_dec[-1](z_list[-1]), att_c), dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(self.dropout_dec[-1](z_list[-1]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_895": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits + eprojs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "odim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "odim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_600": {
                "variable": {
                    "value": "ey",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ey, att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_634": {
                "variable": {
                    "value": "(accum_best_scores, accum_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "vscores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.zeros(batch, beam))",
                            "Call"
                        ],
                        [
                            "vscores.view(batch, beam, 1).repeat(1, 1, self.odim)",
                            "Call"
                        ],
                        [
                            "(vscores + local_scores).view(batch, -1)",
                            "Call"
                        ],
                        [
                            "accum_best_scores",
                            "Name"
                        ]
                    ]
                },
                "k": {
                    "value": "beam",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ],
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_696": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_793": {
                "variable": {
                    "value": "ey",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eys[:, i, :], att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_885": {
                "variable": {
                    "value": "h_han",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_c_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ],
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ],
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ],
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ],
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_64": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_152": {
                "tensors": {
                    "value": "[y, eos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_195": {
                "variable": {
                    "value": "hs_pad_han",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_c_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ],
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ],
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ],
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ],
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "ey",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z_out, att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_207": {
                "variable": {
                    "value": "ey",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(eys[:, i, :], att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_365": {
                "variable": {
                    "value": "ey",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ey, att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_373": {
                "variable": {
                    "value": "local_att_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat((self.dropout_dec[-1](z_list[-1]), att_c), dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(self.dropout_dec[-1](z_list[-1]))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat((self.dropout_dec[-1](z_list[-1]), att_c), dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(self.dropout_dec[-1](z_list[-1]))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat((self.dropout_dec[-1](z_list[-1]), att_c), dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(self.dropout_dec[-1](z_list[-1]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_541": {
                "*size": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ys_out_pad.size(0)",
                            "Call"
                        ],
                        [
                            "len(hlens[0])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "beam",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ],
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_596": {
                "variable": {
                    "value": "exp_h_han",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_c_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ],
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ],
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ],
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ],
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_749": {
                "tensors": {
                    "value": "[y, eos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_787": {
                "variable": {
                    "value": "hs_pad_han",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_c_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ],
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ],
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ],
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ],
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_62": {
                "input_size": {
                    "value": "dunits + eprojs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRUCell_62": {
                "input_size": {
                    "value": "dunits + eprojs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_68": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_149": {
                "tensors": {
                    "value": "[idx, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_151": {
                "tensors": {
                    "value": "[sos, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_361": {
                "variable": {
                    "value": "h_han",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_c_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ],
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ],
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ],
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ],
                        [
                            "[None] * self.num_encs",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_381": {
                "variable": {
                    "value": "(local_best_scores, local_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_att_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "ctc_beam",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(lpz[0].shape[-1], int(beam * CTC_SCORING_RATIO))",
                            "Call"
                        ],
                        [
                            "lpz[0].shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_397": {
                "variable": {
                    "value": "(local_best_scores, joint_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "local_att_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_att_scores",
                            "Name"
                        ],
                        [
                            "(1.0 - ctc_weight) * local_att_scores[:, local_best_ids[0]]",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores[:, local_best_ids[0]]",
                            "BinOp"
                        ],
                        [
                            "att_weight * F.log_softmax(logits, dim=1)",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_scores.view(batch, beam, self.odim)",
                            "Call"
                        ],
                        [
                            "local_scores + ctc_weight * weights_ctc_dec[idx] * local_ctc_scores",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "beam",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ],
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_400": {
                "variable": {
                    "value": "(local_best_scores, local_best_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "local_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "local_att_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_att_scores",
                            "Name"
                        ],
                        [
                            "(1.0 - ctc_weight) * local_att_scores[:, local_best_ids[0]]",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores[:, local_best_ids[0]]",
                            "BinOp"
                        ],
                        [
                            "att_weight * F.log_softmax(logits, dim=1)",
                            "BinOp"
                        ],
                        [
                            "local_scores + recog_args.lm_weight * local_lm_scores",
                            "BinOp"
                        ],
                        [
                            "local_scores.view(batch, beam, self.odim)",
                            "Call"
                        ],
                        [
                            "local_scores + ctc_weight * weights_ctc_dec[idx] * local_ctc_scores",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "beam",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ],
                        [
                            "recog_args.beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_537": {
                "*size": {
                    "value": "n_bb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch * beam",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.dunits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_538": {
                "*size": {
                    "value": "n_bb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch * beam",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.dunits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_539": {
                "*size": {
                    "value": "n_bb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch * beam",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.dunits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_540": {
                "*size": {
                    "value": "n_bb",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch * beam",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "self.dunits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_608": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.output(torch.cat((self.dropout_dec[-1](z_list[-1]), att_c), dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(self.dropout_dec[-1](z_list[-1]))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat((self.dropout_dec[-1](z_list[-1]), att_c), dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(self.dropout_dec[-1](z_list[-1]))",
                            "Call"
                        ],
                        [
                            "self.output(torch.cat((self.dropout_dec[-1](z_list[-1]), att_c), dim=-1))",
                            "Call"
                        ],
                        [
                            "self.output(self.dropout_dec[-1](z_list[-1]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "index_select_648": {
                "variable": {
                    "value": "_a_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_w_list[idx].view(n_bb, *att_w_list[idx].shape[1:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_659": {
                "input": {
                    "value": "z_list[li].view(n_bb, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_660": {
                "input": {
                    "value": "c_list[li].view(n_bb, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_746": {
                "tensors": {
                    "value": "[idx, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_748": {
                "tensors": {
                    "value": "[sos, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_892": {
                "tensors": {
                    "value": "(self.dropout_dec[-1](z_list[-1]), att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMCell_67": {
                "input_size": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRUCell_67": {
                "input_size": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_210": {
                "tensors": {
                    "value": "(self.dropout_dec[-1](z_list[-1]), att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_250": {
                "ndarray": {
                    "value": "self.labeldist",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_251": {
                "input": {
                    "value": "(F.log_softmax(y_all, dim=1) * self.vlabeldist).view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_605": {
                "tensors": {
                    "value": "(self.dropout_dec[-1](z_list[-1]), att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "index_select_654": {
                "variable": {
                    "value": "_a_prev_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_w_list[idx][0].view(n_bb, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_655": {
                "variable": {
                    "value": "_h_prev_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_w_list[idx][1][0].view(n_bb, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_656": {
                "variable": {
                    "value": "_c_prev_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_w_list[idx][1][1].view(n_bb, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_836": {
                "input": {
                    "value": "vi",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_370": {
                "tensors": {
                    "value": "(self.dropout_dec[-1](z_list[-1]), att_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_525": {
                "start": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ys_out_pad.size(0)",
                            "Call"
                        ],
                        [
                            "len(hlens[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_390": {
                "ndarray": {
                    "value": "ctc_scores[0] - hyp['ctc_score_prev'][0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_651": {
                "input": {
                    "value": "att_w_one.view(n_bb, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "vidx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "to_device(self, torch.LongTensor(accum_padded_beam_ids))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_393": {
                "ndarray": {
                    "value": "ctc_scores[idx] - hyp['ctc_score_prev'][idx]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fmod_635": {
                "input": {
                    "value": "accum_best_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.odim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_251": {
                "input": {
                    "value": "y_all",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.output(z_all)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_636": {
                "input": {
                    "value": "accum_best_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.odim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/rnn/encoders.py": {
        "torch": {
            "pack_padded_sequence_121": {
                "variable": {
                    "value": "xs_pack",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs_pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(projected.view(ys_pad.size(0), ys_pad.size(1), -1))",
                            "Call"
                        ],
                        [
                            "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                            "Call"
                        ],
                        [
                            "xs_pad.view(xs_pad.size(0), xs_pad.size(1), self.in_channel, xs_pad.size(2) // self.in_channel).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "xs_pad.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs_pad.contiguous().view(xs_pad.size(0), xs_pad.size(1), xs_pad.size(2) * xs_pad.size(3))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "ilens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i + 1) // sub for i in ilens]",
                            "ListComp"
                        ],
                        [
                            "ilens.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(ilens, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(ilens / 2), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(np.array(ilens, dtype=np.float32) / 2), dtype=np.int64).tolist()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_129": {
                "variable": {
                    "value": "(ys_pad, ilens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_131": {
                "variable": {
                    "value": "projected",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_last(ys_pad.contiguous().view(-1, ys_pad.size(2)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "self.conv1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "variable": {
                    "value": "self.conv1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_181": {
                "variable": {
                    "value": "xs_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_1(xs_pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_182": {
                "variable": {
                    "value": "xs_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_2(xs_pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_183": {
                "variable": {
                    "value": "xs_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs_pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(projected.view(ys_pad.size(0), ys_pad.size(1), -1))",
                            "Call"
                        ],
                        [
                            "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                            "Call"
                        ],
                        [
                            "xs_pad.view(xs_pad.size(0), xs_pad.size(1), self.in_channel, xs_pad.size(2) // self.in_channel).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "xs_pad.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs_pad.contiguous().view(xs_pad.size(0), xs_pad.size(1), xs_pad.size(2) * xs_pad.size(3))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_185": {
                "variable": {
                    "value": "xs_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_1(xs_pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_186": {
                "variable": {
                    "value": "xs_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_2(xs_pad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_187": {
                "variable": {
                    "value": "xs_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs_pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(projected.view(ys_pad.size(0), ys_pad.size(1), -1))",
                            "Call"
                        ],
                        [
                            "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                            "Call"
                        ],
                        [
                            "xs_pad.view(xs_pad.size(0), xs_pad.size(1), self.in_channel, xs_pad.size(2) // self.in_channel).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "xs_pad.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs_pad.contiguous().view(xs_pad.size(0), xs_pad.size(1), xs_pad.size(2) * xs_pad.size(3))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_63": {
                "variable": {
                    "value": "xs_pack",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs_pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.tanh(projected.view(ys_pad.size(0), ys_pad.size(1), -1))",
                            "Call"
                        ],
                        [
                            "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                            "Call"
                        ],
                        [
                            "xs_pad.view(xs_pad.size(0), xs_pad.size(1), self.in_channel, xs_pad.size(2) // self.in_channel).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_1(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_2(xs_pad))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(xs_pad, 2, stride=2, ceil_mode=True)",
                            "Call"
                        ],
                        [
                            "xs_pad.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs_pad.contiguous().view(xs_pad.size(0), xs_pad.size(1), xs_pad.size(2) * xs_pad.size(3))",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "ilens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i + 1) // sub for i in ilens]",
                            "ListComp"
                        ],
                        [
                            "ilens.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(ilens, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(ilens / 2), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(np.array(ilens, dtype=np.float32) / 2), dtype=np.int64).tolist()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_71": {
                "variable": {
                    "value": "(ys_pad, ilens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.l_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cdim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hdim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "variable": {
                    "value": "self.l_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cdim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hdim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_188": {
                "obj": {
                    "value": "ilens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[int(i + 1) // sub for i in ilens]",
                            "ListComp"
                        ],
                        [
                            "ilens.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(ilens, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(ilens / 2), dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "np.array(np.ceil(np.array(ilens, dtype=np.float32) / 2), dtype=np.int64).tolist()",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_284": {
                "variable": {
                    "value": "enc_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_82": {
                "variable": {
                    "value": "xs_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected.view(ys_pad.size(0), ys_pad.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_101": {
                "*args": {
                    "value": "idim",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ],
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ]
                    ]
                }
            },
            "GRU_103": {
                "*args": {
                    "value": "idim",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ],
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ]
                    ]
                }
            },
            "ModuleList_224": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[VGG2L(in_channel), RNNP(get_vgg2l_odim(idim, in_channel=in_channel), elayers, eunits, eprojs, subsample, dropout, typ=typ)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_230": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[VGG2L(in_channel), RNN(get_vgg2l_odim(idim, in_channel=in_channel), elayers, eunits, eprojs, dropout, typ=typ)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_237": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[RNNP(idim, elayers, eunits, eprojs, subsample, dropout, typ=typ)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_241": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[RNN(idim, elayers, eunits, eprojs, dropout, typ=typ)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTM_35": {
                "*args": {
                    "value": "inputdim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ],
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_37": {
                "*args": {
                    "value": "inputdim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ],
                        [
                            "typ[0] == 'b'",
                            "Compare"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "2 * cdim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hdim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "cdim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hdim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/streaming/segment.py": {
        "torch": {
            "cat_78": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self._encoder_states[:seg_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "lpz",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self._ctc_posteriors[:seg_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "variable": {
                    "value": "hlens",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[h.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/streaming/window.py": {
        "torch": {
            "cat_58": {
                "tensors": {
                    "value": "selected_windows",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "tensors": {
                    "value": "self._ctc_posteriors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/tacotron2/cbhg.py": {
        "torch": {
            "l1_loss_50": {
                "variable": {
                    "value": "cbhg_l1_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cbhg_outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cbhg_outs.masked_select(mask)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "spcs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spcs.masked_select(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_51": {
                "variable": {
                    "value": "cbhg_mse_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cbhg_outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cbhg_outs.masked_select(mask)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "spcs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spcs.masked_select(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_102": {
                "variable": {
                    "value": "self.conv_bank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConstantPad1d((0, 1), 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.projections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv1d(self.conv_bank_chans * self.conv_bank_layers, self.conv_proj_chans, self.conv_proj_filts, stride=1, padding=(self.conv_proj_filts - 1) // 2, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_134": {
                "variable": {
                    "value": "self.highways",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_140": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.highway_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "gru_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "odim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "convs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "convs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "convs + [self.conv_bank[k](xs)]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(convs, dim=1)",
                            "Call"
                        ],
                        [
                            "self.max_pool(convs)",
                            "Call"
                        ],
                        [
                            "self.projections(convs).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_176": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "xs.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs.transpose(1, 2) + convs",
                            "BinOp"
                        ],
                        [
                            "self.highways[l](xs)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(xs, ilens, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.output(xs)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "ilens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.new([x.size(0)]).long()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_179": {
                "variable": {
                    "value": "(xs, ilens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "xs.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "xs.transpose(1, 2) + convs",
                            "BinOp"
                        ],
                        [
                            "self.highways[l](xs)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(xs, ilens, batch_first=True)",
                            "Call"
                        ],
                        [
                            "self.output(xs)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "total_length": {
                    "value": "total_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "xs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_231": {
                "variable": {
                    "value": "self.projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(idim, idim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_234": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(idim, idim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConstantPad1d_117": {
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool1d_118": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_122": {
                "in_channels": {
                    "value": "self.conv_bank_chans * self.conv_bank_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.conv_proj_chans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.conv_proj_filts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.conv_proj_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_125": {
                "num_features": {
                    "value": "self.conv_proj_chans",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_127": {
                "in_channels": {
                    "value": "self.conv_proj_chans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.idim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.conv_proj_filts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.conv_proj_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_130": {
                "num_features": {
                    "value": "self.idim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "in_features": {
                    "value": "idim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.highway_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_232": {
                "in_features": {
                    "value": "idim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "idim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_235": {
                "in_features": {
                    "value": "idim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "idim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sigmoid_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "*args": {
                    "value": "torch.nn.ConstantPad1d(padding, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConstantPad1d_109": {
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(k - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "((k - 1) // 2, (k - 1) // 2 + 1)",
                            "Tuple"
                        ]
                    ]
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_110": {
                "in_channels": {
                    "value": "idim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.conv_bank_chans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(1, self.conv_bank_layers + 1)",
                            "Call"
                        ],
                        [
                            "range(self.conv_bank_layers)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_112": {
                "num_features": {
                    "value": "self.conv_bank_chans",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/tacotron2/decoder.py": {
        "torch": {
            "ModuleList_117": {
                "variable": {
                    "value": "self.prenet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_165": {
                "variable": {
                    "value": "self.postnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_278": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_311": {
                "variable": {
                    "value": "self.feat_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "iunits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idim + prenet_units if layer == 0 else dunits",
                            "IfExp"
                        ],
                        [
                            "idim + dunits if use_concate else dunits",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "odim * reduction_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_312": {
                "variable": {
                    "value": "self.prob_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "iunits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idim + prenet_units if layer == 0 else dunits",
                            "IfExp"
                        ],
                        [
                            "idim + dunits if use_concate else dunits",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "reduction_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_381": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Name"
                        ],
                        [
                            "logits + [self.prob_out(zcs)]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_382": {
                "variable": {
                    "value": "before_outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outs + [self.feat_out(zcs).view(1, self.odim, -1)]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(outs, dim=2)",
                            "Call"
                        ],
                        [
                            "outs + self.postnet(outs)",
                            "BinOp"
                        ],
                        [
                            "outs.transpose(2, 1).squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.output_activation_fn(outs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_383": {
                "variable": {
                    "value": "att_ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "att_ws + [att_w]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(att_ws, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(att_ws, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_566": {
                "variable": {
                    "value": "att_ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "att_ws + [att_w]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(att_ws, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(att_ws, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_135": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prenet[l](x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_281": {
                "variable": {
                    "value": "lstm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_size": {
                    "value": "iunits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idim + prenet_units if layer == 0 else dunits",
                            "IfExp"
                        ],
                        [
                            "idim + dunits if use_concate else dunits",
                            "IfExp"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "dunits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_366": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att_c, prenet_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_475": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att_c, prenet_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_555": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att_c, prenet_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_499": {
                "variable": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outs + [self.feat_out(zcs).view(1, self.odim, -1)]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(outs, dim=2)",
                            "Call"
                        ],
                        [
                            "outs + self.postnet(outs)",
                            "BinOp"
                        ],
                        [
                            "outs.transpose(2, 1).squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.output_activation_fn(outs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_503": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "probs + [torch.sigmoid(self.prob_out(zcs))[0]]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(probs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_504": {
                "variable": {
                    "value": "att_ws",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_ws",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(att_ws, dim=1)",
                            "Call"
                        ],
                        [
                            "att_ws + [att_w]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(att_ws, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(att_ws, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "*args": {
                    "value": "torch.nn.Linear(n_inputs, n_units)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "*args": {
                    "value": "torch.nn.Conv1d(ichans, odim, n_filts, stride=1, padding=(n_filts - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "*args": {
                    "value": "torch.nn.Conv1d(ichans, odim, n_filts, stride=1, padding=(n_filts - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_371": {
                "tensors": {
                    "value": "[z_list[-1], att_c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_480": {
                "tensors": {
                    "value": "[z_list[-1], att_c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "in_features": {
                    "value": "n_inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idim if layer == 0 else n_units",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_units",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "*args": {
                    "value": "torch.nn.Conv1d(ichans, ochans, n_filts, stride=1, padding=(n_filts - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "*args": {
                    "value": "torch.nn.Conv1d(ichans, ochans, n_filts, stride=1, padding=(n_filts - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_185": {
                "in_channels": {
                    "value": "ichans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "odim if layer == 0 else n_chans",
                            "IfExp"
                        ],
                        [
                            "n_chans if n_layers != 1 else odim",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "odim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "n_filts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(n_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_187": {
                "num_features": {
                    "value": "odim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_188": {
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_191": {
                "in_channels": {
                    "value": "ichans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "odim if layer == 0 else n_chans",
                            "IfExp"
                        ],
                        [
                            "n_chans if n_layers != 1 else odim",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "odim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "n_filts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(n_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_193": {
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_482": {
                "input": {
                    "value": "self.prob_out(zcs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_171": {
                "in_channels": {
                    "value": "ichans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "odim if layer == 0 else n_chans",
                            "IfExp"
                        ],
                        [
                            "n_chans if n_layers != 1 else odim",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ochans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "odim if layer == n_layers - 1 else n_chans",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "n_filts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(n_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_173": {
                "num_features": {
                    "value": "ochans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "odim if layer == n_layers - 1 else n_chans",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Tanh_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_175": {
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_178": {
                "in_channels": {
                    "value": "ichans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "odim if layer == 0 else n_chans",
                            "IfExp"
                        ],
                        [
                            "n_chans if n_layers != 1 else odim",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ochans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "odim if layer == n_layers - 1 else n_chans",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "n_filts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(n_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_181": {
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/tacotron2/encoder.py": {
        "torch": {
            "Embedding_67": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "idim",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_120": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "lengths": {
                    "value": "ilens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x.size(0)]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_123": {
                "variable": {
                    "value": "(xs, hlens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.embed(xs).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "pack_padded_sequence(xs.transpose(1, 2), ilens, batch_first=True)",
                            "Call"
                        ],
                        [
                            "xs + self.convs[l](xs)",
                            "BinOp"
                        ],
                        [
                            "self.convs[l](xs)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_69": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_89": {
                "variable": {
                    "value": "self.blstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "iunits",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "*args": {
                    "value": "torch.nn.Conv1d(ichans, econv_chans, econv_filts, stride=1, padding=(econv_filts - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "*args": {
                    "value": "torch.nn.Conv1d(ichans, econv_chans, econv_filts, stride=1, padding=(econv_filts - 1) // 2, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_74": {
                "in_channels": {
                    "value": "ichans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embed_dim if layer == 0 else econv_chans",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "econv_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "econv_filts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(econv_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_76": {
                "num_features": {
                    "value": "econv_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_78": {
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_81": {
                "in_channels": {
                    "value": "ichans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embed_dim if layer == 0 else econv_chans",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "econv_chans",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "econv_filts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(econv_filts - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/transformer/add_sos_eos.py": {
        "torch": {
            "cat_29": {
                "tensors": {
                    "value": "[_sos, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_30": {
                "tensors": {
                    "value": "[y, _eos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/transformer/attention.py": {
        "torch": {
            "Linear_32": {
                "variable": {
                    "value": "self.linear_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_feat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.linear_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_feat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.linear_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_feat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_feat",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_37": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_68": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_attn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dropout(self.attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_v(value).view(n_batch, -1, self.h, self.d_k)",
                            "Call"
                        ],
                        [
                            "v.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_63": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k.transpose(-2, -1)) / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask, min_value)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_65": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(q, k.transpose(-2, -1)) / math.sqrt(self.d_k)",
                            "BinOp"
                        ],
                        [
                            "scores.masked_fill(mask, min_value)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_58": {
                "input": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.linear_q(query).view(n_batch, -1, self.h, self.d_k)",
                            "Call"
                        ],
                        [
                            "q.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "k.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "scores.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/transformer/decoder.py": {
        "torch": {
            "Sequential_57": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Embedding(odim, attention_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "attention_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "odim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_softmax_148": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output_layer(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(odim, attention_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_58": {
                "num_embeddings": {
                    "value": "odim",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "attention_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_168": {
                "tensors": {
                    "value": "[state[b][l] for b in range(n_batch)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "odim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attention_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_64": {
                "normalized_shape": {
                    "value": "attention_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_65": {
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/transformer/decoder_layer.py": {
        "torch": {
            "Dropout_42": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.concat_linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size + size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.concat_linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size + size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "tgt_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tgt_q, self.self_attn(tgt_q, tgt, tgt, tgt_q_mask))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "x_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.src_attn(x, memory, memory, memory_mask))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cache, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/transformer/embedding.py": {
        "torch": {
            "Dropout_42": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_55": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_55": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_56": {
                "variable": {
                    "value": "div_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, self.d_model, 2, dtype=torch.float32) * -(math.log(10000.0) / self.d_model)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_58": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_59": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_94": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "self.alpha.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_56": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/transformer/encoder.py": {
        "torch": {
            "Sequential_64": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(idim, attention_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "idim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "attention_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_66": {
                "normalized_shape": {
                    "value": "attention_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_67": {
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Embedding(idim, attention_dim, padding_idx=padding_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Embedding_75": {
                "num_embeddings": {
                    "value": "idim",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "attention_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "pos_enc_class(attention_dim, positional_dropout_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/transformer/encoder_layer.py": {
        "torch": {
            "Dropout_38": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.concat_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size + size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "x_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.self_attn(x, x, x, mask))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/transformer/initializer.py": {
        "torch": {}
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/transformer/label_smoothing_loss.py": {
        "torch": {
            "KLDivLoss_23": {
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_53": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, self.size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/transformer/layer_norm.py": {
        "torch": {}
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/transformer/mask.py": {
        "torch": {
            "ones_28": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datatype",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tril_29": {
                "input": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(size, size, device=device, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(size, size, device=device, dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/transformer/multi_layer_conv.py": {
        "torch": {
            "Conv1d_34": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_36": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w_1(x.transpose(-1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_50": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_72": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_chans",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "in_chans",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_75": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_87": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w_1(x.transpose(-1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_87": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/transformer/optimizer.py": {
        "torch": {
            "Adam_71": {
                "variable": {
                    "value": "base",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/transformer/positionwise_feed_forward.py": {
        "torch": {
            "Linear_24": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "idim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_units",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_units",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "idim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_30": {
                "input": {
                    "value": "self.w_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/transformer/repeat.py": {
        "torch": {}
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/transformer/subsampling.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(1, odim, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(odim * (((idim - 1) // 2 - 1) // 2), odim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "odim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "odim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "odim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "odim * (((idim - 1) // 2 - 1) // 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "odim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/pytorch_backend/wavenet.py": {
        "torch": {
            "unsqueeze_90": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.sign(fx) / mu * ((1 + mu) ** np.abs(fx) - 1)",
                            "BinOp"
                        ],
                        [
                            "x % self.depth",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(x, 2)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, :-self.padding]",
                            "Subscript"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (n_pad, 0), 'constant', self.n_quantize // 2)",
                            "Call"
                        ],
                        [
                            "self.onehot(x).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_106": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_137": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, self.upsampling_factor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, self.upsampling_factor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_194": {
                "variable": {
                    "value": "self.dil_sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_195": {
                "variable": {
                    "value": "self.dil_tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_196": {
                "variable": {
                    "value": "self.aux_1x1_sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_197": {
                "variable": {
                    "value": "self.aux_1x1_tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_198": {
                "variable": {
                    "value": "self.skip_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_199": {
                "variable": {
                    "value": "self.res_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_209": {
                "variable": {
                    "value": "self.conv_post_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.n_skipch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_skipch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_210": {
                "variable": {
                    "value": "self.conv_post_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.n_skipch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_quantize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_347": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.sign(fx) / mu * ((1 + mu) ** np.abs(fx) - 1)",
                            "BinOp"
                        ],
                        [
                            "x % self.depth",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(x, 2)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, :-self.padding]",
                            "Subscript"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (n_pad, 0), 'constant', self.n_quantize // 2)",
                            "Call"
                        ],
                        [
                            "self.onehot(x).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_349": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._preprocess(x)",
                            "Call"
                        ],
                        [
                            "sum(skip_connections)",
                            "Call"
                        ],
                        [
                            "self._postprocess(output)",
                            "Call"
                        ],
                        [
                            "self._preprocess(x)",
                            "Call"
                        ],
                        [
                            "samples[-self.kernel_size * 2 + 1:].unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self._preprocess(output)",
                            "Call"
                        ],
                        [
                            "torch.cat([output_buffer[l], output], dim=2)",
                            "Call"
                        ],
                        [
                            "sum(skip_connections)",
                            "Call"
                        ],
                        [
                            "self._postprocess(output)[0]",
                            "Subscript"
                        ],
                        [
                            "self.causal(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv_post_1(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv_post_2(output).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(output_sigmoid + aux_output_sigmoid) * torch.tanh(output_tanh + aux_output_tanh)",
                            "BinOp"
                        ],
                        [
                            "res_1x1(output)",
                            "Call"
                        ],
                        [
                            "output + x",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(output_sigmoid + aux_output_sigmoid) * torch.tanh(output_tanh + aux_output_tanh)",
                            "BinOp"
                        ],
                        [
                            "res_1x1(output)",
                            "Call"
                        ],
                        [
                            "output + x[:, :, -1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pad_273": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.upsampling(h)",
                            "Call"
                        ],
                        [
                            "h.transpose(0, 1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.upsampling(h)",
                            "Call"
                        ],
                        [
                            "F.pad(h, (0, n_samples - h.shape[2]), 'replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(h, (n_pad, 0), 'replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, n_samples - h.shape[2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_278": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.sign(fx) / mu * ((1 + mu) ** np.abs(fx) - 1)",
                            "BinOp"
                        ],
                        [
                            "x % self.depth",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(x, 2)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, :-self.padding]",
                            "Subscript"
                        ],
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (n_pad, 0), 'constant', self.n_quantize // 2)",
                            "Call"
                        ],
                        [
                            "self.onehot(x).transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(n_pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.n_quantize // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_279": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.upsampling(h)",
                            "Call"
                        ],
                        [
                            "h.transpose(0, 1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.upsampling(h)",
                            "Call"
                        ],
                        [
                            "F.pad(h, (0, n_samples - h.shape[2]), 'replicate')",
                            "Call"
                        ],
                        [
                            "F.pad(h, (n_pad, 0), 'replicate')",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(n_pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_330": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[samples, sample]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output_buffer[l], output]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_322": {
                "variable": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_323": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(output[-1], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_359": {
                "input": {
                    "value": "output_sigmoid + aux_output_sigmoid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_360": {
                "input": {
                    "value": "output_tanh + aux_output_tanh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_372": {
                "input": {
                    "value": "output_sigmoid + aux_output_sigmoid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_373": {
                "input": {
                    "value": "output_tanh + aux_output_tanh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_203": {
                "in_channels": {
                    "value": "self.n_aux",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_resch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_204": {
                "in_channels": {
                    "value": "self.n_aux",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_resch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_205": {
                "in_channels": {
                    "value": "self.n_resch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_skipch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_206": {
                "in_channels": {
                    "value": "self.n_resch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_resch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/nets/scorer_interface.py": {
        "torch": {}
    },
    "adviser/tools/espnet_minimal/nets/scorers/ctc.py": {
        "torch": {
            "as_tensor_69": {
                "variable": {
                    "value": "tscore",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "presub_score - prev_score",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/utils/dataset.py": {
        "torch": {
            "DataLoader_46": {
                "variable": {
                    "value": "self.loader",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "self.loader",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/utils/deterministic_utils.py": {
        "torch": {
            "manual_seed_14": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "adviser/tools/espnet_minimal/utils/spec_augment.py": {
        "torch": {
            "linspace_163": {
                "variable": {
                    "value": "y_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "image_height - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spec.device",
                            "Attribute"
                        ],
                        [
                            "img_tensor.device",
                            "Attribute"
                        ],
                        [
                            "train_points.device",
                            "Attribute"
                        ],
                        [
                            "image.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "linspace_164": {
                "variable": {
                    "value": "x_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "image_width - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spec.device",
                            "Attribute"
                        ],
                        [
                            "img_tensor.device",
                            "Attribute"
                        ],
                        [
                            "train_points.device",
                            "Attribute"
                        ],
                        [
                            "image.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "meshgrid_165": {
                "variable": {
                    "value": "(y_grid, x_grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "y_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.linspace(0, image_height - 1, image_height, device=device)",
                            "Call"
                        ],
                        [
                            "torch.linspace(0, image_height - 1, image_height, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "x_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.linspace(0, image_width - 1, image_width, device=device)",
                            "Call"
                        ],
                        [
                            "torch.linspace(0, image_width - 1, image_width, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_174": {
                "variable": {
                    "value": "y_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "image_height - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spec.device",
                            "Attribute"
                        ],
                        [
                            "img_tensor.device",
                            "Attribute"
                        ],
                        [
                            "train_points.device",
                            "Attribute"
                        ],
                        [
                            "image.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "linspace_175": {
                "variable": {
                    "value": "x_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "image_width - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spec.device",
                            "Attribute"
                        ],
                        [
                            "img_tensor.device",
                            "Attribute"
                        ],
                        [
                            "train_points.device",
                            "Attribute"
                        ],
                        [
                            "image.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "meshgrid_176": {
                "variable": {
                    "value": "(y_grid, x_grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "y_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.linspace(0, image_height - 1, image_height, device=device)",
                            "Call"
                        ],
                        [
                            "torch.linspace(0, image_height - 1, image_height, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "x_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.linspace(0, image_width - 1, image_width, device=device)",
                            "Call"
                        ],
                        [
                            "torch.linspace(0, image_width - 1, image_width, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_205": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "train_points.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spec.device",
                            "Attribute"
                        ],
                        [
                            "img_tensor.device",
                            "Attribute"
                        ],
                        [
                            "train_points.device",
                            "Attribute"
                        ],
                        [
                            "image.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_206": {
                "variable": {
                    "value": "matrix_b",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c, ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "left_block",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(matrix_a, torch.transpose(matrix_b, 2, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "right_block",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(matrix_b, lhs_zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "lhs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(left_block, right_block)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "rhs_zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(b, d + 1, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "train_points.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spec.device",
                            "Attribute"
                        ],
                        [
                            "img_tensor.device",
                            "Attribute"
                        ],
                        [
                            "train_points.device",
                            "Attribute"
                        ],
                        [
                            "image.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_220": {
                "variable": {
                    "value": "rhs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(f, rhs_zeros)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_241": {
                "variable": {
                    "value": "x_norm_squared",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(x, x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_242": {
                "variable": {
                    "value": "y_norm_squared",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(y, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_244": {
                "variable": {
                    "value": "x_y_transpose",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.squeeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "y.squeeze(0).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "EPSILON",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "r.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_304": {
                "variable": {
                    "value": "rbf_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi_pairwise_dists",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "phi(pairwise_dists, order)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X[:, :n, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_308": {
                "variable": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_points[..., :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_309": {
                "variable": {
                    "value": "query_points_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(query_points, ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_313": {
                "variable": {
                    "value": "linear_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_points_pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((query_points, ones), 2).float()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X[:, n:, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "meshgrid_350": {
                "variable": {
                    "value": "(grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(width, device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(height, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_353": {
                "variable": {
                    "value": "stacked_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grid_y, grid_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_358": {
                "variable": {
                    "value": "query_points_flattened",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_points_on_grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batched_grid - flow",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, height * width, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_362": {
                "variable": {
                    "value": "interpolated",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "interpolated",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "interpolate_bilinear(image, query_points_flattened)",
                            "Call"
                        ],
                        [
                            "torch.reshape(interpolated, [batch_size, height, width, channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, height, width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_441": {
                "variable": {
                    "value": "flattened_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * height * width, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_442": {
                "variable": {
                    "value": "batch_offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(batch_size, device=grid_device) * height * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_166": {
                "tensors": {
                    "value": "(y_grid, x_grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_170": {
                "input": {
                    "value": "grid_locations",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[image_height * image_width, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_177": {
                "tensors": {
                    "value": "(y_grid, x_grid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "input": {
                    "value": "[image_height * image_width, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_182": {
                "input": {
                    "value": "flattened_flows",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "interpolate_spline(dest_control_point_locations, control_point_flows, flattened_grid_locations, interpolation_order, regularization_weight)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, image_height, image_width, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_266": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_267": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_419": {
                "variable": {
                    "value": "max_floor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "size_in_indexing_dimension - 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "query_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query_points.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "grid_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_420": {
                "variable": {
                    "value": "min_floor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "query_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "query_points.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "grid_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_421": {
                "variable": {
                    "value": "maxx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_floor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0, dtype=query_type, device=grid_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_422": {
                "variable": {
                    "value": "floor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "maxx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(min_floor, torch.floor(queries))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_431": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "queries - floor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "grid_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_432": {
                "variable": {
                    "value": "min_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "grid_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_433": {
                "variable": {
                    "value": "max_alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "grid_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "grid_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "min_434": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(min_alpha, alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_438": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(queries - floor, dtype=grid_type, device=grid_device)",
                            "Call"
                        ],
                        [
                            "torch.min(torch.max(min_alpha, alpha), max_alpha)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(alpha, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_450": {
                "variable": {
                    "value": "gathered_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flattened_grid.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "linear_coordinates",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "batch_offsets + y_coords * width + x_coords",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_76": {
                "data": {
                    "value": "[[[point_to_warp, y]]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spec.device",
                            "Attribute"
                        ],
                        [
                            "img_tensor.device",
                            "Attribute"
                        ],
                        [
                            "train_points.device",
                            "Attribute"
                        ],
                        [
                            "image.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_77": {
                "data": {
                    "value": "[[[point_to_warp + dist_to_warp, y]]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spec.device",
                            "Attribute"
                        ],
                        [
                            "img_tensor.device",
                            "Attribute"
                        ],
                        [
                            "train_points.device",
                            "Attribute"
                        ],
                        [
                            "image.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_215": {
                "*size": {
                    "value": "(b, num_b_cols, num_b_cols)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spec.device",
                            "Attribute"
                        ],
                        [
                            "img_tensor.device",
                            "Attribute"
                        ],
                        [
                            "train_points.device",
                            "Attribute"
                        ],
                        [
                            "image.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mul_241": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mul_242": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_rows // 2",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_rows // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_351": {
                "start": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spec.device",
                            "Attribute"
                        ],
                        [
                            "img_tensor.device",
                            "Attribute"
                        ],
                        [
                            "train_points.device",
                            "Attribute"
                        ],
                        [
                            "image.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_451": {
                "input": {
                    "value": "gathered_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.gather(flattened_grid.t(), 1, linear_coordinates)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_queries, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_209": {
                "input": {
                    "value": "matrix_b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((c, ones), 2).float()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_421": {
                "input": {
                    "value": "queries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "unstacked_query_points[dim]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_434": {
                "input": {
                    "value": "min_alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(0.0, dtype=grid_type, device=grid_device)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_270": {
                "input": {
                    "value": "torch.max(r, EPSILON)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_274": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_277": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_442": {
                "start": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "grid_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "grid.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_270": {
                "input": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_272": {
                "input": {
                    "value": "torch.max(r, EPSILON)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_278": {
                "input": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "0.5 * order",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_272": {
                "input": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_272": {
                "input": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_275": {
                "input": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_275": {
                "input": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(r)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ],
                        [
                            "torch.max(r, EPSILON)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "0.5 * order",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}