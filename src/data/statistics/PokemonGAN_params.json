{
    "metrics/linear_separability.py": {
        "sklearn": {},
        "tensorflow": {
            "device_118": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_130": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gs_clone.get_output_for(latents, None, **Gs_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [-1, images.shape[1], images.shape[2] // factor, factor, images.shape[3] // factor, factor])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(images, axis=[3, 5])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, images.shape[1], images.shape[2] // factor, factor, images.shape[3] // factor, factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_131": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gs_clone.get_output_for(latents, None, **Gs_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [-1, images.shape[1], images.shape[2] // factor, factor, images.shape[3] // factor, factor])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(images, axis=[3, 5])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_138": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.concat([logits, -logits], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_138": {
                "values": {
                    "value": "[logits, -logits]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dataset_tool.py": {
        "tensorflow": {
            "TFRecordOptions_74": {
                "variable": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_84": {
                "variable": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=quant.shape)), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[quant.tostring()]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_77": {
                "path": {
                    "value": "tfr_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tfr_prefix + '-r%02d.tfrecords' % (self.resolution_log2 - lod)",
                            "BinOp"
                        ]
                    ]
                },
                "options": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_84": {
                "feature": {
                    "value": "{'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=quant.shape)), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[quant.tostring()]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Feature_85": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=quant.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_86": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[quant.tostring()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_85": {
                "value": {
                    "value": "quant.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BytesList_86": {
                "value": {
                    "value": "[quant.tostring()]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/tflib/autosummary.py": {
        "tensorflow": {
            "cast_49": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "value_expr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cond_64": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.is_finite(v[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.stack(v)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.zeros(3, dtype=_dtype)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_68": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.is_variable_initialized(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.assign_add(var, v)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.assign(var, v)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "constant_53": {
                "variable": {
                    "value": "size_expr",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.prod(v.shape.as_list())",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_prod_56": {
                "variable": {
                    "value": "size_expr",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.shape(v), _dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_67": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(3, dtype=_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_finite_64": {
                "x": {
                    "value": "v[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "control_dependencies_66": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "is_variable_initialized_68": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(3, dtype=_dtype), trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_99": {
                "variable": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(condition, name='condition')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "condition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_100": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(condition, name='condition')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.group(_create_var(name, value))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_132": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_132": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "merge_all_189": {
                "variable": {
                    "value": "_merge_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_56": {
                "x": {
                    "value": "tf.shape(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "square_61": {
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_63": {
                "input_tensor": {
                    "value": "tf.square(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_64": {
                "values": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_64": {
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_67": {
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "assign_add_68": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(3, dtype=_dtype), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_68": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(3, dtype=_dtype), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_98": {
                "name": {
                    "value": "'summary_' + name_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_98": {
                "device_name": {
                    "value": "value.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_136": {
                "variable": {
                    "value": "moments",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "vars_list",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_188": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_188": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "shape_56": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_63": {
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_101": {
                "control_inputs": {
                    "value": "[update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_102": {
                "input": {
                    "value": "value if passthru is None else passthru",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "update_value",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "group_100": {
                "*inputs": {
                    "value": "_create_var(name, value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_109": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_109": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_138": {
                "control_inputs": {
                    "value": "[moments]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_142": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "moments[2] - tf.square(moments[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_139": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(3, dtype=_dtype), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.zeros(3, dtype=_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_140": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_140": {
                "control_inputs": {
                    "value": "reset_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign(var, tf.zeros(3, dtype=_dtype)) for var in vars_list]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "scalar_143": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "moments[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_139": {
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "scalar_145": {
                "name": {
                    "value": "xCustomScalars/ + name + /margin_lo",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mean - std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_146": {
                "name": {
                    "value": "xCustomScalars/ + name + /margin_hi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mean + std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_142": {
                "x": {
                    "value": "moments[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/tflib/custom_ops.py": {
        "tensorflow": {
            "load_op_library_156": {
                "variable": {
                    "value": "plugin",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "bin_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cuda_cache_path, cuda_file_name + '_' + md5.hexdigest() + bin_file_ext)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_include_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_include_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_include_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_include_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_lib_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_lib_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/tflib/network.py": {
        "tensorflow": {
            "get_default_graph_458": {
                "variable": {
                    "value": "ops",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_141": {
                "variable": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_442": {
                "variable": {
                    "value": "mb_out",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_442": {
                "variable": {
                    "value": "mb_out",
                    "type": "variable",
                    "possible_values": []
                },
                "main": {
                    "value": "out_expr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._build_func(*self.input_templates, **build_kwargs)",
                            "Call"
                        ],
                        [
                            "self._build_func(*final_inputs, **build_kwargs)",
                            "Call"
                        ],
                        [
                            "[out_expr] if tfutil.is_tf_expression(out_expr) else list(out_expr)",
                            "IfExp"
                        ],
                        [
                            "[tf.concat(outputs, axis=0) for outputs in zip(*out_split)]",
                            "ListComp"
                        ]
                    ]
                },
                "argv": {
                    "value": "dict(zip(in_expr, mb_in))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_140": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "name_scope_211": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_351": {
                "*inputs": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "name_scope_540": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "device_540": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_540": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "avg_pool_584": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, out_shrink, out_shrink]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, out_shrink, out_shrink]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_dtype_587": {
                "type_value": {
                    "value": "out_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "saturate_cast_589": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_default_graph_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_152": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "identity_217": {
                "variable": {
                    "value": "expr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x * out_mul for x in expr]",
                            "ListComp"
                        ],
                        [
                            "[x + out_add for x in expr]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.avg_pool(x, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW') for x in expr]",
                            "ListComp"
                        ],
                        [
                            "[tf.round(x) for x in expr]",
                            "ListComp"
                        ],
                        [
                            "[tf.saturate_cast(x, out_dtype) for x in expr]",
                            "ListComp"
                        ],
                        [
                            "tf.identity(expr, name=name)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(valid_inputs[0])[0]] + shape[1:], name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_219": {
                "variable": {
                    "value": "expr",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(valid_inputs[0])[0]] + shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "control_dependencies_400": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "histogram_548": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[op for op in cur_ops if op.type.startswith('Variable')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "round_588": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_scope_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "global_variables_181": {
                "scope": {
                    "value": "self.scope + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_401": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_427": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_402": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_407": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_428": {
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_219": {
                "input": {
                    "value": "valid_inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "split_403": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/tflib/ops/fused_bias_act.py": {
        "tensorflow": {
            "convert_to_tensor_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_104": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_105": {
                "variable": {
                    "value": "empty_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_77": {
                "value": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(b) if b is not None else tf.constant([], dtype=x.dtype)",
                            "IfExp"
                        ],
                        [
                            "tf.convert_to_tensor(b) if b is not None else empty_tensor",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_77": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(b) if b is not None else tf.constant([], dtype=x.dtype)",
                            "IfExp"
                        ],
                        [
                            "tf.convert_to_tensor(b) if b is not None else empty_tensor",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1 if i == axis else 1 for i in range(x.shape.rank)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_106": {
                "value": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(b) if b is not None else tf.constant([], dtype=x.dtype)",
                            "IfExp"
                        ],
                        [
                            "tf.convert_to_tensor(b) if b is not None else empty_tensor",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_142": {
                "variable": {
                    "value": "db",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "db",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dx",
                            "variable"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis + 1, x.shape.rank)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis)))",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(axis + 1, x.shape.rank))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_144": {
                "variable": {
                    "value": "db",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "db",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dx",
                            "variable"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis + 1, x.shape.rank)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis)))",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(axis))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_22": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_23": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "act_spec.def_alpha",
                            "Attribute"
                        ],
                        [
                            "act_spec.def_alpha",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_24": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_25": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "elu_26": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "selu_27": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_28": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_29": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dnnlib/tflib/ops/upfirdn_2d.py": {
        "tensorflow": {
            "convert_to_tensor_69": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, inH, 1, inW, 1, minorDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_85": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, inH * upy, inW * upx, minorDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_89": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_93": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_95": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k[::-1, ::-1, np.newaxis, np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_96": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_98": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_108": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_123": {
                "variable": {
                    "value": "kc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(k, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.asarray(k, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "_setup_kernel(k) * gain",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * (gain * factor ** 2)",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * gain",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * (gain * factor ** 2)",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * gain",
                            "BinOp"
                        ],
                        [
                            "np.asarray(k, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.outer(k, k)",
                            "Call"
                        ],
                        [
                            "k / np.sum(k)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_124": {
                "variable": {
                    "value": "gkc",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k[::-1, ::-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_261": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_286": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[convH, convW, inC, num_groups, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_287": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w[::-1, ::-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 1, 4, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_288": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[convH, convW, -1, num_groups * inC]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_291": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[_shape(x, 0), outC, (_shape(x, 2) - 1) * factor + convH, (_shape(x, 3) - 1) * factor + convW]",
                            "List"
                        ],
                        [
                            "[_shape(x, 0), (_shape(x, 1) - 1) * factor + convH, (_shape(x, 2) - 1) * factor + convW, outC]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, factor, factor]",
                            "List"
                        ],
                        [
                            "[1, factor, factor, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NCHW'",
                            "Method Argument"
                        ],
                        [
                            "'NCHW'",
                            "Method Argument"
                        ],
                        [
                            "'NCHW'",
                            "Method Argument"
                        ],
                        [
                            "'NCHW'",
                            "Method Argument"
                        ],
                        [
                            "'NCHW'",
                            "Method Argument"
                        ],
                        [
                            "'NCHW'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_320": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_332": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, factor, factor]",
                            "List"
                        ],
                        [
                            "[1, factor, factor, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'NCHW'",
                            "Method Argument"
                        ],
                        [
                            "'NCHW'",
                            "Method Argument"
                        ],
                        [
                            "'NCHW'",
                            "Method Argument"
                        ],
                        [
                            "'NCHW'",
                            "Method Argument"
                        ],
                        [
                            "'NCHW'",
                            "Method Argument"
                        ],
                        [
                            "'NCHW'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_358": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_plugin().up_fir_dn2d(x=x, k=kc, upx=upx, upy=upy, downx=downx, downy=downy, padx0=padx0, padx1=padx1, pady0=pady0, pady1=pady1)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(y, 2), _shape(y, 3), 1])",
                            "Call"
                        ],
                        [
                            "upfirdn_2d(y, k, upx=up, upy=up, downx=down, downy=down, padx0=pad0, padx1=pad1, pady0=pad0, pady1=pad1, impl=impl)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(x, 1), _shape(y, 1), _shape(y, 2)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, _shape(y, 2), _shape(y, 3), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_361": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_plugin().up_fir_dn2d(x=x, k=kc, upx=upx, upy=upy, downx=downx, downy=downy, padx0=padx0, padx1=padx1, pady0=pady0, pady1=pady1)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(y, 2), _shape(y, 3), 1])",
                            "Call"
                        ],
                        [
                            "upfirdn_2d(y, k, upx=up, upy=up, downx=down, downy=down, padx0=pad0, padx1=pad1, pady0=pad0, pady1=pad1, impl=impl)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(x, 1), _shape(y, 1), _shape(y, 2)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, _shape(x, 1), _shape(y, 1), _shape(y, 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_342": {
                "input": {
                    "value": "tf_expr",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/tflib/optimizer.py": {
        "tensorflow": {
            "get_default_graph_58": {
                "variable": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_102": {
                "device_name": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_102": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Variable_108": {
                "variable": {
                    "value": "device.loss_scaling_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.float32(self.loss_scaling_init)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_scaling_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_145": {
                "name": {
                    "value": "self.id + '_grad'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_145": {
                "device_name": {
                    "value": "device.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_145": {
                "control_inputs": {
                    "value": "deps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_all_237": {
                "input_tensor": {
                    "value": "tf.is_finite(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_264": {
                "*inputs": {
                    "value": "*all_ops",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "TrainingOp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_309": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_315": {
                "variable": {
                    "value": "b1pow_var",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_316": {
                "variable": {
                    "value": "b2pow_var",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "group_336": {
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cast_146": {
                "x": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.apply_loss_scaling(tf.cast(loss, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_op_166": {
                "name": {
                    "value": "TrainingOp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_170": {
                "device_name": {
                    "value": "device.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_187": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / len(device.grad_raw[var]) / len(self._devices)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(scale, dtype=tf.float32, name='scale')",
                            "Call"
                        ],
                        [
                            "scale / tf.cast(self.minibatch_multiplier, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "self.undo_loss_scaling(scale)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_195": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "device_205": {
                "device_name": {
                    "value": "device.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_210": {
                "variable": {
                    "value": "acc_ok",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "acc_ok",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_306": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.apply_loss_scaling(tf.cast(loss, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_314": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "assign_320": {
                "ref": {
                    "value": "b2pow_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(dtype=tf.float32, initial_value=1, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "b2pow_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b2pow_var * self.beta2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_326": {
                "variable": {
                    "value": "m_var",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros_like(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_327": {
                "variable": {
                    "value": "v_var",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros_like(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "name_scope_139": {
                "name": {
                    "value": "self.id + '_mem'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_139": {
                "device_name": {
                    "value": "device.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_139": {
                "control_inputs": {
                    "value": "[loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_217": {
                "variable": {
                    "value": "device.grad_acc_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "grad_acc_count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_237": {
                "values": {
                    "value": "[acc_ok] + [tf.reduce_all(tf.is_finite(g)) for g in device.grad_acc.values()]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_239": {
                "pred": {
                    "value": "all_ok",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([acc_ok] + [tf.reduce_all(tf.is_finite(g)) for g in device.grad_acc.values()]))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "apply_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : device.optimizer.apply_gradients([(tf.cast(grad, var.dtype), var) for (var, grad) in device.grad_acc.items()])",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_321": {
                "x": {
                    "value": "1 - b2pow_new",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_325": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "assign_332": {
                "ref": {
                    "value": "v_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(dtype=tf.float32, initial_value=tf.zeros_like(var), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "v_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.beta2 * v_var + (1 - self.beta2) * tf.square(grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_sub_332": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device.grad_clean.keys()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "var_delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_new * m_new / (tf.sqrt(v_new) + self.epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_175": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_183": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[g for g in grad if g is not None]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for g in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.zeros(var.shape)",
                            "Call"
                        ],
                        [
                            "grad[0]",
                            "Subscript"
                        ],
                        [
                            "tf.add_n(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_189": {
                "x": {
                    "value": "self.minibatch_multiplier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_214": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Variable_216": {
                "variable": {
                    "value": "device.grad_acc_vars[var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(var.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "grad_acc_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_221": {
                "ref": {
                    "value": "device.grad_acc_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "count_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device.grad_acc_count + 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_222": {
                "ref": {
                    "value": "device.grad_acc_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.zeros([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_223": {
                "x": {
                    "value": "self.minibatch_multiplier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_224": {
                "pred": {
                    "value": "acc_ok",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(True, name='acc_ok')",
                            "Call"
                        ],
                        [
                            "count_cur >= tf.cast(self.minibatch_multiplier, tf.float32)",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "count_reset_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign(device.grad_acc_count, tf.zeros([]))",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "count_inc_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign(device.grad_acc_count, count_cur)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "assign_add_243": {
                "ref": {
                    "value": "device.loss_scaling_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.loss_scaling_inc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_sub_244": {
                "ref": {
                    "value": "device.loss_scaling_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.loss_scaling_dec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_245": {
                "*inputs": {
                    "value": "tf.cond(all_ok, ls_inc_op, ls_dec_op)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_246": {
                "pred": {
                    "value": "acc_ok",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(True, name='acc_ok')",
                            "Call"
                        ],
                        [
                            "count_cur >= tf.cast(self.minibatch_multiplier, tf.float32)",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "ls_update_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : tf.group(tf.cond(all_ok, ls_inc_op, ls_dec_op))",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_330": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[g for g in grad if g is not None]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for g in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.zeros(var.shape)",
                            "Call"
                        ],
                        [
                            "grad[0]",
                            "Subscript"
                        ],
                        [
                            "tf.add_n(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_331": {
                "x": {
                    "value": "v_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.beta2 * v_var + (1 - self.beta2) * tf.square(grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_217": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_222": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_231": {
                "control_inputs": {
                    "value": "[acc_cur]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_245": {
                "pred": {
                    "value": "all_ok",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([acc_ok] + [tf.reduce_all(tf.is_finite(g)) for g in device.grad_acc.values()]))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "ls_inc_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign_add(device.loss_scaling_var, self.loss_scaling_inc)",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "ls_dec_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign_sub(device.loss_scaling_var, self.loss_scaling_dec)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "where_251": {
                "condition": {
                    "value": "all_ok",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([acc_ok] + [tf.reduce_all(tf.is_finite(g)) for g in device.grad_acc.values()]))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_326": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device.grad_clean.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_327": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device.grad_clean.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_216": {
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_232": {
                "ref": {
                    "value": "acc_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device.grad_acc_vars[var]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "acc_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "acc_var + grad",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_233": {
                "ref": {
                    "value": "acc_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device.grad_acc_vars[var]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.zeros(var.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_234": {
                "pred": {
                    "value": "acc_ok",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(True, name='acc_ok')",
                            "Call"
                        ],
                        [
                            "count_cur >= tf.cast(self.minibatch_multiplier, tf.float32)",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "acc_reset_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign(acc_var, tf.zeros(var.shape))",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "acc_inc_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign(acc_var, acc_cur)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "cast_238": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[g for g in grad if g is not None]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for g in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.zeros(var.shape)",
                            "Call"
                        ],
                        [
                            "grad[0]",
                            "Subscript"
                        ],
                        [
                            "tf.add_n(grad)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "var.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_233": {
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_finite_237": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/tflib/tfutil.py": {
        "tensorflow": {
            "ConfigProto_145": {
                "variable": {
                    "value": "config_proto",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_155": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config_proto",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_224": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "initial_value.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "initial_value.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_225": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(initial_value.shape, initial_value.dtype)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cast_234": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_244": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_31": {
                "main": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "name_scope_76": {
                "name": {
                    "value": "scope + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "tf.VariableScope(name=scope, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                },
                "auxiliary_name_scope": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_172": {
                "variable": {
                    "value": "target_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_236": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_247": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "ksize": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, shrink, shrink]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, shrink, shrink]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_249": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "saturate_cast_252": {
                "value": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_46": {
                "name": {
                    "value": "Flatten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_52": {
                "name": {
                    "value": "Log2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_58": {
                "name": {
                    "value": "Exp2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_59": {
                "x": {
                    "value": "x * np.float32(np.log(2.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_64": {
                "name": {
                    "value": "Lerp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_70": {
                "name": {
                    "value": "LerpClip",
                    "type": "str",
                    "possible_values": []
                }
            },
            "VariableScope_81": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_default_session_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_122": {
                "seed": {
                    "value": "tf_random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg['rnd.tf_random_seed']",
                            "Subscript"
                        ],
                        [
                            "np.random.randint(1 << 31)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_session_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_177": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "get_default_graph_208": {
                "variable": {
                    "value": "setter",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_53": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_71": {
                "t": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_default_graph_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "assign_212": {
                "variable": {
                    "value": "setter",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_vars",
                            "variable"
                        ],
                        [
                            "tf.Variable(zeros, *args, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.placeholder(var.dtype, var.shape, 'new_value')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "setter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_211": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "is_variable_initialized_188": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_vars",
                            "variable"
                        ],
                        [
                            "tf.Variable(zeros, *args, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_212": {
                "dtype": {
                    "value": "var.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "new_value",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/frechet_inception_distance.py": {
        "tensorflow": {
            "device_50": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/inception_score.py": {
        "tensorflow": {
            "device_33": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/metric_base.py": {
        "tensorflow": {
            "Graph_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metrics/perceptual_path_length.py": {
        "tensorflow": {
            "reduce_sum_26": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "a * b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_20": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(v), axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_27": {
                "x": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(a * b, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "a * tf.math.cos(p) + c * tf.math.sin(p)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_20": {
                "input_tensor": {
                    "value": "tf.square(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_29": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t * tf.math.acos(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_29": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t * tf.math.acos(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(self._get_random_labels_tf(self.minibatch_per_gpu), [1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.minibatch_per_gpu * 2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_20": {
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_55": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_67": {
                "variable": {
                    "value": "dlat_t01",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dlat_t01",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gs_clone.components.mapping.get_output_for(lat_t01, labels, **Gs_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(dlat_t01, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "dlat_e01",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([dlat_e0, dlat_e1], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "dlat_t01.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "lat_e01",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([lat_e0, lat_e1], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "lat_t01.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_82": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gs_clone.components.synthesis.get_output_for(dlat_e01, randomize_noise=False, **Gs_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "images[:, :, c * 3:c * 7, c * 2:c * 6]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images, [-1, images.shape[1], images.shape[2] // factor, factor, images.shape[3] // factor, factor])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(images, axis=[3, 5])",
                            "Call"
                        ],
                        [
                            "(images + 1) * (255 / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gs_clone.components.synthesis.get_output_for(dlat_e01, randomize_noise=False, **Gs_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "images[:, :, c * 3:c * 7, c * 2:c * 6]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images, [-1, images.shape[1], images.shape[2] // factor, factor, images.shape[3] // factor, factor])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(images, axis=[3, 5])",
                            "Call"
                        ],
                        [
                            "(images + 1) * (255 / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, images.shape[1], images.shape[2] // factor, factor, images.shape[3] // factor, factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_93": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gs_clone.components.synthesis.get_output_for(dlat_e01, randomize_noise=False, **Gs_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "images[:, :, c * 3:c * 7, c * 2:c * 6]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images, [-1, images.shape[1], images.shape[2] // factor, factor, images.shape[3] // factor, factor])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(images, axis=[3, 5])",
                            "Call"
                        ],
                        [
                            "(images + 1) * (255 / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_62": {
                "input": {
                    "value": "self._get_random_labels_tf(self.minibatch_per_gpu)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_80": {
                "control_inputs": {
                    "value": "[var.initializer for var in noise_vars]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_71": {
                "values": {
                    "value": "[dlat_e0, dlat_e1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_76": {
                "values": {
                    "value": "[lat_e0, lat_e1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/precision_recall.py": {
        "tensorflow": {
            "reduce_sum_24": {
                "variable": {
                    "value": "norm_u",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(U)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_25": {
                "variable": {
                    "value": "norm_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(V)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_28": {
                "variable": {
                    "value": "norm_u",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "norm_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(U), 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(norm_u, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_29": {
                "variable": {
                    "value": "norm_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "norm_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(V), 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(norm_v, [1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_32": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm_u - 2 * tf.matmul(U, V, False, True) + norm_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_22": {
                "name_or_scope": {
                    "value": "pairwise_dist_block",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self._features_batch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.num_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self._features_batch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.num_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_48": {
                "variable": {
                    "value": "features_split2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._features_batch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.num_gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_53": {
                "variable": {
                    "value": "self._distance_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "distances_split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_24": {
                "x": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_25": {
                "x": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_45": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_202": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_51": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_32": {
                "a": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "projector.py": {
        "tensorflow": {
            "group_87": {
                "variable": {
                    "value": "self._noise_init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*noise_init_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_88": {
                "variable": {
                    "value": "self._noise_normalize_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*noise_normalize_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Variable_92": {
                "variable": {
                    "value": "self._dlatents_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self._minibatch_size] + list(self._dlatent_avg.shape[1:]))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dlatents_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "self._noise_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "noise_in",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_95": {
                "variable": {
                    "value": "self._dlatents_expr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._dlatents_var + dlatents_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self._Gs.components.synthesis.input_shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_107": {
                "variable": {
                    "value": "self._target_images_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(proc_images_expr.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "target_images_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self._dist",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_129": {
                "variable": {
                    "value": "self._lrate_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "lrate_in",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_83": {
                "variable": {
                    "value": "noise_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._Gs.vars[n]",
                            "Subscript"
                        ],
                        [
                            "self._noise_vars",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(v, [1, 1, sz // 2, 2, sz // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(v, axis=[3, 5])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_103": {
                "variable": {
                    "value": "proc_images_expr",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(proc_images_expr, [-1, sh[1], sh[2] // factor, factor, sh[2] // factor, factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[3, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "shape": {
                    "value": "[self._minibatch_size] + list(self._dlatent_avg.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_94": {
                "shape": {
                    "value": "self._dlatents_var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "shape": {
                    "value": "proc_images_expr.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._Gs.vars[n]",
                            "Subscript"
                        ],
                        [
                            "self._noise_vars",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(v, [1, 1, sz // 2, 2, sz // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(v, axis=[3, 5])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, sz // 2, 2, sz // 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_123": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._Gs.vars[n]",
                            "Subscript"
                        ],
                        [
                            "self._noise_vars",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(v, [1, 1, sz // 2, 2, sz // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(v, axis=[3, 5])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_82": {
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._Gs.vars[n]",
                            "Subscript"
                        ],
                        [
                            "self._noise_vars",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(v, [1, 1, sz // 2, 2, sz // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(v, axis=[3, 5])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.random_normal(tf.shape(v), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_84": {
                "input_tensor": {
                    "value": "(v - noise_mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_85": {
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._Gs.vars[n]",
                            "Subscript"
                        ],
                        [
                            "self._noise_vars",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(v, [1, 1, sz // 2, 2, sz // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(v, axis=[3, 5])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "(v - noise_mean) / noise_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "tensor": {
                    "value": "proc_images_expr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self._images_expr + 1) * (255 / 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(proc_images_expr, [-1, sh[1], sh[2] // factor, factor, sh[2] // factor, factor]), axis=[3, 5])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sh[1], sh[2] // factor, factor, sh[2] // factor, factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_82": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._Gs.vars[n]",
                            "Subscript"
                        ],
                        [
                            "self._noise_vars",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(v, [1, 1, sz // 2, 2, sz // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(v, axis=[3, 5])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_119": {
                "input_tensor": {
                    "value": "v * tf.roll(v, shift=1, axis=2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "roll_119": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._Gs.vars[n]",
                            "Subscript"
                        ],
                        [
                            "self._noise_vars",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(v, [1, 1, sz // 2, 2, sz // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(v, axis=[3, 5])",
                            "Call"
                        ]
                    ]
                },
                "shift": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "training/dataset.py": {
        "tensorflow": {
            "parse_single_example_166": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.python_io.tf_record_iterator(tfr_file, tfr_opt)",
                            "Call"
                        ]
                    ]
                },
                "features": {
                    "value": "{'shape': tf.FixedLenFeature([3], tf.int64), 'data': tf.FixedLenFeature([], tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_169": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['data']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_175": {
                "variable": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordOptions_60": {
                "variable": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "self._tf_minibatch_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "minibatch_in",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_170": {
                "tensor": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['data'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "ex.features.feature['data'].bytes_list.value[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "features['shape']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tf_record_iterator_61": {
                "path": {
                    "value": "tfr_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfr_files",
                            "variable"
                        ]
                    ]
                },
                "options": {
                    "value": "tfr_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_101": {
                "name": {
                    "value": "Dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_101": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TFRecordDataset_108": {
                "variable": {
                    "value": "dset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "tfr_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfr_files",
                            "variable"
                        ]
                    ]
                },
                "compression_type": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "buffer_mb << 20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_144": {
                "name": {
                    "value": "Dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_151": {
                "name": {
                    "value": "Dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_155": {
                "shape": {
                    "value": "[minibatch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.label_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_153": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_154": {
                "params": {
                    "value": "self._tf_labels_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.random_uniform([minibatch_size], 0, self._np_labels.shape[0], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FixedLenFeature_167": {
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_168": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "training/loss.py": {
        "tensorflow": {
            "softplus_33": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "-fake_scores_out",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_44": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fake_scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_60": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fake_scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_78": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fake_scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_154": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "-fake_scores_out",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_45": {
                "features": {
                    "value": "-real_scores_out",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_61": {
                "features": {
                    "value": "-real_scores_out",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_65": {
                "variable": {
                    "value": "gradient_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(real_grads)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softplus_79": {
                "features": {
                    "value": "-real_scores_out",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_83": {
                "variable": {
                    "value": "gradient_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(fake_grads)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_138": {
                "variable": {
                    "value": "mixed_norms",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(mixed_grads), axis=[1, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_140": {
                "variable": {
                    "value": "gradient_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mixed_norms - wgan_target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_169": {
                "variable": {
                    "value": "pl_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.reduce_sum(tf.square(pl_grads), axis=2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_176": {
                "variable": {
                    "value": "pl_update",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "pl_mean_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(name='pl_mean', trainable=False, initial_value=0.0, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "pl_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pl_mean_var + pl_decay * (tf.reduce_mean(pl_lengths) - pl_mean_var)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_24": {
                "features": {
                    "value": "fake_scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "GradientPenalty",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_81": {
                "name": {
                    "value": "GradientPenalty",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_110": {
                "name": {
                    "value": "EpsilonPenalty",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_128": {
                "name": {
                    "value": "EpsilonPenalty",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_132": {
                "name": {
                    "value": "GradientPenalty",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_157": {
                "name": {
                    "value": "PathReg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_174": {
                "variable": {
                    "value": "pl_mean_var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pl_mean",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_180": {
                "variable": {
                    "value": "pl_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pl_lengths - pl_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_64": {
                "ys": {
                    "value": "tf.reduce_sum(real_scores_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "[reals]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_65": {
                "x": {
                    "value": "real_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(tf.reduce_sum(real_scores_out), [reals])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gradients_82": {
                "ys": {
                    "value": "tf.reduce_sum(fake_scores_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "[fake_images_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_83": {
                "x": {
                    "value": "fake_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(tf.reduce_sum(fake_scores_out), [fake_images_out])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_111": {
                "x": {
                    "value": "real_scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_129": {
                "x": {
                    "value": "real_scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_134": {
                "x": {
                    "value": "reals",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "fake_images_out.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_137": {
                "ys": {
                    "value": "tf.reduce_sum(mixed_scores_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "[mixed_images_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_138": {
                "input_tensor": {
                    "value": "tf.square(mixed_grads)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_168": {
                "ys": {
                    "value": "tf.reduce_sum(fake_images_out * pl_noise)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "[fake_dlatents_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_169": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(pl_grads), axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_173": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_179": {
                "control_inputs": {
                    "value": "[pl_update]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_64": {
                "input_tensor": {
                    "value": "real_scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/real', real_scores_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_82": {
                "input_tensor": {
                    "value": "fake_scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/fake', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_137": {
                "input_tensor": {
                    "value": "mixed_scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D.get_output_for(mixed_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/scores/mixed', mixed_scores_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_138": {
                "x": {
                    "value": "mixed_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(tf.reduce_sum(mixed_scores_out), [mixed_images_out])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_167": {
                "input": {
                    "value": "fake_images_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G.get_output_for(latents, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "G.get_output_for(latents, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "G.get_output_for(latents, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "G.get_output_for(latents, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "G.get_output_for(latents, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "G.get_output_for(latents, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "G.get_output_for(latents, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "G.get_output_for(latents, labels, is_training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_168": {
                "input_tensor": {
                    "value": "fake_images_out * pl_noise",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_169": {
                "input_tensor": {
                    "value": "tf.square(pl_grads)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_169": {
                "x": {
                    "value": "pl_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(tf.reduce_sum(fake_images_out * pl_noise), [fake_dlatents_out])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_175": {
                "input_tensor": {
                    "value": "pl_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_mean(tf.reduce_sum(tf.square(pl_grads), axis=2), axis=1))",
                            "Call"
                        ],
                        [
                            "autosummary('Loss/pl_lengths', pl_lengths)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "training/networks_stylegan.py": {
        "tensorflow": {
            "cast_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_44": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(f, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "f[:, np.newaxis] * f[np.newaxis, :]",
                            "BinOp"
                        ],
                        [
                            "f / np.sum(f)",
                            "BinOp"
                        ],
                        [
                            "f[::-1, ::-1]",
                            "Subscript"
                        ],
                        [
                            "f[:, :, np.newaxis, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.tile(f, [1, 1, int(x.shape[1]), 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(f, dtype=x.dtype, name='filter')",
                            "Call"
                        ],
                        [
                            "[np.sqrt(gain) / factor] * factor",
                            "BinOp"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(f, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "f[:, np.newaxis] * f[np.newaxis, :]",
                            "BinOp"
                        ],
                        [
                            "f / np.sum(f)",
                            "BinOp"
                        ],
                        [
                            "f[::-1, ::-1]",
                            "Subscript"
                        ],
                        [
                            "f[:, :, np.newaxis, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.tile(f, [1, 1, int(x.shape[1]), 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(f, dtype=x.dtype, name='filter')",
                            "Call"
                        ],
                        [
                            "[np.sqrt(gain) / factor] * factor",
                            "BinOp"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, stride, stride]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "orig_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2], 1, s[3], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, factor, 1, factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2] * factor, s[3] * factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_157": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_166": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_185": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_186": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 1], [1, 1], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_187": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_188": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_204": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 1], [1, 1], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_206": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_214": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', shape=[x.shape[1]], initializer=tf.initializers.zeros()) * lrmul",
                            "BinOp"
                        ],
                        [
                            "tf.cast(b, x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_340": {
                "variable": {
                    "value": "lod_in",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lod",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.float32(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_341": {
                "variable": {
                    "value": "dlatent_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dlatent_avg",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dlatent_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_404": {
                "variable": {
                    "value": "latents_in",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "latents_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(latents_in, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_405": {
                "variable": {
                    "value": "labels_in",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels_in, dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels_in, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_477": {
                "variable": {
                    "value": "dlatents_in",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dlatents_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(dlatents_in, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_478": {
                "variable": {
                    "value": "lod_in",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.get_variable('lod', initializer=np.float32(0), trainable=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_592": {
                "variable": {
                    "value": "images_in",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(images_in, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_593": {
                "variable": {
                    "value": "labels_in",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels_in, dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels_in, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_594": {
                "variable": {
                    "value": "lod_in",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.get_variable('lod', initializer=np.float32(0.0), trainable=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_657": {
                "variable": {
                    "value": "scores_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "block(x, 2)",
                            "Call"
                        ],
                        [
                            "grow(2, resolution_log2 - 2)",
                            "Call"
                        ],
                        [
                            "block(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(scores_out * labels_in, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(scores_out, name='scores_out')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_89": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, factor, factor]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "ksize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1, factor, factor]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_155": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod([d.value for d in x.shape[1:]])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_158": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_167": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_190": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "os",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.shape(x)[0], fmaps, x.shape[2] * 2, x.shape[3] * 2]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_207": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_224": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(alpha, dtype=x.dtype, name='alpha')",
                            "Call"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_240": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(epsilon, dtype=x.dtype, name='epsilon')",
                            "Call"
                        ],
                        [
                            "tf.constant(epsilon, dtype=x.dtype, name='epsilon')",
                            "Call"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "epsilon",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_250": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_252": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(epsilon, dtype=x.dtype, name='epsilon')",
                            "Call"
                        ],
                        [
                            "tf.constant(epsilon, dtype=x.dtype, name='epsilon')",
                            "Call"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "epsilon",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_254": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "orig_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_263": {
                "variable": {
                    "value": "style",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "style",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_bias(dense(dlatent, fmaps=x.shape[1] * 2, gain=1, **kwargs))",
                            "Call"
                        ],
                        [
                            "tf.reshape(style, [-1, 2, x.shape[1]] + [1] * (len(x.shape) - 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2, x.shape[1]] + [1] * (len(x.shape) - 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_276": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.shape[1].value]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_284": {
                "variable": {
                    "value": "group_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "group_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(group_size, tf.shape(x)[0])",
                            "Call"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_286": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_287": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_blur2d(x, f, normalize)",
                            "Call"
                        ],
                        [
                            "_upscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "_downscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, x * alpha)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(labels_in, tf.cast(w, dtype))",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : tflib.lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_289": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_290": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_291": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_blur2d(x, f, normalize)",
                            "Call"
                        ],
                        [
                            "_upscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "_downscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, x * alpha)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(labels_in, tf.cast(w, dtype))",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : tflib.lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_292": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_blur2d(x, f, normalize)",
                            "Call"
                        ],
                        [
                            "_upscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "_downscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, x * alpha)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(labels_in, tf.cast(w, dtype))",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : tflib.lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_293": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_blur2d(x, f, normalize)",
                            "Call"
                        ],
                        [
                            "_upscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "_downscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, x * alpha)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(labels_in, tf.cast(w, dtype))",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : tflib.lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_294": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_blur2d(x, f, normalize)",
                            "Call"
                        ],
                        [
                            "_upscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "_downscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, x * alpha)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(labels_in, tf.cast(w, dtype))",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : tflib.lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[group_size, 1, s[2], s[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_378": {
                "input": {
                    "value": "images_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "components.synthesis.get_output_for(dlatents, force_clean_graph=is_template_graph, **kwargs)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "torgb(2, x)",
                            "Call"
                        ],
                        [
                            "grow(x, 3, resolution_log2 - 3)",
                            "Call"
                        ],
                        [
                            "upscale2d(images_out)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(img, images_out, lod_in - lod)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "images_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_434": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "dlatents_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_558": {
                "input": {
                    "value": "images_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "components.synthesis.get_output_for(dlatents, force_clean_graph=is_template_graph, **kwargs)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "torgb(2, x)",
                            "Call"
                        ],
                        [
                            "grow(x, 3, resolution_log2 - 3)",
                            "Call"
                        ],
                        [
                            "upscale2d(images_out)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(img, images_out, lod_in - lod)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "images_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "Blur2D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "Upscale2D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "Downscale2D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_148": {
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, use_noise, 2 ** res, 2 ** res]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.initializers.random_normal(0, init_std)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_205": {
                "inputs": {
                    "value": "[w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_213": {
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.shape[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_217": {
                "tensor": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', shape=[x.shape[1]], initializer=tf.initializers.zeros()) * lrmul",
                            "BinOp"
                        ],
                        [
                            "tf.cast(b, x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "LeakyReLU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_227": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x * alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_239": {
                "name_or_scope": {
                    "value": "PixelNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_248": {
                "name_or_scope": {
                    "value": "InstanceNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_251": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rsqrt_253": {
                "x": {
                    "value": "tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_261": {
                "name_or_scope": {
                    "value": "StyleMod",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "Noise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_275": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "noise_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_283": {
                "name_or_scope": {
                    "value": "MinibatchStddev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_288": {
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_blur2d(x, f, normalize)",
                            "Call"
                        ],
                        [
                            "_upscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "_downscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, x * alpha)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(labels_in, tf.cast(w, dtype))",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : tflib.lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_295": {
                "values": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_349": {
                "variable": {
                    "value": "batch_avg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dlatents[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_350": {
                "variable": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "dlatent_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('dlatent_avg', shape=[dlatent_size], initializer=tf.initializers.zeros(), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tflib.lerp(batch_avg, dlatent_avg, dlatent_avg_beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_361": {
                "variable": {
                    "value": "mixing_cutoff",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.random_uniform([], 0.0, 1.0) < style_mixing_prob",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.random_uniform([], 1, cur_layers, dtype=tf.int32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : cur_layers",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "where_365": {
                "variable": {
                    "value": "dlatents",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.broadcast_to(layer_idx < mixing_cutoff, tf.shape(dlatents))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "dlatents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "components.mapping.get_output_for(latents_in, labels_in, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(dlatents)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.broadcast_to(layer_idx < mixing_cutoff, tf.shape(dlatents)), dlatents, dlatents2)",
                            "Call"
                        ],
                        [
                            "tflib.lerp(dlatent_avg, dlatents, coefs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "dlatents2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "components.mapping.get_output_for(latents2, labels_in, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_372": {
                "variable": {
                    "value": "coefs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "layer_idx < truncation_cutoff",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "truncation_psi * ones",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(layer_idx.shape, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_376": {
                "control_inputs": {
                    "value": "[tf.assign(components.synthesis.find_var('lod'), lod_in)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_411": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[label_size, latent_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.random_normal()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_412": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "labels_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels_in, dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels_in, dtype)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.cast(w, dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_413": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_430": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, dlatent_broadcast, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_dtype_433": {
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_478": {
                "name": {
                    "value": "lod",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.float32(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_503": {
                "name_or_scope": {
                    "value": "4x4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_dtype_557": {
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_594": {
                "name": {
                    "value": "lod",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.float32(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_654": {
                "variable": {
                    "value": "scores_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "scores_out * labels_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_dtype_656": {
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_189": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_230": {
                "variable": {
                    "value": "dx",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "y >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "dy",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "dy * alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_241": {
                "x": {
                    "value": "tf.reduce_mean(tf.square(x), axis=1, keepdims=True) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_289": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_blur2d(x, f, normalize)",
                            "Call"
                        ],
                        [
                            "_upscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "_downscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, x * alpha)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(labels_in, tf.cast(w, dtype))",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : tflib.lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_348": {
                "name_or_scope": {
                    "value": "DlatentAvg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_352": {
                "variable": {
                    "value": "dlatents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dlatents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "components.mapping.get_output_for(latents_in, labels_in, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(dlatents)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.broadcast_to(layer_idx < mixing_cutoff, tf.shape(dlatents)), dlatents, dlatents2)",
                            "Call"
                        ],
                        [
                            "tflib.lerp(dlatent_avg, dlatents, coefs)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_356": {
                "name": {
                    "value": "StyleMix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_369": {
                "name_or_scope": {
                    "value": "Truncation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_410": {
                "name_or_scope": {
                    "value": "LabelConcat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_421": {
                "name_or_scope": {
                    "value": "'Dense%d' % layer_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_429": {
                "name_or_scope": {
                    "value": "Broadcast",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_506": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, nf(1), 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.ones()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_512": {
                "name_or_scope": {
                    "value": "Conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_517": {
                "name_or_scope": {
                    "value": "'%dx%d' % (2 ** res, 2 ** res)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_525": {
                "name_or_scope": {
                    "value": "'ToRGB_lod%d' % lod",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_599": {
                "name_or_scope": {
                    "value": "'FromRGB_lod%d' % (resolution_log2 - res)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_602": {
                "name_or_scope": {
                    "value": "'%dx%d' % (2 ** res, 2 ** res)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_653": {
                "name_or_scope": {
                    "value": "LabelSwitch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_253": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_277": {
                "tensor": {
                    "value": "tf.cast(weight, x.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_284": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_351": {
                "control_inputs": {
                    "value": "[update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_357": {
                "input": {
                    "value": "latents_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(latents_in, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "broadcast_to_365": {
                "input": {
                    "value": "layer_idx < mixing_cutoff",
                    "type": "Compare",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(dlatents)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_376": {
                "ref": {
                    "value": "components.synthesis.find_var('lod')",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "lod_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('lod', initializer=np.float32(0), trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.get_variable('lod', initializer=np.float32(0), trainable=False), dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.get_variable('lod', initializer=np.float32(0.0), trainable=False), dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_412": {
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_486": {
                "name": {
                    "value": "'noise%d' % layer_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, use_noise, 2 ** res, 2 ** res]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.initializers.random_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_505": {
                "name_or_scope": {
                    "value": "Const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_509": {
                "name_or_scope": {
                    "value": "Dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_518": {
                "name_or_scope": {
                    "value": "Conv0_up",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_520": {
                "name_or_scope": {
                    "value": "Conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_542": {
                "name_or_scope": {
                    "value": "'Grow_lod%d' % lod",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_548": {
                "pred": {
                    "value": "new_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "new_lambda",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "cur_lambda",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_635": {
                "name_or_scope": {
                    "value": "'Grow_lod%d' % lod",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_642": {
                "pred": {
                    "value": "new_cond",
                    "type": "variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "new_lambda",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "cur_lambda",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_241": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_253": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_277": {
                "x": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', shape=[x.shape[1].value], initializer=tf.initializers.zeros())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_360": {
                "x": {
                    "value": "lod_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('lod', initializer=np.float32(0), trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.get_variable('lod', initializer=np.float32(0), trainable=False), dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.get_variable('lod', initializer=np.float32(0.0), trainable=False), dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_365": {
                "input": {
                    "value": "dlatents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "components.mapping.get_output_for(latents_in, labels_in, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(dlatents)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.broadcast_to(layer_idx < mixing_cutoff, tf.shape(dlatents)), dlatents, dlatents2)",
                            "Call"
                        ],
                        [
                            "tflib.lerp(dlatent_avg, dlatents, coefs)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_507": {
                "input": {
                    "value": "tf.cast(x, dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(dlatents_in)[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_511": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nf(1), 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_604": {
                "name_or_scope": {
                    "value": "Conv0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_606": {
                "name_or_scope": {
                    "value": "Conv1_down",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_611": {
                "name_or_scope": {
                    "value": "Conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_613": {
                "name_or_scope": {
                    "value": "Dense0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_615": {
                "name_or_scope": {
                    "value": "Dense1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_231": {
                "condition": {
                    "value": "y >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "ddx",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "ddx * alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_241": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_273": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_506": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_507": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, f, strides=strides, padding='SAME', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "variable"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ],
                        [
                            "'float32'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_507": {
                "input": {
                    "value": "dlatents_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(dlatents_in, dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "training/networks_stylegan2.py": {
        "tensorflow": {}
    },
    "training/training_loop.py": {
        "tensorflow": {
            "group_238": {
                "variable": {
                    "value": "data_fetch_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*data_fetch_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "FileWriter_254": {
                "variable": {
                    "value": "summary_log",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "dnnlib.make_run_dir_path()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_30": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2] // 2, 2, s[3] // 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_32": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, s[1], s[2] // 2, 2, s[3] // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[3, 5], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [1, 1, 1, 2, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, s[1], s[2], s[3]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_33": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, s[1], s[2] // 2, 2, s[3] // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[3, 5], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [1, 1, 1, 2, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, s[1], s[2], s[3]])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, 2, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_34": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, s[1], s[2] // 2, 2, s[3] // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[3, 5], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [1, 1, 1, 2, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, s[1], s[2], s[3]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2], s[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_37": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_38": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2 ** tf.floor(lod)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2], 1, s[3], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, factor, 1, factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2] * factor, s[3] * factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_171": {
                "variable": {
                    "value": "lod_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lod_in",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_172": {
                "variable": {
                    "value": "lrate_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lrate_in",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_173": {
                "variable": {
                    "value": "minibatch_size_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "minibatch_size_in",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_174": {
                "variable": {
                    "value": "minibatch_gpu_in",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "minibatch_gpu_in",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_23": {
                "name": {
                    "value": "DynamicRange",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.random_uniform([tf.shape(x)[0]]) < 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reverse(x, [3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_29": {
                "name": {
                    "value": "FadeLOD",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_36": {
                "name": {
                    "value": "UpscaleLOD",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_149": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_170": {
                "name": {
                    "value": "Inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_170": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_246": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_27": {
                "name": {
                    "value": "MirrorAugment",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_197": {
                "name": {
                    "value": "'GPU%d' % gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_197": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_206": {
                "variable": {
                    "value": "reals_var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "reals",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([sched.minibatch_gpu] + training_set.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_207": {
                "variable": {
                    "value": "labels_var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([sched.minibatch_gpu, training_set.label_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_210": {
                "variable": {
                    "value": "reals_write",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[reals_write, reals_var[minibatch_gpu_in:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_211": {
                "variable": {
                    "value": "labels_write",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[labels_write, labels_var[minibatch_gpu_in:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_250": {
                "variable": {
                    "value": "peak_gpu_mem_op",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_graph_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reverse_28": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_35": {
                "x": {
                    "value": "lod",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "floor_38": {
                "x": {
                    "value": "lod",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "div_176": {
                "x": {
                    "value": "tf.cast(minibatch_size_in, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "G_smoothing_kimg * 1000.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_204": {
                "name": {
                    "value": "DataFetch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_221": {
                "control_inputs": {
                    "value": "lod_assign_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "lod_assign_ops + [tf.assign(D_gpu.vars['lod'], lod_in)]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_234": {
                "input_tensor": {
                    "value": "G_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "G_loss + G_reg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_235": {
                "input_tensor": {
                    "value": "D_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D_loss + D_reg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_176": {
                "x": {
                    "value": "minibatch_size_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, name='minibatch_size_in', shape=[])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_212": {
                "ref": {
                    "value": "reals_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(name='reals', trainable=False, initial_value=tf.zeros([sched.minibatch_gpu] + training_set.shape))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "reals_write",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([reals_write, reals_var[minibatch_gpu_in:]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_213": {
                "ref": {
                    "value": "labels_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(name='labels', trainable=False, initial_value=tf.zeros([sched.minibatch_gpu, training_set.label_size]))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "labels_write",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([labels_write, labels_var[minibatch_gpu_in:]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_219": {
                "ref": {
                    "value": "G_gpu.vars['lod']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "lod_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, name='lod_in', shape=[])",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_220": {
                "ref": {
                    "value": "D_gpu.vars['lod']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "lod_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, name='lod_in', shape=[])",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_222": {
                "name": {
                    "value": "G_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_224": {
                "name": {
                    "value": "D_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_206": {
                "shape": {
                    "value": "[sched.minibatch_gpu] + training_set.shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_207": {
                "shape": {
                    "value": "[sched.minibatch_gpu, training_set.label_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_232": {
                "input_tensor": {
                    "value": "G_reg * G_reg_interval",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_233": {
                "input_tensor": {
                    "value": "D_reg * D_reg_interval",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}