{
    "data/preprocessing_nodetimeseries.py": {
        "sklearn": {
            "StratifiedKFold_149": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/MSG3D/model.py": {
        "torch": {
            "BatchNorm1d_42": {
                "variable": {
                    "value": "self.data_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_person * in_channels * num_nodes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.sgcn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MS_GCN(num_gcn_scales, in_channels, c1, A, disentangled_agg=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_57": {
                "variable": {
                    "value": "self.sgcn1[-1].act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.sgcn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MS_GCN(num_gcn_scales, c1, c1, A, disentangled_agg=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_65": {
                "variable": {
                    "value": "self.sgcn2[-1].act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.sgcn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "MS_GCN(num_gcn_scales, c2, c2, A, disentangled_agg=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_73": {
                "variable": {
                    "value": "self.sgcn3[-1].act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c2 * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sgcn1(x) + self.gcn3d1(x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sgcn2(x) + self.gcn3d2(x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sgcn3(x) + self.gcn3d3(x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/MSG3D/msg3d.py": {
        "torch": {
            "Unfold_28": {
                "variable": {
                    "value": "self.unfold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.window_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(self.window_dilation, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(self.window_stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_72": {
                "variable": {
                    "value": "self.A_scales",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_107": {
                "variable": {
                    "value": "agg",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "vu,nctu->nctv",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.build_spatial_temporal_graph(A_binary, window_size)",
                            "Call"
                        ],
                        [
                            "self.A_scales.to(x.dtype).to(x.device) + self.A_res.to(x.dtype).to(x.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.gcn3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "UnfoldTemporalWindows(window_size, window_stride, window_dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_154": {
                "variable": {
                    "value": "self.out_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.embed_channels_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, self.window_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_155": {
                "variable": {
                    "value": "self.out_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_185": {
                "variable": {
                    "value": "self.gcn3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[MS_G3D(in_channels, out_channels, A_binary, num_scales, window_size, window_stride, window_dilation, dropout) for (window_size, window_dilation) in zip(window_sizes, window_dilations)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "self.A_res",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_133": {
                "variable": {
                    "value": "self.in1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "data": {
                    "value": "torch.randn(self.A_scales.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_76": {
                "*size": {
                    "value": "self.A_scales.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/MSG3D/msgcn.py": {
        "torch": {
            "einsum_53": {
                "variable": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "vu,nctu->nctv",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.A_powers.to(x.dtype)",
                            "Call"
                        ],
                        [
                            "A + self.A_res.to(x.dtype)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_43": {
                "data": {
                    "value": "torch.Tensor(self.A_powers.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_43": {}
        }
    },
    "models/MSG3D/mstcn.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(dilation, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_54": {
                "variable": {
                    "value": "self.branches",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(nn.Conv2d(in_channels, branch_channels, kernel_size=1, padding=0), nn.BatchNorm2d(branch_channels), activations(activation), TemporalConv(branch_channels, branch_channels, kernel_size=kernel_size, stride=stride, dilation=dilation)) for dilation in dilations]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, branch_channels, kernel_size=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, branch_channels, kernel_size=1, padding=0, stride=(stride, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, branch_channels, kernel_size=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "branch_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // self.num_branches",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "branch_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // self.num_branches",
                            "BinOp"
                        ]
                    ]
                }
            },
            "MaxPool2d_78": {
                "kernel_size": {
                    "value": "(3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "branch_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // self.num_branches",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "branch_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // self.num_branches",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "num_features": {
                    "value": "branch_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // self.num_branches",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "branch_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // self.num_branches",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "branch_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // self.num_branches",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "tools/train_node_timeseries.py": {
        "torch": {
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:{}.format(args.gpu) if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "MSELoss_71": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_73": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_135": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "folder_to_save_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./logs/MS-G3D/'",
                            "Constant"
                        ],
                        [
                            "os.path.join(folder_to_save_model, 'ICA_{}'.format(ICA_nodes))",
                            "Call"
                        ],
                        [
                            "os.path.join(folder_to_save_model, 'ws_{}'.format(ws))",
                            "Call"
                        ],
                        [
                            "os.path.join(folder_to_save_model, date)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_177": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.LR",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_179": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.LR",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_196": {
                "variable": {
                    "value": "train_data_batch_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size_training, 1, ws, ICA_nodes, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_197": {
                "variable": {
                    "value": "train_label_batch_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_label[idx_batch]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_213": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(train_data_batch_dev)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.data.cpu().numpy() > 0.5",
                            "Compare"
                        ],
                        [
                            "net(test_data_batch_dev)",
                            "Call"
                        ],
                        [
                            "outputs.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_252": {
                "variable": {
                    "value": "test_data_batch_dev",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test_data_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size_testing, 1, ws, ICA_nodes, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_272": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(folder_to_save_model, 'checkpoint.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_283": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(folder_to_save_model, 'checkpoint.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_256": {
                "input": {
                    "value": "outputs.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.from_numpy(test_label[idx_batch]).float().to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_256": {
                "ndarray": {
                    "value": "test_label[idx_batch]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/activations.py": {
        "torch": {
            "ReLU_6": {
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_8": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/layers.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "channels[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    }
}