{
    "code/tbd/joint_model.py": {
        "torch": {
            "manual_seed_27": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_757": {
                "variable": {
                    "value": "test_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EventDataset(args.data_dir + type_dir, args.test_split)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "test_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_760": {
                "variable": {
                    "value": "train_generator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EventDataset(args.data_dir + type_dir, 'train')",
                            "Call"
                        ],
                        [
                            "train_data",
                            "Method Argument"
                        ],
                        [
                            "train_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_62": {
                "variable": {
                    "value": "sents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.cat((torch.FloatTensor(s), torch.zeros(max_len - s.shape[0], n_fts)), 0) if s.shape[0] != max_len else torch.FloatTensor(s) for s in bs[2]]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(sents, 0)",
                            "Call"
                        ],
                        [
                            "data",
                            "variable"
                        ],
                        [
                            "sents.cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "train_data",
                            "variable"
                        ],
                        [
                            "sents.cuda()",
                            "Call"
                        ],
                        [
                            "sents",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_73": {
                "variable": {
                    "value": "ents",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v[1] for v in all_key_ent]",
                            "ListComp"
                        ],
                        [
                            "[torch.cat((torch.LongTensor(s).unsqueeze(1), torch.zeros(max_len - len(s), 1, dtype=torch.long)), 0) if len(s) != max_len else torch.LongTensor(s).unsqueeze(1) for s in ents]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(ents, 0).squeeze(2)",
                            "Call"
                        ],
                        [
                            "data",
                            "variable"
                        ],
                        [
                            "ents.cuda()",
                            "Call"
                        ],
                        [
                            "train_data",
                            "variable"
                        ],
                        [
                            "ents.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_73": {
                "variable": {
                    "value": "ents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_121": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_123": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hid_size * 4 + args.n_fts",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hid_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hid_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.linear1_ent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hid_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.hid_size / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.linear2_ent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(self.hid_size / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_ent_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_133": {
                "variable": {
                    "value": "self.act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_134": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_135": {
                "variable": {
                    "value": "self.softmax_ent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_185": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_299": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(probs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([])",
                            "Call"
                        ],
                        [
                            "torch.LongTensor([x[2] for x in rels])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "list(self._id_to_label.keys())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_432": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_433": {
                "variable": {
                    "value": "criterion_e",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_444": {
                "variable": {
                    "value": "criterion_r",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([1.0, 1.0, 1.0, args.uw, args.uw, args.uw, 1.0])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([1.0, 1.0, 1.0, args.uw, 1.0])",
                            "Call"
                        ],
                        [
                            "weights.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_159": {
                "variable": {
                    "value": "ltar_f",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out[b, lidx_start[b][r], :self.hid_size].unsqueeze(0) for (b, r) in rel_idxs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "ltar_b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out[b, lidx_end[b][r], self.hid_size:].unsqueeze(0) for (b, r) in rel_idxs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "rtar_f",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out[b, ridx_start[b][r], :self.hid_size].unsqueeze(0) for (b, r) in rel_idxs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "rtar_b",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out[b, ridx_end[b][r], self.hid_size:].unsqueeze(0) for (b, r) in rel_idxs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, fts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_263": {
                "variable": {
                    "value": "ent_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ent_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ent_pred, 0)",
                            "Call"
                        ],
                        [
                            "self.predict(model, eval_data, args, gold=eval_gold)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ent_pred, 0)",
                            "Call"
                        ],
                        [
                            "ent_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "ent_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ent_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ent_label, 0)",
                            "Call"
                        ],
                        [
                            "ent_label.tolist()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ent_label, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "ent_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ent_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_418": {
                "variable": {
                    "value": "fts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.FloatTensor(x[3]) for x in rels]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "unsqueeze_418": {
                "variable": {
                    "value": "fts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_449": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.output_dir + args.entity_model_file",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_679": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ilp_dir + args.relation_model_file",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_494": {
                "variable": {
                    "value": "ent_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ent_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ent_pred, 0)",
                            "Call"
                        ],
                        [
                            "self.predict(model, eval_data, args, gold=eval_gold)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ent_pred, 0)",
                            "Call"
                        ],
                        [
                            "ent_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_495": {
                "variable": {
                    "value": "ent_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ent_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ent_label, 0)",
                            "Call"
                        ],
                        [
                            "ent_label.tolist()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ent_label, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_578": {
                "obj": {
                    "value": "{'epoch': epoch, 'args': args, 'state_dict': self.model.cpu().state_dict(), 'f1': best_eval_f1, 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s%s.pth.tar' % (args.ilp_dir, args.save_stamp)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_60": {
                "tensors": {
                    "value": "(torch.FloatTensor(s), torch.zeros(max_len - s.shape[0], n_fts))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "(torch.LongTensor(s).unsqueeze(1), torch.zeros(max_len - len(s), 1, dtype=torch.long))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_72": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "tensors": {
                    "value": "(ltar_f, ltar_b, rtar_f, rtar_b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_677": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_427": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_60": {
                "*size": {
                    "value": "max_len - s.shape[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "n_fts",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_71": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "max_len - len(s)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_676": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}