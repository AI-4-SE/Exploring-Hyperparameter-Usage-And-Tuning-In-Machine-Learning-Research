{
    "models/main.py": {
        "tensorflow": {
            "parse_single_example_75": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'images': tf.FixedLenFeature([], tf.string), 'actions': tf.FixedLenFeature([sampling_max_horizon * act_dim], tf.float32) if 'fetch' not in task else tf.FixedLenFeature([sampling_max_horizon * (act_dim + 1)], tf.float32), 'qts': tf.FixedLenFeature([sampling_max_horizon * joint_dim], tf.float32)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_85": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['images']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['images'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [sampling_max_horizon + 1, img_h, img_w, img_c])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32) / 255.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[sampling_max_horizon + 1, img_h, img_w, img_c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_91": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['actions']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_97": {
                "variable": {
                    "value": "qt",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['qts']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "qt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "qt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(features['qts'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(qt, [sampling_max_horizon, joint_dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[sampling_max_horizon, joint_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_108": {
                "variable": {
                    "value": "atT",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[1.0 / act_scale_coeff * actions[t1:t2], tf.zeros((max_horizon - effective_horizon, act_dim))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_137": {
                "variable": {
                    "value": "tf_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_139": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_233": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(features['actions'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(actions, [sampling_max_horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(actions, [sampling_max_horizon, act_dim + 1])",
                            "Call"
                        ],
                        [
                            "actions[:, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[sampling_max_horizon, act_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(features['actions'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(actions, [sampling_max_horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(actions, [sampling_max_horizon, act_dim + 1])",
                            "Call"
                        ],
                        [
                            "actions[:, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[sampling_max_horizon, act_dim + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FileWriter_250": {
                "variable": {
                    "value": "train_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_directory + 'summ/' + dirname",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_88": {
                "x": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['images'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [sampling_max_horizon + 1, img_h, img_w, img_c])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32) / 255.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_110": {
                "values": {
                    "value": "[tf.ones(effective_horizon), tf.zeros(max_horizon - effective_horizon)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "shape": {
                    "value": "max_horizon - effective_horizon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TFRecordDataset_150": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ]
                    ]
                }
            },
            "global_variables_initializer_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_236": {
                "variable": {
                    "value": "model_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "log_directory + 'summ/' + dirname + '/models/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "FixedLenFeature_79": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_81": {
                "shape": {
                    "value": "[sampling_max_horizon * joint_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "shape": {
                    "value": "(max_horizon - effective_horizon, act_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "FixedLenFeature_80": {
                "shape": {
                    "value": "[sampling_max_horizon * (act_dim + 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_110": {
                "shape": {
                    "value": "effective_horizon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "t2 - t1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/model.py": {
        "tensorflow": {
            "placeholder_54": {
                "variable": {
                    "value": "self.ol_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ol_lr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_186": {
                "variable": {
                    "value": "error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.atT - self.atT_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_189": {
                "variable": {
                    "value": "bc_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "bc_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(error[:, :outer_horizon], reduction_indices=[1]) / tf.reduce_sum(self.plan_loss_mask, reduction_indices=[1])",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(bc_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_190": {
                "variable": {
                    "value": "bc_loss_one_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "error[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_194": {
                "variable": {
                    "value": "kl_div",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "encoder_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logqzx - logpz",
                            "BinOp"
                        ]
                    ]
                }
            },
            "identity_228": {
                "variable": {
                    "value": "plan_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.get_plan_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "plan",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_249": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "gradplanner",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_546": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform(weight_shape, minval=-d, maxval=d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_547": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform(bias_shape, minval=-d, maxval=d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "self.ot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, img_h, img_w, img_c]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ot",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.og",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, img_h, img_w, img_c]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "og",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self.atT_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, inner_horizon, act_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "atT_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "self.qt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, joint_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "qt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "self.plan_loss_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, inner_horizon]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "self.eff_horizons",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "eff_horizons",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_120": {
                "variable": {
                    "value": "xt",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[xt, self.qt]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_199": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_214": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "ol_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.ol_lr",
                            "Attribute"
                        ],
                        [
                            "tf.maximum(tf.where(tf.less(tf.cast(global_step, tf.int32), tf.constant(niter_init)), self.ol_lr, post_burnin_learning_rate), 0.0, name='learning_rate')",
                            "Call"
                        ],
                        [
                            "tf.train.noisy_linear_cosine_decay(self.ol_lr, global_step, niter_decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_220": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "optimizer.apply_gradients(encoder_grads_and_vars)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "optimizer.apply_gradients(decoder_grads_and_vars)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_232": {
                "variable": {
                    "value": "xt_dummy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._encode_conv(self.ot, conv_params, scope='obs_conv_encoding', layer_norm=True, nonlinearity='swish', spatial_softmax=spatial_softmax, reuse=False if train else True)",
                            "Call"
                        ],
                        [
                            "self._encode_fc(xt, n_hidden=n_hidden, scope='obs_fc_encoding', layer_norm=True, latent_dim=obs_latent_dim, nonlinearity=nonlinearity, reuse=False if train else True)",
                            "Call"
                        ],
                        [
                            "tf.concat([xt, self.qt], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([xt, bias_transform], 1)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(xt, n_hidden=n_hidden, scope='joint_encoding', out_dim=obs_latent_dim, nonlinearity=nonlinearity, layer_norm=True, reuse=False if train else True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "xt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_233": {
                "variable": {
                    "value": "xg_dummy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._encode_conv(self.og, conv_params, scope='obs_conv_encoding', layer_norm=True, nonlinearity='swish', spatial_softmax=spatial_softmax, reuse=True)",
                            "Call"
                        ],
                        [
                            "self._encode_fc(xg, n_hidden=n_hidden, scope='obs_fc_encoding', layer_norm=True, latent_dim=obs_latent_dim, nonlinearity=nonlinearity, reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "xg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_244": {
                "variable": {
                    "value": "self.summ_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "summ",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.summary.scalar(prefix + 'vae loss', loss), tf.summary.scalar(prefix + 'kl_div loss', kl_div), tf.summary.scalar(prefix + 'BC loss', tf.sqrt(bc_loss)), tf.summary.scalar(prefix + 'plan loss', tf.sqrt(self.plan_loss)), tf.summary.scalar(prefix + 'BC loss first step', tf.sqrt(bc_loss_one_step)), tf.summary.image(prefix + 'initial image', self.ot, max_outputs=5), tf.summary.image(prefix + 'goal image', self.og, max_outputs=5)]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_403": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(out, [0, 3, 1, 2]), [-1, height * width])",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "plan",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "utT",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, latent_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=act_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=out_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, act_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_424": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(mean, [-1, horizon, latent_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, horizon, latent_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_425": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(logstd, [-1, horizon, latent_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_442": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(out, [0, 3, 1, 2]), [-1, height * width])",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "plan",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "utT",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, latent_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=act_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=out_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, latent_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_460": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(out, [0, 3, 1, 2]), [-1, height * width])",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "plan",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "utT",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, latent_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=act_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=out_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, horizon, act_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "gradplanner",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "self.il_lr_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "il_lr_0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.il_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "il_lr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "variable": {
                    "value": "bias_transform",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias_transform",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, bt_num_units]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_126": {
                "variable": {
                    "value": "bias_transform",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias_transform",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias_transform', [1, bt_num_units], initializer=tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "tf.tile(bias_transform, multiples=tf.stack([tf.shape(xt)[0], 1]))",
                            "Call"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tf.stack([tf.shape(xt)[0], 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_127": {
                "variable": {
                    "value": "xt",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[xt, bias_transform]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_186": {
                "x": {
                    "value": "self.atT - self.atT_target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_188": {
                "input_tensor": {
                    "value": "self.plan_loss_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_273": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'rollout'",
                            "MethodArgument"
                        ],
                        [
                            "'obs_conv_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'obs_fc_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_decoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_decoding'",
                            "MethodArgument"
                        ],
                        [
                            "'fully_connected'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_297": {
                "variable": {
                    "value": "xg_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "xg_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(xg_preds)",
                            "Call"
                        ],
                        [
                            "tf.transpose(xg_preds, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_298": {
                "variable": {
                    "value": "xg_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "xg_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(xg_preds)",
                            "Call"
                        ],
                        [
                            "tf.transpose(xg_preds, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_299": {
                "variable": {
                    "value": "xg_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "xg_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(xg_preds)",
                            "Call"
                        ],
                        [
                            "tf.transpose(xg_preds, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.concat([tf.expand_dims(tf.range(tf.shape(xg_preds)[0]), 1), tf.expand_dims(eff_horizons, 1)], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_304": {
                "variable": {
                    "value": "self.plan_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.plan_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_306": {
                "variable": {
                    "value": "atT_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "atT_grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.plan_loss, self.utT)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(atT_grad, -meta_gradient_clip_value, meta_gradient_clip_value)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-meta_gradient_clip_value",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "meta_gradient_clip_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_326": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'rollout'",
                            "MethodArgument"
                        ],
                        [
                            "'obs_conv_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'obs_fc_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_decoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_decoding'",
                            "MethodArgument"
                        ],
                        [
                            "'fully_connected'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_345": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(out, [0, 3, 1, 2]), [-1, height * width])",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "plan",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "utT",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, latent_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=act_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=out_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "meshgrid_348": {
                "variable": {
                    "value": "(pos_x, pos_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "tf.linspace(-1.0, 1.0, num=height)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.linspace(-1.0, 1.0, num=width)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "ij",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_351": {
                "variable": {
                    "value": "pos_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pos_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(pos_x, [height * width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[height * width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_352": {
                "variable": {
                    "value": "pos_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pos_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(pos_y, [height * width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[height * width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_353": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(out, [0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, height * width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_354": {
                "variable": {
                    "value": "softmax_attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(out, [0, 3, 1, 2]), [-1, height * width])",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "plan",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "utT",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, latent_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=act_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=out_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_355": {
                "variable": {
                    "value": "expected_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pos_x * softmax_attention",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_356": {
                "variable": {
                    "value": "expected_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pos_y * softmax_attention",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_357": {
                "variable": {
                    "value": "expected_xy",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[expected_x, expected_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_358": {
                "variable": {
                    "value": "feature_keypoints",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "expected_xy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([expected_x, expected_y], 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_channels.value * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_362": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(out, [0, 3, 1, 2]), [-1, height * width])",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "plan",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "utT",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, latent_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=act_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=out_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_374": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'rollout'",
                            "MethodArgument"
                        ],
                        [
                            "'obs_conv_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'obs_fc_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_decoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_decoding'",
                            "MethodArgument"
                        ],
                        [
                            "'fully_connected'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_401": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'rollout'",
                            "MethodArgument"
                        ],
                        [
                            "'obs_conv_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'obs_fc_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_decoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_decoding'",
                            "MethodArgument"
                        ],
                        [
                            "'fully_connected'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_440": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'rollout'",
                            "MethodArgument"
                        ],
                        [
                            "'obs_conv_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'obs_fc_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_decoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_decoding'",
                            "MethodArgument"
                        ],
                        [
                            "'fully_connected'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_484": {
                "input": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_487": {
                "input": {
                    "value": "z_0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(loc), loc, scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_487": {
                "input": {
                    "value": "z_0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(loc), loc, scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_524": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'rollout'",
                            "MethodArgument"
                        ],
                        [
                            "'obs_conv_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'obs_fc_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_decoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_encoding'",
                            "MethodArgument"
                        ],
                        [
                            "'plan_decoding'",
                            "MethodArgument"
                        ],
                        [
                            "'fully_connected'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "polynomial_decay_202": {
                "variable": {
                    "value": "post_burnin_learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.ol_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step - niter_init",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "niter_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100000",
                            "MethodArgument"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "maximum_205": {
                "variable": {
                    "value": "ol_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(tf.less(tf.cast(global_step, tf.int32), tf.constant(niter_init)), self.ol_lr, post_burnin_learning_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "noisy_linear_cosine_decay_210": {
                "variable": {
                    "value": "ol_lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.ol_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "niter_decay",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "scalar_237": {
                "name": {
                    "value": "prefix + 'kl_div loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "kl_div",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(encoder_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_238": {
                "name": {
                    "value": "prefix + 'plan loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.sqrt(self.plan_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_239": {
                "name": {
                    "value": "prefix + 'BC loss first step'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.sqrt(bc_loss_one_step)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_239": {
                "name": {
                    "value": "prefix + 'initial image'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.ot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_240": {
                "name": {
                    "value": "prefix + 'goal image'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.og",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_301": {
                "variable": {
                    "value": "self.plan_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.huber_loss(xg, xg_pred, delta=delta_huber, reduction='none')",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_303": {
                "variable": {
                    "value": "self.plan_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(xg_pred - xg)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_425": {
                "tensor": {
                    "value": "logstd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, horizon, latent_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_82": {
                "x": {
                    "value": "tf.get_variable('il_lr_%d' % j, shape=[], initializer=tf.constant_initializer(init_il_lr), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_238": {
                "x": {
                    "value": "self.plan_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_239": {
                "x": {
                    "value": "bc_loss_one_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(error[:, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_299": {
                "values": {
                    "value": "[tf.expand_dims(tf.range(tf.shape(xg_preds)[0]), 1), tf.expand_dims(eff_horizons, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_305": {
                "ys": {
                    "value": "self.plan_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.utT",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_343": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(out, [0, 3, 1, 2]), [-1, height * width])",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "plan",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "utT",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, latent_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=act_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=out_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_348": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_349": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_353": {
                "a": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(out, [0, 3, 1, 2]), [-1, height * width])",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "plan",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "utT",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, latent_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=act_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=out_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_385": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(out, [0, 3, 1, 2]), [-1, height * width])",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "plan",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "utT",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, latent_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=act_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=out_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_414": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(out, [0, 3, 1, 2]), [-1, height * width])",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "plan",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "utT",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, latent_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=act_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=out_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_416": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(out, [0, 3, 1, 2]), [-1, height * width])",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "plan",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "utT",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, latent_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=act_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=out_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_453": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(out, [0, 3, 1, 2]), [-1, height * width])",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "plan",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "utT",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, latent_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=act_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=out_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_455": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(out, [0, 3, 1, 2]), [-1, height * width])",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "plan",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "utT",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, latent_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=act_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=out_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_535": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(out, [0, 3, 1, 2]), [-1, height * width])",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "plan",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "utT",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, latent_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=act_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=out_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_82": {
                "name": {
                    "value": "'il_lr_%d' % j",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(init_il_lr)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_125": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_126": {
                "values": {
                    "value": "[tf.shape(xt)[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_205": {
                "condition": {
                    "value": "tf.less(tf.cast(global_step, tf.int32), tf.constant(niter_init))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.ol_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "post_burnin_learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.polynomial_decay(self.ol_lr, global_step - niter_init, niter_decay, 0.0, power=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_243": {
                "name": {
                    "value": "'Gradient_step_%d' % k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.atT_grads[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_289": {
                "values": {
                    "value": "[xg_pred, self.utT[:, time_idx, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "huber_loss_301": {
                "labels": {
                    "value": "xg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._encode_conv(self.og, conv_params, scope='obs_conv_encoding', layer_norm=True, nonlinearity='swish', spatial_softmax=spatial_softmax, reuse=True)",
                            "Call"
                        ],
                        [
                            "self._encode_fc(xg, n_hidden=n_hidden, scope='obs_fc_encoding', layer_norm=True, latent_dim=obs_latent_dim, nonlinearity=nonlinearity, reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "xg_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "xt",
                            "Name"
                        ],
                        [
                            "tf.gather_nd(xg_preds, tf.concat([tf.expand_dims(tf.range(tf.shape(xg_preds)[0]), 1), tf.expand_dims(eff_horizons, 1)], 1))",
                            "Call"
                        ],
                        [
                            "self._fully_connected(tf.concat([xg_pred, self.utT[:, time_idx, :]], axis=1), n_hidden=n_hidden_dynamics, out_dim=obs_latent_dim, scope='dynamics', nonlinearity=nonlinearity, reuse=dynamics_scope_reuse)",
                            "Call"
                        ]
                    ]
                },
                "delta": {
                    "value": "delta_huber",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_303": {
                "x": {
                    "value": "xg_pred - xg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_341": {
                "x": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(out, [0, 3, 1, 2]), [-1, height * width])",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "plan",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "utT",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, latent_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=act_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=out_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_383": {
                "x": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(out, [0, 3, 1, 2]), [-1, height * width])",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "plan",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "utT",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, latent_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=act_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=out_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_533": {
                "x": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(out, [0, 3, 1, 2]), [-1, height * width])",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "plan",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "utT",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, latent_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=act_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=out_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_206": {
                "x": {
                    "value": "tf.cast(global_step, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(niter_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_299": {
                "input": {
                    "value": "eff_horizons",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_412": {
                "x": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(out, [0, 3, 1, 2]), [-1, height * width])",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "plan",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "utT",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, latent_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=act_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=out_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_451": {
                "x": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, padding=padding, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(out, [0, 3, 1, 2]), [-1, height * width])",
                            "Call"
                        ],
                        [
                            "layers.flatten(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "plan",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "utT",
                            "Name"
                        ],
                        [
                            "tf.reshape(out, [-1, latent_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [-1, horizon, act_dim])",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=latent_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=act_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=out_dim, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(out) * out",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_84": {
                "value": {
                    "value": "init_il_lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.25",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_206": {
                "x": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_206": {
                "value": {
                    "value": "niter_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_126": {
                "input": {
                    "value": "xt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._encode_conv(self.ot, conv_params, scope='obs_conv_encoding', layer_norm=True, nonlinearity='swish', spatial_softmax=spatial_softmax, reuse=False if train else True)",
                            "Call"
                        ],
                        [
                            "self._encode_fc(xt, n_hidden=n_hidden, scope='obs_fc_encoding', layer_norm=True, latent_dim=obs_latent_dim, nonlinearity=nonlinearity, reuse=False if train else True)",
                            "Call"
                        ],
                        [
                            "tf.concat([xt, self.qt], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([xt, bias_transform], 1)",
                            "Call"
                        ],
                        [
                            "self._fully_connected(xt, n_hidden=n_hidden, scope='joint_encoding', out_dim=obs_latent_dim, nonlinearity=nonlinearity, layer_norm=True, reuse=False if train else True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_299": {
                "input": {
                    "value": "xg_preds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(xg_preds)",
                            "Call"
                        ],
                        [
                            "tf.transpose(xg_preds, [1, 0, 2])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/tf_utils.py": {
        "tensorflow": {
            "add_6": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(var, eps, name='clipped_var')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "clipped_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_16": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(logits, -max_val, max_val, name='clipped_logit')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-max_val",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.log(1.0 - eps) - np.log(eps)",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "clipped_logit",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_7": {
                "input_tensor": {
                    "value": "tf.log(2 * np.pi) + tf.log(var) + tf.square(x - mu) / var",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_18": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=logits, labels=x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_19": {
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(logits, -max_val, max_val, name='clipped_logit')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_8": {
                "x": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(var, eps, name='clipped_var')",
                            "Call"
                        ]
                    ]
                }
            },
            "square_8": {
                "x": {
                    "value": "x - mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}