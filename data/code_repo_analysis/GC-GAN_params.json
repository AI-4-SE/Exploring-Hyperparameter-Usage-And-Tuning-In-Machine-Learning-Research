{
    "main.py": {
        "tensorflow": {}
    },
    "ops.py": {
        "tensorflow": {
            "moments_80": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_6": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "alpha * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_13": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, input_.get_shape()[-1], output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_15": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_17": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_18": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "conv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_28": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, output_shape[-1], input_.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_41": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(deconv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "deconv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_57": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[1], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_71": {
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[x, y * tf.ones([x_shapes[0], x_shapes[1], x_shapes[2], y_shapes[3]])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "div_82": {
                "x": {
                    "value": "tf.subtract(x, mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sqrt(tf.add(var, epsilon))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_12": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'LeakyReLU'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'LeakyReLU'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_32": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_shape",
                            "Method Argument"
                        ],
                        [
                            "output_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "subtract_82": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(x, [1, 2], keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_82": {
                "x": {
                    "value": "tf.add(var, epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "residual",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "residual",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_107": {
                "name_or_scope": {
                    "value": "residual_un",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_18": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, d_h, d_w, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), conv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_42": {
                "value": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.deconv2d(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, biases), deconv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_58": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_82": {
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(x, [1, 2], keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-09",
                            "float"
                        ]
                    ]
                }
            },
            "relu_89": {
                "features": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(x, output_dims, k_h=kernel, k_w=kernel, d_h=strides, d_w=strides, name=name_1)",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(x, output_dims, k_h=kernel, k_w=kernel, d_h=strides, d_w=strides, name=name_1))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_110": {
                "features": {
                    "value": "deconv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "de_conv(x, output_shape=output_shape, k_h=kernel, k_w=kernel, d_h=strides, d_w=strides, name=name_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_14": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_17": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_29": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_41": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_60": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_64": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [shape[1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_71": {
                "shape": {
                    "value": "[x_shapes[0], x_shapes[1], x_shapes[2], y_shapes[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_99": {
                "features": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(x, output_dims, k_h=kernel, k_w=kernel, d_h=strides, d_w=strides, name=name_1)",
                            "Call"
                        ],
                        [
                            "instance_norm(conv2d(x, output_dims, k_h=kernel, k_w=kernel, d_h=strides, d_w=strides, name=name_1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_62": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [shape[1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "log_289": {
                "variable": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(lm[0], img_size - 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_290": {
                "variable": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(10, dtype=numerator.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_290": {
                "value": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "numerator.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vaegan.py": {
        "tensorflow": {
            "placeholder_48": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.output_size, self.output_size, self.channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "self.images_emotion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.output_size, self.output_size, self.channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "self.real_local_imgs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.local_size, self.local_size, self.channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "self.fake_local_imgs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.local_size, self.local_size, self.channel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "self.images_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.landmark_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "self.emotion_images_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.landmark_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "self.emotion_images_lm_reference",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.landmark_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self.emotion_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "variable": {
                    "value": "self.emotion_label_reference",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "self.lm_embed_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.landmark_embed_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.isTrain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "self.z_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.latent_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_105": {
                "variable": {
                    "value": "self.real_emotion_cls_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.emotion_label, logits=self.real_emo_aux)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_106": {
                "variable": {
                    "value": "self.fake_emotion_cls_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.emotion_label, logits=self.fake_emo_aux)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_147": {
                "variable": {
                    "value": "t_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_154": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_159": {
                "variable": {
                    "value": "z_x_lm",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[z_x, lm_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Variable_166": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_168": {
                "variable": {
                    "value": "new_learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learn_rate_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "20000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.98",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_171": {
                "variable": {
                    "value": "trainer_D",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "new_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(self.learn_rate_init, global_step=global_step, decay_steps=20000, decay_rate=0.98)",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_177": {
                "variable": {
                    "value": "trainer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "new_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(self.learn_rate_init, global_step=global_step, decay_steps=20000, decay_rate=0.98)",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_183": {
                "variable": {
                    "value": "trainer_E",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "new_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(self.learn_rate_init, global_step=global_step, decay_steps=20000, decay_rate=0.98)",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_189": {
                "variable": {
                    "value": "trainer_Embed",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "new_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(self.learn_rate_init, global_step=global_step, decay_steps=20000, decay_rate=0.98)",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "global_variables_initializer_194": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_195": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_518": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.reshape(tf.abs(pred - target), [self.batch_size, -1]), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_546": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminate(x, reuse=True)",
                            "Call"
                        ],
                        [
                            "self.discriminate_local(x, reuse=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(pred, axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_550": {
                "variable": {
                    "value": "slopes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(gradients), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_551": {
                "variable": {
                    "value": "gp",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(slopes - 1.0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_563": {
                "variable": {
                    "value": "self.same_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(self.emotion_label, self.emotion_label_reference)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_565": {
                "variable": {
                    "value": "self.l2_loss_pairs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.lm_embed - self.lm_embed_reference)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_569": {
                "variable": {
                    "value": "self.lm_recon_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(self.lm_recon - self.emotion_images_lm), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "merge_all_206": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_207": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_413": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(x_var, output_dim=32, name='dis_conv1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_414": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(conv1, output_dim=128, name='dis_conv2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_415": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(conv2, output_dim=256, name='dis_conv3')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_418": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(conv3, output_dim=256, name='dis_conv4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv4, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(conv3, output_dim=512, name='dis_conv4_patch'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv4, [self.batch_size, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_420": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(conv4, output_dim=1, name='dis_conv5')",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv5, [self.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_423": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(conv3, output_dim=256, name='dis_conv4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv4, [self.batch_size, -1])",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(conv3, output_dim=512, name='dis_conv4_patch'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv4, [self.batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_438": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fully_connect(conv4, output_size=512, scope='dis_fully1_patch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_449": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_normal(fully_connect(z_var, output_size=4 * 4 * 256, scope='gen_fully1'), scope='gen_bn1', reuse=reuse, isTrain=self.isTrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_450": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(batch_normal(fully_connect(z_var, output_size=4 * 4 * 256, scope='gen_fully1'), scope='gen_bn1', reuse=reuse, isTrain=self.isTrain))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 4, 4, 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_457": {
                "variable": {
                    "value": "d5",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_normal(de_conv(d4, output_shape=[self.batch_size, 64, 64, 64], name='gen_deconv5'), scope='gen_bn5', reuse=reuse, isTrain=self.isTrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_468": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_normal(conv2d(img, output_dim=64, name='e_c1'), scope='e_bn1', reuse=reuse, isTrain=self.isTrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_470": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_normal(conv2d(conv1, output_dim=128, name='e_c2'), scope='e_bn2', reuse=reuse, isTrain=self.isTrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_472": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_normal(conv2d(conv2, output_dim=256, name='e_c3'), scope='e_bn3', reuse=reuse, isTrain=self.isTrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_475": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2d(conv2, output_dim=256, name='dis_conv3'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(conv2, output_dim=256, name='dis_conv3_patch'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_normal(conv2d(conv2, output_dim=256, name='e_c3'), scope='e_bn3', reuse=reuse, isTrain=self.isTrain))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv3, [self.batch_size, 256 * 8 * 8])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_normal(conv2d(conv2, output_dim=256, name='e_c3'), scope='e_bn3', reuse=reuse, isTrain=self.isTrain))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv3, [self.batch_size, 256 * 8 * 8])",
                            "Call"
                        ],
                        [
                            "conv3",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 256 * 8 * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_476": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_normal(fully_connect(conv3, output_size=1024, scope='e_f1'), scope='e_bn4', reuse=reuse, isTrain=self.isTrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_486": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_normal(conv2d(img, output_dim=64, name='e_c1'), scope='e_bn1', reuse=reuse, isTrain=self.isTrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_487": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_normal(conv2d(conv1, output_dim=128, name='e_c2'), scope='e_bn2', reuse=reuse, isTrain=self.isTrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_488": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_normal(conv2d(conv2, output_dim=256, name='e_c3'), scope='e_bn3', reuse=reuse, isTrain=self.isTrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_490": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(conv2d(conv2, output_dim=256, name='dis_conv3'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(conv2, output_dim=256, name='dis_conv3_patch'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_normal(conv2d(conv2, output_dim=256, name='e_c3'), scope='e_bn3', reuse=reuse, isTrain=self.isTrain))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv3, [self.batch_size, 256 * 8 * 8])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(batch_normal(conv2d(conv2, output_dim=256, name='e_c3'), scope='e_bn3', reuse=reuse, isTrain=self.isTrain))",
                            "Call"
                        ],
                        [
                            "tf.reshape(conv3, [self.batch_size, 256 * 8 * 8])",
                            "Call"
                        ],
                        [
                            "conv3",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.batch_size, 256 * 8 * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_491": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_normal(fully_connect(conv3, output_size=1024, scope='e_f1'), scope='e_bn4', reuse=reuse, isTrain=self.isTrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_492": {
                "variable": {
                    "value": "z_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_normal(fully_connect(fc1, output_size=128, scope='e_f2'), scope='e_bn5', reuse=reuse, isTrain=self.isTrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_500": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_normal(fully_connect(lm, output_size=128, scope='em_f1'), scope='em_bn1', reuse=reuse, isTrain=self.isTrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_501": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_normal(fully_connect(fc1, output_size=64, scope='em_f2'), scope='em_bn2', reuse=reuse, isTrain=self.isTrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_502": {
                "variable": {
                    "value": "fc3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_normal(fully_connect(fc2, output_size=32, scope='em_f3'), scope='em_bn3', reuse=reuse, isTrain=self.isTrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_503": {
                "variable": {
                    "value": "fc4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_normal(fully_connect(fc3, output_size=64, scope='em_f4'), scope='em_bn4', reuse=reuse, isTrain=self.isTrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_504": {
                "variable": {
                    "value": "fc5",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "batch_normal(fully_connect(fc4, output_size=128, scope='em_f5'), scope='em_bn5', reuse=reuse, isTrain=self.isTrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_505": {
                "variable": {
                    "value": "fc6",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fully_connect(fc5, output_size=68 * 2, scope='em_f6')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_510": {
                "input_tensor": {
                    "value": "0.5 * tf.reduce_sum(tf.exp(self.z_sigm) + self.z_mean ** 2 - 1.0 - self.z_sigm, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_532": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.shape(a)[0:1], tf.tile([1], [a.shape.ndims - 1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_105": {
                "labels": {
                    "value": "self.emotion_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.real_emo_aux",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_106": {
                "labels": {
                    "value": "self.emotion_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.fake_emo_aux",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_108": {
                "input_tensor": {
                    "value": "tf.reduce_sum(self.fake_out, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "input_tensor": {
                    "value": "tf.reduce_sum(self.fake_out, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_156": {
                "name": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_vars",
                            "Attribute"
                        ]
                    ]
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_vars",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Session_198": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_409": {
                "name_or_scope": {
                    "value": "discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_429": {
                "name_or_scope": {
                    "value": "discriminator_local",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_444": {
                "name_or_scope": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_461": {
                "x": {
                    "value": "d6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d(d5, output_dim=3, d_h=1, d_w=1, name='gen_conv6')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_465": {
                "name_or_scope": {
                    "value": "encode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_483": {
                "name_or_scope": {
                    "value": "encode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_497": {
                "name_or_scope": {
                    "value": "embed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_519": {
                "input_tensor": {
                    "value": "tf.reshape(tf.abs(pred - target), [self.batch_size, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_548": {
                "ys": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminate(x, reuse=True)",
                            "Call"
                        ],
                        [
                            "self.discriminate_local(x, reuse=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(pred, axis=1, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "interpolate(real, fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_550": {
                "input_tensor": {
                    "value": "tf.square(gradients)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_563": {
                "x": {
                    "value": "self.emotion_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.emotion_label_reference",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_564": {
                "input": {
                    "value": "self.same_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_565": {
                "x": {
                    "value": "self.lm_embed - self.lm_embed_reference",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_566": {
                "input_tensor": {
                    "value": "self.same_label * self.l2_loss_pairs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_568": {
                "input_tensor": {
                    "value": "self.diff_label * tf.nn.relu(5 - self.l2_loss_pairs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_569": {
                "input_tensor": {
                    "value": "tf.square(self.lm_recon - self.emotion_images_lm)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_108": {
                "input_tensor": {
                    "value": "self.fake_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "input_tensor": {
                    "value": "self.fake_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_451": {
                "features": {
                    "value": "batch_normal(de_conv(d2, output_shape=[self.batch_size, 8, 8, 256], name='gen_deconv2'), scope='gen_bn2', reuse=reuse, isTrain=self.isTrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_453": {
                "features": {
                    "value": "batch_normal(de_conv(d2, output_shape=[self.batch_size, 16, 16, 128], name='gen_deconv3'), scope='gen_bn3', reuse=reuse, isTrain=self.isTrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_455": {
                "features": {
                    "value": "batch_normal(de_conv(d3, output_shape=[self.batch_size, 32, 32, 64], name='gen_deconv4'), scope='gen_bn4', reuse=reuse, isTrain=self.isTrain)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_510": {
                "input_tensor": {
                    "value": "tf.exp(self.z_sigm) + self.z_mean ** 2 - 1.0 - self.z_sigm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_513": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_514": {
                "x": {
                    "value": "log_var / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_519": {
                "tensor": {
                    "value": "tf.abs(pred - target)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_550": {
                "x": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(pred, x)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_569": {
                "x": {
                    "value": "self.lm_recon - self.emotion_images_lm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_519": {
                "x": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_532": {
                "input": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[a.shape.ndims - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_568": {
                "features": {
                    "value": "5 - self.l2_loss_pairs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_532": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_510": {
                "x": {
                    "value": "self.z_sigm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}