{
    "allennlp_internal_functions.py": {
        "torch": {}
    },
    "attn_removal_check.py": {
        "torch": {}
    },
    "attn_tests_lib/classifier_from_attn_and_input_vects.py": {
        "torch": {
            "sum_38": {
                "variable": {
                    "value": "document_repr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_tensors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_token_representation * attn_weights",
                            "BinOp"
                        ],
                        [
                            "output_token_representation * attn_weights",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_41": {
                "variable": {
                    "value": "label_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._classification_module(document_repr.view(batch_size, -1))",
                            "Call"
                        ],
                        [
                            "self._classification_module(document_repr.view(batch_size, -1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_108": {
                "variable": {
                    "value": "document_repr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_tensors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_token_representation * attn_weights",
                            "BinOp"
                        ],
                        [
                            "output_token_representation * attn_weights",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_111": {
                "variable": {
                    "value": "label_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._classification_module(document_repr.view(batch_size, -1))",
                            "Call"
                        ],
                        [
                            "self._classification_module(document_repr.view(batch_size, -1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_29": {
                "input": {
                    "value": "correct.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "tensors_to_cat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[grad_input[j].view(1, -1) for j in range(len(grad_input))]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_98": {
                "input": {
                    "value": "correct.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_33": {
                "input": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "intra_sentence_attention",
                            "Name"
                        ],
                        [
                            "attn_weights.unsqueeze(2).expand(batch_size, sequence_length, output_token_representation.size(2))",
                            "Call"
                        ],
                        [
                            "intra_sentence_attention",
                            "Name"
                        ],
                        [
                            "attn_weights.unsqueeze(2).expand(batch_size, sequence_length, output_token_representation.size(2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_102": {
                "input": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "intra_sentence_attention",
                            "Name"
                        ],
                        [
                            "attn_weights.unsqueeze(2).expand(batch_size, sequence_length, output_token_representation.size(2))",
                            "Call"
                        ],
                        [
                            "intra_sentence_attention",
                            "Name"
                        ],
                        [
                            "attn_weights.unsqueeze(2).expand(batch_size, sequence_length, output_token_representation.size(2))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "attn_tests_lib/conv_seq2seq_encoder.py": {
        "torch": {
            "from_numpy_137": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "twod_arr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(list_of_instances)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "arr_to_mult_by",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr_to_mult_by",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.uniform(1, 4, [len(list_of_instances), max_instance_len, third_dim])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(arr_to_mult_by)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.nonlinearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_36": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_75": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pieces_of_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "ndarray": {
                    "value": "np.random.uniform(1, 4, [output_dimension // 2, input_dimension, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_153": {
                "ndarray": {
                    "value": "np.random.uniform(1, 4, [output_dimension // 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_154": {
                "ndarray": {
                    "value": "np.random.uniform(1, 4, [output_dimension // 2, input_dimension, 5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_156": {
                "ndarray": {
                    "value": "np.random.uniform(1, 4, [output_dimension // 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "piece_of_x_with_padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[padding, x, padding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_28": {
                "in_channels": {
                    "value": "vector_dimension",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dimension // len(self.conv_sizes)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_sizes",
                            "Attribute"
                        ],
                        [
                            "range(starting_mask.dim())",
                            "Call"
                        ],
                        [
                            "self.conv_sizes",
                            "Attribute"
                        ],
                        [
                            "range(mask.dim())",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "attn_tests_lib/deprecated/han_paper_attn_function.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self._mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "context_vect_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self._context_dot_product",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "context_vect_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_24": {
                "variable": {
                    "value": "tensor_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._mlp(tensor_1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "attn_tests_lib/deprecated/talkative_intra_sentence_attention.py": {
        "torch": {}
    },
    "attn_tests_lib/flat_attention_network.py": {
        "torch": {
            "Dropout_95": {
                "variable": {
                    "value": "self._pre_document_encoder_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "pre_document_encoder_dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_102": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_148": {
                "variable": {
                    "value": "document_repr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "document_repr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._word_attention(encoded_words, mask)",
                            "Call"
                        ],
                        [
                            "torch.sum(document_repr, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_153": {
                "variable": {
                    "value": "label_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._output_logit(document_repr.view(batch_size, -1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_48": {
                "input": {
                    "value": "tensor_to_fill",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "first_token_ind_in_each_sentence.new_ones(batch_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "attn_tests_lib/intermediate_batch_iterator.py": {
        "torch": {
            "cat_107": {
                "variable": {
                    "value": "piece_to_return",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cur_pieces_to_concat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[piece_of_cur_to_hold_onto]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "piece_to_return",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cur_pieces_to_concat + [piece_of_cur_to_return]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "piece_to_return",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cur_pieces_to_concat + [corr_grad_for_attn]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_179": {
                "ndarray": {
                    "value": "np_attn_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pad_attn_weights_and_concat(list_of_attn_vals, max_seq_len_in_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_184": {
                "ndarray": {
                    "value": "np_attn_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pad_attn_weights_and_concat(list_of_attn_vals, max_seq_len_in_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_180": {
                "ndarray": {
                    "value": "np_corr_vect",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate(pieces_to_stack, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(pieces_to_stack, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_185": {
                "ndarray": {
                    "value": "np_corr_vect",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate(pieces_to_stack, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate(pieces_to_stack, axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "attn_tests_lib/pass_through_encoder.py": {
        "torch": {}
    },
    "attn_tests_lib/simple_han_attn_layer.py": {
        "torch": {
            "Linear_16": {
                "variable": {
                    "value": "self._mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "context_vector_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self._context_dot_product",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "context_vector_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_38": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._mlp(attn_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "attn_tests_lib/talkative_simple_han_attn_layer.py": {
        "torch": {
            "tanh_69": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._mlp(attn_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "misc_scripts/hyperparam_search.py": {
        "torch": {
            "load_262": {
                "variable": {
                    "value": "best_model_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "best_model_state_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(serialization_dir, 'best.th')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "plain_model_test.py": {
        "torch": {
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_model.py": {
        "torch": {
            "manual_seed_33": {
                "seed": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_151": {
                "variable": {
                    "value": "output_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(output_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_153": {
                "variable": {
                    "value": "denoms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(output_logits)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_309": {
                "variable": {
                    "value": "original_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.argmax(original_dists, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_312": {
                "variable": {
                    "value": "corr_instance_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(start=next_available_ind, stop=next_available_ind + len(list_of_lens))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_388": {
                "variable": {
                    "value": "original_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.argmax(original_dists, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_391": {
                "variable": {
                    "value": "corr_instance_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(start=next_available_ind, stop=next_available_ind + len(list_of_lens))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_670": {
                "variable": {
                    "value": "highest_zeroed_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "highest_zeroed_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "two_dim_arr.clone()",
                            "Call"
                        ],
                        [
                            "normalize(highest_zeroed_out, p=1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_671": {
                "variable": {
                    "value": "second_highest_zeroed_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "second_highest_zeroed_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "two_dim_arr.clone()",
                            "Call"
                        ],
                        [
                            "normalize(second_highest_zeroed_out, p=1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_672": {
                "variable": {
                    "value": "lowest_zeroed_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lowest_zeroed_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "two_dim_arr.clone()",
                            "Call"
                        ],
                        [
                            "normalize(lowest_zeroed_out, p=1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_673": {
                "variable": {
                    "value": "second_lowest_zeroed_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "second_lowest_zeroed_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "two_dim_arr.clone()",
                            "Call"
                        ],
                        [
                            "normalize(second_lowest_zeroed_out, p=1, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_36": {
                "seed": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_826": {
                "variable": {
                    "value": "original_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.argmax(original_dists, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_829": {
                "variable": {
                    "value": "corr_instance_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(start=next_available_ind, stop=next_available_ind + len(list_of_lens))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_980": {
                "variable": {
                    "value": "original_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.argmax(original_dists, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_983": {
                "variable": {
                    "value": "corr_instance_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(start=next_available_ind, stop=next_available_ind + len(list_of_lens))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_1109": {
                "variable": {
                    "value": "new_attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_attn_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "original_attn_weights.clone()",
                            "Call"
                        ],
                        [
                            "normalize(new_attn_weights, p=1, dim=1)",
                            "Call"
                        ],
                        [
                            "new_attn_weights[stayed_same_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_1133": {
                "variable": {
                    "value": "(_, new_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mod_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "classifier(corr_vects, new_attn_weights)['label_logits'].data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_152": {
                "input": {
                    "value": "output_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(output_logits)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_1319": {
                "variable": {
                    "value": "inds_of_nonzero_rows",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "first_token_ind_in_each_sentence",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tokens_[:, :, 0].view(batch_size * max_num_sents)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_212": {
                "variable": {
                    "value": "corr_grads_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[corr_grads_tensor, corr_grads_tensor.new_zeros((corr_grads_tensor.size(0), original_attn_weights.size(1) - corr_grads_tensor.size(1)))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_999": {
                "variable": {
                    "value": "corr_grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[corr_grads, corr_grads.new_zeros((corr_grads.size(0), original_attn_weights.size(1) - corr_grads.size(1)))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_1326": {
                "input": {
                    "value": "final_layer_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sentence_level_mask",
                            "Name"
                        ],
                        [
                            "util.get_text_field_mask({'tokens': tokens_}).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "textcat/hierarchical_attention_network.py": {
        "torch": {
            "Dropout_67": {
                "variable": {
                    "value": "self._pre_sentence_encoder_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "pre_sentence_encoder_dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_69": {
                "variable": {
                    "value": "self._pre_document_encoder_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "pre_document_encoder_dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nonzero_123": {
                "variable": {
                    "value": "inds_of_nonzero_rows",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "first_token_ind_in_each_sentence",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tokens_[:, :, 0].view(batch_size * max_num_sents)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_138": {
                "variable": {
                    "value": "sentence_repr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentence_repr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._word_attention(encoded_words, mask)",
                            "Call"
                        ],
                        [
                            "torch.sum(sentence_repr, 1)",
                            "Call"
                        ],
                        [
                            "sentence_repr.view(batch_size, max_num_sents, -1)",
                            "Call"
                        ],
                        [
                            "self._pre_document_encoder_dropout(sentence_repr)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_145": {
                "variable": {
                    "value": "document_repr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "document_repr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._sentence_attention(encoded_sents, sentence_level_mask)",
                            "Call"
                        ],
                        [
                            "torch.sum(document_repr, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_148": {
                "variable": {
                    "value": "label_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._output_logit(document_repr.view(batch_size, -1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_203": {
                "variable": {
                    "value": "self._mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "context_vector_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_204": {
                "variable": {
                    "value": "self._context_dot_product",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "context_vector_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_218": {
                "variable": {
                    "value": "attn_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._mlp(attn_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_80": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_83": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.FloatTensor(loss_class_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_224": {
                "input": {
                    "value": "tokens * attn_weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_184": {
                "input": {
                    "value": "weights[sent_ind, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "train_model.py": {
        "torch": {
            "load_88": {
                "variable": {
                    "value": "model_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weights_file or os.path.join(serialization_dir, _DEFAULT_WEIGHTS)",
                            "BoolOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "util.device_mapping(cuda_device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_231": {
                "variable": {
                    "value": "best_model_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "best_model_state_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(serialization_dir, 'best.th')",
                            "Call"
                        ],
                        [
                            "os.path.join(serialization_dir, 'best.th')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_472": {
                "variable": {
                    "value": "best_model_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "best_model_state_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(serialization_dir, 'best.th')",
                            "Call"
                        ],
                        [
                            "os.path.join(serialization_dir, 'best.th')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}