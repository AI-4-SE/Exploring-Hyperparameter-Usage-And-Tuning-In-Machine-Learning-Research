{
    "activemri/baselines/cvpr19_evaluator.py": {
        "torch": {
            "load_24": {
                "variable": {
                    "value": "evaluator_checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "evaluator_path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmin_68": {
                "input": {
                    "value": "k_space_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.evaluator(obs['reconstruction'].permute(0, 3, 1, 2).to(self.device), mask_embedding, mask if self.add_mask else None)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "activemri/baselines/ddqn.py": {
        "torch": {
            "zeros_43": {
                "variable": {
                    "value": "transformed_obs",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(obs_tensor)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "img_height + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "img_width",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.num_inputs, hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*hidden_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_actions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image_width",
                            "Name"
                        ],
                        [
                            "image_width",
                            "Name"
                        ],
                        [
                            "num_actions - 2 * legacy_offset",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.linear1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_240": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opts.dqn_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_294": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "q_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "all_q_values_cur.gather(1, actions.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "self(obs_tensor.to(self.device))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_values.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_829": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.evaluation_dir, 'tester_checkpoint.pickle')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.evaluation_dir, 'tester_checkpoint.pickle')",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_65": {
                "input": {
                    "value": "obs_tensor[0, 0, -1, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "obs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_144": {
                "variable": {
                    "value": "input_tensor[index_over_budget]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor[index_over_budget]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_value__304": {
                "parameters": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_510": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "self.latest_policy_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_515": {
                "obj": {
                    "value": "{'dqn_weights': self.policy.state_dict(), 'episode': episode, 'options': self.options}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.evaluation_dir, 'tester_checkpoint.pickle')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.evaluation_dir, 'tester_checkpoint.pickle')",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_108": {
                "in_features": {
                    "value": "self.num_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_280": {
                "variable": {
                    "value": "target_values",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "observations.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_352": {
                "input": {
                    "value": "q_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "all_q_values_cur.gather(1, actions.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "self(obs_tensor.to(self.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_814": {
                "obj": {
                    "value": "{'dqn_weights': self.policy.state_dict(), 'target_weights': self.target_net.state_dict(), 'options': self.options, 'episode': self.episode, 'steps': self.steps, 'best_test_score': self.best_test_score, 'reward_images_in_window': self.reward_images_in_window, 'current_score_auc_window': self.current_score_auc_window}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.evaluation_dir, 'tester_checkpoint.pickle')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.evaluation_dir, 'tester_checkpoint.pickle')",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_112": {
                "*args": {
                    "value": "nn.Linear(hidden_size, hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_736": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_112": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "activemri/baselines/replay_buffer.py": {
        "torch": {
            "zeros_40": {
                "variable": {
                    "value": "self.observations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "capacity",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "*obs_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "capacity",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "self.next_observations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "capacity",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "*obs_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "capacity",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "self.dones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "capacity",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "self.mean_obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obs_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['observations'].shape[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_48": {
                "variable": {
                    "value": "self.std_obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obs_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['observations'].shape[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_49": {
                "variable": {
                    "value": "self._m2_obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obs_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['observations'].shape[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "self.actions[self.position]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[action]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "self.rewards[self.position]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[reward]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "self.dones[self.position]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[done]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_148": {
                "variable": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_165": {
                "variable": {
                    "value": "self.observations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "capacity",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "*obs_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_166": {
                "variable": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "capacity",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_167": {
                "variable": {
                    "value": "self.next_observations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "capacity",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "*obs_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "self.rewards",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "capacity",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "variable": {
                    "value": "self.dones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "capacity",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_129": {
                "obj": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'observations': self.observations, 'actions': self.actions, 'next_observations': self.next_observations, 'rewards': self.rewards, 'dones': self.dones, 'position': self.position, 'mean_obs': self.mean_obs, 'std_obs': self.std_obs, 'm2_obs': self._m2_obs, 'count_seen': self.count_seen}",
                            "Dict"
                        ],
                        [
                            "torch.load(path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "tmp_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tempfile.NamedTemporaryFile(delete=False, dir=directory)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "activemri/baselines/simple_baselines.py": {
        "torch": {
            "Generator_33": {
                "variable": {
                    "value": "self.rng",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "activemri/data/__init__.py": {
        "torch": {}
    },
    "activemri/data/singlecoil_knee_data.py": {
        "torch": {}
    },
    "activemri/data/transforms.py": {
        "torch": {
            "ifft_53": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[:, h_from:h_to, w_from:w_to]",
                            "Subscript"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "normalized": {
                    "value": "normalized",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "k_space",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_kspace",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "where_90": {
                "variable": {
                    "value": "masked_true_k_space",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask.byte()",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "k_space",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(all_kspace)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.tensor(0.0).to(mask.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_159": {
                "tensors": {
                    "value": "stds",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "ndarray": {
                    "value": "ksp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kspace",
                            "Name"
                        ]
                    ]
                }
            },
            "permute_87": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "activemri/envs/envs.py": {
        "torch": {
            "device_190": {
                "variable": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_273": {
                "variable": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_497": {
                "variable": {
                    "value": "self._current_ground_truth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack(ground_truth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_112": {
                "variable": {
                    "value": "self._data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_source",
                    "type": "Name",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "CyclicSampler(data_source, order, loops=loops)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "self._data_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data_source",
                    "type": "Name",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "CyclicSampler(data_source, order, loops=loops)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_298": {
                "f": {
                    "value": "str(checkpoint_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "activemri/envs/masks.py": {
        "torch": {
            "zeros_104": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(kspace_shapes)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "mask_args['max_width']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "activemri/envs/util.py": {
        "torch": {}
    },
    "activemri/experimental/cvpr19_models/data/base_data_loader.py": {
        "torch": {
            "DataLoader_87": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dicom_data_loader.Slice(data_transform, dicom_root, which='train', resolution=128, scan_type='all', num_volumes=num_volumes_train, num_rand_slices=None)",
                            "Call"
                        ],
                        [
                            "raw_data_loader.RawSliceData(os.path.join(raw_root, 'knee_singlecoil_train'), transform=data_transform, num_cols=368, num_volumes=num_volumes_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "worker_init_fn": {
                    "value": "init_fun",
                    "type": "Name",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dicom_data_loader.Slice(data_transform, dicom_root, which='val', resolution=128, scan_type='all', num_volumes=num_volumes_val, num_rand_slices=None)",
                            "Call"
                        ],
                        [
                            "raw_data_loader.RawSliceData(os.path.join(raw_root, 'knee_singlecoil_val'), transform=data_transform, num_cols=368, num_volumes=num_volumes_val, custom_split='val')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "worker_init_fn": {
                    "value": "init_fun",
                    "type": "Name",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_142": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dicom_data_loader.Slice(data_transform, dicom_root, which='public_leaderboard', resolution=128, scan_type='all', num_volumes=None, num_rand_slices=None)",
                            "Call"
                        ],
                        [
                            "raw_data_loader.RawSliceData(raw_root + '/knee_singlecoil_val', transform=data_transform, num_cols=368, custom_split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "worker_init_fn": {
                    "value": "init_fun",
                    "type": "Name",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_172": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dicom_data_loader.Slice(data_transform, dicom_root, which='public_leaderboard', resolution=128, scan_type='all', num_volumes=None, num_rand_slices=None)",
                            "Call"
                        ],
                        [
                            "raw_data_loader.RawSliceData(raw_root + '/knee_singlecoil_val', transform=data_transform, num_cols=368, custom_split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "worker_init_fn": {
                    "value": "init_fun",
                    "type": "Name",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "activemri/experimental/cvpr19_models/data/dicom_data_loader.py": {
        "torch": {
            "from_numpy_70": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(image - mean) / (std + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "fft_utils.dicom_to_0_1_range(image)",
                            "Call"
                        ],
                        [
                            "torch.cat([image, torch.zeros_like(image)], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_79": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, torch.zeros_like(image)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_79": {
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(image - mean) / (std + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(image)",
                            "Call"
                        ],
                        [
                            "fft_utils.dicom_to_0_1_range(image)",
                            "Call"
                        ],
                        [
                            "torch.cat([image, torch.zeros_like(image)], dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "activemri/experimental/cvpr19_models/data/masking_utils.py": {
        "torch": {
            "from_numpy_131": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask.reshape(*mask_shape).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "activemri/experimental/cvpr19_models/data/raw_data_loader.py": {
        "torch": {
            "cat_47": {
                "tensors": {
                    "value": "(right, left)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tuple(range(x.dim()))",
                            "Call"
                        ],
                        [
                            "tuple(range(x.dim()))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "kspace",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.stack([kspace.real, kspace.imag], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ifft_118": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "kspace",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data['kspace']",
                            "Subscript"
                        ],
                        [
                            "data['kspace'][slice]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(np.stack([kspace.real, kspace.imag], axis=-1))",
                            "Call"
                        ],
                        [
                            "ifftshift(kspace, dim=(0, 1))",
                            "Call"
                        ],
                        [
                            "kspace / 7.072103529760345e-07",
                            "BinOp"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "normalized": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "activemri/experimental/cvpr19_models/models/evaluator.py": {
        "torch": {
            "zeros_47": {
                "variable": {
                    "value": "separate_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, width, 1, 1, width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_53": {
                "variable": {
                    "value": "masked_kspace",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "separate_mask.byte()",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "kspace",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fft_utils.fft(reconstructed_image)",
                            "Call"
                        ],
                        [
                            "kspace.unsqueeze(1).repeat(1, width, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.tensor(0.0).to(kspace.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_182": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "spectral_map",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[separate_images, mask_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_54": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "number_of_input_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2 * width + mask_embed_dim",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "number_of_filters",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_138": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_169": {
                "kernel_size": {
                    "value": "(kernel_size_height, kernel_size_width)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_174": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "number_of_filters",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_output_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "width",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_154": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "number_of_filters",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "in_channels * 2",
                            "BinOp"
                        ],
                        [
                            "in_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_163": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "activemri/experimental/cvpr19_models/models/fft_utils.py": {
        "torch": {
            "ifft_51": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "roll(x, s, d)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "fftshift(x, dim=(1, 2))",
                            "Call"
                        ],
                        [
                            "x[..., h_from:h_to, w_from:w_to]",
                            "Subscript"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "normalized": {
                    "value": "normalized",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rfft_60": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "roll(x, s, d)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "fftshift(x, dim=(1, 2))",
                            "Call"
                        ],
                        [
                            "x[..., h_from:h_to, w_from:w_to]",
                            "Subscript"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "normalized": {
                    "value": "normalized",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "fft_68": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "roll(x, s, d)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "fftshift(x, dim=(1, 2))",
                            "Call"
                        ],
                        [
                            "x[..., h_from:h_to, w_from:w_to]",
                            "Subscript"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "normalized": {
                    "value": "normalized",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mse_loss_99": {
                "variable": {
                    "value": "l2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "reconstruction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "to_magnitude(reconstruction)",
                            "Call"
                        ],
                        [
                            "center_crop(reconstruction, [320, 320])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "to_magnitude(target)",
                            "Call"
                        ],
                        [
                            "center_crop(target, [320, 320])",
                            "Call"
                        ],
                        [
                            "batch[1].to(device)",
                            "Call"
                        ],
                        [
                            "target.permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_102": {
                "variable": {
                    "value": "one_over_var",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-logvar",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_22": {
                "tensors": {
                    "value": "(right, left)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tuple(range(x.dim()))",
                            "Call"
                        ],
                        [
                            "tuple(range(x.dim()))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "where_114": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "to_magnitude(k_space).sum(2).unsqueeze(2) == 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.tensor(1.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch[0].to(device)",
                            "Call"
                        ],
                        [
                            "torch.where(to_magnitude(k_space).sum(2).unsqueeze(2) == 0.0, torch.tensor(1.0).to(device), mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_120": {
                "variable": {
                    "value": "masked_true_k_space",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask.byte()",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "k_space",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch[2].permute(0, 3, 1, 2).to(device)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.tensor(0.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_130": {
                "variable": {
                    "value": "masked_true_k_space",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask.byte()",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "k_space",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch[2].permute(0, 3, 1, 2).to(device)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ft_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fft(prev_reconstruction, shift=True)",
                            "Call"
                        ],
                        [
                            "fft(prev_reconstruction)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_136": {
                "variable": {
                    "value": "masked_true_k_space",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask.byte()",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "fft_target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fft(target)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.tensor(0.0).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_141": {
                "variable": {
                    "value": "masked_true_k_space",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask.byte()",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "fft_target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fft(target)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ft_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fft(prev_reconstruction, shift=True)",
                            "Call"
                        ],
                        [
                            "fft(prev_reconstruction)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_163": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_165": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_174": {
                "variable": {
                    "value": "target_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_like_178": {
                "variable": {
                    "value": "target_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "where_215": {
                "variable": {
                    "value": "masked_input",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "(1 - mask_).byte()",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(0.0).to(input.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_218": {
                "variable": {
                    "value": "masked_target",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "(1 - mask_).byte()",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "target_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones_like(input)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(input)",
                            "Call"
                        ],
                        [
                            "self.get_target_tensor(input, target_is_real, degree, mask, pred_and_gt)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.tensor(0.0).to(input.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_193": {
                "variable": {
                    "value": "energy",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-ks_row_mse * self.gamma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_198": {
                "variable": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mask[i, 0, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_216": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_190": {
                "input": {
                    "value": "ks_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fft(pred, normalized=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "ks_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fft(gt, normalized=True)",
                            "Call"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_190": {
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "activemri/experimental/cvpr19_models/models/reconstruction.py": {
        "torch": {
            "ModuleList_170": {
                "variable": {
                    "value": "self.encoders_all_cascade_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_171": {
                "variable": {
                    "value": "self.residual_bottlenecks_all_cascade_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_172": {
                "variable": {
                    "value": "self.decoders_all_cascade_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "*args": {
                    "value": "*conv_block",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_271": {
                "variable": {
                    "value": "self.mask_embedding_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(img_width, mask_embed_dim, 1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "encoder_input",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zero_filled_input, mask_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_86": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_342": {
                "variable": {
                    "value": "encoder_input",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[reconstructed_image, mask_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_75": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_89": {
                "p": {
                    "value": "dropout_probability",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_93": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_179": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_180": {
                "in_channels": {
                    "value": "number_of_encoder_input_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "number_of_encoder_input_channels + mask_embed_dim",
                            "BinOp"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "number_of_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_189": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_208": {
                "*args": {
                    "value": "*encoder",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_225": {
                "*args": {
                    "value": "*residual_bottleneck",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_259": {
                "in_channels": {
                    "value": "number_of_filters // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "number_of_decoder_output_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_268": {
                "*args": {
                    "value": "*decoder",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_272": {
                "in_channels": {
                    "value": "img_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mask_embed_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_281": {
                "condition": {
                    "value": "(1 - mask).byte()",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "ft_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fft_utils.fft(x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.tensor(0.0).to(ft_x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_77": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_95": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_195": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_196": {
                "in_channels": {
                    "value": "number_of_filters * mult // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "number_of_filters * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_205": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_281": {
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_234": {
                "in_channels": {
                    "value": "number_of_filters * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(number_of_filters * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_243": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_246": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_246": {
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_247": {
                "in_channels": {
                    "value": "number_of_filters * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(number_of_filters * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_256": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "activemri/experimental/cvpr19_models/options/base_options.py": {
        "torch": {
            "set_device_115": {
                "device": {
                    "value": "opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "activemri/experimental/cvpr19_models/trainer.py": {
        "torch": {
            "load_231": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "self.options.weights_checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_259": {
                "variable": {
                    "value": "loss_D",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_305": {
                "variable": {
                    "value": "loss_G",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_66": {
                "obj": {
                    "value": "trainer.create_checkpoint()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "tmp_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tempfile.NamedTemporaryFile(delete=False, dir=trainer.options.checkpoints_dir)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_382": {
                "variable": {
                    "value": "self.reconstructor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.reconstructor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_403": {
                "variable": {
                    "value": "self.evaluator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.evaluator",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_407": {
                "variable": {
                    "value": "self.optimizers[D]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "self.evaluator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.options.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.options.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_509": {
                "variable": {
                    "value": "difference",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "ground_truth - reconstructed_image",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_575": {
                "type": {
                    "value": "'cuda:{}'.format(options_.gpu_ids[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_577": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_211": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.options.checkpoints_dir, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_386": {
                "params": {
                    "value": "self.reconstructor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.options.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(self.options.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "activemri/experimental/cvpr19_models/util/common.py": {
        "torch": {
            "load_20": {
                "f": {
                    "value": "checkpoint_path",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "activemri/models/__init__.py": {
        "torch": {}
    },
    "activemri/models/cvpr19_reconstructor.py": {
        "torch": {}
    },
    "activemri/models/fastmri_unet_wrapper.py": {
        "torch": {}
    },
    "examples/run_evaluation.py": {
        "torch": {
            "load_113": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.dqn_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_102": {
                "type": {
                    "value": "args.baseline_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/train_ddqn.py": {
        "torch": {
            "device_64": {
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/core/mocks.py": {
        "torch": {
            "zeros_74": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(kspace_shapes)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args['size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, args['size'])",
                            "Call"
                        ],
                        [
                            "mask.view(mask.shape[0], 1, -1, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_90": {
                "tensors": {
                    "value": "new_kspace",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_89": {
                "ndarray": {
                    "value": "array",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kspace",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "tests/core/test_baselines.py": {
        "torch": {
            "zeros_16": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/core/test_envs.py": {
        "torch": {
            "device_73": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/core/test_masks.py": {
        "torch": {
            "tensor_14": {
                "variable": {
                    "value": "mask_1",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "variable": {
                    "value": "mask_2",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_16": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask_1, mask_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "variable": {
                    "value": "expected",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0, 1, 0], [1, 0, 1, 0], [1, 0, 1, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_47": {
                "input": {
                    "value": "the_masks[j, :w // 2] == torch.flip(the_masks[j, w // 2:w], dims=[0])",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "flip_49": {
                "input": {
                    "value": "the_masks[j, w // 2:w]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}