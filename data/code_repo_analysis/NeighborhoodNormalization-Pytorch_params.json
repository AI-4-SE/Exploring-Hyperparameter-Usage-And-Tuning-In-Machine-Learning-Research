{
    "datasets/nasal_dataset.py": {
        "sklearn": {
            "BallTree_35": {
                "variable": {
                    "value": "ball_tree",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.asarray(self._mean_mesh_model.vertices)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_135": {
                "variable": {
                    "value": "xyz0",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xyz0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(mesh_model_0.vertices)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(xyz0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_136": {
                "variable": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(mesh_model_1.vertices)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(xyz1)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_155": {
                "variable": {
                    "value": "coords0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unique_xyz0 / voxel_size_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_156": {
                "variable": {
                    "value": "coords1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unique_xyz1 / voxel_size_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_161": {
                "variable": {
                    "value": "feats0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(unique_xyz0.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_162": {
                "variable": {
                    "value": "feats1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(unique_xyz1.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_274": {
                "variable": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate([np.asarray(valid_indexes_0).reshape((-1, 1)), np.asarray(valid_indexes_1).reshape((-1, 1))], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_309": {
                "variable": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate([np.asarray(valid_indexes_0).reshape((-1, 1)), np.asarray(valid_indexes_1).reshape((-1, 1))], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_178": {
                "tensors": {
                    "value": "[matches[:, 1:2], matches[:, 0:1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/evaluation_nasal.py": {
        "sklearn": {
            "BallTree_53": {
                "variable": {
                    "value": "ball_tree",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.asarray(self._mean_mesh_model.vertices)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_420": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.trained_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_404": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_471": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {
            "BallTree_132": {
                "variable": {
                    "value": "ball_tree_0",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "coords_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_0.pos.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "sample_0.pos.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "BallTree_136": {
                "variable": {
                    "value": "ball_tree_1",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "coords_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_1.pos.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "load_27": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(trained_model_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_707": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cos_708": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_linear_system(A, b)",
                            "Call"
                        ],
                        [
                            "np.transpose(coords)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_709": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_linear_system(A, b)",
                            "Call"
                        ],
                        [
                            "np.transpose(coords)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_719": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cos_720": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_linear_system(A, b)",
                            "Call"
                        ],
                        [
                            "np.transpose(coords)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_721": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_linear_system(A, b)",
                            "Call"
                        ],
                        [
                            "np.transpose(coords)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_731": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cos_732": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_linear_system(A, b)",
                            "Call"
                        ],
                        [
                            "np.transpose(coords)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_733": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_linear_system(A, b)",
                            "Call"
                        ],
                        [
                            "np.transpose(coords)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_743": {
                "variable": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_758": {
                "variable": {
                    "value": "A0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(npts0, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_759": {
                "variable": {
                    "value": "A1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(npts0, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_760": {
                "variable": {
                    "value": "A2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(npts0, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "inverse_781": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A.t().mm(A)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_791": {
                "variable": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[F0, F1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_346": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[F0, F1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_431": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tree.query(x=mesh_vertices, k=1)",
                            "Call"
                        ],
                        [
                            "np.sqrt(np.sum((xyz0_est - xyz0_gth) ** 2, axis=1))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "min_dist.detach().unsqueeze(1).cpu()",
                            "Call"
                        ],
                        [
                            "torch.cat(dists)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_432": {
                "variable": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "dist.min(dim=1)",
                            "Call"
                        ],
                        [
                            "inds.cpu()",
                            "Call"
                        ],
                        [
                            "torch.cat(inds)",
                            "Call"
                        ],
                        [
                            "tree.query(F0, k=1)",
                            "Call"
                        ],
                        [
                            "corr.max(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_459": {
                "variable": {
                    "value": "D2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(A - B).pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_795": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pts0.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_909": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(str(trained_model_path))",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch, 'step': step, 'model': model.state_dict(), 'config': config}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "str(path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_187": {
                "tensors": {
                    "value": "[F0, F1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_281": {
                "data": {
                    "value": "coords[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_321": {
                "ndarray": {
                    "value": "coords_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_322": {
                "ndarray": {
                    "value": "edge_output_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_324": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "solve_linear_system(A, b)",
                            "Call"
                        ],
                        [
                            "np.transpose(coords)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_460": {
                "input": {
                    "value": "D2 + 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_466": {
                "variable": {
                    "value": "D2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(A - B).pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_752": {
                "input": {
                    "value": "pts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts @ R.T + T",
                            "BinOp"
                        ],
                        [
                            "torch.t(R @ torch.t(pts)) + T",
                            "BinOp"
                        ],
                        [
                            "pts",
                            "Method Argument"
                        ],
                        [
                            "pts",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_772": {
                "tensors": {
                    "value": "(A0, A1, A2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_773": {
                "tensors": {
                    "value": "(pts1[:, 0] - pts0[:, 0], pts1[:, 1] - pts0[:, 1], pts1[:, 2] - pts0[:, 2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_773": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_968": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_1090": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_271": {
                "ndarray": {
                    "value": "input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_287": {
                "data": {
                    "value": "coords[level + 1].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_786": {
                "input": {
                    "value": "pts0 - pts1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_786": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_926": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1018": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "datasets/dataset_utils.py": {
        "torch": {
            "cat_143": {
                "variable": {
                    "value": "xyz_batch0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xyz_batch0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(xyz_batch0, 0).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(xyz_batch0, 0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "xyz_batch1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xyz_batch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(xyz_batch1, 0).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(xyz_batch1, 0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "trans_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trans_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trans_batch, 0).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trans_batch, 0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "matching_inds_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "matching_inds_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(matching_inds_batch, 0).int()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "xyz_batch0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xyz_batch0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(xyz_batch0, 0).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(xyz_batch0, 0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "xyz_batch1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xyz_batch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(xyz_batch1, 0).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(xyz_batch1, 0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "trans_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trans_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trans_batch, 0).float()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(trans_batch, 0).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "matching_inds_batch1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "matching_inds_batch1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(matching_inds_batch1, 0).int()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "data": {
                    "value": "scale_ratios[batch_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_132": {
                "ndarray": {
                    "value": "np.array(matching_inds[batch_id]) + curr_start_inds",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_191": {
                "data": {
                    "value": "scale_ratios[batch_id]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_194": {
                "ndarray": {
                    "value": "np.array(matching_inds[batch_id])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_196": {
                "ndarray": {
                    "value": "np.array(matching_inds[batch_id]) + curr_start_inds",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_117": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_179": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/kitti_dataset.py": {
        "torch": {
            "from_numpy_407": {
                "variable": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate([np.asarray(valid_indexes_0).reshape((-1, 1)), np.asarray(valid_indexes_1).reshape((-1, 1))], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_302": {
                "variable": {
                    "value": "xyz0_th",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xyz0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyzr0[:, :3]",
                            "Subscript"
                        ],
                        [
                            "self.apply_transform(xyz0, T0)",
                            "Call"
                        ],
                        [
                            "scale * xyz0",
                            "BinOp"
                        ],
                        [
                            "scale0 * xyz0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_303": {
                "variable": {
                    "value": "xyz1_th",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyzr1[:, :3]",
                            "Subscript"
                        ],
                        [
                            "self.apply_transform(xyz1, T1)",
                            "Call"
                        ],
                        [
                            "scale * xyz1",
                            "BinOp"
                        ],
                        [
                            "scale1 * xyz1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_345": {
                "variable": {
                    "value": "feats0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feats_train0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_346": {
                "variable": {
                    "value": "feats1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feats_train1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_348": {
                "variable": {
                    "value": "coords0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unique_xyz0_th / self.voxel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_349": {
                "variable": {
                    "value": "coords1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unique_xyz1_th / self.voxel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_358": {
                "variable": {
                    "value": "feats0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "xyz0_th.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_359": {
                "variable": {
                    "value": "feats1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "xyz1_th.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_328": {
                "variable": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_342": {
                "*size": {
                    "value": "(npts0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_343": {
                "*size": {
                    "value": "(npts1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/match3d_dataset.py": {
        "torch": {
            "from_numpy_195": {
                "variable": {
                    "value": "xyz0",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xyz0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(mesh_model_0.vertices)",
                            "Call"
                        ],
                        [
                            "apply_transform(xyz0, T0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(xyz0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_196": {
                "variable": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xyz1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray(mesh_model_1.vertices)",
                            "Call"
                        ],
                        [
                            "apply_transform(xyz1, T1)",
                            "Call"
                        ],
                        [
                            "self.crop_points(xyz1, feats=None, axis_aligned_ratio_range=self._crop_ratio_range, min_remained_portion=self._min_crop_remained_portion)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(xyz1)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_211": {
                "variable": {
                    "value": "coords0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unique_xyz0 / voxel_size_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_212": {
                "variable": {
                    "value": "coords1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unique_xyz1 / voxel_size_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_217": {
                "variable": {
                    "value": "feats0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(unique_xyz0.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_218": {
                "variable": {
                    "value": "feats1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(unique_xyz1.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_315": {
                "variable": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate([np.asarray(valid_indexes_0).reshape((-1, 1)), np.asarray(valid_indexes_1).reshape((-1, 1))], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_353": {
                "variable": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate([np.asarray(valid_indexes_0).reshape((-1, 1)), np.asarray(valid_indexes_1).reshape((-1, 1))], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/eval_utils.py": {
        "torch": {
            "tensor_109": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.hstack(feats)",
                            "Call"
                        ],
                        [
                            "feats[selected_indexes]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(feats, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_97": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/evaluation_3dmatch.py": {
        "torch": {
            "load_315": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.trained_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_299": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_384": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/evaluation_kitti_mismatch.py": {
        "torch": {
            "DataLoader_63": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.KITTINMPairDataset(phase='test', use_rotation=args.use_rotation, use_scale=args.use_scale, manual_seed=False, config=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "datasets.separate_collate_pair_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda _: np.random.seed(int(torch.initial_seed()) % (2 ** 32 - 1))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_85": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.trained_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_54": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_133": {
                "variable": {
                    "value": "feats0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sel0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_134": {
                "variable": {
                    "value": "feats1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sel1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_136": {
                "variable": {
                    "value": "coords0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz0[sel0] / voxel_size_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "coords0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(len(sel0), 1).int(), coords0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_138": {
                "variable": {
                    "value": "coords1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz1[sel1] / voxel_size_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "coords1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(len(sel1), 1).int(), coords1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_137": {
                "*size": {
                    "value": "len(sel0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "*size": {
                    "value": "len(sel1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "initial_seed_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "evaluation/evaluation_kitti_standard.py": {
        "torch": {
            "DataLoader_62": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.KITTINMPairDataset(phase='test', use_rotation=args.use_rotation, use_scale=args.use_scale, manual_seed=False, config=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "datasets.separate_collate_pair_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_83": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.trained_model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_52": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "T_ransac",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ransac_result.transformation.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "losses/rr_loss.py": {
        "torch": {
            "tensor_8": {
                "variable": {
                    "value": "self._standard_sample_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "standard_sample_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "standard_sample_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_22": {
                "variable": {
                    "value": "feature_responses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._scale * feature_responses",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_26": {
                "variable": {
                    "value": "sampled_feature_responses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature_responses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * torch.sum((sampled_source_F.reshape(-1, 1, feature_length) - target_F.reshape(1, -1, feature_length)) ** 2, dim=2)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(self._scale * feature_responses)",
                            "Call"
                        ],
                        [
                            "feature_responses / (torch.sum(feature_responses, dim=(1,), keepdim=True) + self._epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos_pairs[:, 1].long().reshape(sampling_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_18": {
                "input": {
                    "value": "(sampled_source_F.reshape(-1, 1, feature_length) - target_F.reshape(1, -1, feature_length)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_29": {
                "input": {
                    "value": "sampled_feature_responses + self._epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_31": {
                "input": {
                    "value": "rr_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.log(sampled_feature_responses + self._epsilon) - torch.log(target_point_num / self._standard_sample_size)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(rr_loss) / sampling_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_23": {
                "input": {
                    "value": "feature_responses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * torch.sum((sampled_source_F.reshape(-1, 1, feature_length) - target_F.reshape(1, -1, feature_length)) ** 2, dim=2)",
                            "BinOp"
                        ],
                        [
                            "torch.exp(self._scale * feature_responses)",
                            "Call"
                        ],
                        [
                            "feature_responses / (torch.sum(feature_responses, dim=(1,), keepdim=True) + self._epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_33": {
                "input": {
                    "value": "feature_responses[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/mink_convolutions.py": {
        "torch": {
            "flip_262": {
                "variable": {
                    "value": "index_array",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(self.dimension)",
                    "type": "Call",
                    "possible_values": []
                },
                "dims": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_263": {
                "variable": {
                    "value": "index_array",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.kernel_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "exponent": {
                    "value": "index_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip(torch.arange(self.dimension), dims=(0,))",
                            "Call"
                        ],
                        [
                            "torch.pow(self.kernel_size[0], index_array)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_280": {
                "variable": {
                    "value": "kernel_1d_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "index_array.reshape(1, -1) * kernel_coord",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_262": {
                "start": {
                    "value": "self.dimension",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "prod_40": {
                "input": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_to_int_tensor(stride, dimension)",
                            "Call"
                        ],
                        [
                            "convert_to_int_tensor(stride, dimension)",
                            "Call"
                        ],
                        [
                            "convert_to_int_tensor(stride, dimension)",
                            "Call"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "prod_119": {
                "input": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_to_int_tensor(stride, dimension)",
                            "Call"
                        ],
                        [
                            "convert_to_int_tensor(stride, dimension)",
                            "Call"
                        ],
                        [
                            "convert_to_int_tensor(stride, dimension)",
                            "Call"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/model_utils.py": {
        "torch": {
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/networks.py": {
        "torch": {
            "ModuleList_89": {
                "variable": {
                    "value": "self._pre_conv_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_72": {
                "data": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_322": {
                "input": {
                    "value": "out.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/normalizations.py": {
        "torch": {
            "Parameter_29": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.in_channels, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.in_channels, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(epsilon).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(epsilon).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(epsilon).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(epsilon).cuda()",
                            "Call"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_44": {
                "variable": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_74": {
                "variable": {
                    "value": "biased_stds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(square_means.F - means.F * means.F) + self._buffers['epsilon']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.in_channels, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_125": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.in_channels, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(epsilon).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(epsilon).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(epsilon).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(epsilon).cuda()",
                            "Call"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_139": {
                "variable": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_169": {
                "variable": {
                    "value": "biased_stds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.relu(square_means.F - means.F * means.F) + self._buffers['epsilon']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_219": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.in_channels, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_220": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.in_channels, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_231": {
                "variable": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_245": {
                "variable": {
                    "value": "self.mean_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5 * torch.ones(1, 1).float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_246": {
                "variable": {
                    "value": "self.std_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5 * torch.ones(1, 1).float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_255": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(epsilon).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(epsilon).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(epsilon).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(epsilon).cuda()",
                            "Call"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_273": {
                "variable": {
                    "value": "stds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voxels_count / (voxels_count - 1) * torch.relu(square_means.F - means.F * means.F) + self._buffers['epsilon']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_350": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.in_channels, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_351": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.in_channels, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_362": {
                "variable": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_377": {
                "variable": {
                    "value": "self.mean_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5 * torch.ones(1, 1).float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_378": {
                "variable": {
                    "value": "self.std_att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.5 * torch.ones(1, 1).float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_386": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(epsilon).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(epsilon).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(epsilon).cuda()",
                            "Call"
                        ],
                        [
                            "torch.tensor(epsilon).cuda()",
                            "Call"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_404": {
                "variable": {
                    "value": "stds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "voxels_count / (voxels_count - 1) * torch.relu(square_means.F - means.F * means.F) + self._buffers['epsilon']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_52": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.out_channels, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_147": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.out_channels, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_239": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.out_channels, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_279": {
                "variable": {
                    "value": "bn_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_279": {
                "variable": {
                    "value": "bn_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "var_280": {
                "variable": {
                    "value": "bn_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_280": {
                "variable": {
                    "value": "bn_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_281": {
                "variable": {
                    "value": "bn_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_var + self._buffers['epsilon']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_281": {
                "variable": {
                    "value": "bn_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_290": {
                "variable": {
                    "value": "bn_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_var + self._buffers['epsilon']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_290": {
                "variable": {
                    "value": "bn_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_370": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.out_channels, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_410": {
                "variable": {
                    "value": "bn_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_410": {
                "variable": {
                    "value": "bn_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "var_411": {
                "variable": {
                    "value": "bn_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.F",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_411": {
                "variable": {
                    "value": "bn_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_412": {
                "variable": {
                    "value": "bn_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_var + self._buffers['epsilon']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_412": {
                "variable": {
                    "value": "bn_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_425": {
                "variable": {
                    "value": "bn_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bn_var + self._buffers['epsilon']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_425": {
                "variable": {
                    "value": "bn_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_30": {
                "*size": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "*size": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_125": {
                "*size": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_219": {
                "*size": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_220": {
                "*size": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_250": {
                "*size": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_251": {
                "*size": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_253": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_350": {
                "*size": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_351": {
                "*size": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_382": {
                "*size": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_383": {
                "*size": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_385": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "any_419": {
                "input": {
                    "value": "torch.isinf(self._buffers['moving_var'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_422": {
                "variable": {
                    "value": "self._buffers[moving_var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.isinf(self._buffers['moving_var'])",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self.one",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self._buffers['moving_var']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_62": {
                "input": {
                    "value": "x.F",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_74": {
                "input": {
                    "value": "square_means.F - means.F * means.F",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_77": {
                "input": {
                    "value": "voxels_count / (voxels_count - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_157": {
                "input": {
                    "value": "x.F",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_169": {
                "input": {
                    "value": "square_means.F - means.F * means.F",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_172": {
                "input": {
                    "value": "voxels_count / (voxels_count - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_239": {
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_245": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_246": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_260": {
                "input": {
                    "value": "x.F",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_370": {
                "*size": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_377": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_378": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_391": {
                "input": {
                    "value": "x.F",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_413": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_419": {
                "input": {
                    "value": "self._buffers['moving_var']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_274": {
                "input": {
                    "value": "square_means.F - means.F * means.F",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_405": {
                "input": {
                    "value": "square_means.F - means.F * means.F",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isinf_422": {
                "input": {
                    "value": "self._buffers['moving_var']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "models/optimizers.py": {
        "torch": {}
    },
    "train_3dmatch.py": {
        "torch": {
            "DataLoader_140": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Match3DDataset(phase='train', sampling_size=args.train_sampling_size, num_iter=args.train_num_iter, subdivide_factor=args.subdivide_factor, default_edge_length=args.default_edge_length, edge_length_range=args.edge_length_range, mesh_model_path_list=train_mesh_model_path_list, max_select_trial=args.max_sampling_trial, oversampling_factor=args.oversampling_factor, allow_repeat_sampling=args.allow_repeat_sampling, overlap_ratio_threshold=args.overlap_ratio_threshold, use_rotation=args.use_rotation, rotate_range=args.rotate_range, use_remesh=args.use_remesh, use_scale=args.use_scale, scale_range=args.scale_range, use_crop=args.use_crop, crop_ratio_range=args.crop_ratio_range, min_crop_remained_portion=None if args.crop_ratio_range is None else args.crop_ratio_range[0])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "datasets.separate_collate_pair_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda _: np.random.seed(int(torch.initial_seed()) % (2 ** 32 - 1))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_150": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Match3DDataset(phase='eval', sampling_size=args.val_sampling_size, num_iter=args.val_num_iter, subdivide_factor=args.subdivide_factor, default_edge_length=args.default_edge_length, edge_length_range=args.edge_length_range, mesh_model_path_list=val_mesh_model_path_list, max_select_trial=args.max_sampling_trial, oversampling_factor=args.oversampling_factor, allow_repeat_sampling=True, overlap_ratio_threshold=args.overlap_ratio_threshold, use_rotation=args.use_rotation, rotate_range=args.rotate_range, use_remesh=args.use_remesh, use_scale=args.use_scale, scale_range=args.scale_range, use_crop=args.use_crop, crop_ratio_range=args.crop_ratio_range, min_crop_remained_portion=None if args.crop_ratio_range is None else args.crop_ratio_range[0])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "datasets.separate_collate_pair_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda _: np.random.seed(int(torch.initial_seed()) % (2 ** 32 - 1))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "SGD_235": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_49": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_185": {
                "variable": {
                    "value": "pre_trained_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(args.trained_model_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_217": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(args.trained_model_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_255": {
                "seed": {
                    "value": "1 + cur_epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_362": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_369": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_385": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_287": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_343": {
                "variable": {
                    "value": "mean_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(mean_att_list, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_344": {
                "variable": {
                    "value": "std_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(std_att_list, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_375": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_319": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_343": {
                "tensors": {
                    "value": "mean_att_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_344": {
                "tensors": {
                    "value": "std_att_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "initial_seed_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initial_seed_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_297": {
                "tensors": {
                    "value": "[batch_pos_pairs[:, 1:2], batch_pos_pairs[:, 0:1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_kitti.py": {
        "torch": {
            "DataLoader_102": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KITTINMPairDataset(phase='train', use_rotation=args.use_rotation, use_scale=args.use_scale, manual_seed=False, config=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "datasets.separate_collate_pair_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda _: np.random.seed(int(torch.initial_seed()) % (2 ** 32 - 1))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_112": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "KITTINMPairDataset(phase='val', use_rotation=args.use_rotation, use_scale=args.use_scale, manual_seed=False, config=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "datasets.separate_collate_pair_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda _: np.random.seed(int(torch.initial_seed()) % (2 ** 32 - 1))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "SGD_198": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_49": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_148": {
                "variable": {
                    "value": "pre_trained_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(args.trained_model_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_180": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(args.trained_model_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_218": {
                "seed": {
                    "value": "1 + cur_epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_333": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_251": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_307": {
                "variable": {
                    "value": "mean_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(mean_att_list, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_308": {
                "variable": {
                    "value": "std_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(std_att_list, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_322": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_307": {
                "tensors": {
                    "value": "mean_att_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_308": {
                "tensors": {
                    "value": "std_att_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "initial_seed_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initial_seed_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_261": {
                "tensors": {
                    "value": "[batch_pos_pairs[:, 1:2], batch_pos_pairs[:, 0:1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_nasal.py": {
        "torch": {
            "DataLoader_141": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NasalDataset(mean_mesh_model_path=Path(args.mean_mesh_model_path), partial_mean_mesh_model_path=Path(args.partial_mean_mesh_model_path), atlas_mode_weights_path=Path(args.atlas_mode_weights_path), atlas_mode_weights_std_range=args.train_atlas_mode_weights_range, atlas_mode_range=args.atlas_mode_range, use_rotation=args.use_rotation, use_remesh=args.use_remesh, sampling_size=args.train_sampling_size, rotate_range=args.rotate_range, num_iter=args.train_num_iter, subdivide_factor=args.subdivide_factor, use_crop=args.use_crop, crop_ratio_range=args.crop_ratio_range, min_crop_remained_portion=args.crop_ratio_range[0], default_edge_length=args.default_edge_length, edge_length_range=args.edge_length_range, max_select_trial=args.max_sampling_trial, phase='train', oversampling_factor=args.oversampling_factor, batch_size=args.train_batch_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "datasets.separate_collate_pair_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda _: np.random.seed(int(torch.initial_seed()) % (2 ** 32 - 1))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_151": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NasalDataset(mean_mesh_model_path=Path(args.mean_mesh_model_path), partial_mean_mesh_model_path=Path(args.partial_mean_mesh_model_path), atlas_mode_weights_path=Path(args.atlas_mode_weights_path), atlas_mode_weights_std_range=args.val_atlas_mode_weights_range, atlas_mode_range=args.atlas_mode_range, use_rotation=args.use_rotation, use_remesh=args.use_remesh, sampling_size=args.val_sampling_size, rotate_range=args.rotate_range, num_iter=args.val_num_iter, subdivide_factor=args.subdivide_factor, use_crop=args.use_crop, crop_ratio_range=args.crop_ratio_range, min_crop_remained_portion=args.crop_ratio_range[0], default_edge_length=args.default_edge_length, edge_length_range=args.edge_length_range, max_select_trial=args.max_sampling_trial, phase='val', oversampling_factor=args.oversampling_factor, batch_size=1)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "datasets.separate_collate_pair_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "lambda _: np.random.seed(int(torch.initial_seed()) % (2 ** 32 - 1))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "SGD_236": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_range[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_49": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_186": {
                "variable": {
                    "value": "pre_trained_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(args.trained_model_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_218": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(args.trained_model_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_256": {
                "seed": {
                    "value": "1 + cur_epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_371": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_289": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_345": {
                "variable": {
                    "value": "mean_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(mean_att_list, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_346": {
                "variable": {
                    "value": "std_att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(std_att_list, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_360": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_345": {
                "tensors": {
                    "value": "mean_att_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_346": {
                "tensors": {
                    "value": "std_att_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "initial_seed_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initial_seed_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_299": {
                "tensors": {
                    "value": "[batch_pos_pairs[:, 1:2], batch_pos_pairs[:, 0:1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "validation/validation_3dmatch.py": {
        "torch": {
            "empty_cache_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_44": {
                "tensors": {
                    "value": "[loss_gt_pairs[:, 1].reshape(-1, 1), loss_gt_pairs[:, 0].reshape(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_47": {
                "input": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_func(F1, F0, torch.cat([loss_gt_pairs[:, 1].reshape(-1, 1), loss_gt_pairs[:, 0].reshape(-1, 1)], dim=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "ndarray": {
                    "value": "np.asarray(color_mesh_0.vertices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_98": {
                "ndarray": {
                    "value": "np.asarray(color_mesh_0.vertex_colors) * 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_100": {
                "ndarray": {
                    "value": "np.asarray(color_mesh_0.triangles)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_103": {
                "ndarray": {
                    "value": "np.asarray(color_mesh_1.vertices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "ndarray": {
                    "value": "np.asarray(color_mesh_1.vertex_colors) * 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_106": {
                "ndarray": {
                    "value": "np.asarray(color_mesh_1.triangles)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "validation/validation_kitti.py": {
        "torch": {
            "empty_cache_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_41": {
                "tensors": {
                    "value": "[loss_gt_pairs[:, 1].reshape(-1, 1), loss_gt_pairs[:, 0].reshape(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_45": {
                "input": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_func(F1, F0, torch.cat([loss_gt_pairs[:, 1].reshape(-1, 1), loss_gt_pairs[:, 0].reshape(-1, 1)], dim=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_80": {
                "ndarray": {
                    "value": "np.asarray(transformed_points_0.points)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "ndarray": {
                    "value": "np.asarray(transformed_points_0.colors) * 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "ndarray": {
                    "value": "np.asarray(points_1.points)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_85": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_86": {
                "ndarray": {
                    "value": "np.asarray(points_1.colors) * 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "validation/validation_nasal.py": {
        "torch": {
            "empty_cache_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_46": {
                "tensors": {
                    "value": "[loss_gt_pairs[:, 1].reshape(-1, 1), loss_gt_pairs[:, 0].reshape(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_50": {
                "input": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_func(F1, F0, torch.cat([loss_gt_pairs[:, 1].reshape(-1, 1), loss_gt_pairs[:, 0].reshape(-1, 1)], dim=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "ndarray": {
                    "value": "np.asarray(color_mesh_0.vertices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "ndarray": {
                    "value": "np.asarray(color_mesh_0.vertex_colors) * 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_101": {
                "ndarray": {
                    "value": "np.asarray(color_mesh_1.vertices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "ndarray": {
                    "value": "np.asarray(color_mesh_1.vertex_colors) * 255",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}