{
    "texturegen.py": {
        "tensorflow": {
            "read_file_28": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "decode_jpeg_29": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.io.read_file(path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(img, max_size, max_size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(img, [size, size])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(img, tf.float32) / 255",
                            "BinOp"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "resize_with_crop_or_pad_33": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.io.read_file(path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(img, max_size, max_size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(img, [size, size])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(img, tf.float32) / 255",
                            "BinOp"
                        ]
                    ]
                },
                "target_height": {
                    "value": "max_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "img.shape[0]",
                            "Subscript"
                        ],
                        [
                            "img.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "target_width": {
                    "value": "max_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "img.shape[0]",
                            "Subscript"
                        ],
                        [
                            "img.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "resize_34": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.io.read_file(path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(img, max_size, max_size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(img, [size, size])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(img, tf.float32) / 255",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_model_73": {
                "variable": {
                    "value": "vgg",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "vgg_customized.h5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Model_78": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "[vgg.input]",
                    "type": "List",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "outputs",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[vgg.get_layer(name).output for name in layer_names]",
                            "ListComp"
                        ],
                        [
                            "extractor(image_tf)",
                            "Call"
                        ],
                        [
                            "self.vgg(inputs)",
                            "Call"
                        ],
                        [
                            "[self.slicing_losses[i](output) for (i, output) in enumerate(outputs)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "constant_106": {
                "variable": {
                    "value": "image_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.reshape(image, (1, SIZE, SIZE, 3))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_46": {
                "variable": {
                    "value": "self.flatten_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normal_51": {
                "variable": {
                    "value": "self.directions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.num_slices, self.dim_slices)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "K.sqrt(K.sum(K.square(self.directions), axis=-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.num_slices, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "divide_54": {
                "variable": {
                    "value": "self.directions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.directions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(K.sqrt(K.sum(K.square(self.directions), axis=-1)), (self.num_slices, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(tf.shape(input)[0], -1, tf.shape(input)[-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sort_66": {
                "variable": {
                    "value": "sliced",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "sliced",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.directions @ tf.transpose(tensor, perm=[0, 2, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.sort(sliced)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_117": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.reduce_mean((output - targets[i]) ** 2) for (i, output) in enumerate(outputs)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "convert_image_dtype_35": {
                "image": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.io.read_file(path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(img, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_crop_or_pad(img, max_size, max_size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize(img, [size, size])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(img, tf.float32) / 255",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_53": {
                "x": {
                    "value": "K.sum(K.square(self.directions), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_64": {
                "a": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(input, (tf.shape(input)[0], -1, tf.shape(input)[-1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_115": {
                "input_tensor": {
                    "value": "(output - targets[i]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_131": {
                "input_tensor": {
                    "value": "texture",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normal_132": {
                "shape": {
                    "value": "(1, SIZE, SIZE, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_53": {
                "a": {
                    "value": "K.square(self.directions)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_53": {
                "x": {
                    "value": "self.directions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_62": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}