{
    "src/Plugins/Plugin_planeDetection/spd_pytorch/models/utils.py": {
        "sklearn": {
            "accuracy_score_93": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gts",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "f1_score_100": {
                "variable": {
                    "value": "f1_micro",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gts",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_score_101": {
                "variable": {
                    "value": "precision_micro",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gts",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "recall_score_102": {
                "variable": {
                    "value": "recall_micro",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gts",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "f1_score_103": {
                "variable": {
                    "value": "f1_macro",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gts",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_score_104": {
                "variable": {
                    "value": "precision_macro",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gts",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "recall_score_105": {
                "variable": {
                    "value": "recall_macro",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gts",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "f1_score_108": {
                "variable": {
                    "value": "f1s",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gts",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_score_109": {
                "variable": {
                    "value": "precisions",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gts",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "recall_score_110": {
                "variable": {
                    "value": "recalls",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gts",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "confusion_matrix_112": {
                "variable": {
                    "value": "confusion",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gts",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "accuracy_score_97": {
                "y_true": {
                    "value": "gts[gts == label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds[gts == label]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SGD_15": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "option.lr_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "option.l2_reg_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_22": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "option.lr_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "option.l2_reg_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_35": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/Plugins/Plugin_planeDetection/spd_pytorch/spd_utils/metrics.py": {
        "sklearn": {
            "precision_score_86": {
                "variable": {
                    "value": "precision[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "img_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(l_gt == class_id, dtype=np.float32).flatten()",
                            "Call"
                        ],
                        [
                            "np.array(label_gt == class_id, dtype=np.float32).flatten()",
                            "Call"
                        ],
                        [
                            "np.array(label_gt, dtype=np.float32).flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "img_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(l_pred == class_id, dtype=np.float32).flatten()",
                            "Call"
                        ],
                        [
                            "np.array(label_pred == class_id, dtype=np.float32).flatten()",
                            "Call"
                        ],
                        [
                            "np.array(label_pred, dtype=np.float32).flatten()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "labels": {
                    "value": "range(n_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "recall_score_87": {
                "variable": {
                    "value": "recall[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "img_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(l_gt == class_id, dtype=np.float32).flatten()",
                            "Call"
                        ],
                        [
                            "np.array(label_gt == class_id, dtype=np.float32).flatten()",
                            "Call"
                        ],
                        [
                            "np.array(label_gt, dtype=np.float32).flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "img_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(l_pred == class_id, dtype=np.float32).flatten()",
                            "Call"
                        ],
                        [
                            "np.array(label_pred == class_id, dtype=np.float32).flatten()",
                            "Call"
                        ],
                        [
                            "np.array(label_pred, dtype=np.float32).flatten()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "labels": {
                    "value": "range(n_class)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    ".github/print_system.py": {
        "torch": {}
    },
    "src/Plugins/Plugin_planeDetection/spd_pytorch/dataio/loader/test_dataset.py": {
        "torch": {}
    },
    "src/Plugins/Plugin_planeDetection/spd_pytorch/dataio/loader/us_dataset.py": {
        "torch": {}
    },
    "src/Plugins/Plugin_planeDetection/spd_pytorch/dataio/transformation/myImageTransformations.py": {
        "torch": {
            "from_numpy_22": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transform([image_in, image_target])",
                            "Call"
                        ],
                        [
                            "x.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "np.meshgrid(np.arange(shape[0]), np.arange(shape[1]), indexing='ij')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/Plugins/Plugin_planeDetection/spd_pytorch/models/base_model.py": {
        "torch": {
            "save_67": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_76": {
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_82": {
                "f": {
                    "value": "network_filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_filepath",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/Plugins/Plugin_planeDetection/spd_pytorch/models/feedforward_classifier.py": {
        "torch": {
            "load_182": {
                "f": {
                    "value": "network_filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network_filepath",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_192": {
                "*size": {
                    "value": "*size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_193": {
                "*size": {
                    "value": "*size",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "src/Plugins/Plugin_planeDetection/spd_pytorch/models/layers/loss.py": {
        "torch": {
            "log_softmax_10": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(input, dim=1).view(batch_size, self.n_classes, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(input[:, self.class_ids], dim=1).view(batch_size, len(self.class_ids), -1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_13": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(input, dim=1)",
                            "Call"
                        ],
                        [
                            "log_p.transpose(1, 2).transpose(2, 3).contiguous().view(-1, c)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(input, dim=1)",
                            "Call"
                        ],
                        [
                            "log_p.transpose(1, 2).transpose(2, 3).transpose(3, 4).contiguous().view(-1, c)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(target.numel())",
                            "Call"
                        ],
                        [
                            "target.view(target.numel())",
                            "Call"
                        ],
                        [
                            "self.one_hot_encoder(target).contiguous().view(batch_size, self.n_classes, -1)",
                            "Call"
                        ],
                        [
                            "self.one_hot_encoder(target).contiguous().view(batch_size, self.n_classes, -1)",
                            "Call"
                        ],
                        [
                            "target[:, self.class_ids, :]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_21": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(input, dim=1).view(batch_size, self.n_classes, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(input[:, self.class_ids], dim=1).view(batch_size, len(self.class_ids), -1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nll_loss_24": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(input, dim=1)",
                            "Call"
                        ],
                        [
                            "log_p.transpose(1, 2).transpose(2, 3).contiguous().view(-1, c)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(input, dim=1)",
                            "Call"
                        ],
                        [
                            "log_p.transpose(1, 2).transpose(2, 3).transpose(3, 4).contiguous().view(-1, c)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(target.numel())",
                            "Call"
                        ],
                        [
                            "target.view(target.numel())",
                            "Call"
                        ],
                        [
                            "self.one_hot_encoder(target).contiguous().view(batch_size, self.n_classes, -1)",
                            "Call"
                        ],
                        [
                            "self.one_hot_encoder(target).contiguous().view(batch_size, self.n_classes, -1)",
                            "Call"
                        ],
                        [
                            "target[:, self.class_ids, :]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_40": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(input, dim=1).view(batch_size, self.n_classes, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(input[:, self.class_ids], dim=1).view(batch_size, len(self.class_ids), -1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_46": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2.0 * inter / union",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_63": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, self.class_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_70": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2.0 * inter / union",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_80": {
                "variable": {
                    "value": "self.ones",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_43": {
                "input": {
                    "value": "input * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_67": {
                "input": {
                    "value": "input * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_44": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(target.numel())",
                            "Call"
                        ],
                        [
                            "target.view(target.numel())",
                            "Call"
                        ],
                        [
                            "self.one_hot_encoder(target).contiguous().view(batch_size, self.n_classes, -1)",
                            "Call"
                        ],
                        [
                            "self.one_hot_encoder(target).contiguous().view(batch_size, self.n_classes, -1)",
                            "Call"
                        ],
                        [
                            "target[:, self.class_ids, :]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_68": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(target.numel())",
                            "Call"
                        ],
                        [
                            "target.view(target.numel())",
                            "Call"
                        ],
                        [
                            "self.one_hot_encoder(target).contiguous().view(batch_size, self.n_classes, -1)",
                            "Call"
                        ],
                        [
                            "self.one_hot_encoder(target).contiguous().view(batch_size, self.n_classes, -1)",
                            "Call"
                        ],
                        [
                            "target[:, self.class_ids, :]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_101": {
                "*size": {
                    "value": "y_onehot.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/Plugins/Plugin_planeDetection/spd_pytorch/models/networks/sononet.py": {
        "torch": {
            "MaxPool2d_26": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_29": {
                "variable": {
                    "value": "self.maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_32": {
                "variable": {
                    "value": "self.maxpool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_35": {
                "variable": {
                    "value": "self.maxpool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_71": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv6_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv6_p(conv5_p)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_78": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/Plugins/Plugin_planeDetection/spd_pytorch/models/networks/unet_2D.py": {
        "torch": {
            "MaxPool2d_21": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_24": {
                "variable": {
                    "value": "self.maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_27": {
                "variable": {
                    "value": "self.maxpool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_30": {
                "variable": {
                    "value": "self.maxpool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_76": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/Plugins/Plugin_planeDetection/spd_pytorch/models/networks/unet_3D.py": {
        "torch": {
            "MaxPool3d_21": {
                "variable": {
                    "value": "self.maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool3d_24": {
                "variable": {
                    "value": "self.maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool3d_27": {
                "variable": {
                    "value": "self.maxpool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool3d_30": {
                "variable": {
                    "value": "self.maxpool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_41": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "filters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/Plugins/Plugin_planeDetection/spd_pytorch/models/networks/utils.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.cb_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(int(in_channels), int(n_filters), kernel_size=k_size, padding=padding, stride=stride, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.dcb_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(int(in_channels), int(n_filters), kernel_size=k_size, padding=padding, stride=stride, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.cbr_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(int(in_channels), int(n_filters), kernel_size=k_size, padding=padding, stride=stride, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.dcbr_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(int(in_channels), int(n_filters), kernel_size=k_size, padding=padding, stride=stride, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_232": {
                "variable": {
                    "value": "outputs1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * [offset // 2, offset // 2]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_255": {
                "variable": {
                    "value": "outputs1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * [offset // 2, offset // 2]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Upsample_263": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_274": {
                "variable": {
                    "value": "outputs1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * [offset // 2, offset // 2]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_287": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_features // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_288": {
                "variable": {
                    "value": "self.nonlin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_289": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_features // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_290": {
                "variable": {
                    "value": "self.nonlin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool3d_294": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_323": {
                "variable": {
                    "value": "outputs1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ],
                        [
                            "inputs1",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * [offset // 2, offset // 2]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_324": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[outputs1, outputs2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_338": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_362": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_430": {
                "variable": {
                    "value": "us",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "newsize[2:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "newsize",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_455": {
                "variable": {
                    "value": "self.dsv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_size, out_size, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_size, out_size, kernel_size, init_stride, padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(out_size, out_size, kernel_size, 1, padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_size, out_size, kernel_size, init_stride, padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(out_size, out_size, kernel_size, 1, padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_size, out_size, kernel_size, init_stride, padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(out_size, out_size, kernel_size, 1, padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(out_size, out_size, kernel_size, 1, padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_size, out_size, kernel_size, init_stride, padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(out_size, out_size, kernel_size, 1, padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(out_size, out_size, kernel_size, 1, padding_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_size, in_size // 2, (1, 1, 1), (1, 1, 1), (0, 0, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_169": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size // 2 * self.fmap_size[0] * self.fmap_size[1] * self.fmap_size[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_172": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_size, in_size // 2, (1, 1, 1), (1, 1, 1), (0, 0, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_176": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size // 2 * self.fmap_size[0] * self.fmap_size[1] * self.fmap_size[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_196": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_size, out_size, kernel_size, (1, 1, 1), (0, 0, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_size, out_size, kernel_size, (1, 1, 1), (0, 0, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_219": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingBilinear2d_221": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_241": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(4, 4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Upsample_244": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "(2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_308": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(4, 4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Upsample_312": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "(2, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "int(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * [offset // 2, offset // 2]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_24": {
                "in_channels": {
                    "value": "int(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * [offset // 2, offset // 2]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "int(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * [offset // 2, offset // 2]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_51": {
                "in_channels": {
                    "value": "int(in_channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ],
                        [
                            "k_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * [offset // 2, offset // 2]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "2 * [offset // 2, offset // 2, 0]",
                            "BinOp"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "int(n_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_size, out_size, ks, s, p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_size, out_size, ks, s, p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_233": {
                "tensors": {
                    "value": "[outputs1, outputs2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_256": {
                "tensors": {
                    "value": "[outputs1, outputs2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_275": {
                "tensors": {
                    "value": "[outputs1, outputs2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_455": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_456": {
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_factor",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3d_103": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "init_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_104": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_105": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_106": {
                "in_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_107": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_108": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_110": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "init_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_111": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_112": {
                "in_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_130": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "init_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_131": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_132": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_133": {
                "in_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_134": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_135": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_136": {
                "in_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_137": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_138": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_140": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "init_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_141": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_142": {
                "in_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_144": {
                "in_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_145": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_164": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_165": {
                "num_features": {
                    "value": "in_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_166": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_167": {
                "output_size": {
                    "value": "self.fmap_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv3d_172": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_173": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_174": {
                "output_size": {
                    "value": "self.fmap_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv3d_196": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_197": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_198": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_201": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(3",
                            "Method Argument"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_202": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "variable"
                        ]
                    ]
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_74": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "out_size",
                            "variable"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ],
                        [
                            "in_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ],
                        [
                            "out_size",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_81": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/Plugins/Plugin_planeDetection/spd_pytorch/models/networks_other.py": {
        "torch": {
            "LambdaLR_99": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda_rule",
                            "Call"
                        ],
                        [
                            "lambda_rule",
                            "Call"
                        ],
                        [
                            "lambda_rule",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_342": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_436": {
                "variable": {
                    "value": "downconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_438": {
                "variable": {
                    "value": "downrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_440": {
                "variable": {
                    "value": "uprelu",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_469": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_521": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "normal_18": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "orthogonal_54": {
                "module": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gain": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StepLR_101": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "opt.lr_decay_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_268": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_270": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_387": {
                "*args": {
                    "value": "*conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_444": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_20": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "orthogonal_56": {
                "module": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gain": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StepLR_103": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "opt.lr_decay_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_312": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_313": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ngf",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_316": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_338": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_339": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ngf",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ],
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_369": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_371": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_384": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_451": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inner_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_458": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_475": {
                "tensors": {
                    "value": "[x, self.model(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_491": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ndf",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "LeakyReLU_492": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_510": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_513": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_516": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "normal_22": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normal_34": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normal_58": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_106": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_321": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_324": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_332": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_337": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_361": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_373": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_377": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_448": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_501": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ],
                        [
                            "use_bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_504": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_519": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_108": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_363": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_379": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LambdaLR_121": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda_rule",
                            "Call"
                        ],
                        [
                            "lambda_rule",
                            "Call"
                        ],
                        [
                            "lambda_rule",
                            "Call"
                        ]
                    ]
                }
            },
            "LambdaLR_134": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda_rule",
                            "Call"
                        ],
                        [
                            "lambda_rule",
                            "Call"
                        ],
                        [
                            "lambda_rule",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_465": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/Plugins/Plugin_planeDetection/spd_pytorch/planedetect2.py": {
        "torch": {
            "device_20": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "image_T",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resize(image, (int(image_size[0]), int(image_size[1])), preserve_range=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_78": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "python_path + '/checkpoints/ifind1_sononet_8/' + modelname",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resize(image_cpp.astype(np.float32), (int(image_size[0]), int(image_size[1])), preserve_range=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_125": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/Plugins/Plugin_planeDetection/spd_pytorch/spd_utils/util.py": {
        "torch": {
            "mean_40": {
                "input": {
                    "value": "torch.abs(param.grad.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_40": {
                "input": {
                    "value": "param.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/Plugins/Plugin_planeDetection/spd_pytorch/standalone.py": {
        "torch": {
            "from_numpy_24": {
                "variable": {
                    "value": "image_T",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resize(image, (int(image_size[0]), int(image_size[1])), preserve_range=True)",
                            "Call"
                        ],
                        [
                            "resize(image_np.astype(np.float32), (int(image_size[0]), int(image_size[1])), preserve_range=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "image_T",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resize(image, (int(image_size[0]), int(image_size[1])), preserve_range=True)",
                            "Call"
                        ],
                        [
                            "resize(image_np.astype(np.float32), (int(image_size[0]), int(image_size[1])), preserve_range=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_42": {
                "variable": {
                    "value": "image_T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_76": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "save_29": {
                "obj": {
                    "value": "image_T_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image_T.sub(image_T.mean()).div(image_T.std())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "/tmp/tmp.tch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_68": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./checkpoints/ifind1_sononet_8/ifind2_net_Jan15.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/Plugins/Plugin_planeDetection/spd_pytorch/standardplanedetection_worker.py": {
        "torch": {
            "device_20": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_83": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "python_path + '/checkpoints/ifind1_sononet_8/' + modelname",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_130": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im_resized",
                    "type": "variable",
                    "possible_values": [
                        [
                            "resize(image_cpp.astype(np.float32), (int(image_size[0]), int(image_size[1])), preserve_range=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_130": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/Plugins/Plugin_planeDetection/spd_pytorch/train_classifaction.py": {
        "torch": {
            "DataLoader_125": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ds_class(ds_path, split='train', transform=ds_transform['train'], preload_data=train_opts.preloadData)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_opts.num_workers if hasattr(train_opts, 'num_workers') else 0",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "52",
                            "int"
                        ],
                        [
                            "train_opts.batchSize",
                            "Attribute"
                        ],
                        [
                            "train_opts.batchSize",
                            "Attribute"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "StratifiedSampler(train_dataset.labels, train_opts.batchSize)",
                            "Call"
                        ],
                        [
                            "sampler.WeightedRandomSampler(weight, len(train_dataset.weight))",
                            "Call"
                        ],
                        [
                            "sampler.WeightedRandomSampler(train_dataset.weight, len(train_dataset.weight))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_127": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ds_class(ds_path, split='val', transform=ds_transform['valid'], preload_data=train_opts.preloadData)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_opts.num_workers if hasattr(train_opts, 'num_workers') else 0",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_opts.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_128": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ds_class(ds_path, split='test', transform=ds_transform['valid'], preload_data=train_opts.preloadData)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_opts.num_workers if hasattr(train_opts, 'num_workers') else 0",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_opts.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "WeightedRandomSampler_117": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset.weight",
                            "Attribute"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "len(train_dataset.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "WeightedRandomSampler_121": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "train_dataset.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "len(train_dataset.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/Plugins/Plugin_planeDetection/spd_pytorch/validation.py": {
        "torch": {
            "DataLoader_35": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset_class(dataset_path, split='validation', transform=dataset_transform['valid'])",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}