{
    "P3/p3_util.py": {
        "sklearn": {
            "StandardScaler_586": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_815": {
                "variable": {
                    "value": "labelencoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "homogeneity_score_616": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "completeness_score_617": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "v_measure_score_618": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_619": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_620": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_621": {
                "X": {
                    "value": "X_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "homogeneity_score_623": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "completeness_score_624": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "v_measure_score_625": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_626": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_627": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_628": {
                "X": {
                    "value": "X_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "P3/p3_util_plot.py": {
        "sklearn": {
            "StandardScaler_222": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_257": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_380": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_523": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "KernelPCA_701": {
                "variable": {
                    "value": "kpca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel": {
                    "value": "kernel_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ],
                        [
                            "kernel_pca",
                            "Name"
                        ],
                        [
                            "'rbf'",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ]
                    ]
                },
                "gamma": {
                    "value": "parameter_gamma",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "dict_kernel_param['gamma']",
                            "Subscript"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "dict_kernel_param['gamma']",
                            "Subscript"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ]
                    ]
                },
                "degree": {
                    "value": "degree",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "KernelPCA_715": {
                "variable": {
                    "value": "kpca_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel": {
                    "value": "kernel_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ],
                        [
                            "kernel_pca",
                            "Name"
                        ],
                        [
                            "'rbf'",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma_parameter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "15",
                            "MethodArgument"
                        ]
                    ]
                },
                "fit_inverse_transform": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "degree": {
                    "value": "degree",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "DBSCAN_901": {
                "variable": {
                    "value": "dbscan",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "parameter_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "min_samples": {
                    "value": "parameter_min_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "KMeans_937": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "parameter_clusters",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PCA_233": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "ind_components",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "ind_components + 1",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "KernelPCA_413": {
                "variable": {
                    "value": "kpca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "ind_components",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "ind_components + 1",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "kernel": {
                    "value": "kernel_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ],
                        [
                            "kernel_pca",
                            "Name"
                        ],
                        [
                            "'rbf'",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ]
                    ]
                },
                "gamma": {
                    "value": "parameter_gamma",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "dict_kernel_param['gamma']",
                            "Subscript"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "dict_kernel_param['gamma']",
                            "Subscript"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ]
                    ]
                },
                "degree": {
                    "value": "degree",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "GaussianMixture_969": {
                "variable": {
                    "value": "gmm_clustering",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "parameter_clusters",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "P4/P4_ModelBuilder.py": {
        "sklearn": {
            "LabelEncoder_1345": {
                "variable": {
                    "value": "le",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_1884": {
                "variable": {
                    "value": "(X_train_std, X_test_std, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_std",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "self._test_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_absolute_error_1920": {
                "variable": {
                    "value": "dict_model_result[MAE]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_predict",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "regresion_model.predict(X_test_std)",
                            "Call"
                        ],
                        [
                            "ridgecv.predict(X_test_std)",
                            "Call"
                        ],
                        [
                            "lassocv.predict(X_test_std)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_squared_error_1921": {
                "variable": {
                    "value": "dict_model_result[MSE]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_predict",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "regresion_model.predict(X_test_std)",
                            "Call"
                        ],
                        [
                            "ridgecv.predict(X_test_std)",
                            "Call"
                        ],
                        [
                            "lassocv.predict(X_test_std)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "train_test_split_1968": {
                "variable": {
                    "value": "(X_train_std, X_test_std, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_std",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "self._test_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LabelEncoder_1380": {
                "variable": {
                    "value": "le",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OneHotEncoder_1611": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_1851": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RidgeCV_1972": {
                "variable": {
                    "value": "ridgecv",
                    "type": "Variable",
                    "possible_values": []
                },
                "alphas": {
                    "value": "list_alphas",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict_parameters['list_alphas']",
                            "Subscript"
                        ],
                        [
                            "dict_parameters['list_alphas']",
                            "Subscript"
                        ],
                        [
                            "dict_parameters['list_alphas']",
                            "Subscript"
                        ]
                    ]
                },
                "scoring": {
                    "value": "neg_mean_absolute_error",
                    "type": "Constant",
                    "possible_values": []
                },
                "cv": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DummyRegressor_1854": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "strategy": {
                    "value": "median",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LassoCV_1988": {
                "variable": {
                    "value": "lassocv",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "n_alphas": {
                    "value": "n_alphas",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "dict_parameters['n_alphas']",
                            "Subscript"
                        ],
                        [
                            "dict_parameters['n_alphas']",
                            "Subscript"
                        ],
                        [
                            "dict_parameters['n_alphas']",
                            "Subscript"
                        ]
                    ]
                },
                "cv": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "StandardScaler_1655": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Ridge_1857": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "best_alpha",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ridgecv.alpha_",
                            "Attribute"
                        ],
                        [
                            "lassocv.alpha_",
                            "Attribute"
                        ],
                        [
                            "gscv.best_params_",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ]
                    ]
                }
            },
            "GridSearchCV_2003": {
                "variable": {
                    "value": "gscv",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "linear_model.SGDRegressor()",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_alphas",
                            "Name"
                        ]
                    ]
                },
                "cv": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "scoring": {
                    "value": "neg_mean_absolute_error",
                    "type": "Constant",
                    "possible_values": []
                },
                "refit": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Lasso_1860": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "best_alpha",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ridgecv.alpha_",
                            "Attribute"
                        ],
                        [
                            "lassocv.alpha_",
                            "Attribute"
                        ],
                        [
                            "gscv.best_params_",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGDRegressor_1864": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "squared_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "penalty": {
                    "value": "best_alpha['penalty']",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ridgecv.alpha_",
                            "Attribute"
                        ],
                        [
                            "lassocv.alpha_",
                            "Attribute"
                        ],
                        [
                            "gscv.best_params_",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "best_alpha['alpha']",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ridgecv.alpha_",
                            "Attribute"
                        ],
                        [
                            "lassocv.alpha_",
                            "Attribute"
                        ],
                        [
                            "gscv.best_params_",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ]
                    ]
                },
                "l1_ratio": {
                    "value": "best_alpha['l1_ratio']",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ridgecv.alpha_",
                            "Attribute"
                        ],
                        [
                            "lassocv.alpha_",
                            "Attribute"
                        ],
                        [
                            "gscv.best_params_",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ]
                    ]
                },
                "fit_intercept": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "best_alpha['max_iter']",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ridgecv.alpha_",
                            "Attribute"
                        ],
                        [
                            "lassocv.alpha_",
                            "Attribute"
                        ],
                        [
                            "gscv.best_params_",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ]
                    ]
                },
                "tol": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "invscaling",
                    "type": "Constant",
                    "possible_values": []
                },
                "eta0": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                },
                "power_t": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "n_iter": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGDRegressor_2003": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "P4/p3_util.py": {
        "sklearn": {
            "StandardScaler_586": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_815": {
                "variable": {
                    "value": "labelencoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "homogeneity_score_616": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "completeness_score_617": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "v_measure_score_618": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_619": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_620": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_621": {
                "X": {
                    "value": "X_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "homogeneity_score_623": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "completeness_score_624": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "v_measure_score_625": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_626": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_627": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_628": {
                "X": {
                    "value": "X_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "P4/p3_util_plot.py": {
        "sklearn": {
            "StandardScaler_217": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_251": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_286": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_334": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "KernelPCA_491": {
                "variable": {
                    "value": "kpca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel": {
                    "value": "rbf",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "gamma_parameter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "15",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "KernelPCA_497": {
                "variable": {
                    "value": "kpca_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel": {
                    "value": "rbf",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "gamma_parameter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "15",
                            "MethodArgument"
                        ]
                    ]
                },
                "fit_inverse_transform": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DBSCAN_666": {
                "variable": {
                    "value": "dbscan",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "parameter_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "min_samples": {
                    "value": "parameter_min_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "KMeans_699": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "parameter_clusters",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GaussianMixture_729": {
                "variable": {
                    "value": "gmm_clustering",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "parameter_clusters",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PCA_228": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "ind_components",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "ind_components - 1",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "PCA_262": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "ind_components",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "ind_components - 1",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "KernelPCA_297": {
                "variable": {
                    "value": "kpca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "ind_components",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "ind_components - 1",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "kernel": {
                    "value": "kernel_pca",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rbf'",
                            "MethodArgument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "parameter_gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "P4/p4_util.py": {
        "sklearn": {
            "StandardScaler_211": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KNeighborsRegressor_344": {
                "variable": {
                    "value": "knn_clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "neighbor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_neighbors",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "P4/soutenance/P4_ModelBuilder.py": {
        "sklearn": {
            "LabelEncoder_1333": {
                "variable": {
                    "value": "le",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_1873": {
                "variable": {
                    "value": "(X_train_std, X_test_std, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_std",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "self._test_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_absolute_error_1909": {
                "variable": {
                    "value": "dict_model_result[MAE]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_predict",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "regresion_model.predict(X_test_std)",
                            "Call"
                        ],
                        [
                            "ridgecv.predict(X_test_std)",
                            "Call"
                        ],
                        [
                            "lassocv.predict(X_test_std)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_squared_error_1910": {
                "variable": {
                    "value": "dict_model_result[MSE]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_predict",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "regresion_model.predict(X_test_std)",
                            "Call"
                        ],
                        [
                            "ridgecv.predict(X_test_std)",
                            "Call"
                        ],
                        [
                            "lassocv.predict(X_test_std)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "train_test_split_1957": {
                "variable": {
                    "value": "(X_train_std, X_test_std, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_std",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "self._test_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LabelEncoder_1368": {
                "variable": {
                    "value": "le",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OneHotEncoder_1600": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearRegression_1840": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RidgeCV_1961": {
                "variable": {
                    "value": "ridgecv",
                    "type": "Variable",
                    "possible_values": []
                },
                "alphas": {
                    "value": "list_alphas",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict_parameters['list_alphas']",
                            "Subscript"
                        ],
                        [
                            "dict_parameters['list_alphas']",
                            "Subscript"
                        ],
                        [
                            "dict_parameters['list_alphas']",
                            "Subscript"
                        ]
                    ]
                },
                "scoring": {
                    "value": "neg_mean_absolute_error",
                    "type": "Constant",
                    "possible_values": []
                },
                "cv": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DummyRegressor_1843": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "strategy": {
                    "value": "median",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LassoCV_1977": {
                "variable": {
                    "value": "lassocv",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "n_alphas": {
                    "value": "n_alphas",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "dict_parameters['n_alphas']",
                            "Subscript"
                        ],
                        [
                            "dict_parameters['n_alphas']",
                            "Subscript"
                        ],
                        [
                            "dict_parameters['n_alphas']",
                            "Subscript"
                        ]
                    ]
                },
                "cv": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "StandardScaler_1644": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Ridge_1846": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "best_alpha",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ridgecv.alpha_",
                            "Attribute"
                        ],
                        [
                            "lassocv.alpha_",
                            "Attribute"
                        ],
                        [
                            "gscv.best_params_",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ]
                    ]
                }
            },
            "GridSearchCV_1992": {
                "variable": {
                    "value": "gscv",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "linear_model.SGDRegressor()",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_alphas",
                            "Name"
                        ]
                    ]
                },
                "cv": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "scoring": {
                    "value": "neg_mean_absolute_error",
                    "type": "Constant",
                    "possible_values": []
                },
                "refit": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Lasso_1849": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "best_alpha",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ridgecv.alpha_",
                            "Attribute"
                        ],
                        [
                            "lassocv.alpha_",
                            "Attribute"
                        ],
                        [
                            "gscv.best_params_",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGDRegressor_1853": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "squared_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "penalty": {
                    "value": "best_alpha['penalty']",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ridgecv.alpha_",
                            "Attribute"
                        ],
                        [
                            "lassocv.alpha_",
                            "Attribute"
                        ],
                        [
                            "gscv.best_params_",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "best_alpha['alpha']",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ridgecv.alpha_",
                            "Attribute"
                        ],
                        [
                            "lassocv.alpha_",
                            "Attribute"
                        ],
                        [
                            "gscv.best_params_",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ]
                    ]
                },
                "l1_ratio": {
                    "value": "best_alpha['l1_ratio']",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ridgecv.alpha_",
                            "Attribute"
                        ],
                        [
                            "lassocv.alpha_",
                            "Attribute"
                        ],
                        [
                            "gscv.best_params_",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ]
                    ]
                },
                "fit_intercept": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "best_alpha['max_iter']",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "ridgecv.alpha_",
                            "Attribute"
                        ],
                        [
                            "lassocv.alpha_",
                            "Attribute"
                        ],
                        [
                            "gscv.best_params_",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ],
                        [
                            "self._model_best_hyper_parameters(route, regresion_model_name, list_alphas, n_alphas)",
                            "Call"
                        ]
                    ]
                },
                "tol": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "invscaling",
                    "type": "Constant",
                    "possible_values": []
                },
                "eta0": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                },
                "power_t": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "n_iter": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGDRegressor_1992": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "P4/soutenance/p4_util.py": {
        "sklearn": {
            "StandardScaler_211": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KNeighborsRegressor_344": {
                "variable": {
                    "value": "knn_clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "neighbor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_neighbors",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "P5/p5_soutenance_F-BANGUI_V2/P5_ModelBuilder.py": {
        "sklearn": {
            "GaussianMixture_816": {
                "variable": {
                    "value": "cluster_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_clusters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict_param_cluster['n_clusters']",
                            "Subscript"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "covariance_type",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict_param_cluster['covariance_type']",
                            "Subscript"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "train_test_split_847": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "csr_invoice_matrix",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "self._y_clusters",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_849": {
                "variable": {
                    "value": "rfc",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "nb_forests",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict_parameters['nb_forests']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "KMeans_819": {
                "variable": {
                    "value": "cluster_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict_param_cluster['n_clusters']",
                            "Subscript"
                        ],
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "P5/p5_soutenance_F-BANGUI_V2/p3_util.py": {
        "sklearn": {
            "StandardScaler_586": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_815": {
                "variable": {
                    "value": "labelencoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "homogeneity_score_616": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "completeness_score_617": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "v_measure_score_618": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_619": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_620": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_621": {
                "X": {
                    "value": "X_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "homogeneity_score_623": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "completeness_score_624": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "v_measure_score_625": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_626": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_627": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_628": {
                "X": {
                    "value": "X_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "P5/p5_soutenance_F-BANGUI_V2/p3_util_plot.py": {
        "sklearn": {
            "StandardScaler_219": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_254": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_301": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "KernelPCA_441": {
                "variable": {
                    "value": "kpca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel": {
                    "value": "rbf",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "gamma_parameter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "15",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "KernelPCA_447": {
                "variable": {
                    "value": "kpca_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel": {
                    "value": "rbf",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "gamma_parameter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "15",
                            "MethodArgument"
                        ]
                    ]
                },
                "fit_inverse_transform": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DBSCAN_616": {
                "variable": {
                    "value": "dbscan",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "parameter_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "min_samples": {
                    "value": "parameter_min_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "KMeans_649": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "parameter_clusters",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GaussianMixture_679": {
                "variable": {
                    "value": "gmm_clustering",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "parameter_clusters",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PCA_230": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "ind_components",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "ind_components - 1",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "KernelPCA_265": {
                "variable": {
                    "value": "kpca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "ind_components",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "ind_components - 1",
                            "BinOp"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "kernel": {
                    "value": "kernel_pca",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'rbf'",
                            "MethodArgument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "parameter_gamma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "P5/p5_soutenance_F-BANGUI_V2/p5_util.py": {
        "sklearn": {
            "StandardScaler_189": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_194": {
                "variable": {
                    "value": "(X_train_std, X_test_std, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_std",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "accuracy_score_927": {
                "variable": {
                    "value": "score_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LinearRegression_197": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_200": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TSNE_274": {
                "variable": {
                    "value": "manifold_embedd",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "tsne_iter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3000",
                            "MethodArgument"
                        ]
                    ]
                },
                "perplexity": {
                    "value": "tsne_perplexity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ]
                    ]
                }
            },
            "KMeans_304": {
                "variable": {
                    "value": "cluster_kmean",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_cluster",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "silhouette_score_314": {
                "variable": {
                    "value": "dict_cluster_scoring[n_cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "csr_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sparse.csr_matrix(df.values)",
                            "Call"
                        ],
                        [
                            "sparse.csr_matrix(df.values)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_kmean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cluster_kmean.predict(csr_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_344": {
                "variable": {
                    "value": "cluster_gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_cluster",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "p_covariance_type",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'full'",
                            "MethodArgument"
                        ],
                        [
                            "'full'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "silhouette_score_352": {
                "variable": {
                    "value": "dict_cluster_scoring[n_cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "df_timeFeature.values",
                            "Attribute"
                        ],
                        [
                            "df[list_col].values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_gmm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cluster_gmm.predict(X)",
                            "Call"
                        ],
                        [
                            "gmm_model.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "OneHotEncoder_719": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "categorical_features": {
                    "value": "categorical_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'all'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "OneHotEncoder_769": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "accuracy_score_948": {
                "variable": {
                    "value": "score_segment",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_segment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_test[index_tuple[0]]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_segment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_pred[index_tuple[0]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TfidfVectorizer_1071": {
                "variable": {
                    "value": "vectorizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "min_df": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_df": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MinMaxScaler_1150": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KMeans_1271": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(1, len(list_df))",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_1296": {
                "variable": {
                    "value": "gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(1, len(list_df))",
                            "Call"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "p_covariance_type",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'full'",
                            "MethodArgument"
                        ],
                        [
                            "'full'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StandardScaler_1719": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_1802": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_1811": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_1937": {
                "variable": {
                    "value": "dict_silhouette_score[cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "df_timeFeature.values",
                            "Attribute"
                        ],
                        [
                            "df[list_col].values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_gmm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cluster_gmm.predict(X)",
                            "Call"
                        ],
                        [
                            "gmm_model.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_1889": {
                "n_components": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "hyper_param_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_hyper_parameter",
                            "Name"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "P5/p5_util.py": {
        "sklearn": {
            "StandardScaler_195": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_200": {
                "variable": {
                    "value": "(X_train_std, X_test_std, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_std",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "accuracy_score_1203": {
                "variable": {
                    "value": "score_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LinearRegression_203": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_206": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TSNE_287": {
                "variable": {
                    "value": "manifold_embedd",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "tsne_iter",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3000",
                            "MethodArgument"
                        ],
                        [
                            "3000",
                            "MethodArgument"
                        ]
                    ]
                },
                "perplexity": {
                    "value": "tsne_perplexity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ],
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ]
                    ]
                }
            },
            "TSNE_315": {
                "variable": {
                    "value": "manifold_embedd",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "tsne_iter",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3000",
                            "MethodArgument"
                        ],
                        [
                            "3000",
                            "MethodArgument"
                        ]
                    ]
                },
                "perplexity": {
                    "value": "tsne_perplexity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ],
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ]
                    ]
                }
            },
            "KMeans_345": {
                "variable": {
                    "value": "cluster_kmean",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_cluster",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "silhouette_score_355": {
                "variable": {
                    "value": "dict_cluster_scoring[n_cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "csr_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sparse.csr_matrix(df.values)",
                            "Call"
                        ],
                        [
                            "sparse.csr_matrix(df.values)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_kmean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cluster_kmean.predict(csr_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_385": {
                "variable": {
                    "value": "cluster_gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_cluster",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "p_covariance_type",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'full'",
                            "MethodArgument"
                        ],
                        [
                            "'full'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "silhouette_score_393": {
                "variable": {
                    "value": "dict_cluster_scoring[n_cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "df_timeFeature.values",
                            "Attribute"
                        ],
                        [
                            "df[list_col].values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_gmm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cluster_gmm.predict(X)",
                            "Call"
                        ],
                        [
                            "gmm_model.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "OneHotEncoder_773": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "categorical_features": {
                    "value": "categorical_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'all'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "OneHotEncoder_823": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "accuracy_score_1224": {
                "variable": {
                    "value": "score_segment",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_segment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_test[index_tuple[0]]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_segment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_pred[index_tuple[0]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TfidfVectorizer_1347": {
                "variable": {
                    "value": "vectorizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "min_df": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_df": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MinMaxScaler_1426": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KMeans_1548": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(1, len(list_df))",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_1573": {
                "variable": {
                    "value": "gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(1, len(list_df))",
                            "Call"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "p_covariance_type",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'full'",
                            "MethodArgument"
                        ],
                        [
                            "'full'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StandardScaler_1996": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_2079": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_2088": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_2214": {
                "variable": {
                    "value": "dict_silhouette_score[cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "df_timeFeature.values",
                            "Attribute"
                        ],
                        [
                            "df[list_col].values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_gmm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cluster_gmm.predict(X)",
                            "Call"
                        ],
                        [
                            "gmm_model.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_2166": {
                "n_components": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "hyper_param_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_hyper_parameter",
                            "Name"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "P6/Flask/tag_suggest/p5_util.py": {
        "sklearn": {
            "StandardScaler_195": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_200": {
                "variable": {
                    "value": "(X_train_std, X_test_std, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_std",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "accuracy_score_1203": {
                "variable": {
                    "value": "score_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LinearRegression_203": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_206": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TSNE_287": {
                "variable": {
                    "value": "manifold_embedd",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "tsne_iter",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3000",
                            "MethodArgument"
                        ],
                        [
                            "3000",
                            "MethodArgument"
                        ]
                    ]
                },
                "perplexity": {
                    "value": "tsne_perplexity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ],
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ]
                    ]
                }
            },
            "TSNE_315": {
                "variable": {
                    "value": "manifold_embedd",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "tsne_iter",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3000",
                            "MethodArgument"
                        ],
                        [
                            "3000",
                            "MethodArgument"
                        ]
                    ]
                },
                "perplexity": {
                    "value": "tsne_perplexity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ],
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ]
                    ]
                }
            },
            "KMeans_345": {
                "variable": {
                    "value": "cluster_kmean",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_cluster",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "silhouette_score_355": {
                "variable": {
                    "value": "dict_cluster_scoring[n_cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "csr_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sparse.csr_matrix(df.values)",
                            "Call"
                        ],
                        [
                            "sparse.csr_matrix(df.values)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_kmean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cluster_kmean.predict(csr_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_385": {
                "variable": {
                    "value": "cluster_gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_cluster",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "p_covariance_type",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'full'",
                            "MethodArgument"
                        ],
                        [
                            "'full'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "silhouette_score_393": {
                "variable": {
                    "value": "dict_cluster_scoring[n_cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "df_timeFeature.values",
                            "Attribute"
                        ],
                        [
                            "df[list_col].values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_gmm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cluster_gmm.predict(X)",
                            "Call"
                        ],
                        [
                            "gmm_model.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "OneHotEncoder_773": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "categorical_features": {
                    "value": "categorical_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'all'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "OneHotEncoder_823": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "accuracy_score_1224": {
                "variable": {
                    "value": "score_segment",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_segment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_test[index_tuple[0]]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_segment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_pred[index_tuple[0]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TfidfVectorizer_1347": {
                "variable": {
                    "value": "vectorizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "min_df": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_df": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MinMaxScaler_1426": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KMeans_1548": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(1, len(list_df))",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_1573": {
                "variable": {
                    "value": "gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(1, len(list_df))",
                            "Call"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "p_covariance_type",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'full'",
                            "MethodArgument"
                        ],
                        [
                            "'full'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StandardScaler_1996": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_2079": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_2088": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_2214": {
                "variable": {
                    "value": "dict_silhouette_score[cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "df_timeFeature.values",
                            "Attribute"
                        ],
                        [
                            "df[list_col].values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_gmm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cluster_gmm.predict(X)",
                            "Call"
                        ],
                        [
                            "gmm_model.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_2166": {
                "n_components": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "hyper_param_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_hyper_parameter",
                            "Name"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "P6/Flask/tag_suggest/p6_util.py": {
        "sklearn": {
            "OneVsRestClassifier_42": {
                "variable": {
                    "value": "true_classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LatentDirichletAllocation_1836": {
                "variable": {
                    "value": "lda",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_topics": {
                    "value": "nb_topic",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range_topic",
                            "Name"
                        ],
                        [
                            "range_topic",
                            "Name"
                        ],
                        [
                            "range_topic",
                            "Name"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "learning_method": {
                    "value": "online",
                    "type": "Constant",
                    "possible_values": []
                },
                "learning_offset": {
                    "value": "50.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GridSearchCV_45": {
                "variable": {
                    "value": "gscv_classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "true_classifier",
                    "type": "Name",
                    "possible_values": [
                        [
                            "OneVsRestClassifier(classifier)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "dict_param_grid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GridSearchCV_47": {
                "variable": {
                    "value": "gscv_classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "true_classifier",
                    "type": "Name",
                    "possible_values": [
                        [
                            "OneVsRestClassifier(classifier)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "dict_param_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "iid": {
                    "value": "iid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GridSearchCV_52": {
                "variable": {
                    "value": "gscv_classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "true_classifier",
                    "type": "Name",
                    "possible_values": [
                        [
                            "OneVsRestClassifier(classifier)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "dict_param_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "cv": {
                    "value": "cv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GridSearchCV_55": {
                "variable": {
                    "value": "gscv_classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "true_classifier",
                    "type": "Name",
                    "possible_values": [
                        [
                            "OneVsRestClassifier(classifier)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "dict_param_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "cv": {
                    "value": "cv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "iid": {
                    "value": "iid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "P6/Soutenance_P6_v3/src/p3_util.py": {
        "sklearn": {
            "StandardScaler_586": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_815": {
                "variable": {
                    "value": "labelencoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "homogeneity_score_616": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "completeness_score_617": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "v_measure_score_618": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_619": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_620": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_621": {
                "X": {
                    "value": "X_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "homogeneity_score_623": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "completeness_score_624": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "v_measure_score_625": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_626": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_627": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_628": {
                "X": {
                    "value": "X_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "P6/Soutenance_P6_v3/src/p5_util.py": {
        "sklearn": {
            "StandardScaler_193": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_198": {
                "variable": {
                    "value": "(X_train_std, X_test_std, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_std",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "accuracy_score_1122": {
                "variable": {
                    "value": "score_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LinearRegression_201": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_204": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TSNE_278": {
                "variable": {
                    "value": "manifold_embedd",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "tsne_iter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3000",
                            "MethodArgument"
                        ]
                    ]
                },
                "perplexity": {
                    "value": "tsne_perplexity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ]
                    ]
                }
            },
            "KMeans_308": {
                "variable": {
                    "value": "cluster_kmean",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_cluster",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "silhouette_score_318": {
                "variable": {
                    "value": "dict_cluster_scoring[n_cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "csr_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sparse.csr_matrix(df.values)",
                            "Call"
                        ],
                        [
                            "sparse.csr_matrix(df.values)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_kmean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cluster_kmean.predict(csr_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_348": {
                "variable": {
                    "value": "cluster_gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_cluster",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "p_covariance_type",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'full'",
                            "MethodArgument"
                        ],
                        [
                            "'full'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "silhouette_score_356": {
                "variable": {
                    "value": "dict_cluster_scoring[n_cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "df_timeFeature.values",
                            "Attribute"
                        ],
                        [
                            "df[list_col].values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_gmm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cluster_gmm.predict(X)",
                            "Call"
                        ],
                        [
                            "gmm_model.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "OneHotEncoder_736": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "categorical_features": {
                    "value": "categorical_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'all'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "OneHotEncoder_786": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "accuracy_score_1143": {
                "variable": {
                    "value": "score_segment",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_segment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_test[index_tuple[0]]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_segment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_pred[index_tuple[0]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TfidfVectorizer_1266": {
                "variable": {
                    "value": "vectorizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "min_df": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_df": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MinMaxScaler_1345": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KMeans_1466": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(1, len(list_df))",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_1491": {
                "variable": {
                    "value": "gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(1, len(list_df))",
                            "Call"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "p_covariance_type",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'full'",
                            "MethodArgument"
                        ],
                        [
                            "'full'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StandardScaler_1914": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_1997": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_2006": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_2132": {
                "variable": {
                    "value": "dict_silhouette_score[cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "df_timeFeature.values",
                            "Attribute"
                        ],
                        [
                            "df[list_col].values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_gmm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cluster_gmm.predict(X)",
                            "Call"
                        ],
                        [
                            "gmm_model.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_2084": {
                "n_components": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "hyper_param_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_hyper_parameter",
                            "Name"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "P6/Soutenance_P6_v3/src/p6_util.py": {
        "sklearn": {
            "LatentDirichletAllocation_1785": {
                "variable": {
                    "value": "lda",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_topics": {
                    "value": "nb_topic",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range_topic",
                            "Name"
                        ],
                        [
                            "range_topic",
                            "Name"
                        ],
                        [
                            "range_topic",
                            "Name"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "learning_method": {
                    "value": "online",
                    "type": "Constant",
                    "possible_values": []
                },
                "learning_offset": {
                    "value": "50.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "P6/Soutenance_P6_v3/tag_suggest/p5_util.py": {
        "sklearn": {
            "StandardScaler_193": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_198": {
                "variable": {
                    "value": "(X_train_std, X_test_std, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_std",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "accuracy_score_1122": {
                "variable": {
                    "value": "score_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LinearRegression_201": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_204": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TSNE_278": {
                "variable": {
                    "value": "manifold_embedd",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "tsne_iter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3000",
                            "MethodArgument"
                        ]
                    ]
                },
                "perplexity": {
                    "value": "tsne_perplexity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ]
                    ]
                }
            },
            "KMeans_308": {
                "variable": {
                    "value": "cluster_kmean",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_cluster",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "silhouette_score_318": {
                "variable": {
                    "value": "dict_cluster_scoring[n_cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "csr_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sparse.csr_matrix(df.values)",
                            "Call"
                        ],
                        [
                            "sparse.csr_matrix(df.values)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_kmean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cluster_kmean.predict(csr_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_348": {
                "variable": {
                    "value": "cluster_gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_cluster",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "p_covariance_type",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'full'",
                            "MethodArgument"
                        ],
                        [
                            "'full'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "silhouette_score_356": {
                "variable": {
                    "value": "dict_cluster_scoring[n_cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "df_timeFeature.values",
                            "Attribute"
                        ],
                        [
                            "df[list_col].values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_gmm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cluster_gmm.predict(X)",
                            "Call"
                        ],
                        [
                            "gmm_model.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "OneHotEncoder_736": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "categorical_features": {
                    "value": "categorical_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'all'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "OneHotEncoder_786": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "accuracy_score_1143": {
                "variable": {
                    "value": "score_segment",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_segment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_test[index_tuple[0]]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_segment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_pred[index_tuple[0]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TfidfVectorizer_1266": {
                "variable": {
                    "value": "vectorizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "min_df": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_df": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MinMaxScaler_1345": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KMeans_1466": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(1, len(list_df))",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_1491": {
                "variable": {
                    "value": "gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(1, len(list_df))",
                            "Call"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "p_covariance_type",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'full'",
                            "MethodArgument"
                        ],
                        [
                            "'full'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StandardScaler_1914": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_1997": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_2006": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_2132": {
                "variable": {
                    "value": "dict_silhouette_score[cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "df_timeFeature.values",
                            "Attribute"
                        ],
                        [
                            "df[list_col].values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_gmm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cluster_gmm.predict(X)",
                            "Call"
                        ],
                        [
                            "gmm_model.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_2084": {
                "n_components": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "hyper_param_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_hyper_parameter",
                            "Name"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "P6/Soutenance_P6_v3/tag_suggest/p6_util.py": {
        "sklearn": {
            "LatentDirichletAllocation_1785": {
                "variable": {
                    "value": "lda",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_topics": {
                    "value": "nb_topic",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range_topic",
                            "Name"
                        ],
                        [
                            "range_topic",
                            "Name"
                        ],
                        [
                            "range_topic",
                            "Name"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "learning_method": {
                    "value": "online",
                    "type": "Constant",
                    "possible_values": []
                },
                "learning_offset": {
                    "value": "50.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "P6/cours/p3_util.py": {
        "sklearn": {
            "StandardScaler_586": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_815": {
                "variable": {
                    "value": "labelencoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "homogeneity_score_616": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "completeness_score_617": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "v_measure_score_618": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_619": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_620": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_621": {
                "X": {
                    "value": "X_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "homogeneity_score_623": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "completeness_score_624": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "v_measure_score_625": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_626": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_627": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_628": {
                "X": {
                    "value": "X_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "P6/cours/p3_util_plot.py": {
        "sklearn": {
            "StandardScaler_222": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_257": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_380": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_523": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "KernelPCA_701": {
                "variable": {
                    "value": "kpca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel": {
                    "value": "kernel_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ],
                        [
                            "kernel_pca",
                            "Name"
                        ],
                        [
                            "'rbf'",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ]
                    ]
                },
                "gamma": {
                    "value": "parameter_gamma",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "dict_kernel_param['gamma']",
                            "Subscript"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "dict_kernel_param['gamma']",
                            "Subscript"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ]
                    ]
                },
                "degree": {
                    "value": "degree",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "KernelPCA_715": {
                "variable": {
                    "value": "kpca_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel": {
                    "value": "kernel_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ],
                        [
                            "kernel_pca",
                            "Name"
                        ],
                        [
                            "'rbf'",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma_parameter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "15",
                            "MethodArgument"
                        ]
                    ]
                },
                "fit_inverse_transform": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "degree": {
                    "value": "degree",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "DBSCAN_901": {
                "variable": {
                    "value": "dbscan",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "parameter_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "min_samples": {
                    "value": "parameter_min_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "KMeans_937": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "parameter_clusters",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PCA_233": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "ind_components",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "ind_components + 1",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "KernelPCA_413": {
                "variable": {
                    "value": "kpca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "ind_components",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "ind_components + 1",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "kernel": {
                    "value": "kernel_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ],
                        [
                            "kernel_pca",
                            "Name"
                        ],
                        [
                            "'rbf'",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ]
                    ]
                },
                "gamma": {
                    "value": "parameter_gamma",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "dict_kernel_param['gamma']",
                            "Subscript"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "dict_kernel_param['gamma']",
                            "Subscript"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ]
                    ]
                },
                "degree": {
                    "value": "degree",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "GaussianMixture_969": {
                "variable": {
                    "value": "gmm_clustering",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "parameter_clusters",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "P6/cours/p5_util.py": {
        "sklearn": {
            "StandardScaler_195": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_200": {
                "variable": {
                    "value": "(X_train_std, X_test_std, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_std",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "accuracy_score_1203": {
                "variable": {
                    "value": "score_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LinearRegression_203": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_206": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TSNE_287": {
                "variable": {
                    "value": "manifold_embedd",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "tsne_iter",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3000",
                            "MethodArgument"
                        ],
                        [
                            "3000",
                            "MethodArgument"
                        ]
                    ]
                },
                "perplexity": {
                    "value": "tsne_perplexity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ],
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ]
                    ]
                }
            },
            "TSNE_315": {
                "variable": {
                    "value": "manifold_embedd",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "tsne_iter",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3000",
                            "MethodArgument"
                        ],
                        [
                            "3000",
                            "MethodArgument"
                        ]
                    ]
                },
                "perplexity": {
                    "value": "tsne_perplexity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ],
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ]
                    ]
                }
            },
            "KMeans_345": {
                "variable": {
                    "value": "cluster_kmean",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_cluster",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "silhouette_score_355": {
                "variable": {
                    "value": "dict_cluster_scoring[n_cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "csr_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sparse.csr_matrix(df.values)",
                            "Call"
                        ],
                        [
                            "sparse.csr_matrix(df.values)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_kmean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cluster_kmean.predict(csr_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_385": {
                "variable": {
                    "value": "cluster_gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_cluster",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "p_covariance_type",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'full'",
                            "MethodArgument"
                        ],
                        [
                            "'full'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "silhouette_score_393": {
                "variable": {
                    "value": "dict_cluster_scoring[n_cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "df_timeFeature.values",
                            "Attribute"
                        ],
                        [
                            "df[list_col].values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_gmm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cluster_gmm.predict(X)",
                            "Call"
                        ],
                        [
                            "gmm_model.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "OneHotEncoder_773": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "categorical_features": {
                    "value": "categorical_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'all'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "OneHotEncoder_823": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "accuracy_score_1224": {
                "variable": {
                    "value": "score_segment",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_segment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_test[index_tuple[0]]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_segment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_pred[index_tuple[0]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TfidfVectorizer_1347": {
                "variable": {
                    "value": "vectorizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "min_df": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_df": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MinMaxScaler_1426": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KMeans_1548": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(1, len(list_df))",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_1573": {
                "variable": {
                    "value": "gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(1, len(list_df))",
                            "Call"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "p_covariance_type",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'full'",
                            "MethodArgument"
                        ],
                        [
                            "'full'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StandardScaler_1996": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_2079": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_2088": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_2214": {
                "variable": {
                    "value": "dict_silhouette_score[cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "df_timeFeature.values",
                            "Attribute"
                        ],
                        [
                            "df[list_col].values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_gmm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cluster_gmm.predict(X)",
                            "Call"
                        ],
                        [
                            "gmm_model.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_2166": {
                "n_components": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "hyper_param_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_hyper_parameter",
                            "Name"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "P6/cours/p6_util_activity.py": {
        "sklearn": {
            "TfidfVectorizer_142": {
                "variable": {
                    "value": "vectorizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "norm": {
                    "value": "l2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_495": {
                "variable": {
                    "value": "vectorizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "norm": {
                    "value": "l2",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_idf": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "P6/p3_util.py": {
        "sklearn": {
            "StandardScaler_586": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_815": {
                "variable": {
                    "value": "labelencoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "homogeneity_score_616": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "completeness_score_617": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "v_measure_score_618": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_619": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_620": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_621": {
                "X": {
                    "value": "X_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "homogeneity_score_623": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "completeness_score_624": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "v_measure_score_625": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_626": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_627": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_628": {
                "X": {
                    "value": "X_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "P6/p3_util_plot.py": {
        "sklearn": {
            "StandardScaler_222": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_257": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_380": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_523": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "KernelPCA_701": {
                "variable": {
                    "value": "kpca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel": {
                    "value": "kernel_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ],
                        [
                            "kernel_pca",
                            "Name"
                        ],
                        [
                            "'rbf'",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ]
                    ]
                },
                "gamma": {
                    "value": "parameter_gamma",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "dict_kernel_param['gamma']",
                            "Subscript"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "dict_kernel_param['gamma']",
                            "Subscript"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ]
                    ]
                },
                "degree": {
                    "value": "degree",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "KernelPCA_715": {
                "variable": {
                    "value": "kpca_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel": {
                    "value": "kernel_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ],
                        [
                            "kernel_pca",
                            "Name"
                        ],
                        [
                            "'rbf'",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma_parameter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "15",
                            "MethodArgument"
                        ]
                    ]
                },
                "fit_inverse_transform": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "degree": {
                    "value": "degree",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "DBSCAN_901": {
                "variable": {
                    "value": "dbscan",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "parameter_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "min_samples": {
                    "value": "parameter_min_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "KMeans_937": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "parameter_clusters",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PCA_233": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "ind_components",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "ind_components + 1",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "KernelPCA_413": {
                "variable": {
                    "value": "kpca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "ind_components",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "ind_components + 1",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "kernel": {
                    "value": "kernel_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ],
                        [
                            "kernel_pca",
                            "Name"
                        ],
                        [
                            "'rbf'",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ]
                    ]
                },
                "gamma": {
                    "value": "parameter_gamma",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "dict_kernel_param['gamma']",
                            "Subscript"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "dict_kernel_param['gamma']",
                            "Subscript"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ]
                    ]
                },
                "degree": {
                    "value": "degree",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "GaussianMixture_969": {
                "variable": {
                    "value": "gmm_clustering",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "parameter_clusters",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "P6/p5_util.py": {
        "sklearn": {
            "StandardScaler_195": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_200": {
                "variable": {
                    "value": "(X_train_std, X_test_std, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_std",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "accuracy_score_1203": {
                "variable": {
                    "value": "score_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LinearRegression_203": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_206": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TSNE_287": {
                "variable": {
                    "value": "manifold_embedd",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "tsne_iter",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3000",
                            "MethodArgument"
                        ],
                        [
                            "3000",
                            "MethodArgument"
                        ]
                    ]
                },
                "perplexity": {
                    "value": "tsne_perplexity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ],
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ]
                    ]
                }
            },
            "TSNE_315": {
                "variable": {
                    "value": "manifold_embedd",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "tsne_iter",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3000",
                            "MethodArgument"
                        ],
                        [
                            "3000",
                            "MethodArgument"
                        ]
                    ]
                },
                "perplexity": {
                    "value": "tsne_perplexity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ],
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ]
                    ]
                }
            },
            "KMeans_345": {
                "variable": {
                    "value": "cluster_kmean",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_cluster",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "silhouette_score_355": {
                "variable": {
                    "value": "dict_cluster_scoring[n_cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "csr_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sparse.csr_matrix(df.values)",
                            "Call"
                        ],
                        [
                            "sparse.csr_matrix(df.values)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_kmean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cluster_kmean.predict(csr_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_385": {
                "variable": {
                    "value": "cluster_gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_cluster",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "p_covariance_type",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'full'",
                            "MethodArgument"
                        ],
                        [
                            "'full'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "silhouette_score_393": {
                "variable": {
                    "value": "dict_cluster_scoring[n_cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "df_timeFeature.values",
                            "Attribute"
                        ],
                        [
                            "df[list_col].values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_gmm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cluster_gmm.predict(X)",
                            "Call"
                        ],
                        [
                            "gmm_model.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "OneHotEncoder_773": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "categorical_features": {
                    "value": "categorical_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'all'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "OneHotEncoder_823": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "accuracy_score_1224": {
                "variable": {
                    "value": "score_segment",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_segment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_test[index_tuple[0]]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_segment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_pred[index_tuple[0]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TfidfVectorizer_1347": {
                "variable": {
                    "value": "vectorizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "min_df": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_df": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MinMaxScaler_1426": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KMeans_1548": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(1, len(list_df))",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_1573": {
                "variable": {
                    "value": "gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(1, len(list_df))",
                            "Call"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "p_covariance_type",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'full'",
                            "MethodArgument"
                        ],
                        [
                            "'full'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StandardScaler_1996": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_2079": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_2088": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_2214": {
                "variable": {
                    "value": "dict_silhouette_score[cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "df_timeFeature.values",
                            "Attribute"
                        ],
                        [
                            "df[list_col].values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_gmm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cluster_gmm.predict(X)",
                            "Call"
                        ],
                        [
                            "gmm_model.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_2166": {
                "n_components": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "hyper_param_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_hyper_parameter",
                            "Name"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "P6/p6_util.py": {
        "sklearn": {
            "OneVsRestClassifier_42": {
                "variable": {
                    "value": "true_classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LatentDirichletAllocation_1836": {
                "variable": {
                    "value": "lda",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_topics": {
                    "value": "nb_topic",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range_topic",
                            "Name"
                        ],
                        [
                            "range_topic",
                            "Name"
                        ],
                        [
                            "range_topic",
                            "Name"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "learning_method": {
                    "value": "online",
                    "type": "Constant",
                    "possible_values": []
                },
                "learning_offset": {
                    "value": "50.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GridSearchCV_45": {
                "variable": {
                    "value": "gscv_classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "true_classifier",
                    "type": "Name",
                    "possible_values": [
                        [
                            "OneVsRestClassifier(classifier)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "dict_param_grid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GridSearchCV_47": {
                "variable": {
                    "value": "gscv_classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "true_classifier",
                    "type": "Name",
                    "possible_values": [
                        [
                            "OneVsRestClassifier(classifier)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "dict_param_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "iid": {
                    "value": "iid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GridSearchCV_52": {
                "variable": {
                    "value": "gscv_classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "true_classifier",
                    "type": "Name",
                    "possible_values": [
                        [
                            "OneVsRestClassifier(classifier)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "dict_param_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "cv": {
                    "value": "cv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GridSearchCV_55": {
                "variable": {
                    "value": "gscv_classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "true_classifier",
                    "type": "Name",
                    "possible_values": [
                        [
                            "OneVsRestClassifier(classifier)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "dict_param_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "cv": {
                    "value": "cv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "iid": {
                    "value": "iid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "P7/P7_DataBreed.py": {
        "sklearn": {
            "train_test_split_364": {
                "variable": {
                    "value": "(arr_keras_image_train, arr_keras_image_test, arr_label_train, arr_label_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "arr_keras_image",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "arr_label",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PCA_1377": {
                "variable": {
                    "value": "self._pca",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "train_test_split_2216": {
                "variable": {
                    "value": "(self._X_train, self._X_test, self._y_train, self._y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "self._df_bof",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "self._y_label",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "size_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "P7/p3_util.py": {
        "sklearn": {
            "StandardScaler_586": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_815": {
                "variable": {
                    "value": "labelencoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "homogeneity_score_616": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "completeness_score_617": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "v_measure_score_618": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_619": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_620": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_621": {
                "X": {
                    "value": "X_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "homogeneity_score_623": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "completeness_score_624": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "v_measure_score_625": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_626": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_627": {
                "labels_true": {
                    "value": "labels_trained",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_628": {
                "X": {
                    "value": "X_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels_predicted",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "P7/p3_util_plot.py": {
        "sklearn": {
            "StandardScaler_222": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_257": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_380": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_523": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "KernelPCA_701": {
                "variable": {
                    "value": "kpca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "X.shape[1]",
                            "Subscript"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel": {
                    "value": "kernel_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ],
                        [
                            "kernel_pca",
                            "Name"
                        ],
                        [
                            "'rbf'",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ]
                    ]
                },
                "gamma": {
                    "value": "parameter_gamma",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "dict_kernel_param['gamma']",
                            "Subscript"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "dict_kernel_param['gamma']",
                            "Subscript"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ]
                    ]
                },
                "degree": {
                    "value": "degree",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "KernelPCA_715": {
                "variable": {
                    "value": "kpca_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel": {
                    "value": "kernel_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ],
                        [
                            "kernel_pca",
                            "Name"
                        ],
                        [
                            "'rbf'",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma_parameter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "15",
                            "MethodArgument"
                        ]
                    ]
                },
                "fit_inverse_transform": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "degree": {
                    "value": "degree",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "DBSCAN_901": {
                "variable": {
                    "value": "dbscan",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "parameter_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "min_samples": {
                    "value": "parameter_min_samples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "KMeans_937": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "parameter_clusters",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PCA_233": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "ind_components",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "ind_components + 1",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "KernelPCA_413": {
                "variable": {
                    "value": "kpca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "ind_components",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "ind_components + 1",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "kernel": {
                    "value": "kernel_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ],
                        [
                            "kernel_pca",
                            "Name"
                        ],
                        [
                            "'rbf'",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['kernel_name']",
                            "Subscript"
                        ]
                    ]
                },
                "gamma": {
                    "value": "parameter_gamma",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "dict_kernel_param['gamma']",
                            "Subscript"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ],
                        [
                            "dict_kernel_param['gamma']",
                            "Subscript"
                        ],
                        [
                            "1.0 / df.shape[1]",
                            "BinOp"
                        ]
                    ]
                },
                "degree": {
                    "value": "degree",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "dict_kernel_param['degree']",
                            "Subscript"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "GaussianMixture_969": {
                "variable": {
                    "value": "gmm_clustering",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "parameter_clusters",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "P7/p5_util.py": {
        "sklearn": {
            "StandardScaler_195": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_200": {
                "variable": {
                    "value": "(X_train_std, X_test_std, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_std",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "accuracy_score_1203": {
                "variable": {
                    "value": "score_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LinearRegression_203": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_206": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TSNE_287": {
                "variable": {
                    "value": "manifold_embedd",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "tsne_iter",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3000",
                            "MethodArgument"
                        ],
                        [
                            "3000",
                            "MethodArgument"
                        ]
                    ]
                },
                "perplexity": {
                    "value": "tsne_perplexity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ],
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ]
                    ]
                }
            },
            "TSNE_315": {
                "variable": {
                    "value": "manifold_embedd",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "tsne_iter",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3000",
                            "MethodArgument"
                        ],
                        [
                            "3000",
                            "MethodArgument"
                        ]
                    ]
                },
                "perplexity": {
                    "value": "tsne_perplexity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ],
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ]
                    ]
                }
            },
            "KMeans_345": {
                "variable": {
                    "value": "cluster_kmean",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_cluster",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "silhouette_score_355": {
                "variable": {
                    "value": "dict_cluster_scoring[n_cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "csr_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sparse.csr_matrix(df.values)",
                            "Call"
                        ],
                        [
                            "sparse.csr_matrix(df.values)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_kmean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cluster_kmean.predict(csr_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_385": {
                "variable": {
                    "value": "cluster_gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_cluster",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "p_covariance_type",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'full'",
                            "MethodArgument"
                        ],
                        [
                            "'full'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "silhouette_score_393": {
                "variable": {
                    "value": "dict_cluster_scoring[n_cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "df_timeFeature.values",
                            "Attribute"
                        ],
                        [
                            "df[list_col].values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_gmm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cluster_gmm.predict(X)",
                            "Call"
                        ],
                        [
                            "gmm_model.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "OneHotEncoder_773": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "categorical_features": {
                    "value": "categorical_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'all'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "OneHotEncoder_823": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "accuracy_score_1224": {
                "variable": {
                    "value": "score_segment",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_segment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_test[index_tuple[0]]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_segment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_pred[index_tuple[0]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TfidfVectorizer_1347": {
                "variable": {
                    "value": "vectorizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "min_df": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_df": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MinMaxScaler_1426": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KMeans_1548": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(1, len(list_df))",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_1573": {
                "variable": {
                    "value": "gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(1, len(list_df))",
                            "Call"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "p_covariance_type",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'full'",
                            "MethodArgument"
                        ],
                        [
                            "'full'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StandardScaler_1996": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_2079": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_2088": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_2214": {
                "variable": {
                    "value": "dict_silhouette_score[cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "df_timeFeature.values",
                            "Attribute"
                        ],
                        [
                            "df[list_col].values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_gmm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cluster_gmm.predict(X)",
                            "Call"
                        ],
                        [
                            "gmm_model.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_2166": {
                "n_components": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "hyper_param_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_hyper_parameter",
                            "Name"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "P7/p6_util.py": {
        "sklearn": {
            "OneVsRestClassifier_42": {
                "variable": {
                    "value": "true_classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LatentDirichletAllocation_1836": {
                "variable": {
                    "value": "lda",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_topics": {
                    "value": "nb_topic",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range_topic",
                            "Name"
                        ],
                        [
                            "range_topic",
                            "Name"
                        ],
                        [
                            "range_topic",
                            "Name"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "learning_method": {
                    "value": "online",
                    "type": "Constant",
                    "possible_values": []
                },
                "learning_offset": {
                    "value": "50.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GridSearchCV_45": {
                "variable": {
                    "value": "gscv_classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "true_classifier",
                    "type": "Name",
                    "possible_values": [
                        [
                            "OneVsRestClassifier(classifier)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "dict_param_grid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GridSearchCV_47": {
                "variable": {
                    "value": "gscv_classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "true_classifier",
                    "type": "Name",
                    "possible_values": [
                        [
                            "OneVsRestClassifier(classifier)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "dict_param_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "iid": {
                    "value": "iid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GridSearchCV_52": {
                "variable": {
                    "value": "gscv_classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "true_classifier",
                    "type": "Name",
                    "possible_values": [
                        [
                            "OneVsRestClassifier(classifier)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "dict_param_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "cv": {
                    "value": "cv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GridSearchCV_55": {
                "variable": {
                    "value": "gscv_classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "true_classifier",
                    "type": "Name",
                    "possible_values": [
                        [
                            "OneVsRestClassifier(classifier)",
                            "Call"
                        ]
                    ]
                },
                "param_grid": {
                    "value": "dict_param_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "cv": {
                    "value": "cv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "iid": {
                    "value": "iid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "P8/p5_util.py": {
        "sklearn": {
            "StandardScaler_194": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_199": {
                "variable": {
                    "value": "(X_train_std, X_test_std, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_std",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "accuracy_score_1158": {
                "variable": {
                    "value": "score_global",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LinearRegression_202": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_205": {
                "variable": {
                    "value": "regresion_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TSNE_286": {
                "variable": {
                    "value": "manifold_embedd",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "tsne_iter",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3000",
                            "MethodArgument"
                        ],
                        [
                            "3000",
                            "MethodArgument"
                        ]
                    ]
                },
                "perplexity": {
                    "value": "tsne_perplexity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ],
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ]
                    ]
                }
            },
            "TSNE_314": {
                "variable": {
                    "value": "manifold_embedd",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "nb_components",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "tsne_iter",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3000",
                            "MethodArgument"
                        ],
                        [
                            "3000",
                            "MethodArgument"
                        ]
                    ]
                },
                "perplexity": {
                    "value": "tsne_perplexity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ],
                        [
                            "list_tsne_perplexity",
                            "Name"
                        ]
                    ]
                }
            },
            "KMeans_344": {
                "variable": {
                    "value": "cluster_kmean",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_cluster",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "silhouette_score_354": {
                "variable": {
                    "value": "dict_cluster_scoring[n_cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "csr_matrix",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sparse.csr_matrix(df.values)",
                            "Call"
                        ],
                        [
                            "sparse.csr_matrix(df.values)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_kmean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cluster_kmean.predict(csr_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_384": {
                "variable": {
                    "value": "cluster_gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_cluster",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "range(n_cluster_start, n_cluster_end, 1)",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ],
                        [
                            "dict_cluster_scoring.keys()",
                            "Call"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "p_covariance_type",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'full'",
                            "MethodArgument"
                        ],
                        [
                            "'full'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "silhouette_score_392": {
                "variable": {
                    "value": "dict_cluster_scoring[n_cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "df_timeFeature.values",
                            "Attribute"
                        ],
                        [
                            "df[list_col].values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_gmm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cluster_gmm.predict(X)",
                            "Call"
                        ],
                        [
                            "gmm_model.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "OneHotEncoder_772": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "categorical_features": {
                    "value": "categorical_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'all'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "OneHotEncoder_822": {
                "variable": {
                    "value": "encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "accuracy_score_1179": {
                "variable": {
                    "value": "score_segment",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test_segment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_test[index_tuple[0]]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_segment",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y_pred[index_tuple[0]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TfidfVectorizer_1302": {
                "variable": {
                    "value": "vectorizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "min_df": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_df": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                },
                "ngram_range": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MinMaxScaler_1381": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KMeans_1503": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(1, len(list_df))",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_1528": {
                "variable": {
                    "value": "gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(cluster_start, cluster_end)",
                            "Call"
                        ],
                        [
                            "range(1, len(list_df))",
                            "Call"
                        ]
                    ]
                },
                "covariance_type": {
                    "value": "p_covariance_type",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'full'",
                            "MethodArgument"
                        ],
                        [
                            "'full'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "StandardScaler_1951": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_2034": {
                "variable": {
                    "value": "std_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PCA_2043": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "silhouette_score_2169": {
                "variable": {
                    "value": "dict_silhouette_score[cluster]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "df_timeFeature.values",
                            "Attribute"
                        ],
                        [
                            "df[list_col].values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ],
                        [
                            "df.values",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "preds_gmm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cluster_gmm.predict(X)",
                            "Call"
                        ],
                        [
                            "gmm_model.predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "GaussianMixture_2121": {
                "n_components": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "hyper_param_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_hyper_parameter",
                            "Name"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "P8/p8_util.py": {
        "sklearn": {
            "train_test_split_567": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "df_train['comment_text']",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "df_train['target']",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.33",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LabelBinarizer_706": {
                "variable": {
                    "value": "lb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "input_layer_314": {
                "variable": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "features",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{p8_util_config.FEATURES_KEY: text}",
                            "Dict"
                        ],
                        [
                            "{FEATURES_KEY: image}",
                            "Dict"
                        ],
                        [
                            "{FEATURES_KEY: image}",
                            "Dict"
                        ]
                    ]
                },
                "feature_columns": {
                    "value": "net_builder.feature_columns",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_data_416": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TrainSpec_956": {
                "variable": {
                    "value": "train_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "train_input_fn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_fn_2('train', input_fn_param)",
                            "Call"
                        ],
                        [
                            "input_fn_2('train', input_fn_param)",
                            "Call"
                        ]
                    ]
                },
                "max_steps": {
                    "value": "p8_util_config.TRAIN_STEPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "EvalSpec_960": {
                "variable": {
                    "value": "eval_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_fn": {
                    "value": "test_input_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_fn_2('test', input_fn_param)",
                            "Call"
                        ]
                    ]
                },
                "steps": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "start_delay_secs": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "throttle_secs": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "train_and_evaluate_966": {
                "variable": {
                    "value": "(results, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "estimator": {
                    "value": "adanet_estimator",
                    "type": "Name",
                    "possible_values": [
                        [
                            "adanet.Estimator(head=p8_util_config.dict_adanet_config['adanet_tf_head'], subnetwork_generator=subnetwork_generator, ensemblers=[ensembler], max_iteration_steps=p8_util_config.ADANET_MAX_ITERATION_STEPS, evaluator=adanet.Evaluator(input_fn=train_input_fn, steps=None), config=adanet_estimator_config)",
                            "Call"
                        ]
                    ]
                },
                "train_spec": {
                    "value": "train_spec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.estimator.TrainSpec(input_fn=train_input_fn, max_steps=p8_util_config.TRAIN_STEPS)",
                            "Call"
                        ]
                    ]
                },
                "eval_spec": {
                    "value": "eval_spec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.estimator.EvalSpec(input_fn=test_input_fn, steps=None, start_delay_secs=1, throttle_secs=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "numeric_column_259": {
                "key": {
                    "value": "FEATURES_KEY",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p8_util_config.FEATURES_KEY",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "feature_shape",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict_adanet_config['adanet_feature_shape']",
                            "Subscript"
                        ],
                        [
                            "[w_size, h_size, channel]",
                            "List"
                        ],
                        [
                            "net_builder.feature_shape",
                            "Attribute"
                        ],
                        [
                            "input_fn_param['feature_shape']",
                            "Subscript"
                        ],
                        [
                            "input_fn_param['feature_shape']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_318": {
                "name": {
                    "value": "nn_type",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dict_nn_layer_config['nn_type']",
                            "Subscript"
                        ],
                        [
                            "net_builder._nn_type",
                            "Attribute"
                        ],
                        [
                            "'CNN'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "one_hot_358": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, depth=3)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_361": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RunConfig_679": {
                "save_checkpoints_steps": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "save_summary_steps": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "tf_random_seed": {
                    "value": "RANDOM_SEED",
                    "type": "Name",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                },
                "model_dir": {
                    "value": "outdir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_360": {
                "name": {
                    "value": "Loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_362": {
                "name": {
                    "value": "Loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=labels))",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_375": {
                "variable": {
                    "value": "tf_label_arg_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, depth=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "accuracy_376": {
                "variable": {
                    "value": "(accuracy, accuracy_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf_label_arg_max",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(labels, 1)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "nn_type + 'Train_accuracy'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_361": {
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, depth=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_365": {
                "name": {
                    "value": "Train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_380": {
                "name": {
                    "value": "nn_type + 'Train_Accuracy'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "EstimatorSpec_381": {
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=labels))",
                            "Call"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optimizer.minimize(loss, global_step=tf.train.get_global_step())",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_387": {
                "variable": {
                    "value": "(accuracy, accuracy_op)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "nn_type + 'Eval_accuracy'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_384": {
                "name": {
                    "value": "Eval",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_390": {
                "name": {
                    "value": "nn_type + '_Eval_accuracy'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "EstimatorSpec_394": {
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "loss": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=labels))",
                            "Call"
                        ]
                    ]
                },
                "eval_metric_ops": {
                    "value": "metrics",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{nn_type + '_Eval_accuracy': (accuracy, accuracy_op)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "EstimatorSpec_402": {
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'class_ids': predicted_classes[:, tf.newaxis], 'probabilities': tf.nn.softmax(logits), 'logits': logits}",
                            "Dict"
                        ]
                    ]
                }
            },
            "get_global_step_370": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_377": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_399": {
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_387": {
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(labels, depth=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_388": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "P8/NNAdaNetBuilder.py": {
        "tensorflow": {
            "dense_292": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "logits_dimension",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.glorot_uniform_initializer(seed=self._seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_437": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_461": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self._nb_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "layer_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_489": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[num_hidden_units, logits_dimension]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "layer_initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer",
                            "Attribute"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=0.01)",
                            "Call"
                        ],
                        [
                            "tf.keras.initializers.he_normal",
                            "Attribute"
                        ],
                        [
                            "self._get_layer_initializer()",
                            "Call"
                        ],
                        [
                            "self._get_layer_initializer()",
                            "Call"
                        ],
                        [
                            "self._get_layer_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_493": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(0.0, shape=[logits_dimension], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "static_rnn_570": {
                "variable": {
                    "value": "(output, last_layer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "rnn_cell",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.keras.layers.SimpleRNNCell(num_hidden_units)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.BasicLSTMCell(num_hidden_units)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.GRUCell(num_hidden_units)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(list_rnn_cell)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(list_rnn_cell)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.MultiRNNCell(list_rnn_cell)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "list_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.unstack(last_layer, raws, 1)",
                            "Call"
                        ],
                        [
                            "tf.unstack(last_layer, raws, 1)",
                            "Call"
                        ],
                        [
                            "tf.unstack(last_layer, raws, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_577": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(last_layer, units=logits_dimension, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._nb_class, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.matmul(output[-1], weight) + bias",
                            "BinOp"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._nb_class, kernel_initializer=layer_initializer())",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_hidden_units",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.glorot_uniform_initializer(seed=self._seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_661": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self._nb_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "layer_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "input_layer_696": {
                "variable": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "feature_columns": {
                    "value": "self._feature_columns",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_794": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_278": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self._dict_dnn_layer_config['dnn_hidden_units']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.glorot_uniform_initializer(seed=self._seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_309": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(layer, training=is_training)",
                            "Call"
                        ],
                        [
                            "range_layer",
                            "Name"
                        ],
                        [
                            "range_layer",
                            "Name"
                        ],
                        [
                            "range(self._cnn_convlayer)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dense_449": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self._cnn_dense_unit_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "conv_activation_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self._get_conv_activation_fn(cnn_activation_name)",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "layer_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SimpleRNNCell_518": {
                "variable": {
                    "value": "rnn_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_hidden_units",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "flatten_618": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_621": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self._cnn_dense_unit_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "layer_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_646": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_711": {
                "variable": {
                    "value": "complexity",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(self._num_layers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_284": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "self._seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_320": {
                "variable": {
                    "value": "layer_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_403": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "cnn_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._dict_cnn_layer_config['cnn_filters']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "tuple_cnn_kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._dict_cnn_layer_config['cnn_kernel_size']",
                            "Subscript"
                        ]
                    ]
                },
                "strides": {
                    "value": "cnn_strides",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._dict_cnn_layer_config['cnn_strides']",
                            "Subscript"
                        ]
                    ]
                },
                "padding": {
                    "value": "cnn_padding_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._dict_cnn_layer_config['cnn_padding_name']",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "conv_activation_fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self._get_conv_activation_fn(cnn_activation_name)",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "layer_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pooling2d_413": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "pool_size",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(2, 2)",
                            "Tuple"
                        ],
                        [
                            "(2, 2)",
                            "Tuple"
                        ],
                        [
                            "(2, 2)",
                            "Tuple"
                        ]
                    ]
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_454": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_505": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, raws, cols]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_506": {
                "variable": {
                    "value": "list_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "raws",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p8_util_config.ADANET_FEATURE_SHAPE[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_520": {
                "variable": {
                    "value": "rnn_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "num_hidden_units",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_574": {
                "a": {
                    "value": "output[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('W', dtype=tf.float32, shape=shape, initializer=layer_initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_606": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "layer_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_611": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "layer_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pooling2d_616": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "pool_size",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(2, 2)",
                            "Tuple"
                        ],
                        [
                            "(2, 2)",
                            "Tuple"
                        ],
                        [
                            "(2, 2)",
                            "Tuple"
                        ]
                    ]
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_626": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dense_651": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self._cnn_dense_unit_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "layer_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_737": {
                "variable": {
                    "value": "complexity",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(complexity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_762": {
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_795": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_op_807": {
                "name": {
                    "value": "mixture_weights_train_op",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_495": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[logits_dimension]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_508": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, raws, cols]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_509": {
                "variable": {
                    "value": "list_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "raws",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p8_util_config.ADANET_FEATURE_SHAPE[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRUCell_522": {
                "variable": {
                    "value": "rnn_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "num_hidden_units",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_638": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "cnn_layer_filter",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list_cnn_layer_filter",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "layer_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pooling2d_643": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "pool_size",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(2, 2)",
                            "Tuple"
                        ],
                        [
                            "(2, 2)",
                            "Tuple"
                        ],
                        [
                            "(2, 2)",
                            "Tuple"
                        ]
                    ]
                },
                "strides": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_656": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "to_float_711": {
                "x": {
                    "value": "self._num_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_746": {
                "variable": {
                    "value": "complexity",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(self._num_layers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_756": {
                "value": {
                    "value": "self._num_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_760": {
                "value": {
                    "value": "self._num_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_765": {
                "value": {
                    "value": "self._num_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPooling2D_430": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_511": {
                "variable": {
                    "value": "last_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, raws, cols]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_512": {
                "variable": {
                    "value": "list_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "last_layer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(last_layer, units=self._dict_dnn_layer_config['dnn_hidden_units'], activation=tf.nn.relu, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(last_layer, rate=self._dropout, seed=self._seed, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "list(features.values())[0]",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "keras.layers.Conv2D(cnn_filters, kernel_size=tuple_cnn_kernel_size, strides=cnn_strides, padding=cnn_padding_name, data_format=None, dilation_rate=(1, 1), activation=conv_activation_fn, use_bias=True, kernel_initializer='glorot_uniform', bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None, activity_regularizer=None, kernel_constraint=None, bias_constraint=None)(last_layer)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2))(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=conv_activation_fn, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.reshape(last_layer, [-1, raws, cols])",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(logits, units=num_hidden_units, kernel_initializer=tf.glorot_uniform_initializer(seed=self._seed))",
                            "Call"
                        ],
                        [
                            "input_layer",
                            "Name"
                        ],
                        [
                            "features['images']",
                            "Subscript"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=64, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(last_layer)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(last_layer, filters=cnn_layer_filter, kernel_size=(3, 3), strides=1, padding='same', activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.max_pooling2d(inputs=last_layer, pool_size=pool_size, strides=2)",
                            "Call"
                        ],
                        [
                            "self._cnn_bacth_norm(last_layer, is_training)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(inputs=last_layer, units=self._cnn_dense_unit_size, activation=tf.nn.relu, kernel_initializer=layer_initializer())",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=last_layer, rate=self._dropout, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "raws",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p8_util_config.ADANET_FEATURE_SHAPE[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiRNNCell_535": {
                "variable": {
                    "value": "rnn_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "list_rnn_cell",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[tf.contrib.rnn.GRUCell(num_units=n) for n in list_stacked_cell]",
                            "ListComp"
                        ],
                        [
                            "[tf.contrib.rnn.LSTMCell(num_units=n) for n in list_stacked_cell]",
                            "ListComp"
                        ],
                        [
                            "[tf.keras.layers.SimpleRNNCell(num_units=n) for n in list_stacked_cell]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "to_float_737": {
                "x": {
                    "value": "complexity",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.to_float(self._num_layers))",
                            "Call"
                        ],
                        [
                            "self._num_layers",
                            "Attribute"
                        ],
                        [
                            "complexity + self._dict_cnn_layer_config['cnn_dense_layer_num']",
                            "BinOp"
                        ],
                        [
                            "tf.sqrt(tf.to_float(self._num_layers))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.to_float(complexity))",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiRNNCell_548": {
                "variable": {
                    "value": "rnn_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "list_rnn_cell",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[tf.contrib.rnn.GRUCell(num_units=n) for n in list_stacked_cell]",
                            "ListComp"
                        ],
                        [
                            "[tf.contrib.rnn.LSTMCell(num_units=n) for n in list_stacked_cell]",
                            "ListComp"
                        ],
                        [
                            "[tf.keras.layers.SimpleRNNCell(num_units=n) for n in list_stacked_cell]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "to_float_746": {
                "x": {
                    "value": "self._num_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_768": {
                "value": {
                    "value": "self._num_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_770": {
                "value": {
                    "value": "self._num_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_772": {
                "value": {
                    "value": "self._num_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_534": {
                "num_units": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MultiRNNCell_561": {
                "variable": {
                    "value": "rnn_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "list_rnn_cell",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[tf.contrib.rnn.GRUCell(num_units=n) for n in list_stacked_cell]",
                            "ListComp"
                        ],
                        [
                            "[tf.contrib.rnn.LSTMCell(num_units=n) for n in list_stacked_cell]",
                            "ListComp"
                        ],
                        [
                            "[tf.keras.layers.SimpleRNNCell(num_units=n) for n in list_stacked_cell]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "LSTMCell_547": {
                "num_units": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SimpleRNNCell_560": {
                "num_units": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "P8/NNGenerator.py": {
        "tensorflow": {
            "constant_value_124": {
                "variable": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "pylist": {
                    "value": "previous_ensemble.weighted_subnetworks[-1].subnetwork.shared[self._nn_type]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "P8/mle/trainer/model.py": {
        "tensorflow": {
            "numeric_column_21": {
                "key": {
                    "value": "str(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ServingInputReceiver_33": {
                "features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature_placeholders",
                            "Name"
                        ]
                    ]
                },
                "receiver_tensors": {
                    "value": "feature_placeholders",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{column.name: tf.placeholder(tf.float32, [None]) for column in INPUT_COLUMNS}",
                            "DictComp"
                        ]
                    ]
                }
            },
            "placeholder_30": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "P8/p8_util_config.py": {
        "tensorflow": {
            "RMSPropOptimizer_120": {
                "variable": {
                    "value": "OPTIMIZER",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LEARNING_RATE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "RMSPropOptimizer_127": {
                "variable": {
                    "value": "OPTIMIZER",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LEARNING_RATE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            },
            "AdamOptimizer_137": {
                "variable": {
                    "value": "OPTIMIZER",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "LEARNING_RATE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.001",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    }
}