{
    "data_loading.py": {
        "torch": {}
    },
    "factorization_1d.py": {
        "torch": {
            "device_54": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Tensor_97": {
                "variable": {
                    "value": "T0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_98": {
                "variable": {
                    "value": "L0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_99": {
                "variable": {
                    "value": "T0L0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_112": {
                "variable": {
                    "value": "T_latent",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "ldim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "T_inputsize[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "T_inputsize[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_113": {
                "variable": {
                    "value": "L_latent",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "ldim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "L_inputsize[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "L_inputsize[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_213": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(tnet.parameters()) + list(lnet.parameters()) + [T_latent, L_latent]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "L1Loss_214": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_236": {
                "variable": {
                    "value": "TL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tnet(T_latent)",
                            "Call"
                        ],
                        [
                            "tnet(T_latent)",
                            "Call"
                        ],
                        [
                            "centercrop(T, T0.shape[0], T0.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lnet(L_latent)",
                            "Call"
                        ],
                        [
                            "centercrop(L, L0.shape[0], L0.shape[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_135": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(feats[i] + coordpad, feats[i + 1], 4) for i in range(0, len(feats) - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "variable": {
                    "value": "self.conv_final1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feats[-1] + coordpad + self.aux_channels_pad",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feats[-1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "variable": {
                    "value": "self.conv_final2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feats[-1] // 2 + coordpad",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_149": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_150": {
                "variable": {
                    "value": "self.up_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout2d_151": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_152": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 2, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_153": {
                "variable": {
                    "value": "self.pad_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "linspace_157": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_158": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "shape[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, cx, cy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_185": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(xs[2], xs[3])",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, cx, cy), 1)",
                            "Call"
                        ],
                        [
                            "self.convs[i](x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, cx, cy), 1)",
                            "Call"
                        ],
                        [
                            "self.up_last(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.aux_channels), 1)",
                            "Call"
                        ],
                        [
                            "self.pad_final(x)",
                            "Call"
                        ],
                        [
                            "self.conv_final1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, cx, cy), 1)",
                            "Call"
                        ],
                        [
                            "self.pad_final(x)",
                            "Call"
                        ],
                        [
                            "self.conv_final2(x)",
                            "Call"
                        ],
                        [
                            "torch.exp(x - 2)",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, cx, cy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_192": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, cx, cy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_177": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(xs[2], xs[3])",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, cx, cy), 1)",
                            "Call"
                        ],
                        [
                            "self.convs[i](x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, cx, cy), 1)",
                            "Call"
                        ],
                        [
                            "self.up_last(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.aux_channels), 1)",
                            "Call"
                        ],
                        [
                            "self.pad_final(x)",
                            "Call"
                        ],
                        [
                            "self.conv_final1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, cx, cy), 1)",
                            "Call"
                        ],
                        [
                            "self.pad_final(x)",
                            "Call"
                        ],
                        [
                            "self.conv_final2(x)",
                            "Call"
                        ],
                        [
                            "torch.exp(x - 2)",
                            "Call"
                        ],
                        [
                            "F.tanh(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_182": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.aux_channels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "in_channels": {
                    "value": "feats[i] + coordpad",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feats[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "factorization_light_transport.py": {
        "torch": {
            "set_device_89": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_179": {
                "variable": {
                    "value": "svecs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sv_V_aux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sv_V[:, :nvec, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(sv_V_aux, [s_c, nvec, s_I, s_J])",
                            "Call"
                        ],
                        [
                            "sv_V_aux * np.reshape(np.sqrt(sv_S / np.expand_dims(sv_S[:, 1], 1)), [s_c, nvec, 1, 1])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_181": {
                "variable": {
                    "value": "sv_V",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sv_V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.expand_dims(sv_V, 0)",
                            "Call"
                        ],
                        [
                            "np.concatenate((sv_V, np.expand_dims(sv_Vc, 0)), 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sv_V).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_182": {
                "variable": {
                    "value": "sv_S",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sv_S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.expand_dims(sv_S, 0)",
                            "Call"
                        ],
                        [
                            "np.concatenate((sv_S, np.expand_dims(sv_Sc, 0)), 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sv_S).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "sv_U",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sv_U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.expand_dims(sv_U, 0)",
                            "Call"
                        ],
                        [
                            "np.concatenate((sv_U, np.expand_dims(sv_Uc, 0)), 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(sv_U).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_185": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Z[:, :, :, 1]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(Z, 3)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Z).float().to(device)",
                            "Call"
                        ],
                        [
                            "tonemap(Z)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_196": {
                "variable": {
                    "value": "oemask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "oemask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - overexp_mask.astype(np.float32)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(oemask).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_197": {
                "variable": {
                    "value": "oemask_dI",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "oemask_dI",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oemask[1:, :] * oemask[:-1, :]",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(oemask_dI).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_198": {
                "variable": {
                    "value": "oemask_dJ",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "oemask_dJ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oemask[:, 1:] * oemask[:, :-1]",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(oemask_dJ).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_200": {
                "variable": {
                    "value": "Zmean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Z[:, :, :, 1]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(Z, 3)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(Z).float().to(device)",
                            "Call"
                        ],
                        [
                            "tonemap(Z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_201": {
                "variable": {
                    "value": "Zmeanmean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Zmean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(Z, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_219": {
                "variable": {
                    "value": "criterion1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_220": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_284": {
                "variable": {
                    "value": "tv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.view(s_b, s_c, s_I * s_J, s_i * s_j)",
                            "Call"
                        ],
                        [
                            "t.view(s_b, s_c, s_I, s_J, s_i, s_j)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vnet()",
                            "Call"
                        ],
                        [
                            "v.permute(0, 1, 3, 4, 2).view(s_b, s_c, s_i * s_j, s_t) / (s_i * s_j)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_287": {
                "variable": {
                    "value": "tvmean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(t, v)",
                            "Call"
                        ],
                        [
                            "tv.view(s_b, s_c, s_I, s_J, s_t)",
                            "Call"
                        ],
                        [
                            "tonemap(tv)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_326": {
                "variable": {
                    "value": "t_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.view(s_b, s_c, s_I * s_J, s_i * s_j)",
                            "Call"
                        ],
                        [
                            "t.view(s_b, s_c, s_I, s_J, s_i, s_j)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_263": {
                "variable": {
                    "value": "vsnap_full",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.detach().cpu().squeeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_331": {
                "input": {
                    "value": "torch.stack([loss.eval() for loss in losses])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_438": {
                "variable": {
                    "value": "v_vis_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(v_vis_imgs)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clamp_445": {
                "variable": {
                    "value": "A_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A_vis / (1e-07 + torch.std(A_vis, dim=2, keepdim=True)) * 0.13 + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_466": {
                "variable": {
                    "value": "Tslices1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t[0, 0, :, s_J // 2, :, s_j // 2].squeeze(), t[0, 0, :, s_J // 2, s_i // 2, :].squeeze())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_466": {
                "variable": {
                    "value": "Tslices1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_471": {
                "variable": {
                    "value": "Tslices2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t[0, 0, s_I // 2, :, s_i // 2, :].squeeze(), t[0, 0, s_I // 2, :, :, s_j // 2].squeeze())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_471": {
                "variable": {
                    "value": "Tslices2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_306": {
                "input": {
                    "value": "A[:, 0, :, :].abs()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_322": {
                "input": {
                    "value": "torch.pow(torch.clamp(t, max=0), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_331": {
                "tensors": {
                    "value": "[loss.eval() for loss in losses]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "save_373": {
                "obj": {
                    "value": "tnet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TNet_SV(svecs=svecs, Zmean=Zmean, out_channels=s_c)",
                            "Call"
                        ],
                        [
                            "tnet.to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "outdir + 'tnet.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_374": {
                "obj": {
                    "value": "vnet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VNet(s_t, out_channels=s_c)",
                            "Call"
                        ],
                        [
                            "vnet.to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "outdir + 'vnet.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_316": {
                "input": {
                    "value": "oemask_dI.view(1, 1, s_I - 1, s_J, 1, 1) * torch.abs(t_tm2[:, :, 1:, :, :, :] - t_tm2[:, :, :-1, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_318": {
                "input": {
                    "value": "oemask_dJ.view(1, 1, s_I, s_J - 1, 1, 1) * torch.abs(t_tm2[:, :, :, 1:, :, :] - t_tm2[:, :, :, :-1, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_322": {
                "input": {
                    "value": "torch.clamp(t, max=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_432": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vnet()",
                            "Call"
                        ],
                        [
                            "v.permute(0, 1, 3, 4, 2).view(s_b, s_c, s_i * s_j, s_t) / (s_i * s_j)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_438": {
                "input": {
                    "value": "v_vis_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_vis[0, :, :, :, v_vis_frames]",
                            "Subscript"
                        ],
                        [
                            "v_vis_imgs.permute(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(torch.sqrt(v_vis_imgs), scale_factor=4, mode='nearest')",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_444": {
                "input": {
                    "value": "A_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tnet.A[0, 0, :A_vis_n, :].view(A_vis_n, 1, v_size * v_size)",
                            "Call"
                        ],
                        [
                            "A_vis - torch.mean(A_vis, dim=2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(A_vis / (1e-07 + torch.std(A_vis, dim=2, keepdim=True)) * 0.13 + 0.5, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "A_vis.view(A_vis_n, 1, v_size, v_size)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(A_vis, scale_factor=4, mode='nearest') * 255",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_447": {
                "input": {
                    "value": "A_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tnet.A[0, 0, :A_vis_n, :].view(A_vis_n, 1, v_size * v_size)",
                            "Call"
                        ],
                        [
                            "A_vis - torch.mean(A_vis, dim=2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(A_vis / (1e-07 + torch.std(A_vis, dim=2, keepdim=True)) * 0.13 + 0.5, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "A_vis.view(A_vis_n, 1, v_size, v_size)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(A_vis, scale_factor=4, mode='nearest') * 255",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clamp_322": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.view(s_b, s_c, s_I * s_J, s_i * s_j)",
                            "Call"
                        ],
                        [
                            "t.view(s_b, s_c, s_I, s_J, s_i, s_j)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_316": {
                "input": {
                    "value": "t_tm2[:, :, 1:, :, :, :] - t_tm2[:, :, :-1, :, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_318": {
                "input": {
                    "value": "t_tm2[:, :, :, 1:, :, :] - t_tm2[:, :, :, :-1, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "std_445": {
                "input": {
                    "value": "A_vis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tnet.A[0, 0, :A_vis_n, :].view(A_vis_n, 1, v_size * v_size)",
                            "Call"
                        ],
                        [
                            "A_vis - torch.mean(A_vis, dim=2, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(A_vis / (1e-07 + torch.std(A_vis, dim=2, keepdim=True)) * 0.13 + 0.5, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "A_vis.view(A_vis_n, 1, v_size, v_size)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(A_vis, scale_factor=4, mode='nearest') * 255",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "layers.py": {
        "torch": {
            "interpolate_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode=self.mode)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2, align_corners=True, mode=mode)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode=mode)",
                            "Call"
                        ],
                        [
                            "torch.cat((x0, x1), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.ci, self.cj), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.N), dim=1)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x * self.W",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x, self.ci, self.cj, self.ck), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.N), dim=1)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x * self.W",
                            "BinOp"
                        ],
                        [
                            "x * self.W + xmean * (1 - self.W)",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_88": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_180": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_40": {
                "variable": {
                    "value": "[x0, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode=self.mode)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2, align_corners=True, mode=mode)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode=mode)",
                            "Call"
                        ],
                        [
                            "torch.cat((x0, x1), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.ci, self.cj), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.N), dim=1)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x * self.W",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x, self.ci, self.cj, self.ck), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.N), dim=1)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x * self.W",
                            "BinOp"
                        ],
                        [
                            "x * self.W + xmean * (1 - self.W)",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.split, xs[1] - self.split]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_41": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(x0, scale_factor=2, align_corners=True, mode=linearnames[len(x.shape)])",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "linearnames[len(x.shape)]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{3: 'linear', 4: 'bilinear', 5: 'trilinear'}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cat_47": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.ci, self.cj)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.N)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.ci, self.cj, self.ck)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.N)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_43": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(x1, scale_factor=2, align_corners=True, mode=mode)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x1, scale_factor=2, mode=mode)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mode",
                            "Attribute"
                        ],
                        [
                            "linearnames[len(x.shape)]",
                            "Subscript"
                        ],
                        [
                            "'nearest'",
                            "Method Argument"
                        ],
                        [
                            "'nearest'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_45": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(x1, scale_factor=2, align_corners=True, mode=mode)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x1, scale_factor=2, mode=mode)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mode",
                            "Attribute"
                        ],
                        [
                            "linearnames[len(x.shape)]",
                            "Subscript"
                        ],
                        [
                            "'nearest'",
                            "Method Argument"
                        ],
                        [
                            "'nearest'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode=self.mode)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2, align_corners=True, mode=mode)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode=mode)",
                            "Call"
                        ],
                        [
                            "torch.cat((x0, x1), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.ci, self.cj), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.N), dim=1)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x * self.W",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x, self.ci, self.cj, self.ck), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.N), dim=1)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x * self.W",
                            "BinOp"
                        ],
                        [
                            "x * self.W + xmean * (1 - self.W)",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mode",
                            "Attribute"
                        ],
                        [
                            "linearnames[len(x.shape)]",
                            "Subscript"
                        ],
                        [
                            "'nearest'",
                            "Method Argument"
                        ],
                        [
                            "'nearest'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode=self.mode)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2, align_corners=True, mode=mode)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode=mode)",
                            "Call"
                        ],
                        [
                            "torch.cat((x0, x1), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.ci, self.cj), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.N), dim=1)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x * self.W",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x, self.ci, self.cj, self.ck), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.N), dim=1)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x * self.W",
                            "BinOp"
                        ],
                        [
                            "x * self.W + xmean * (1 - self.W)",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mode",
                            "Attribute"
                        ],
                        [
                            "linearnames[len(x.shape)]",
                            "Subscript"
                        ],
                        [
                            "'nearest'",
                            "Method Argument"
                        ],
                        [
                            "'nearest'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normal_96": {
                "mean": {
                    "value": "conv.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "linspace_106": {
                "variable": {
                    "value": "self.ci",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "xs[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_107": {
                "variable": {
                    "value": "self.cj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "xs[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_116": {
                "variable": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.noise_dim, xs[2], xs[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "normal_187": {
                "mean": {
                    "value": "conv.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "linspace_195": {
                "variable": {
                    "value": "self.ci",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "xs[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_196": {
                "variable": {
                    "value": "self.cj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "xs[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_197": {
                "variable": {
                    "value": "self.ck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "xs[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_204": {
                "variable": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, self.noise_dim, xs[2], xs[3], xs[4])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_221": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.matmul(np.reshape(np.hanning(xs[2]), [xs[2], 1]), np.reshape(np.hanning(xs[3]), [1, xs[3]]))",
                            "Call"
                        ],
                        [
                            "np.reshape(W, [1, 1, xs[2], xs[3]])",
                            "Call"
                        ],
                        [
                            "np.sqrt(W)",
                            "Call"
                        ],
                        [
                            "np.matmul(np.reshape(np.hanning(xs[3]), [xs[3], 1]), np.reshape(np.hanning(xs[4]), [1, xs[4]]))",
                            "Call"
                        ],
                        [
                            "np.reshape(W, [1, 1, 1, xs[3], xs[4]])",
                            "Call"
                        ],
                        [
                            "np.sqrt(W)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_227": {
                "variable": {
                    "value": "xmean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode=self.mode)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2, align_corners=True, mode=mode)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode=mode)",
                            "Call"
                        ],
                        [
                            "torch.cat((x0, x1), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.ci, self.cj), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.N), dim=1)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x * self.W",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x, self.ci, self.cj, self.ck), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.N), dim=1)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "x * self.W",
                            "BinOp"
                        ],
                        [
                            "x * self.W + xmean * (1 - self.W)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(3, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "s_in + self.coords_dim + self.noise_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "s_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.fsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.matmul(np.reshape(np.hanning(xs[2]), [xs[2], 1]), np.reshape(np.hanning(xs[3]), [1, xs[3]]))",
                            "Call"
                        ],
                        [
                            "np.reshape(W, [1, 1, xs[2], xs[3]])",
                            "Call"
                        ],
                        [
                            "np.sqrt(W)",
                            "Call"
                        ],
                        [
                            "np.matmul(np.reshape(np.hanning(xs[3]), [xs[3], 1]), np.reshape(np.hanning(xs[4]), [1, xs[4]]))",
                            "Call"
                        ],
                        [
                            "np.reshape(W, [1, 1, 1, xs[3], xs[4]])",
                            "Call"
                        ],
                        [
                            "np.sqrt(W)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_141": {
                "variable": {
                    "value": "Wi",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "xs[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_142": {
                "variable": {
                    "value": "Wj",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "xs[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Wi, Wj, 1 - Wi, 1 - Wj)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_182": {
                "in_channels": {
                    "value": "s_in + self.coords_dim + 1 * self.noise_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "s_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.fsize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model_T.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "self.x0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([1] + self.S0, requires_grad=True, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "variable": {
                    "value": "self.svweight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(np.ones([1, self.out_channels, self.svs.shape[3], 1]).astype(np.float), dtype=torch.float, requires_grad=True, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "TConv([self.S0[0], layerwidth // 2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_67": {
                "variable": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(A0, dtype=torch.float, requires_grad=True, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.svs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers(self.x0)",
                            "Call"
                        ],
                        [
                            "x.view(xs[0], self.out_channels, self.nvec, xs[2] * xs[3])",
                            "Call"
                        ],
                        [
                            "x * self.svweight",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.svs, x)",
                            "Call"
                        ],
                        [
                            "x.view(1, self.out_channels, self.s_I, self.s_J, 16, 16)",
                            "Call"
                        ],
                        [
                            "x + self.Zmean",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(self.svs, self.A)",
                            "Call"
                        ],
                        [
                            "x.view(xs[0], 1, xs[1], xs[2], 16, 16).permute(0, 1, 4, 5, 2, 3)",
                            "Call"
                        ],
                        [
                            "x + self.Zmean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.svs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "self.A",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_22": {
                "*size": {
                    "value": "[1] + self.S0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "np.ones([1, self.out_channels, self.svs.shape[3], 1]).astype(np.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "data": {
                    "value": "A0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(0, 1, [self.svs.shape[3], 16 * 16]).astype(np.float)",
                            "Call"
                        ],
                        [
                            "A0 * 0.1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model_V.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "self.x0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn([1] + self.S0, requires_grad=True, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.blacklevel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([1, out_channels, 1, 1, 1], dtype=torch.float, requires_grad=True, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.layers_pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "VConv([self.S0[0], layerwidth], window=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_22": {
                "*size": {
                    "value": "[1] + self.S0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "[1, out_channels, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_52": {
                "input": {
                    "value": "xr[:, 0:self.out_channels, :, :, :] + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}