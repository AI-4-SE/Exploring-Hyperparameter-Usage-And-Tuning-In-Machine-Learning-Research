{
    "glow/Glow.py": {
        "tensorflow": {
            "set_random_seed_23": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_81": {
                "variable": {
                    "value": "logdet_pior_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logdet",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "self.beta_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "y_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[c.BATCH_SIZE, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "z_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[c.BATCH_SIZE, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_111": {
                "variable": {
                    "value": "trainable_variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_128": {
                "variable": {
                    "value": "self.lr_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_130": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr_ph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_175": {
                "variable": {
                    "value": "logdet_pior_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logdet",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_177": {
                "variable": {
                    "value": "self.y_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "y.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_178": {
                "variable": {
                    "value": "self.z_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "z.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_161": {
                "variable": {
                    "value": "sample_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sample_y_flatten",
                    "type": "Name",
                    "possible_values": [
                        [
                            "prior_y.sample()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "y.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_162": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "prior_z.sample()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "z.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_105": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "log_prob_y + log_prob_z + logdet",
                            "BinOp"
                        ],
                        [
                            "-tf.reduce_mean(loss)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "add_n_113": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in tqdm(trainable_variables, total=len(trainable_variables), leave=False)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_97": {
                "input": {
                    "value": "y_flatten",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y, [c.BATCH_SIZE, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_98": {
                "input": {
                    "value": "z_flatten",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(z, [c.BATCH_SIZE, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_165": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_97": {
                "input": {
                    "value": "y_flatten",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y, [c.BATCH_SIZE, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_98": {
                "input": {
                    "value": "z_flatten",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(z, [c.BATCH_SIZE, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_113": {
                "t": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "glow/config_glow.py": {
        "tensorflow": {
            "DEFINE_string_14": {
                "name": {
                    "value": "dir_root",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "./out/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_15": {
                "name": {
                    "value": "file_ckpt",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InteractiveSession_51": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_52": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_54": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "glow/flow_layers.py": {
        "tensorflow": {
            "zeros_148": {
                "variable": {
                    "value": "logdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_52": {
                "variable": {
                    "value": "logdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logdet",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(logdet, name='lodget')",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "lodget",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_171": {
                "variable": {
                    "value": "dlogdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-tf.log(y) - tf.log(1 - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_178": {
                "variable": {
                    "value": "dlogdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-2 * tf.log(denominator) - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_235": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.clip_by_value(tf.floor(y * num_bins) * (256.0 / num_bins), 0, 255)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "uint8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "space_to_depth_273": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(x, name='x')",
                            "Call"
                        ],
                        [
                            "tf.identity(x, name='y')",
                            "Call"
                        ],
                        [
                            "1 / denominator",
                            "BinOp"
                        ],
                        [
                            "tf.floor(255 * x / 2 ** (8 - self._num_bits))",
                            "Call"
                        ],
                        [
                            "x / num_bins",
                            "BinOp"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ],
                        [
                            "y + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(tf.floor(y * num_bins) * (256.0 / num_bins), 0, 255), 'uint8')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(tf.floor(y * num_bins) * (256.0 / num_bins), 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(y, 2)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, split:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([new_y, y], axis=3)",
                            "Call"
                        ],
                        [
                            "new_y",
                            "Name"
                        ],
                        [
                            "y - self._bias_t",
                            "BinOp"
                        ],
                        [
                            "y * tf.exp(-self._log_scale_t)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(y, self._inv_kernel_t, [1, 1, 1, 1], 'SAME', data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.concat([y1, y2], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "depth_to_space_283": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x * 255.0",
                            "BinOp"
                        ],
                        [
                            "y + corruption_level * tf.random_uniform(xs)",
                            "BinOp"
                        ],
                        [
                            "y / (255.0 + corruption_level)",
                            "BinOp"
                        ],
                        [
                            "y * (1 - alpha) + alpha * 0.5",
                            "BinOp"
                        ],
                        [
                            "x + tf.random_uniform(tf.shape(x), 0, 1.0 / num_bins)",
                            "BinOp"
                        ],
                        [
                            "tf.space_to_depth(x, 2)",
                            "Call"
                        ],
                        [
                            "x + self._bias_t",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(self._log_scale_t)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(x, self._kernel_t, [1, 1, 1, 1], 'SAME', data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.concat([x1, x2], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_475": {
                "variable": {
                    "value": "omega",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "np.exp(-min(1, n) / max(1, n))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_add_477": {
                "variable": {
                    "value": "bias_assign_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self._bias_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "new_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._bias_t * (1 - omega) - omega * x_mean",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "bias_assign",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_485": {
                "variable": {
                    "value": "self._bias_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.variable_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_550": {
                "variable": {
                    "value": "omega",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "np.exp(-min(1, n) / max(1, n))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_553": {
                "variable": {
                    "value": "log_scale_assign_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self._log_scale_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "new_scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._log_scale_t * (1 - omega) + omega * var",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "log_scale_assign",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_561": {
                "variable": {
                    "value": "self._log_scale_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "log_scale",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.variable_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_727": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(x, name='x')",
                            "Call"
                        ],
                        [
                            "tf.identity(x, name='y')",
                            "Call"
                        ],
                        [
                            "1 / denominator",
                            "BinOp"
                        ],
                        [
                            "tf.floor(255 * x / 2 ** (8 - self._num_bits))",
                            "Call"
                        ],
                        [
                            "x / num_bins",
                            "BinOp"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ],
                        [
                            "y + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(tf.floor(y * num_bins) * (256.0 / num_bins), 0, 255), 'uint8')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(tf.floor(y * num_bins) * (256.0 / num_bins), 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(y, 2)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, split:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([new_y, y], axis=3)",
                            "Call"
                        ],
                        [
                            "new_y",
                            "Name"
                        ],
                        [
                            "y - self._bias_t",
                            "BinOp"
                        ],
                        [
                            "y * tf.exp(-self._log_scale_t)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(y, self._inv_kernel_t, [1, 1, 1, 1], 'SAME', data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.concat([y1, y2], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self._kernel_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_732": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x * 255.0",
                            "BinOp"
                        ],
                        [
                            "y + corruption_level * tf.random_uniform(xs)",
                            "BinOp"
                        ],
                        [
                            "y / (255.0 + corruption_level)",
                            "BinOp"
                        ],
                        [
                            "y * (1 - alpha) + alpha * 0.5",
                            "BinOp"
                        ],
                        [
                            "x + tf.random_uniform(tf.shape(x), 0, 1.0 / num_bins)",
                            "BinOp"
                        ],
                        [
                            "tf.space_to_depth(x, 2)",
                            "Call"
                        ],
                        [
                            "x + self._bias_t",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(self._log_scale_t)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(x, self._kernel_t, [1, 1, 1, 1], 'SAME', data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.concat([x1, x2], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self._inv_kernel_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_782": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_803": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y1, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_46": {
                "name": {
                    "value": "outputs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(x, name='x')",
                            "Call"
                        ],
                        [
                            "tf.identity(x, name='y')",
                            "Call"
                        ],
                        [
                            "1 / denominator",
                            "BinOp"
                        ],
                        [
                            "tf.floor(255 * x / 2 ** (8 - self._num_bits))",
                            "Call"
                        ],
                        [
                            "x / num_bins",
                            "BinOp"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ],
                        [
                            "y + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(tf.floor(y * num_bins) * (256.0 / num_bins), 0, 255), 'uint8')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(tf.floor(y * num_bins) * (256.0 / num_bins), 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(y, 2)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, split:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([new_y, y], axis=3)",
                            "Call"
                        ],
                        [
                            "new_y",
                            "Name"
                        ],
                        [
                            "y - self._bias_t",
                            "BinOp"
                        ],
                        [
                            "y * tf.exp(-self._log_scale_t)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(y, self._inv_kernel_t, [1, 1, 1, 1], 'SAME', data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.concat([y1, y2], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "x",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_51": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(x, name='x')",
                            "Call"
                        ],
                        [
                            "tf.identity(x, name='y')",
                            "Call"
                        ],
                        [
                            "1 / denominator",
                            "BinOp"
                        ],
                        [
                            "tf.floor(255 * x / 2 ** (8 - self._num_bits))",
                            "Call"
                        ],
                        [
                            "x / num_bins",
                            "BinOp"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ],
                        [
                            "y + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(tf.floor(y * num_bins) * (256.0 / num_bins), 0, 255), 'uint8')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(tf.floor(y * num_bins) * (256.0 / num_bins), 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(y, 2)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, split:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([new_y, y], axis=3)",
                            "Call"
                        ],
                        [
                            "new_y",
                            "Name"
                        ],
                        [
                            "y - self._bias_t",
                            "BinOp"
                        ],
                        [
                            "y * tf.exp(-self._log_scale_t)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(y, self._inv_kernel_t, [1, 1, 1, 1], 'SAME', data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.concat([y1, y2], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "y",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_54": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(z, name='z')",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.space_to_depth(z, 2)",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(z, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, new_z], axis=3)",
                            "Call"
                        ],
                        [
                            "new_z",
                            "Name"
                        ],
                        [
                            "z[:, :, :, :-split]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "z",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "floor_213": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "255 * x / 2 ** (8 - self._num_bits)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_250": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "tf.floor(y * num_bins) * (256.0 / num_bins)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "space_to_depth_275": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(z, name='z')",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.space_to_depth(z, 2)",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(z, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, new_z], axis=3)",
                            "Call"
                        ],
                        [
                            "new_z",
                            "Name"
                        ],
                        [
                            "z[:, :, :, :-split]",
                            "Subscript"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "depth_to_space_285": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(z, name='z')",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.space_to_depth(z, 2)",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(z, 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([z, new_z], axis=3)",
                            "Call"
                        ],
                        [
                            "new_z",
                            "Name"
                        ],
                        [
                            "z[:, :, :, :-split]",
                            "Subscript"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_316": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[z, new_z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_336": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[new_y, y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_424": {
                "variable": {
                    "value": "x_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(x, name='x')",
                            "Call"
                        ],
                        [
                            "tf.identity(x, name='y')",
                            "Call"
                        ],
                        [
                            "1 / denominator",
                            "BinOp"
                        ],
                        [
                            "tf.floor(255 * x / 2 ** (8 - self._num_bits))",
                            "Call"
                        ],
                        [
                            "x / num_bins",
                            "BinOp"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ],
                        [
                            "y + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(tf.floor(y * num_bins) * (256.0 / num_bins), 0, 255), 'uint8')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(tf.floor(y * num_bins) * (256.0 / num_bins), 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(y, 2)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, split:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([new_y, y], axis=3)",
                            "Call"
                        ],
                        [
                            "new_y",
                            "Name"
                        ],
                        [
                            "y - self._bias_t",
                            "BinOp"
                        ],
                        [
                            "y * tf.exp(-self._log_scale_t)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(y, self._inv_kernel_t, [1, 1, 1, 1], 'SAME', data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.concat([y1, y2], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_425": {
                "variable": {
                    "value": "x_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(x - x_mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "group_620": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[bias_update_op, scale_update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_668": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kernel",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.linalg.qr(np.random.randn(*w_shape))[0].astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_679": {
                "variable": {
                    "value": "self._kernel_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', dtype=tf.float32, initializer=w_init)",
                            "Call"
                        ],
                        [
                            "tf.matmul(p_mat, tf.matmul(l_mat, u_mat))",
                            "Call"
                        ],
                        [
                            "tf.cast(w, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "kernel_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, 1, num_channels, num_channels]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_680": {
                "variable": {
                    "value": "self._inv_kernel_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.matrix_inverse(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "kernel_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, 1, num_channels, num_channels]",
                            "List"
                        ]
                    ]
                }
            },
            "get_variable_689": {
                "variable": {
                    "value": "p_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "P_mat",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_690": {
                "variable": {
                    "value": "l_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "L_mat",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np_l",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_691": {
                "variable": {
                    "value": "sign_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "sign_S",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np_sign_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.sign(np_s)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_692": {
                "variable": {
                    "value": "log_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "log_S",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np_log_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(abs(np_s))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_693": {
                "variable": {
                    "value": "u_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "U_mat",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np_u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.triu(np_u, k=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_698": {
                "variable": {
                    "value": "p_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_mat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('P_mat', initializer=np_p, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.cast(p_mat, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'float64'",
                            "Constant"
                        ]
                    ]
                }
            },
            "cast_699": {
                "variable": {
                    "value": "l_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "l_mat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('L_mat', initializer=np_l)",
                            "Call"
                        ],
                        [
                            "tf.cast(l_mat, dtype)",
                            "Call"
                        ],
                        [
                            "l_mat * l_mask + tf.eye(*w_shape, dtype=dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'float64'",
                            "Constant"
                        ]
                    ]
                }
            },
            "cast_700": {
                "variable": {
                    "value": "sign_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sign_s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('sign_S', initializer=np_sign_s, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.cast(sign_s, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'float64'",
                            "Constant"
                        ]
                    ]
                }
            },
            "cast_701": {
                "variable": {
                    "value": "log_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('log_S', initializer=np_log_s)",
                            "Call"
                        ],
                        [
                            "tf.cast(log_s, dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(log_s, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'float64'",
                            "Constant"
                        ]
                    ]
                }
            },
            "cast_702": {
                "variable": {
                    "value": "u_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "u_mat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('U_mat', initializer=np_u)",
                            "Call"
                        ],
                        [
                            "tf.cast(u_mat, dtype)",
                            "Call"
                        ],
                        [
                            "u_mat * np.transpose(l_mask) + tf.diag(sign_s * tf.exp(log_s))",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'float64'",
                            "Constant"
                        ]
                    ]
                }
            },
            "matmul_707": {
                "a": {
                    "value": "l_mat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('L_mat', initializer=np_l)",
                            "Call"
                        ],
                        [
                            "tf.cast(l_mat, dtype)",
                            "Call"
                        ],
                        [
                            "l_mat * l_mask + tf.eye(*w_shape, dtype=dtype)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "u_mat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('U_mat', initializer=np_u)",
                            "Call"
                        ],
                        [
                            "tf.cast(u_mat, dtype)",
                            "Call"
                        ],
                        [
                            "u_mat * np.transpose(l_mask) + tf.diag(sign_s * tf.exp(log_s))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_713": {
                "a": {
                    "value": "l_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matrix_inverse(l_mat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "p_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matrix_inverse(p_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_715": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', dtype=tf.float32, initializer=w_init)",
                            "Call"
                        ],
                        [
                            "tf.matmul(p_mat, tf.matmul(l_mat, u_mat))",
                            "Call"
                        ],
                        [
                            "tf.cast(w, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_716": {
                "variable": {
                    "value": "w_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w_inv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(u_inv, tf.matmul(l_inv, p_inv))",
                            "Call"
                        ],
                        [
                            "tf.cast(w_inv, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_717": {
                "variable": {
                    "value": "log_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('log_S', initializer=np_log_s)",
                            "Call"
                        ],
                        [
                            "tf.cast(log_s, dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(log_s, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_719": {
                "variable": {
                    "value": "self._kernel_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', dtype=tf.float32, initializer=w_init)",
                            "Call"
                        ],
                        [
                            "tf.matmul(p_mat, tf.matmul(l_mat, u_mat))",
                            "Call"
                        ],
                        [
                            "tf.cast(w, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "kernel_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, 1, num_channels, num_channels]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_720": {
                "variable": {
                    "value": "self._inv_kernel_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_inv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(u_inv, tf.matmul(l_inv, p_inv))",
                            "Call"
                        ],
                        [
                            "tf.cast(w_inv, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "kernel_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, 1, num_channels, num_channels]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_777": {
                "variable": {
                    "value": "dlogdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.log(scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "f'{type(self).__name__}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "log_170": {
                "x": {
                    "value": "1 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_176": {
                "x": {
                    "value": "-y",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_235": {
                "t": {
                    "value": "tf.floor(y * num_bins) * (256.0 / num_bins)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "255",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_default_graph_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_428": {
                "variable": {
                    "value": "x_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(x, name='x')",
                            "Call"
                        ],
                        [
                            "tf.identity(x, name='y')",
                            "Call"
                        ],
                        [
                            "1 / denominator",
                            "BinOp"
                        ],
                        [
                            "tf.floor(255 * x / 2 ** (8 - self._num_bits))",
                            "Call"
                        ],
                        [
                            "x / num_bins",
                            "BinOp"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ],
                        [
                            "y + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(tf.floor(y * num_bins) * (256.0 / num_bins), 0, 255), 'uint8')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(tf.floor(y * num_bins) * (256.0 / num_bins), 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(y, 2)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, split:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([new_y, y], axis=3)",
                            "Call"
                        ],
                        [
                            "new_y",
                            "Name"
                        ],
                        [
                            "y - self._bias_t",
                            "BinOp"
                        ],
                        [
                            "y * tf.exp(-self._log_scale_t)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(y, self._inv_kernel_t, [1, 1, 1, 1], 'SAME', data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.concat([y1, y2], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_429": {
                "variable": {
                    "value": "x_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(x - x_mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_547": {
                "x": {
                    "value": "self._scale / (tf.sqrt(x_var) + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_573": {
                "x": {
                    "value": "self._log_scale_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_581": {
                "input_tensor": {
                    "value": "self._log_scale_t",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_588": {
                "x": {
                    "value": "-self._log_scale_t",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "control_dependencies_618": {
                "control_inputs": {
                    "value": "[bias_update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_743": {
                "x": {
                    "value": "tf.clip_by_value(x, -15.0, 15.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_171": {
                "x": {
                    "value": "y",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x * 255.0",
                            "BinOp"
                        ],
                        [
                            "y + corruption_level * tf.random_uniform(xs)",
                            "BinOp"
                        ],
                        [
                            "y / (255.0 + corruption_level)",
                            "BinOp"
                        ],
                        [
                            "y * (1 - alpha) + alpha * 0.5",
                            "BinOp"
                        ],
                        [
                            "x + tf.random_uniform(tf.shape(x), 0, 1.0 / num_bins)",
                            "BinOp"
                        ],
                        [
                            "tf.space_to_depth(x, 2)",
                            "Call"
                        ],
                        [
                            "x + self._bias_t",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(self._log_scale_t)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(x, self._kernel_t, [1, 1, 1, 1], 'SAME', data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.concat([x1, x2], axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_216": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(x, name='x')",
                            "Call"
                        ],
                        [
                            "tf.identity(x, name='y')",
                            "Call"
                        ],
                        [
                            "1 / denominator",
                            "BinOp"
                        ],
                        [
                            "tf.floor(255 * x / 2 ** (8 - self._num_bits))",
                            "Call"
                        ],
                        [
                            "x / num_bins",
                            "BinOp"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ],
                        [
                            "y + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(tf.floor(y * num_bins) * (256.0 / num_bins), 0, 255), 'uint8')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(tf.floor(y * num_bins) * (256.0 / num_bins), 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(y, 2)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, split:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([new_y, y], axis=3)",
                            "Call"
                        ],
                        [
                            "new_y",
                            "Name"
                        ],
                        [
                            "y - self._bias_t",
                            "BinOp"
                        ],
                        [
                            "y * tf.exp(-self._log_scale_t)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(y, self._inv_kernel_t, [1, 1, 1, 1], 'SAME', data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.concat([y1, y2], axis=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_486": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_565": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_705": {
                "num_rows": {
                    "value": "*w_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'float64'",
                            "Constant"
                        ]
                    ]
                }
            },
            "diag_706": {
                "diagonal": {
                    "value": "sign_s * tf.exp(log_s)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_743": {
                "t": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(x, name='x')",
                            "Call"
                        ],
                        [
                            "tf.identity(x, name='y')",
                            "Call"
                        ],
                        [
                            "1 / denominator",
                            "BinOp"
                        ],
                        [
                            "tf.floor(255 * x / 2 ** (8 - self._num_bits))",
                            "Call"
                        ],
                        [
                            "x / num_bins",
                            "BinOp"
                        ],
                        [
                            "x - 0.5",
                            "BinOp"
                        ],
                        [
                            "y + 0.5",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.clip_by_value(tf.floor(y * num_bins) * (256.0 / num_bins), 0, 255), 'uint8')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(tf.floor(y * num_bins) * (256.0 / num_bins), 0, 255)",
                            "Call"
                        ],
                        [
                            "tf.depth_to_space(y, 2)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, split:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([new_y, y], axis=3)",
                            "Call"
                        ],
                        [
                            "new_y",
                            "Name"
                        ],
                        [
                            "y - self._bias_t",
                            "BinOp"
                        ],
                        [
                            "y * tf.exp(-self._log_scale_t)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(y, self._inv_kernel_t, [1, 1, 1, 1], 'SAME', data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.concat([y1, y2], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-15.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "15.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_777": {
                "x": {
                    "value": "scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._log_scale_fn(log_scale)",
                            "Call"
                        ],
                        [
                            "self._log_scale_fn(log_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_796": {
                "input_tensor": {
                    "value": "tf.log(scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_178": {
                "x": {
                    "value": "denominator",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 + tf.exp(-y)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "floor_236": {
                "x": {
                    "value": "y * num_bins",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_251": {
                "x": {
                    "value": "y * num_bins",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_670": {
                "x": {
                    "value": "tf.log(tf.abs(tf.matrix_determinant(tf.cast(w, dtype))))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_718": {
                "input_tensor": {
                    "value": "log_s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('log_S', initializer=np_log_s)",
                            "Call"
                        ],
                        [
                            "tf.cast(log_s, dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(log_s, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_796": {
                "x": {
                    "value": "scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._log_scale_fn(log_scale)",
                            "Call"
                        ],
                        [
                            "self._log_scale_fn(log_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_547": {
                "x": {
                    "value": "x_var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean((x - x_mean) ** 2, [0], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean((x - x_mean) ** 2, [0, 1, 2], keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_671": {
                "x": {
                    "value": "tf.abs(tf.matrix_determinant(tf.cast(w, dtype)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_706": {
                "x": {
                    "value": "log_s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('log_S', initializer=np_log_s)",
                            "Call"
                        ],
                        [
                            "tf.cast(log_s, dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(log_s, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_671": {
                "x": {
                    "value": "tf.matrix_determinant(tf.cast(w, dtype))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_671": {
                "x": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable('kernel', dtype=tf.float32, initializer=w_init)",
                            "Call"
                        ],
                        [
                            "tf.matmul(p_mat, tf.matmul(l_mat, u_mat))",
                            "Call"
                        ],
                        [
                            "tf.cast(w, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'float64'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "glow/main.py": {
        "tensorflow": {
            "DEFINE_string_14": {
                "name": {
                    "value": "data_set",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "CIFAR10",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "SVHN /CIFAR10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_24": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InteractiveSession_63": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_84": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'scope_glow'",
                            "Constant"
                        ]
                    ]
                }
            },
            "global_variables_initializer_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "glow/nets.py": {
        "tensorflow": {
            "conv2d_91": {
                "variable": {
                    "value": "shift_log_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf_layers.conv2d(inputs=h_input, num_outputs=num_units, kernel_size=3, activation_fn=activation_fn, weights_regularizer=reg_fn())",
                            "Call"
                        ],
                        [
                            "tf_layers.conv2d(inputs=h, num_outputs=num_units, kernel_size=1, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "activation_fn(h)",
                            "Call"
                        ],
                        [
                            "h + h_input",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.activation_fn(ops.conv2d('l_1', h, self.width))",
                            "Call"
                        ],
                        [
                            "self.activation_fn(ops.conv2d('l_2', h, self.width, filter_size=[1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "num_outputs": {
                    "value": "2 * num_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "tf.variance_scaling_initializer(scale=0.001)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_101": {
                "variable": {
                    "value": "log_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "log_scale",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "shift_log_scale[:, :, :, num_channels:]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(log_scale, -15.0, 15.0)",
                            "Call"
                        ],
                        [
                            "shift_log_scale[:, :, :, 1::2]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(log_scale, -15.0, 15.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-15.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "15.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "make_template_104": {
                "name_": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'Step{s + 1}'",
                            "JoinedStr"
                        ]
                    ]
                },
                "func_": {
                    "value": "_shift_and_log_scale_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "make_template_186": {
                "name_": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'Step{s + 1}'",
                            "JoinedStr"
                        ]
                    ]
                },
                "func_": {
                    "value": "_shift_and_log_scale_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Session_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_62": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "tf_layers.conv2d(inputs=h_input, num_outputs=num_units, kernel_size=1, activation_fn=activation_fn, weights_regularizer=reg_fn())",
                            "Call"
                        ]
                    ]
                },
                "num_outputs": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels * units_factor",
                            "BinOp"
                        ],
                        [
                            "units_width",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "activation_fn",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                },
                "weights_regularizer": {
                    "value": "reg_fn()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_69": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf_layers.conv2d(inputs=h_input, num_outputs=num_units, kernel_size=3, activation_fn=activation_fn, weights_regularizer=reg_fn())",
                            "Call"
                        ],
                        [
                            "tf_layers.conv2d(inputs=h, num_outputs=num_units, kernel_size=1, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "activation_fn(h)",
                            "Call"
                        ],
                        [
                            "h + h_input",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "self.activation_fn(ops.conv2d('l_1', h, self.width))",
                            "Call"
                        ],
                        [
                            "self.activation_fn(ops.conv2d('l_2', h, self.width, filter_size=[1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "num_outputs": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels * units_factor",
                            "BinOp"
                        ],
                        [
                            "units_width",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_183": {
                "variable": {
                    "value": "log_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "log_scale",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "shift_log_scale[:, :, :, num_channels:]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(log_scale, -15.0, 15.0)",
                            "Call"
                        ],
                        [
                            "shift_log_scale[:, :, :, 1::2]",
                            "Subscript"
                        ],
                        [
                            "tf.clip_by_value(log_scale, -15.0, 15.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-15.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "15.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "f'ResnetBlock{u}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "BlockNN",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_78": {
                "variable": {
                    "value": "h_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h",
                            "Name"
                        ],
                        [
                            "tf_layers.conv2d(inputs=h_input, num_outputs=num_units, kernel_size=1, activation_fn=activation_fn, weights_regularizer=reg_fn())",
                            "Call"
                        ]
                    ]
                },
                "num_outputs": {
                    "value": "num_units",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_channels * units_factor",
                            "BinOp"
                        ],
                        [
                            "units_width",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "activation_fn",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ],
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                },
                "weights_regularizer": {
                    "value": "reg_fn()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "glow/tf_ops.py": {
        "tensorflow": {
            "get_variable_36": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'_'.join([str(dim) for dim in [a, b, *int_shape(x)[1:3]]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.get_shape()",
                            "Call"
                        ],
                        [
                            "x.get_shape()",
                            "Call"
                        ],
                        [
                            "K.int_shape(weights)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_20": {
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "std",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.05",
                            "MethodArgument"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_140": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_in, width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "initializer or default_initializer()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_144": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "x * tf.exp(tf.get_variable('logs', [1, width], initializer=tf.zeros_initializer()) * logscale_factor)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(logs)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(-logs)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x, scale)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, dtype, None, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "w.assign(initial_value)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [n_in, width], tf.float32, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, [0])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [n_in, width], tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, tf.float32, initializer=default_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, [0, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_157": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_in, width]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_159": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "x * tf.exp(tf.get_variable('logs', [1, width], initializer=tf.zeros_initializer()) * logscale_factor)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(logs)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(-logs)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x, scale)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, dtype, None, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "w.assign(initial_value)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [n_in, width], tf.float32, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, [0])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [n_in, width], tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, tf.float32, initializer=default_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, [0, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_176": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "x * tf.exp(tf.get_variable('logs', [1, width], initializer=tf.zeros_initializer()) * logscale_factor)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(logs)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(-logs)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x, scale)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [a, a], [b, b], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_178": {
                "variable": {
                    "value": "pads",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'_'.join([str(dim) for dim in [a, b, *int_shape(x)[1:3]]])",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_189": {
                "variable": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros_like(x[:, :, :, :1]) - 1, [[0, 0], [a, a], [b, b], [0, 0]]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.zeros([1] + int_shape(x)[1:3] + [1], dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(pad)",
                            "Call"
                        ],
                        [
                            "pads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(pad, [tf.shape(x)[0], 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "'VALID'",
                            "Constant"
                        ],
                        [
                            "'VALID'",
                            "Constant"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[tf.shape(x)[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_190": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_194": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "x * tf.exp(tf.get_variable('logs', [1, width], initializer=tf.zeros_initializer()) * logscale_factor)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(logs)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(-logs)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x, scale)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [a, a], [b, b], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_195": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_212": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "filter_size + [n_in, width]",
                            "BinOp"
                        ],
                        [
                            "filter_size + [n_in, width]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "default_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_244": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "filter_size + [n_in, width]",
                            "BinOp"
                        ],
                        [
                            "filter_size + [n_in, width]",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'_'.join([str(dim) for dim in [a, b, *int_shape(x)[1:3]]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_77": {
                "variable": {
                    "value": "x_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "x * tf.exp(tf.get_variable('logs', [1, width], initializer=tf.zeros_initializer()) * logscale_factor)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(logs)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(-logs)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x, scale)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'_'.join([str(dim) for dim in [a, b, *int_shape(x)[1:3]]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_103": {
                "variable": {
                    "value": "x_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_113": {
                "variable": {
                    "value": "x_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_138": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'_'.join([str(dim) for dim in [a, b, *int_shape(x)[1:3]]])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_143": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, dtype, None, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "w.assign(initial_value)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [n_in, width], tf.float32, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, [0])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [n_in, width], tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, tf.float32, initializer=default_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, [0, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_145": {
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'_'.join([str(dim) for dim in [a, b, *int_shape(x)[1:3]]])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_160": {
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_162": {
                "x": {
                    "value": "tf.get_variable('logs', [1, width], initializer=tf.zeros_initializer()) * logscale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_185": {
                "variable": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "pad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros_like(x[:, :, :, :1]) - 1, [[0, 0], [a, a], [b, b], [0, 0]]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.zeros([1] + int_shape(x)[1:3] + [1], dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(pad)",
                            "Call"
                        ],
                        [
                            "pads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(pad, [tf.shape(x)[0], 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "'VALID'",
                            "Constant"
                        ],
                        [
                            "'VALID'",
                            "Constant"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_203": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'_'.join([str(dim) for dim in [a, b, *int_shape(x)[1:3]]])",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_215": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, dtype, None, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "w.assign(initial_value)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [n_in, width], tf.float32, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, [0])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [n_in, width], tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, tf.float32, initializer=default_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, [0, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_217": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "x * tf.exp(tf.get_variable('logs', [1, width], initializer=tf.zeros_initializer()) * logscale_factor)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(logs)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(-logs)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x, scale)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, dtype, None, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "w.assign(initial_value)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [n_in, width], tf.float32, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, [0])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [n_in, width], tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, tf.float32, initializer=default_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, [0, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[1] + stride + [1]",
                            "BinOp"
                        ],
                        [
                            "[1] + stride + [1]",
                            "BinOp"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros_like(x[:, :, :, :1]) - 1, [[0, 0], [a, a], [b, b], [0, 0]]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.zeros([1] + int_shape(x)[1:3] + [1], dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(pad)",
                            "Call"
                        ],
                        [
                            "pads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(pad, [tf.shape(x)[0], 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "'VALID'",
                            "Constant"
                        ],
                        [
                            "'VALID'",
                            "Constant"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "atrous_conv2d_220": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "x * tf.exp(tf.get_variable('logs', [1, width], initializer=tf.zeros_initializer()) * logscale_factor)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(logs)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(-logs)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x, scale)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, dtype, None, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "w.assign(initial_value)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [n_in, width], tf.float32, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, [0])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [n_in, width], tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, tf.float32, initializer=default_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, [0, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "skip",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros_like(x[:, :, :, :1]) - 1, [[0, 0], [a, a], [b, b], [0, 0]]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.zeros([1] + int_shape(x)[1:3] + [1], dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(pad)",
                            "Call"
                        ],
                        [
                            "pads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(pad, [tf.shape(x)[0], 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "'VALID'",
                            "Constant"
                        ],
                        [
                            "'VALID'",
                            "Constant"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'_'.join([str(dim) for dim in [a, b, *int_shape(x)[1:3]]])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_247": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "x * tf.exp(tf.get_variable('logs', [1, width], initializer=tf.zeros_initializer()) * logscale_factor)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(logs)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(-logs)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x, scale)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, dtype, None, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "w.assign(initial_value)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [n_in, width], tf.float32, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, [0])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [n_in, width], tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, tf.float32, initializer=default_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, [0, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_shape",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "[1] + stride + [1]",
                            "BinOp"
                        ],
                        [
                            "[1] + stride + [1]",
                            "BinOp"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros_like(x[:, :, :, :1]) - 1, [[0, 0], [a, a], [b, b], [0, 0]]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.zeros([1] + int_shape(x)[1:3] + [1], dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(pad)",
                            "Call"
                        ],
                        [
                            "pads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(pad, [tf.shape(x)[0], 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "'VALID'",
                            "Constant"
                        ],
                        [
                            "'VALID'",
                            "Constant"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "atrous_conv2d_250": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "x * tf.exp(tf.get_variable('logs', [1, width], initializer=tf.zeros_initializer()) * logscale_factor)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(logs)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(-logs)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x, scale)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, dtype, None, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "w.assign(initial_value)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [n_in, width], tf.float32, initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, [0])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', [n_in, width], tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, tf.float32, initializer=default_initializer())",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, [0, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', filter_shape, tf.float32, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "skip",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros_like(x[:, :, :, :1]) - 1, [[0, 0], [a, a], [b, b], [0, 0]]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.zeros([1] + int_shape(x)[1:3] + [1], dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(pad)",
                            "Call"
                        ],
                        [
                            "pads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(pad, [tf.shape(x)[0], 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "'VALID'",
                            "Constant"
                        ],
                        [
                            "'VALID'",
                            "Constant"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_251": {
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_253": {
                "x": {
                    "value": "tf.get_variable('logs', [1, width], initializer=tf.zeros_initializer()) * logscale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_39": {
                "control_inputs": {
                    "value": "[w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_81": {
                "variable": {
                    "value": "x_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "x * tf.exp(tf.get_variable('logs', [1, width], initializer=tf.zeros_initializer()) * logscale_factor)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(logs)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(-logs)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x, scale)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_108": {
                "variable": {
                    "value": "x_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_to_collection_186": {
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'_'.join([str(dim) for dim in [a, b, *int_shape(x)[1:3]]])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "pad",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(tf.zeros_like(x[:, :, :, :1]) - 1, [[0, 0], [a, a], [b, b], [0, 0]]) + 1",
                            "BinOp"
                        ],
                        [
                            "np.zeros([1] + int_shape(x)[1:3] + [1], dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(pad)",
                            "Call"
                        ],
                        [
                            "pads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(pad, [tf.shape(x)[0], 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "'VALID'",
                            "Constant"
                        ],
                        [
                            "'VALID'",
                            "Constant"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_192": {
                "tensor": {
                    "value": "tf.zeros_like(x[:, :, :, :1]) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [a, a], [b, b], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_224": {
                "name": {
                    "value": "b",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_228": {
                "tensor": {
                    "value": "linear('context', context1d, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, 1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_279": {
                "name": {
                    "value": "SELUConv2DRegLoss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_to_collection_281": {
                "name": {
                    "value": "SELU_CONV2D_REG_LOSS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'selu_conv2d_reg_loss'",
                            "Constant"
                        ]
                    ]
                },
                "value": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fc_selu_reg(weights, scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_120": {
                "x": {
                    "value": "logs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_variable_ddi('logs', _shape, initial_value=tf.log(scale / (tf.sqrt(x_var) + 1e-06)) / logscale_factor) * logscale_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_122": {
                "x": {
                    "value": "-logs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_125": {
                "input_tensor": {
                    "value": "logs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_variable_ddi('logs', _shape, initial_value=tf.log(scale / (tf.sqrt(x_var) + 1e-06)) / logscale_factor) * logscale_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_initializer_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_162": {
                "name": {
                    "value": "logs",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_253": {
                "name": {
                    "value": "logs",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_189": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_scale(name + '_scale', x, scale, logdet, logscale_factor, batch_variance, reverse, init)",
                            "Call"
                        ],
                        [
                            "actnorm_center(name + '_center', x, reverse)",
                            "Call"
                        ],
                        [
                            "x * tf.exp(tf.get_variable('logs', [1, width], initializer=tf.zeros_initializer()) * logscale_factor)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(logs)",
                            "BinOp"
                        ],
                        [
                            "x * tf.exp(-logs)",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x, scale)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [a, a], [b, b], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.concat([x, pad], axis=3)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ],
                        [
                            "actnorm('actnorm', x)",
                            "Call"
                        ],
                        [
                            "add_edge_padding(x, filter_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, stride_shape, pad, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "tf.nn.atrous_conv2d(x, w, skip, pad)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_192": {
                "input": {
                    "value": "x[:, :, :, :1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_initializer_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_116": {
                "x": {
                    "value": "scale / (tf.sqrt(x_var) + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_117": {
                "x": {
                    "value": "x_var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x ** 2, [0], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x ** 2, [0, 1, 2], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x ** 2, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "glow/util/HandleCIFAR10.py": {
        "tensorflow": {
            "DEFINE_bool_17": {
                "name": {
                    "value": "do_write_tfrecord",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "if True, write tfrecords.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_18": {
                "name": {
                    "value": "do_write_npy",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "if True, write npy.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_250": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordWriter_214": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "file_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_123": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(label, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Example_203": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image': tf.train.Feature(float_list=tf.train.FloatList(value=image)), 'attributes': tf.train.Feature(int64_list=tf.train.Int64List(value=attributes))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parse_single_example_81": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image': tf.train.Feature(float_list=tf.train.FloatList(value=image)), 'attributes': tf.train.Feature(int64_list=tf.train.Int64List(value=attributes))}))",
                            "Call"
                        ]
                    ]
                },
                "features": {
                    "value": "{'image': tf.FixedLenFeature([32 * 32 * 3], tf.float32), 'label': tf.FixedLenFeature([], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordDataset_76": {
                "filenames": {
                    "value": "test_tfrecord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dir_rood + '/' + 'test.tfrecords'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "map_and_batch_95": {
                "map_func": {
                    "value": "preprocess",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_parallel_batches": {
                    "value": "num_parallel_batches",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_remainder": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_123": {
                "x": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['label']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_and_repeat_109": {
                "buffer_size": {
                    "value": "buffer_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "count": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Features_204": {
                "feature": {
                    "value": "{'image': tf.train.Feature(float_list=tf.train.FloatList(value=image)), 'attributes': tf.train.Feature(int64_list=tf.train.Int64List(value=attributes))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FixedLenFeature_84": {
                "shape": {
                    "value": "[32 * 32 * 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_85": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Feature_206": {
                "float_list": {
                    "value": "tf.train.FloatList(value=image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_207": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=attributes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FloatList_206": {
                "value": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(features['image'], [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "imread(os.path.join(PATH_TO_RAWIMG, file_name))",
                            "Call"
                        ],
                        [
                            "image[40:188, 15:163, :]",
                            "Subscript"
                        ],
                        [
                            "image.reshape([148, 148, 3])",
                            "Call"
                        ],
                        [
                            "cv2.resize(image, dsize=(IMG_SIZE, IMG_SIZE), interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "self.read_image(img_file_name)",
                            "Call"
                        ],
                        [
                            "self.read_image(img_file_name)",
                            "Call"
                        ],
                        [
                            "image.tostring()",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_207": {
                "value": {
                    "value": "attributes",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "glow/util/HandleSVHN.py": {
        "tensorflow": {
            "DEFINE_bool_17": {
                "name": {
                    "value": "do_write_tfrecord",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "if True, write tfrecords.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_18": {
                "name": {
                    "value": "do_write_npy",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "if True, write npy.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_248": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordWriter_212": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "file_name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_123": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(label, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Example_201": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image': tf.train.Feature(float_list=tf.train.FloatList(value=image)), 'attributes': tf.train.Feature(int64_list=tf.train.Int64List(value=attributes))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parse_single_example_81": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'image': tf.train.Feature(float_list=tf.train.FloatList(value=image)), 'attributes': tf.train.Feature(int64_list=tf.train.Int64List(value=attributes))}))",
                            "Call"
                        ]
                    ]
                },
                "features": {
                    "value": "{'image': tf.FixedLenFeature([32 * 32 * 3], tf.float32), 'label': tf.FixedLenFeature([], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordDataset_76": {
                "filenames": {
                    "value": "test_tfrecord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dir_rood + '/' + 'test.tfrecords'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "map_and_batch_95": {
                "map_func": {
                    "value": "preprocess",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_parallel_batches": {
                    "value": "num_parallel_batches",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_remainder": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_123": {
                "x": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['label']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_and_repeat_109": {
                "buffer_size": {
                    "value": "buffer_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "count": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Features_202": {
                "feature": {
                    "value": "{'image': tf.train.Feature(float_list=tf.train.FloatList(value=image)), 'attributes': tf.train.Feature(int64_list=tf.train.Int64List(value=attributes))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FixedLenFeature_84": {
                "shape": {
                    "value": "[32 * 32 * 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_85": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Feature_204": {
                "float_list": {
                    "value": "tf.train.FloatList(value=image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_205": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=attributes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FloatList_204": {
                "value": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(features['image'], [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "imread(os.path.join(PATH_TO_RAWIMG, file_name))",
                            "Call"
                        ],
                        [
                            "image[40:188, 15:163, :]",
                            "Subscript"
                        ],
                        [
                            "image.reshape([148, 148, 3])",
                            "Call"
                        ],
                        [
                            "cv2.resize(image, dsize=(IMG_SIZE, IMG_SIZE), interpolation=cv2.INTER_LINEAR)",
                            "Call"
                        ],
                        [
                            "self.read_image(img_file_name)",
                            "Call"
                        ],
                        [
                            "self.read_image(img_file_name)",
                            "Call"
                        ],
                        [
                            "image.tostring()",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_205": {
                "value": {
                    "value": "attributes",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "glow/util/cifar10.py": {
        "tensorflow": {
            "DEFINE_integer_40": {
                "name": {
                    "value": "num_valid_examples",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of validation examples",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_224": {
                "x": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform(tf.cast(image, tf.float32)) if train else image",
                            "IfExp"
                        ],
                        [
                            "transform(tf.cast(image, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_205": {
                "x": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform(tf.cast(image, tf.float32)) if train else image",
                            "IfExp"
                        ],
                        [
                            "transform(tf.cast(image, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "glow/util/dataset_utils.py": {
        "tensorflow": {
            "TFRecordWriter_49": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "filepath",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TFRecordReader_65": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_68": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'image': tf.FixedLenFeature([3072], tf.float32), 'label': tf.FixedLenFeature([], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images[index].tolist()",
                            "Call"
                        ],
                        [
                            "features['image']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_79": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(features['label'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images[index].tolist()",
                            "Call"
                        ],
                        [
                            "features['image']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Feature_34": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_38": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_52": {
                "variable": {
                    "value": "image_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "float_list": {
                    "value": "tf.train.FloatList(value=image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_54": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'height': _int64_feature(32), 'width': _int64_feature(32), 'depth': _int64_feature(3), 'label': _int64_feature(int(labels[index])), 'image': image_feature})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shuffle_batch_94": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "example",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'height': _int64_feature(32), 'width': _int64_feature(32), 'depth': _int64_feature(3), 'label': _int64_feature(int(labels[index])), 'image': image_feature}))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "min_queue_examples + 5 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "batch_101": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "example",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'height': _int64_feature(32), 'width': _int64_feature(32), 'depth': _int64_feature(3), 'label': _int64_feature(int(labels[index])), 'image': image_feature}))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "allow_smaller_final_batch": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "min_queue_examples + 5 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "string_input_producer_127": {
                "string_tensor": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "num_epochs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_79": {
                "x": {
                    "value": "features['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_116": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images[index].tolist()",
                            "Call"
                        ],
                        [
                            "features['image']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[2, 2], [2, 2], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_crop_117": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images[index].tolist()",
                            "Call"
                        ],
                        [
                            "features['image']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_119": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images[index].tolist()",
                            "Call"
                        ],
                        [
                            "features['image']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_34": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_38": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_52": {
                "value": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images[index].tolist()",
                            "Call"
                        ],
                        [
                            "features['image']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_54": {
                "feature": {
                    "value": "{'height': _int64_feature(32), 'width': _int64_feature(32), 'depth': _int64_feature(3), 'label': _int64_feature(int(labels[index])), 'image': image_feature}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FixedLenFeature_72": {
                "shape": {
                    "value": "[3072]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_73": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "glow/util/svhn.py": {
        "tensorflow": {
            "DEFINE_integer_33": {
                "name": {
                    "value": "num_valid_examples",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of validation examples",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_212": {
                "x": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform(tf.cast(image, tf.float32)) if train else image",
                            "IfExp"
                        ],
                        [
                            "transform(tf.cast(image, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_195": {
                "x": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform(tf.cast(image, tf.float32)) if train else image",
                            "IfExp"
                        ],
                        [
                            "transform(tf.cast(image, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "glow/util/utils.py": {
        "tensorflow": {
            "TFRecordDataset_60": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "tfrecord_paths",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "x_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.make_one_shot_iterator().get_next()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 148, 148, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "parse_single_example_63": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'image_raw': tf.FixedLenFeature([], tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_67": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['image_raw']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_69": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['image_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [218, 178, 3])",
                            "Call"
                        ],
                        [
                            "image[40:188, 15:163, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [148, 148, 3])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['image_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [218, 178, 3])",
                            "Call"
                        ],
                        [
                            "image[40:188, 15:163, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [148, 148, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[218, 178, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['image_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [218, 178, 3])",
                            "Call"
                        ],
                        [
                            "image[40:188, 15:163, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [148, 148, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[148, 148, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_103": {
                "x": {
                    "value": "tf.maximum(x, _epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shuffle_and_repeat_21": {
                "buffer_size": {
                    "value": "buffer_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "count": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "map_and_batch_82": {
                "map_func": {
                    "value": "preprocess_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_parallel_batches": {
                    "value": "num_parallel_batches",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_remainder": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_103": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "_epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-05",
                            "Constant"
                        ]
                    ]
                }
            },
            "map_and_batch_27": {
                "map_func": {
                    "value": "preprocess_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_parallel_batches": {
                    "value": "num_parallel_batches",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_remainder": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shuffle_and_repeat_77": {
                "buffer_size": {
                    "value": "buffer_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "count": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "FixedLenFeature_64": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lvat/cifar10.py": {
        "tensorflow": {
            "DEFINE_string_192": {
                "name": {
                    "value": "data__dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/data/img/CIFAR10_w_ZCA",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "where to store the dataset",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_195": {
                "name": {
                    "value": "num_labeled_examples",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "50000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of labeled examples",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_196": {
                "name": {
                    "value": "num_valid_examples",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of validation examples",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_197": {
                "name": {
                    "value": "dataset_seed",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "dataset seed",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_180": {
                "x": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform(tf.cast(image, tf.float32)) if train else image",
                            "IfExp"
                        ],
                        [
                            "transform(tf.cast(image, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_163": {
                "x": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform(tf.cast(image, tf.float32)) if train else image",
                            "IfExp"
                        ],
                        [
                            "transform(tf.cast(image, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lvat/cnn.py": {
        "tensorflow": {
            "DEFINE_float_7": {
                "name": {
                    "value": "keep_prob_hidden",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "dropout rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_8": {
                "name": {
                    "value": "lrelu_a",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "lrelu slope",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_44": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=3, f_out=128, seed=rng.randint(123456), name='c1')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 128, is_training=is_training, update_batch_stats=update_batch_stats, name='b1'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=128, f_out=128, seed=rng.randint(123456), name='c2')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 128, is_training=is_training, update_batch_stats=update_batch_stats, name='b2'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=128, f_out=128, seed=rng.randint(123456), name='c3')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 128, is_training=is_training, update_batch_stats=update_batch_stats, name='b3'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.max_pool(h, ksize=2, stride=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=FLAGS.keep_prob_hidden, seed=rng.randint(123456)) if stochastic else h",
                            "IfExp"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=128, f_out=256, seed=rng.randint(123456), name='c4')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 256, is_training=is_training, update_batch_stats=update_batch_stats, name='b4'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=256, f_out=256, seed=rng.randint(123456), name='c5')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 256, is_training=is_training, update_batch_stats=update_batch_stats, name='b5'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=256, f_out=256, seed=rng.randint(123456), name='c6')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 256, is_training=is_training, update_batch_stats=update_batch_stats, name='b6'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.max_pool(h, ksize=2, stride=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=FLAGS.keep_prob_hidden, seed=rng.randint(123456)) if stochastic else h",
                            "IfExp"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=256, f_out=512, seed=rng.randint(123456), padding='VALID', name='c7')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 512, is_training=is_training, update_batch_stats=update_batch_stats, name='b7'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.conv(h, ksize=1, stride=1, f_in=512, f_out=256, seed=rng.randint(123456), name='c8')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 256, is_training=is_training, update_batch_stats=update_batch_stats, name='b8'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.conv(h, ksize=1, stride=1, f_in=256, f_out=128, seed=rng.randint(123456), name='c9')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 128, is_training=is_training, update_batch_stats=update_batch_stats, name='b9'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, reduction_indices=[1, 2])",
                            "Call"
                        ],
                        [
                            "L.fc(h, 128, FLAGS.n_class, seed=rng.randint(123456), name='fc')",
                            "Call"
                        ],
                        [
                            "L.bn(h, FLAGS.n_class, is_training=is_training, update_batch_stats=update_batch_stats, name='bfc')",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_25": {
                "x": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=3, f_out=128, seed=rng.randint(123456), name='c1')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 128, is_training=is_training, update_batch_stats=update_batch_stats, name='b1'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=128, f_out=128, seed=rng.randint(123456), name='c2')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 128, is_training=is_training, update_batch_stats=update_batch_stats, name='b2'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=128, f_out=128, seed=rng.randint(123456), name='c3')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 128, is_training=is_training, update_batch_stats=update_batch_stats, name='b3'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.max_pool(h, ksize=2, stride=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=FLAGS.keep_prob_hidden, seed=rng.randint(123456)) if stochastic else h",
                            "IfExp"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=128, f_out=256, seed=rng.randint(123456), name='c4')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 256, is_training=is_training, update_batch_stats=update_batch_stats, name='b4'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=256, f_out=256, seed=rng.randint(123456), name='c5')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 256, is_training=is_training, update_batch_stats=update_batch_stats, name='b5'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=256, f_out=256, seed=rng.randint(123456), name='c6')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 256, is_training=is_training, update_batch_stats=update_batch_stats, name='b6'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.max_pool(h, ksize=2, stride=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=FLAGS.keep_prob_hidden, seed=rng.randint(123456)) if stochastic else h",
                            "IfExp"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=256, f_out=512, seed=rng.randint(123456), padding='VALID', name='c7')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 512, is_training=is_training, update_batch_stats=update_batch_stats, name='b7'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.conv(h, ksize=1, stride=1, f_in=512, f_out=256, seed=rng.randint(123456), name='c8')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 256, is_training=is_training, update_batch_stats=update_batch_stats, name='b8'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.conv(h, ksize=1, stride=1, f_in=256, f_out=128, seed=rng.randint(123456), name='c9')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 128, is_training=is_training, update_batch_stats=update_batch_stats, name='b9'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, reduction_indices=[1, 2])",
                            "Call"
                        ],
                        [
                            "L.fc(h, 128, FLAGS.n_class, seed=rng.randint(123456), name='fc')",
                            "Call"
                        ],
                        [
                            "L.bn(h, FLAGS.n_class, is_training=is_training, update_batch_stats=update_batch_stats, name='bfc')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "FLAGS.keep_prob_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "rng.randint(123456)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_35": {
                "x": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=3, f_out=128, seed=rng.randint(123456), name='c1')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 128, is_training=is_training, update_batch_stats=update_batch_stats, name='b1'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=128, f_out=128, seed=rng.randint(123456), name='c2')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 128, is_training=is_training, update_batch_stats=update_batch_stats, name='b2'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=128, f_out=128, seed=rng.randint(123456), name='c3')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 128, is_training=is_training, update_batch_stats=update_batch_stats, name='b3'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.max_pool(h, ksize=2, stride=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=FLAGS.keep_prob_hidden, seed=rng.randint(123456)) if stochastic else h",
                            "IfExp"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=128, f_out=256, seed=rng.randint(123456), name='c4')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 256, is_training=is_training, update_batch_stats=update_batch_stats, name='b4'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=256, f_out=256, seed=rng.randint(123456), name='c5')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 256, is_training=is_training, update_batch_stats=update_batch_stats, name='b5'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=256, f_out=256, seed=rng.randint(123456), name='c6')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 256, is_training=is_training, update_batch_stats=update_batch_stats, name='b6'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.max_pool(h, ksize=2, stride=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(h, keep_prob=FLAGS.keep_prob_hidden, seed=rng.randint(123456)) if stochastic else h",
                            "IfExp"
                        ],
                        [
                            "L.conv(h, ksize=3, stride=1, f_in=256, f_out=512, seed=rng.randint(123456), padding='VALID', name='c7')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 512, is_training=is_training, update_batch_stats=update_batch_stats, name='b7'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.conv(h, ksize=1, stride=1, f_in=512, f_out=256, seed=rng.randint(123456), name='c8')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 256, is_training=is_training, update_batch_stats=update_batch_stats, name='b8'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "L.conv(h, ksize=1, stride=1, f_in=256, f_out=128, seed=rng.randint(123456), name='c9')",
                            "Call"
                        ],
                        [
                            "L.lrelu(L.bn(h, 128, is_training=is_training, update_batch_stats=update_batch_stats, name='b9'), FLAGS.lrelu_a)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(h, reduction_indices=[1, 2])",
                            "Call"
                        ],
                        [
                            "L.fc(h, 128, FLAGS.n_class, seed=rng.randint(123456), name='fc')",
                            "Call"
                        ],
                        [
                            "L.bn(h, FLAGS.n_class, is_training=is_training, update_batch_stats=update_batch_stats, name='bfc')",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "FLAGS.keep_prob_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "rng.randint(123456)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lvat/dataset_utils.py": {
        "tensorflow": {
            "TFRecordWriter_44": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "filepath",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TFRecordReader_59": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_61": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'image': tf.FixedLenFeature([3072], tf.float32), 'label': tf.FixedLenFeature([], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "reshape_71": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images[index].tolist()",
                            "Call"
                        ],
                        [
                            "features['image']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_72": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(features['label'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images[index].tolist()",
                            "Call"
                        ],
                        [
                            "features['image']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Feature_31": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_35": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_47": {
                "variable": {
                    "value": "image_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "float_list": {
                    "value": "tf.train.FloatList(value=image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_48": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'height': _int64_feature(32), 'width': _int64_feature(32), 'depth': _int64_feature(3), 'label': _int64_feature(int(labels[index])), 'image': image_feature})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shuffle_batch_87": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "example",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'height': _int64_feature(32), 'width': _int64_feature(32), 'depth': _int64_feature(3), 'label': _int64_feature(int(labels[index])), 'image': image_feature}))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "batch_94": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "example",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'height': _int64_feature(32), 'width': _int64_feature(32), 'depth': _int64_feature(3), 'label': _int64_feature(int(labels[index])), 'image': image_feature}))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "allow_smaller_final_batch": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "string_input_producer_125": {
                "string_tensor": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "num_epochs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_72": {
                "x": {
                    "value": "features['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_110": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images[index].tolist()",
                            "Call"
                        ],
                        [
                            "features['image']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[2, 2], [2, 2], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_crop_111": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images[index].tolist()",
                            "Call"
                        ],
                        [
                            "features['image']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_114": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images[index].tolist()",
                            "Call"
                        ],
                        [
                            "features['image']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_31": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_35": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_47": {
                "value": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images[index].tolist()",
                            "Call"
                        ],
                        [
                            "features['image']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_48": {
                "feature": {
                    "value": "{'height': _int64_feature(32), 'width': _int64_feature(32), 'depth': _int64_feature(3), 'label': _int64_feature(int(labels[index])), 'image': image_feature}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FixedLenFeature_65": {
                "shape": {
                    "value": "[3072]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_66": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lvat/layers_vat.py": {
        "tensorflow": {
            "DEFINE_float_7": {
                "name": {
                    "value": "bn_stats_decay_factor",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.99",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "moving average decay factor for stats on batch normalization",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_20": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_prod(tf.shape(x)[:-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_22": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, weights, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, weights, [1, stride, stride, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(int(tf.shape(x).get_shape().as_list()[0]) - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_23": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.pow(x - mean, 2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(int(tf.shape(x).get_shape().as_list()[0]) - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_24": {
                "variable": {
                    "value": "avg_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_mean'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(dim,)",
                            "Tuple"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "avg_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_var'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(dim,)",
                            "Tuple"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_40": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_gamma'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(dim,)",
                            "Tuple"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_47": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_beta'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "params_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(dim,)",
                            "Tuple"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_79": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_W'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_units_in, num_units_out]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weights_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(seed=seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_82": {
                "variable": {
                    "value": "biases",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_units_out]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "xw_plus_b_85": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, weights, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, weights, [1, stride, stride, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "weights": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '_W', shape=[num_units_in, num_units_out], initializer=weights_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '_W', shape=shape, dtype='float', initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "biases",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '_b', shape=[num_units_out], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_92": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_W'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[ksize, ksize, f_in, f_out]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.variance_scaling_initializer(seed=seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_96": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, weights, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, weights, [1, stride, stride, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '_W', shape=[num_units_in, num_units_out], initializer=weights_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '_W', shape=shape, dtype='float', initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_127": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_128": {
                "variable": {
                    "value": "true",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_132": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_133": {
                "variable": {
                    "value": "true",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_143": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "q_logit",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_144": {
                "variable": {
                    "value": "qlogq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(q * logsoftmax(q_logit), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_145": {
                "variable": {
                    "value": "qlogp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(q * logsoftmax(p_logit), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_150": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_op_55": {
                "variable": {
                    "value": "avg_mean_assign_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_op_56": {
                "variable": {
                    "value": "avg_var_assign_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_99": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[f_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool_109": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, weights, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, weights, [1, stride, stride, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, ksize, ksize, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_116": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, weights, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, weights, [1, stride, stride, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, ksize, ksize, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_123": {
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=logit, labels=y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_129": {
                "input_tensor": {
                    "value": "tf.to_float(tf.equal(pred, true))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_134": {
                "x": {
                    "value": "tf.equal(pred, true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_13": {
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, weights, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, weights, [1, stride, stride, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_15": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, weights, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, weights, [1, stride, stride, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "a * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_prod_20": {
                "input_tensor": {
                    "value": "tf.shape(x)[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_23": {
                "x": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_58": {
                "variable": {
                    "value": "avg_mean_assign_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "avg_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name + '_mean', shape=params_shape, initializer=tf.constant_initializer(0.0), collections=collections, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "FLAGS.bn_stats_decay_factor * avg_mean + (1 - FLAGS.bn_stats_decay_factor) * mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_61": {
                "variable": {
                    "value": "avg_var_assign_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "avg_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name + '_var', shape=params_shape, initializer=tf.constant_initializer(1.0), collections=collections, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "FLAGS.bn_stats_decay_factor * avg_var + n / (n - 1) * (1 - FLAGS.bn_stats_decay_factor) * var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bias_add_103": {
                "value": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, weights, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, weights, [1, stride, stride, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '_b', shape=[f_out], dtype='float', initializer=tf.zeros_initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_123": {
                "logits": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "to_float_129": {
                "x": {
                    "value": "tf.equal(pred, true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_134": {
                "x": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(logit, 1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logit, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "true",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(y, 1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(y, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_137": {
                "input_tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, weights, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, weights, [1, stride, stride, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_138": {
                "x": {
                    "value": "tf.reduce_sum(tf.exp(xdev), 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_144": {
                "input_tensor": {
                    "value": "q * logsoftmax(q_logit)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_145": {
                "input_tensor": {
                    "value": "q * logsoftmax(p_logit)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_151": {
                "input_tensor": {
                    "value": "tf.reduce_sum(p * logsoftmax(logit), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_27": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_35": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_43": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_50": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_66": {
                "control_inputs": {
                    "value": "[avg_mean_assign_op, avg_var_assign_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_69": {
                "x": {
                    "value": "1e-06 + avg_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_84": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_129": {
                "x": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(logit, 1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(logit, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "true",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(y, 1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(y, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_138": {
                "input_tensor": {
                    "value": "tf.exp(xdev)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_151": {
                "input_tensor": {
                    "value": "p * logsoftmax(logit)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_20": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, weights, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, weights, [1, stride, stride, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_67": {
                "x": {
                    "value": "1e-06 + var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_138": {
                "x": {
                    "value": "xdev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, 1, keep_dims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_21": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(x, weights, biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, weights, [1, stride, stride, 1], padding=padding)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lvat/svhn.py": {
        "tensorflow": {
            "DEFINE_string_165": {
                "name": {
                    "value": "data__dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "./data/svhn",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_166": {
                "name": {
                    "value": "dataset_seed",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "dataset seed",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_167": {
                "name": {
                    "value": "num_labeled_examples",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of labeled examples",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_168": {
                "name": {
                    "value": "num_valid_examples",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of validation examples",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_155": {
                "x": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform(tf.cast(image, tf.float32)) if train else image",
                            "IfExp"
                        ],
                        [
                            "transform(tf.cast(image, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_138": {
                "x": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform(tf.cast(image, tf.float32)) if train else image",
                            "IfExp"
                        ],
                        [
                            "transform(tf.cast(image, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lvat/train_semisup.py": {
        "tensorflow": {
            "DEFINE_string_16": {
                "name": {
                    "value": "device",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/gpu:0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "device",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_17": {
                "name": {
                    "value": "data_set",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "SVHN",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "{CIFAR10, SVHN}",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_18": {
                "name": {
                    "value": "log__dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "./out",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "log_dir",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_20": {
                "name": {
                    "value": "data__dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/data/img/SVHN/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_21": {
                "name": {
                    "value": "dataset_seed",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "dataset seed",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_22": {
                "name": {
                    "value": "num_labeled_examples",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of labeled examples",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_23": {
                "name": {
                    "value": "num_valid_examples",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of validation examples",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_25": {
                "name": {
                    "value": "seed",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "initial random seed",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_26": {
                "name": {
                    "value": "validation",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_28": {
                "name": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "the number of examples in a batch",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_29": {
                "name": {
                    "value": "ul_batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "the number of unlabeled examples in a batch",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_30": {
                "name": {
                    "value": "eval_batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "25",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "the number of eval examples in a batch",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_31": {
                "name": {
                    "value": "eval_freq",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "eval_start",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "150",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_33": {
                "name": {
                    "value": "num_epochs",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "120",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "the number of epochs for training",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "epoch_decay_start",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "80",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "epoch of starting learning rate decay",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_35": {
                "name": {
                    "value": "num_iter_per_epoch",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "the number of updates per epoch",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_36": {
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "initial leanring rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_37": {
                "name": {
                    "value": "mom1",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "initial momentum rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_38": {
                "name": {
                    "value": "mom2",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "momentum rate after epoch_decay_start",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_40": {
                "name": {
                    "value": "draw_adv_img",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_41": {
                "name": {
                    "value": "method",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "lvat",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "{vat, vatent, lvat, baseline}",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_42": {
                "name": {
                    "value": "alpha",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_44": {
                "name": {
                    "value": "is_aug_trans",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_45": {
                "name": {
                    "value": "is_aug_flip",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_46": {
                "name": {
                    "value": "is_aug_rotate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_47": {
                "name": {
                    "value": "is_aug_color",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_48": {
                "name": {
                    "value": "is_aug_crop",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_50": {
                "name": {
                    "value": "ae_type",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "Glow",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "{VAE, Glow}",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_53": {
                "name": {
                    "value": "img_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "image size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_54": {
                "name": {
                    "value": "n_class",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "n of classicification class size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_106": {
                "variable": {
                    "value": "x_reconst",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_159": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[], name='learning_rate')",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "mom",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[], name='momentum')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_160": {
                "variable": {
                    "value": "theta_classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "SCOPE_CLASSIFIER",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'scope_classifier'",
                            "Constant"
                        ]
                    ]
                }
            },
            "get_variable_scope_194": {
                "variable": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_244": {
                "variable": {
                    "value": "results[y_pred]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vat.forward(x)",
                            "Call"
                        ],
                        [
                            "vat.forward(x, is_training=False, update_batch_stats=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_245": {
                "variable": {
                    "value": "results[y_true]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_247": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, (-1, FLAGS.img_size * FLAGS.img_size * 3))",
                            "Call"
                        ],
                        [
                            "_preprocess(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, FLAGS.img_size * FLAGS.img_size * 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_248": {
                "variable": {
                    "value": "x_adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_adv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ul_x + r_adv",
                            "BinOp"
                        ],
                        [
                            "ul_x + r_adv",
                            "BinOp"
                        ],
                        [
                            "decoder((y + r_adv_y, logdet, z + r_adv_z))",
                            "Call"
                        ],
                        [
                            "decoder(z + r_adv, False)",
                            "Call"
                        ],
                        [
                            "ul_x + r_adv",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x_adv, (-1, FLAGS.img_size * FLAGS.img_size * 3))",
                            "Call"
                        ],
                        [
                            "decoder(z + r_adv, False)",
                            "Call"
                        ],
                        [
                            "decoder((y_latent + r_adv_y, logdet, z + r_adv_z))",
                            "Call"
                        ],
                        [
                            "_preprocess(x_adv)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, FLAGS.img_size * FLAGS.img_size * 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_249": {
                "variable": {
                    "value": "x_reconst",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_reconst",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "decoder((y, logdet, z))",
                            "Call"
                        ],
                        [
                            "decoder(z, False)",
                            "Call"
                        ],
                        [
                            "ul_x",
                            "Name"
                        ],
                        [
                            "tf.reshape(x_reconst, (-1, FLAGS.img_size * FLAGS.img_size * 3))",
                            "Call"
                        ],
                        [
                            "decoder(z, False)",
                            "Call"
                        ],
                        [
                            "decoder((y_latent, logdet, z))",
                            "Call"
                        ],
                        [
                            "_preprocess(x_reconst)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, FLAGS.img_size * FLAGS.img_size * 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_250": {
                "variable": {
                    "value": "results[x_diff]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x - x_reconst",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_251": {
                "variable": {
                    "value": "results[x_diff_adv]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x - x_adv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_204": {
                "variable": {
                    "value": "y_reconst",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ul_logit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vat.forward(ul_x, is_training=True, update_batch_stats=False)",
                            "Call"
                        ],
                        [
                            "vat.forward(ul_x, is_training=True, update_batch_stats=False)",
                            "Call"
                        ],
                        [
                            "vat.forward(ul_x, is_training=True, update_batch_stats=False)",
                            "Call"
                        ],
                        [
                            "vat.forward(ul_x, is_training=False, update_batch_stats=False)",
                            "Call"
                        ],
                        [
                            "vat.forward(ul_x, is_training=False, update_batch_stats=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_259": {
                "seed": {
                    "value": "np.random.randint(1234)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_293": {
                "variable": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_294": {
                "variable": {
                    "value": "mom",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "momentum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Saver_303": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_304": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_307": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "run_512": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_237": {
                "variable": {
                    "value": "y_reconst",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_reconst",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vat.forward(x_reconst, is_training=False, update_batch_stats=False)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_319": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.log__dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_330": {
                "variable": {
                    "value": "classifier_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "SCOPE_CLASSIFIER",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'scope_classifier'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variables_initializer_332": {
                "variable": {
                    "value": "op_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "classifier_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.VARIABLES, scope=SCOPE_CLASSIFIER)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_334": {
                "variable": {
                    "value": "optimizer_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope_optimizer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variables_initializer_336": {
                "variable": {
                    "value": "op_init_optimiser",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "optimizer_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.VARIABLES, scope='scope_optimizer')",
                            "Call"
                        ]
                    ]
                }
            },
            "start_queue_runners_340": {
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_166": {
                "name_or_scope": {
                    "value": "scope_glow",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_261": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_124": {
                "name_or_scope": {
                    "value": "SCOPE_ENCODER",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'scope_vae'",
                            "Constant"
                        ],
                        [
                            "'scope_glow'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_213": {
                "name_or_scope": {
                    "value": "SCOPE_ENCODER",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'scope_vae'",
                            "Constant"
                        ],
                        [
                            "'scope_glow'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "SCOPE_DECODER",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'scope_vae'",
                            "Constant"
                        ],
                        [
                            "'scope_glow'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "SCOPE_ENCODER",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'scope_vae'",
                            "Constant"
                        ],
                        [
                            "'scope_glow'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_230": {
                "name_or_scope": {
                    "value": "SCOPE_DECODER",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'scope_vae'",
                            "Constant"
                        ],
                        [
                            "'scope_glow'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "SCOPE_DECODER",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'scope_vae'",
                            "Constant"
                        ],
                        [
                            "'scope_glow'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_148": {
                "name_or_scope": {
                    "value": "SCOPE_DECODER",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'scope_vae'",
                            "Constant"
                        ],
                        [
                            "'scope_glow'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_219": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lvat/utils.py": {
        "tensorflow": {
            "get_collection_5": {
                "variable": {
                    "value": "vars_to_restore",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Saver_6": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "variables_initializer_32": {
                "variable": {
                    "value": "op_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "uninitialized_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "global_variables_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lvat/vat.py": {
        "tensorflow": {
            "DEFINE_float_10": {
                "name": {
                    "value": "epsilon",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "norm length for (virtual) adversarial training ",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_11": {
                "name": {
                    "value": "num_power_iterations",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "the number of power iterations",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_12": {
                "name": {
                    "value": "xi",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-06",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "small constant for finite difference",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_138": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stop_gradient(logit)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(logit)",
                            "Call"
                        ],
                        [
                            "forward(x + r_adv, is_training=is_training, update_batch_stats=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_148": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stop_gradient(logit)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(logit)",
                            "Call"
                        ],
                        [
                            "forward(x + r_adv, is_training=is_training, update_batch_stats=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_157": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.gradients(dist, [d], aggregation_method=2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.gradients(loss, [x], aggregation_method=2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.stop_gradient(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_168": {
                "variable": {
                    "value": "logit_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(logit_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_169": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(tf.subtract(logit_t, logit_s))) + FLAGS.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_173": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logsigma",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_93": {
                "x": {
                    "value": "1e-06 + tf.reduce_sum(tf.pow(d, 2.0), list(range(1, len(d.get_shape()))), keep_dims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_111": {
                "variable": {
                    "value": "d_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(dist, [d_y], aggregation_method=2)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stop_gradient_112": {
                "variable": {
                    "value": "d_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gradients(dist, [d_z], aggregation_method=2)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stop_gradient_128": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.gradients(dist, [d], aggregation_method=2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.gradients(loss, [x], aggregation_method=2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.stop_gradient(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_170": {
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "L.kl_divergence_with_logit(logit_p, logit_m)",
                            "Call"
                        ],
                        [
                            "L.kl_divergence_with_logit(logit_p, logit_m)",
                            "Call"
                        ],
                        [
                            "L.ce_loss(logit, y)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(tf.subtract(logit_t, logit_s))) + FLAGS.epsilon)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'vat_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'vat_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'at_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'pi_loss'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "map_fn_219": {
                "fn": {
                    "value": "_distort",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "decoder(x)",
                            "Call"
                        ],
                        [
                            "decoder(x, is_train=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "SCOPE_CLASSIFIER",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'scope_classifier'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "SCOPE_CLASSIFIER",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'scope_classifier'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_92": {
                "input_tensor": {
                    "value": "tf.abs(d)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "list(range(1, len(d.get_shape())))",
                    "type": "Call",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_142": {
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "L.kl_divergence_with_logit(logit_p, logit_m)",
                            "Call"
                        ],
                        [
                            "L.kl_divergence_with_logit(logit_p, logit_m)",
                            "Call"
                        ],
                        [
                            "L.ce_loss(logit, y)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(tf.subtract(logit_t, logit_s))) + FLAGS.epsilon)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'vat_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'vat_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'at_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'pi_loss'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "identity_152": {
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "L.kl_divergence_with_logit(logit_p, logit_m)",
                            "Call"
                        ],
                        [
                            "L.kl_divergence_with_logit(logit_p, logit_m)",
                            "Call"
                        ],
                        [
                            "L.ce_loss(logit, y)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(tf.subtract(logit_t, logit_s))) + FLAGS.epsilon)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'vat_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'vat_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'at_loss'",
                            "MethodArgument"
                        ],
                        [
                            "'pi_loss'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gradients_156": {
                "ys": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "L.kl_divergence_with_logit(logit_p, logit_m)",
                            "Call"
                        ],
                        [
                            "L.kl_divergence_with_logit(logit_p, logit_m)",
                            "Call"
                        ],
                        [
                            "L.ce_loss(logit, y)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(tf.subtract(logit_t, logit_s))) + FLAGS.epsilon)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "aggregation_method": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "truncated_normal_174": {
                "shape": {
                    "value": "tf.shape(mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_185": {
                "variable": {
                    "value": "a_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(a_image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(a_image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(a_image)",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(a_image, radian, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(a_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.slice(a_image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(a_image, [32, 32])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_image, [32, 32, 3])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[2, 2], [2, 2], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_crop_186": {
                "variable": {
                    "value": "a_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "a_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(a_image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(a_image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(a_image)",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(a_image, radian, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(a_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.slice(a_image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(a_image, [32, 32])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_image, [32, 32, 3])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_189": {
                "variable": {
                    "value": "a_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "a_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(a_image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(a_image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(a_image)",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(a_image, radian, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(a_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.slice(a_image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(a_image, [32, 32])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_image, [32, 32, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_197": {
                "variable": {
                    "value": "a_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "a_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(a_image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(a_image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(a_image)",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(a_image, radian, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(a_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.slice(a_image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(a_image, [32, 32])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_image, [32, 32, 3])",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_contrast_198": {
                "variable": {
                    "value": "a_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "a_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(a_image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(a_image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(a_image)",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(a_image, radian, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(a_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.slice(a_image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(a_image, [32, 32])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_image, [32, 32, 3])",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_hue_199": {
                "variable": {
                    "value": "a_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "a_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(a_image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(a_image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(a_image)",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(a_image, radian, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(a_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.slice(a_image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(a_image, [32, 32])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_image, [32, 32, 3])",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_203": {
                "variable": {
                    "value": "bounding_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[1 / 10, 1 / 10, 9 / 10, 9 / 10]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sample_distorted_bounding_box_205": {
                "variable": {
                    "value": "(begin, size, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "image_size": {
                    "value": "(32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bounding_boxes": {
                    "value": "bounding_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([[[1 / 10, 1 / 10, 9 / 10, 9 / 10]]], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "9.8 / 10.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "aspect_ratio_range": {
                    "value": "[9.5 / 10.0, 10.0 / 9.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_210": {
                "variable": {
                    "value": "a_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "a_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(a_image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(a_image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(a_image)",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(a_image, radian, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(a_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.slice(a_image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(a_image, [32, 32])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_image, [32, 32, 3])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "begin",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_215": {
                "variable": {
                    "value": "a_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(a_image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(a_image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(a_image)",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(a_image, radian, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(a_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.slice(a_image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(a_image, [32, 32])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_image, [32, 32, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_92": {
                "x": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "d / tf.sqrt(1e-06 + tf.reduce_sum(tf.pow(d, 2.0), list(range(1, len(d.get_shape()))), keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(shape=tf.shape(x))",
                            "Call"
                        ],
                        [
                            "FLAGS.xi * get_normalized_vector(d)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_93": {
                "input_tensor": {
                    "value": "tf.pow(d, 2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "list(range(1, len(d.get_shape())))",
                    "type": "Call",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_100": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_101": {
                "input": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gradients_109": {
                "ys": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "L.kl_divergence_with_logit(logit_p, logit_m)",
                            "Call"
                        ],
                        [
                            "L.kl_divergence_with_logit(logit_p, logit_m)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[d_y]",
                    "type": "List",
                    "possible_values": []
                },
                "aggregation_method": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_110": {
                "ys": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "L.kl_divergence_with_logit(logit_p, logit_m)",
                            "Call"
                        ],
                        [
                            "L.kl_divergence_with_logit(logit_p, logit_m)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[d_z]",
                    "type": "List",
                    "possible_values": []
                },
                "aggregation_method": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_120": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "decoder(x)",
                            "Call"
                        ],
                        [
                            "decoder(x, is_train=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_127": {
                "ys": {
                    "value": "dist",
                    "type": "Call",
                    "possible_values": [
                        [
                            "L.kl_divergence_with_logit(logit_p, logit_m)",
                            "Call"
                        ],
                        [
                            "L.kl_divergence_with_logit(logit_p, logit_m)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[d]",
                    "type": "List",
                    "possible_values": []
                },
                "aggregation_method": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_169": {
                "input_tensor": {
                    "value": "tf.square(tf.subtract(logit_t, logit_s))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_174": {
                "input": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "SCOPE_DECODER",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'scope_glow'",
                            "Constant"
                        ],
                        [
                            "'scope_vae'",
                            "Constant"
                        ],
                        [
                            "'scope_ae'",
                            "Constant"
                        ],
                        [
                            "'scope_dae'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "SCOPE_DECODER",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'scope_glow'",
                            "Constant"
                        ],
                        [
                            "'scope_vae'",
                            "Constant"
                        ],
                        [
                            "'scope_ae'",
                            "Constant"
                        ],
                        [
                            "'scope_dae'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "SCOPE_DECODER",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'scope_glow'",
                            "Constant"
                        ],
                        [
                            "'scope_vae'",
                            "Constant"
                        ],
                        [
                            "'scope_ae'",
                            "Constant"
                        ],
                        [
                            "'scope_dae'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "SCOPE_DECODER",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'scope_glow'",
                            "Constant"
                        ],
                        [
                            "'scope_vae'",
                            "Constant"
                        ],
                        [
                            "'scope_ae'",
                            "Constant"
                        ],
                        [
                            "'scope_dae'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_93": {
                "x": {
                    "value": "d",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "d / tf.sqrt(1e-06 + tf.reduce_sum(tf.pow(d, 2.0), list(range(1, len(d.get_shape()))), keep_dims=True))",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(shape=tf.shape(x))",
                            "Call"
                        ],
                        [
                            "FLAGS.xi * get_normalized_vector(d)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(grad)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_169": {
                "x": {
                    "value": "tf.subtract(logit_t, logit_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_169": {
                "x": {
                    "value": "logit_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(logit_t)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "logit_s",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "vae/VAE.py": {
        "tensorflow": {
            "batch_normalization_34": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ls.conv2d(scope + '_1', h, 128, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 256, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 512, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4 * 4 * 512))",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2('top_of_encoder', h, c.Z_SIZE * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2(scope, h, 512, activation=self.ls.lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4, 4, 32))",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_1', h, 512, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_2', h, 256, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_3', h, 128, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_4', h, 3, filter_size=(1, 1), strides=(1, 1, 1, 1), padding='VALID', activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'e_1'",
                            "Constant"
                        ],
                        [
                            "'e_2'",
                            "Constant"
                        ],
                        [
                            "'e_3'",
                            "Constant"
                        ],
                        [
                            "'top_of_decoder'",
                            "Constant"
                        ],
                        [
                            "'d_1'",
                            "Constant"
                        ],
                        [
                            "'d_2'",
                            "Constant"
                        ],
                        [
                            "'d_3'",
                            "Constant"
                        ],
                        [
                            "'d_4'",
                            "Constant"
                        ]
                    ]
                }
            },
            "relu_35": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ls.conv2d(scope + '_1', h, 128, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 256, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 512, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4 * 4 * 512))",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2('top_of_encoder', h, c.Z_SIZE * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2(scope, h, 512, activation=self.ls.lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4, 4, 32))",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_1', h, 512, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_2', h, 256, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_3', h, 128, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_4', h, 3, filter_size=(1, 1), strides=(1, 1, 1, 1), padding='VALID', activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_39": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ls.conv2d(scope + '_1', h, 128, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 256, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 512, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4 * 4 * 512))",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2('top_of_encoder', h, c.Z_SIZE * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2(scope, h, 512, activation=self.ls.lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4, 4, 32))",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_1', h, 512, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_2', h, 256, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_3', h, 128, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_4', h, 3, filter_size=(1, 1), strides=(1, 1, 1, 1), padding='VALID', activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'e_1'",
                            "Constant"
                        ],
                        [
                            "'e_2'",
                            "Constant"
                        ],
                        [
                            "'e_3'",
                            "Constant"
                        ],
                        [
                            "'top_of_decoder'",
                            "Constant"
                        ],
                        [
                            "'d_1'",
                            "Constant"
                        ],
                        [
                            "'d_2'",
                            "Constant"
                        ],
                        [
                            "'d_3'",
                            "Constant"
                        ],
                        [
                            "'d_4'",
                            "Constant"
                        ]
                    ]
                }
            },
            "relu_40": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ls.conv2d(scope + '_1', h, 128, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 256, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 512, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4 * 4 * 512))",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2('top_of_encoder', h, c.Z_SIZE * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2(scope, h, 512, activation=self.ls.lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4, 4, 32))",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_1', h, 512, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_2', h, 256, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_3', h, 128, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_4', h, 3, filter_size=(1, 1), strides=(1, 1, 1, 1), padding='VALID', activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_44": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ls.conv2d(scope + '_1', h, 128, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 256, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 512, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4 * 4 * 512))",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2('top_of_encoder', h, c.Z_SIZE * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2(scope, h, 512, activation=self.ls.lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4, 4, 32))",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_1', h, 512, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_2', h, 256, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_3', h, 128, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_4', h, 3, filter_size=(1, 1), strides=(1, 1, 1, 1), padding='VALID', activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'e_1'",
                            "Constant"
                        ],
                        [
                            "'e_2'",
                            "Constant"
                        ],
                        [
                            "'e_3'",
                            "Constant"
                        ],
                        [
                            "'top_of_decoder'",
                            "Constant"
                        ],
                        [
                            "'d_1'",
                            "Constant"
                        ],
                        [
                            "'d_2'",
                            "Constant"
                        ],
                        [
                            "'d_3'",
                            "Constant"
                        ],
                        [
                            "'d_4'",
                            "Constant"
                        ]
                    ]
                }
            },
            "tanh_46": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ls.conv2d(scope + '_1', h, 128, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 256, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 512, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4 * 4 * 512))",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2('top_of_encoder', h, c.Z_SIZE * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2(scope, h, 512, activation=self.ls.lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4, 4, 32))",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_1', h, 512, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_2', h, 256, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_3', h, 128, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_4', h, 3, filter_size=(1, 1), strides=(1, 1, 1, 1), padding='VALID', activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ls.conv2d(scope + '_1', h, 128, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 256, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 512, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4 * 4 * 512))",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2('top_of_encoder', h, c.Z_SIZE * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2(scope, h, 512, activation=self.ls.lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4, 4, 32))",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_1', h, 512, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_2', h, 256, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_3', h, 128, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_4', h, 3, filter_size=(1, 1), strides=(1, 1, 1, 1), padding='VALID', activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 4 * 4 * 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ls.conv2d(scope + '_1', h, 128, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 256, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 512, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4 * 4 * 512))",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2('top_of_encoder', h, c.Z_SIZE * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2(scope, h, 512, activation=self.ls.lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4, 4, 32))",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_1', h, 512, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_2', h, 256, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_3', h, 128, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_4', h, 3, filter_size=(1, 1), strides=(1, 1, 1, 1), padding='VALID', activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 4, 4, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "batch_normalization_72": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ls.conv2d(scope + '_1', h, 128, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 256, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 512, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4 * 4 * 512))",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2('top_of_encoder', h, c.Z_SIZE * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2(scope, h, 512, activation=self.ls.lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4, 4, 32))",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_1', h, 512, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_2', h, 256, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_3', h, 128, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_4', h, 3, filter_size=(1, 1), strides=(1, 1, 1, 1), padding='VALID', activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'e_1'",
                            "Constant"
                        ],
                        [
                            "'e_2'",
                            "Constant"
                        ],
                        [
                            "'e_3'",
                            "Constant"
                        ],
                        [
                            "'top_of_decoder'",
                            "Constant"
                        ],
                        [
                            "'d_1'",
                            "Constant"
                        ],
                        [
                            "'d_2'",
                            "Constant"
                        ],
                        [
                            "'d_3'",
                            "Constant"
                        ],
                        [
                            "'d_4'",
                            "Constant"
                        ]
                    ]
                }
            },
            "relu_73": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ls.conv2d(scope + '_1', h, 128, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 256, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 512, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4 * 4 * 512))",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2('top_of_encoder', h, c.Z_SIZE * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2(scope, h, 512, activation=self.ls.lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4, 4, 32))",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_1', h, 512, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_2', h, 256, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_3', h, 128, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_4', h, 3, filter_size=(1, 1), strides=(1, 1, 1, 1), padding='VALID', activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_78": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ls.conv2d(scope + '_1', h, 128, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 256, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 512, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4 * 4 * 512))",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2('top_of_encoder', h, c.Z_SIZE * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2(scope, h, 512, activation=self.ls.lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4, 4, 32))",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_1', h, 512, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_2', h, 256, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_3', h, 128, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_4', h, 3, filter_size=(1, 1), strides=(1, 1, 1, 1), padding='VALID', activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'e_1'",
                            "Constant"
                        ],
                        [
                            "'e_2'",
                            "Constant"
                        ],
                        [
                            "'e_3'",
                            "Constant"
                        ],
                        [
                            "'top_of_decoder'",
                            "Constant"
                        ],
                        [
                            "'d_1'",
                            "Constant"
                        ],
                        [
                            "'d_2'",
                            "Constant"
                        ],
                        [
                            "'d_3'",
                            "Constant"
                        ],
                        [
                            "'d_4'",
                            "Constant"
                        ]
                    ]
                }
            },
            "relu_79": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ls.conv2d(scope + '_1', h, 128, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 256, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 512, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4 * 4 * 512))",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2('top_of_encoder', h, c.Z_SIZE * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2(scope, h, 512, activation=self.ls.lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4, 4, 32))",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_1', h, 512, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_2', h, 256, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_3', h, 128, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_4', h, 3, filter_size=(1, 1), strides=(1, 1, 1, 1), padding='VALID', activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_84": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ls.conv2d(scope + '_1', h, 128, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 256, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 512, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4 * 4 * 512))",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2('top_of_encoder', h, c.Z_SIZE * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2(scope, h, 512, activation=self.ls.lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4, 4, 32))",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_1', h, 512, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_2', h, 256, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_3', h, 128, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_4', h, 3, filter_size=(1, 1), strides=(1, 1, 1, 1), padding='VALID', activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scope",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'e_1'",
                            "Constant"
                        ],
                        [
                            "'e_2'",
                            "Constant"
                        ],
                        [
                            "'e_3'",
                            "Constant"
                        ],
                        [
                            "'top_of_decoder'",
                            "Constant"
                        ],
                        [
                            "'d_1'",
                            "Constant"
                        ],
                        [
                            "'d_2'",
                            "Constant"
                        ],
                        [
                            "'d_3'",
                            "Constant"
                        ],
                        [
                            "'d_4'",
                            "Constant"
                        ]
                    ]
                }
            },
            "relu_85": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ls.conv2d(scope + '_1', h, 128, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 256, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_1', h, 512, filter_size=(2, 2), strides=(1, 2, 2, 1), padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4 * 4 * 512))",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2('top_of_encoder', h, c.Z_SIZE * 2, activation=None)",
                            "Call"
                        ],
                        [
                            "self.ls.denseV2(scope, h, 512, activation=self.ls.lrelu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(h, (-1, 4, 4, 32))",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_1', h, 512, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_2', h, 256, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.deconv2d(scope + '_3', h, 128, filter_size=(2, 2))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_train, name=scope)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "self.ls.conv2d(scope + '_4', h, 3, filter_size=(1, 1), strides=(1, 1, 1, 1), padding='VALID', activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "map_fn_218": {
                "fn": {
                    "value": "_distort",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Print_139": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Print(v, [v], 'v = ', summarize=10000)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[v]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "v = ",
                    "type": "Constant",
                    "possible_values": []
                },
                "summarize": {
                    "value": "10000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_143": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_184": {
                "variable": {
                    "value": "a_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(a_image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(a_image, [_d.h, _d.w, _d.c])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(a_image)",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(a_image, radian, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(a_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.slice(a_image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(a_image, [_d.h, _d.w])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_image, [_d.h, _d.w, _d.c])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[2, 2], [2, 2], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_crop_185": {
                "variable": {
                    "value": "a_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "a_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(a_image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(a_image, [_d.h, _d.w, _d.c])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(a_image)",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(a_image, radian, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(a_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.slice(a_image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(a_image, [_d.h, _d.w])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_image, [_d.h, _d.w, _d.c])",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[_d.h, _d.w, _d.c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_188": {
                "variable": {
                    "value": "a_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "a_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(a_image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(a_image, [_d.h, _d.w, _d.c])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(a_image)",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(a_image, radian, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(a_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.slice(a_image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(a_image, [_d.h, _d.w])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_image, [_d.h, _d.w, _d.c])",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_196": {
                "variable": {
                    "value": "a_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "a_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(a_image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(a_image, [_d.h, _d.w, _d.c])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(a_image)",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(a_image, radian, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(a_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.slice(a_image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(a_image, [_d.h, _d.w])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_image, [_d.h, _d.w, _d.c])",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_contrast_197": {
                "variable": {
                    "value": "a_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "a_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(a_image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(a_image, [_d.h, _d.w, _d.c])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(a_image)",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(a_image, radian, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(a_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.slice(a_image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(a_image, [_d.h, _d.w])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_image, [_d.h, _d.w, _d.c])",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_hue_198": {
                "variable": {
                    "value": "a_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "a_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(a_image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(a_image, [_d.h, _d.w, _d.c])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(a_image)",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(a_image, radian, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(a_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.slice(a_image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(a_image, [_d.h, _d.w])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_image, [_d.h, _d.w, _d.c])",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_202": {
                "variable": {
                    "value": "bounding_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[[1 / 10, 1 / 10, 9 / 10, 9 / 10]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sample_distorted_bounding_box_204": {
                "variable": {
                    "value": "(begin, size, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "image_size": {
                    "value": "(_d.h, _d.w, _d.c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bounding_boxes": {
                    "value": "bounding_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([[[1 / 10, 1 / 10, 9 / 10, 9 / 10]]], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "9.8 / 10.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "aspect_ratio_range": {
                    "value": "[9.5 / 10.0, 10.0 / 9.5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_209": {
                "variable": {
                    "value": "a_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "a_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(a_image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(a_image, [_d.h, _d.w, _d.c])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(a_image)",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(a_image, radian, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(a_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.slice(a_image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(a_image, [_d.h, _d.w])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_image, [_d.h, _d.w, _d.c])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "begin",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_214": {
                "variable": {
                    "value": "a_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(a_image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(a_image, [_d.h, _d.w, _d.c])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(a_image)",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(a_image, radian, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(a_image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(a_image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.slice(a_image, begin, size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(a_image, [_d.h, _d.w])",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_image, [_d.h, _d.w, _d.c])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[_d.h, _d.w, _d.c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_143": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_norm_136": {
                "t": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "vae/build_AE.py": {
        "tensorflow": {
            "placeholder_107": {
                "variable": {
                    "value": "ph[lr]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "ph_learning_rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_145": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_148": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_149": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_152": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "graph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "ph[x_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, d.h, d.w, d.c]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ph_x_train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "ph[y_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, d.l]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ph_y_train",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "ph[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, d.h, d.w, d.c]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ph_x",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "ph[x_test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, d.h, d.w, d.c]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ph_x_test",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_101": {
                "variable": {
                    "value": "ph[y_test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, d.l]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ph_y_test",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_130": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'scope_vae'",
                            "Constant"
                        ],
                        [
                            "'scope_ae'",
                            "Constant"
                        ],
                        [
                            "'scope_dae'",
                            "Constant"
                        ]
                    ]
                }
            },
            "start_queue_runners_257": {
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Session(config=config, graph=graph)",
                            "Call"
                        ]
                    ]
                }
            },
            "merge_all_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vae/config.py": {
        "tensorflow": {
            "DEFINE_string_34": {
                "name": {
                    "value": "dataset",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "SVHN",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "CIFAR10 / SVHN ",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_36": {
                "name": {
                    "value": "dir_logs",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "./out/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_37": {
                "name": {
                    "value": "file_ckpt",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "vae/util/HandleIIDDataTFRecord.py": {
        "tensorflow": {
            "TFRecordReader_283": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "string_input_producer_284": {
                "variable": {
                    "value": "queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "tfrecords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "num_epochs",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "parse_single_example_288": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'image': tf.FixedLenFeature([_h * _w * _c], tf.float32), 'label': tf.FixedLenFeature([], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "reshape_298": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['image']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images, [_h, _w, _c])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[_h, _w, _c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_299": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(features['label'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.l",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_408": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'height': _int64_feature(_h), 'width': _int64_feature(_w), 'depth': _int64_feature(_c), 'label': _int64_feature(int(label)), 'image': tf.train.Feature(float_list=tf.train.FloatList(value=image))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_425": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "filenames",
                            "Name"
                        ],
                        [
                            "path_tfrecord + 'train_%d.tfrecord' % i",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Graph_550": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_batch_249": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sequence, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5000",
                    "type": "Constant",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_252": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sequence, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "allow_smaller_final_batch": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "min_queue_examples + 5 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Feature_397": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_400": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tf_record_iterator_274": {
                "path": {
                    "value": "file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "files",
                            "Name"
                        ],
                        [
                            "tfrecords",
                            "Name"
                        ]
                    ]
                }
            },
            "cast_299": {
                "x": {
                    "value": "features['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Int64List_397": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_400": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_409": {
                "feature": {
                    "value": "{'height': _int64_feature(_h), 'width': _int64_feature(_w), 'depth': _int64_feature(_c), 'label': _int64_feature(int(label)), 'image': tf.train.Feature(float_list=tf.train.FloatList(value=image))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FixedLenFeature_292": {
                "shape": {
                    "value": "[_h * _w * _c]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_293": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Feature_415": {
                "float_list": {
                    "value": "tf.train.FloatList(value=image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FloatList_416": {
                "value": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "vae/util/HandleImageDataNumpy.py": {
        "tensorflow": {}
    },
    "vae/util/cifar10.py": {
        "tensorflow": {
            "DEFINE_integer_40": {
                "name": {
                    "value": "num_valid_examples",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of validation examples",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_224": {
                "x": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform(tf.cast(image, tf.float32)) if train else image",
                            "IfExp"
                        ],
                        [
                            "transform(tf.cast(image, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_205": {
                "x": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform(tf.cast(image, tf.float32)) if train else image",
                            "IfExp"
                        ],
                        [
                            "transform(tf.cast(image, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vae/util/dataset_utils.py": {
        "tensorflow": {
            "TFRecordWriter_49": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "filepath",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TFRecordReader_65": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_68": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'image': tf.FixedLenFeature([3072], tf.float32), 'label': tf.FixedLenFeature([], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images[index].tolist()",
                            "Call"
                        ],
                        [
                            "features['image']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_79": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(features['label'], tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_112": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images[index].tolist()",
                            "Call"
                        ],
                        [
                            "features['image']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Feature_34": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_38": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_52": {
                "variable": {
                    "value": "image_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "float_list": {
                    "value": "tf.train.FloatList(value=image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_54": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'height': _int64_feature(32), 'width': _int64_feature(32), 'depth': _int64_feature(3), 'label': _int64_feature(int(labels[index])), 'image': image_feature})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shuffle_batch_94": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "example",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'height': _int64_feature(32), 'width': _int64_feature(32), 'depth': _int64_feature(3), 'label': _int64_feature(int(labels[index])), 'image': image_feature}))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "capacity": {
                    "value": "min_queue_examples + 5 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "batch_101": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "example",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Example(features=tf.train.Features(feature={'height': _int64_feature(32), 'width': _int64_feature(32), 'depth': _int64_feature(3), 'label': _int64_feature(int(labels[index])), 'image': image_feature}))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_preprocess_threads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "allow_smaller_final_batch": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "min_queue_examples + 5 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "string_input_producer_127": {
                "string_tensor": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "num_epochs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_79": {
                "x": {
                    "value": "features['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_116": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images[index].tolist()",
                            "Call"
                        ],
                        [
                            "features['image']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[2, 2], [2, 2], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_crop_117": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images[index].tolist()",
                            "Call"
                        ],
                        [
                            "features['image']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_119": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images[index].tolist()",
                            "Call"
                        ],
                        [
                            "features['image']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_34": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_38": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_52": {
                "value": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images[index].tolist()",
                            "Call"
                        ],
                        [
                            "features['image']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[2, 2], [2, 2], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [32, 32, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_54": {
                "feature": {
                    "value": "{'height': _int64_feature(32), 'width': _int64_feature(32), 'depth': _int64_feature(3), 'label': _int64_feature(int(labels[index])), 'image': image_feature}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FixedLenFeature_72": {
                "shape": {
                    "value": "[3072]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_73": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vae/util/layers.py": {
        "tensorflow": {
            "get_variable_31": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'b'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "b_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(b_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_107": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "hs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(hs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(hs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(hs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(hs)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_109": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "hs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(hs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(hs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(hs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(hs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_126": {
                "variable": {
                    "value": "seqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "seqs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack(seqs)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_287": {
                "variable": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.W(W_shape, W_name=W_name, W_init=None)",
                            "Call"
                        ],
                        [
                            "self.W(W_shape, W_name, W_init)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(_b, in_h * 2, in_w * 2, out_c)",
                            "Tuple"
                        ],
                        [
                            "(_b, output_size[0], output_size[1], out_c)",
                            "Tuple"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_290": {
                "variable": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(deconv, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "deconv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_343": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, W_T) + b_T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "transform_gate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_345": {
                "variable": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.matmul(x, W_T) + b_T, name='transform_gate')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(tf.nn.conv2d(x, W_T, strides, padding) + b_T, name='transform_gate')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "carry_gate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_347": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(H, T)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(x, C)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "elu_357": {
                "variable": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.conv2d(x, W, strides, padding) + b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "activation",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_358": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d(x, W_T, strides, padding) + b_T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "transform_gate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_359": {
                "variable": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "T",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.sigmoid(tf.matmul(x, W_T) + b_T, name='transform_gate')",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(tf.nn.conv2d(x, W_T, strides, padding) + b_T, name='transform_gate')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "carry_gate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_370": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.multiply(H, T)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.multiply(x, C)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_384": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, h * w * c)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "qr_387": {
                "variable": {
                    "value": "(q, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "randmat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_normal((h * w * c, _n))",
                            "Call"
                        ],
                        [
                            "tf.random_normal((h * w * c, _n))",
                            "Call"
                        ],
                        [
                            "tf.random_normal((h * w * c, _n))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_389": {
                "variable": {
                    "value": "direction",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_400": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xs",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x[None] + perturbation[:, None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(xs, (-1, _n, h, w, c))",
                            "Call"
                        ],
                        [
                            "x[None] + perturbation[:, None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(xs, (-1, _n, h, w, c))",
                            "Call"
                        ],
                        [
                            "x[None] + perturbation[:, None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(xs, (-1, _n, h, w, c))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, _n, h, w, c)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_413": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, h * w * c)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_440": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "perturbation",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "direction * distance[:, None]",
                            "BinOp"
                        ],
                        [
                            "tf.random_uniform((_n, h * w * c), minval=-_e, maxval=_e, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "direction * magnitude[:, None]",
                            "BinOp"
                        ],
                        [
                            "direction * magnitude[:, None]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_443": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xs",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x[None] + perturbation[:, None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(xs, (-1, _n, h, w, c))",
                            "Call"
                        ],
                        [
                            "x[None] + perturbation[:, None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(xs, (-1, _n, h, w, c))",
                            "Call"
                        ],
                        [
                            "x[None] + perturbation[:, None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(xs, (-1, _n, h, w, c))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, _n, h, w, c)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_460": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, h * w * c)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_489": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "perturbation",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "direction * distance[:, None]",
                            "BinOp"
                        ],
                        [
                            "tf.random_uniform((_n, h * w * c), minval=-_e, maxval=_e, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "direction * magnitude[:, None]",
                            "BinOp"
                        ],
                        [
                            "direction * magnitude[:, None]",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_490": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.norm(perturbation, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.norm(perturbation, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, (_b,))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "(_b,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_493": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xs",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x[None] + perturbation[:, None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(xs, (-1, _n, h, w, c))",
                            "Call"
                        ],
                        [
                            "x[None] + perturbation[:, None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(xs, (-1, _n, h, w, c))",
                            "Call"
                        ],
                        [
                            "x[None] + perturbation[:, None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(xs, (-1, _n, h, w, c))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, _n, h, w, c)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_627": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logsigma",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.dense(scope + '_vae_logsigma', x, size, activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(logsigma, eps, 50)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(logsigma, eps, 50)",
                            "Call"
                        ],
                        [
                            "tf.log(sigma + eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_632": {
                "variable": {
                    "value": "logsigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "logsigma",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.dense(scope + '_vae_logsigma', x, size, activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(logsigma, eps, 50)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(logsigma, eps, 50)",
                            "Call"
                        ],
                        [
                            "tf.log(sigma + eps)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-08",
                            "Constant"
                        ],
                        [
                            "1e-20",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_633": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logsigma",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.dense(scope + '_vae_logsigma', x, size, activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(logsigma, eps, 50)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(logsigma, eps, 50)",
                            "Call"
                        ],
                        [
                            "tf.log(sigma + eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_643": {
                "variable": {
                    "value": "logsigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sigma + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "moments_743": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "axes",
                    "type": "List",
                    "possible_values": [
                        [
                            "[0]",
                            "List"
                        ],
                        [
                            "[0, 1, 2]",
                            "List"
                        ],
                        [
                            "[0]",
                            "List"
                        ],
                        [
                            "[0, 1, 2]",
                            "List"
                        ],
                        [
                            "[0]",
                            "List"
                        ],
                        [
                            "[0, 1, 2]",
                            "List"
                        ]
                    ]
                }
            },
            "to_float_840": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_prod(tf.shape(x)[:-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_842": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list(range(int(tf.shape(x).get_shape().as_list()[0]) - 1))",
                            "Call"
                        ],
                        [
                            "list(range(int(tf.shape(x).get_shape().as_list()[0]) - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_843": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.pow(x - mean, 2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list(range(int(tf.shape(x).get_shape().as_list()[0]) - 1))",
                            "Call"
                        ],
                        [
                            "list(range(int(tf.shape(x).get_shape().as_list()[0]) - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_844": {
                "variable": {
                    "value": "avg_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_mean'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x.get_shape()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_853": {
                "variable": {
                    "value": "avg_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_var'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x.get_shape()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_862": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_gamma'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x.get_shape()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_870": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_beta'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x.get_shape()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_24": {
                "variable": {
                    "value": "W_initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "W_init",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_26": {
                "name": {
                    "value": "W_name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'W'",
                            "MethodArgument"
                        ],
                        [
                            "'W'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "W_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "(shape[1], shape[2], shape[3])",
                            "Tuple"
                        ]
                    ]
                },
                "initializer": {
                    "value": "W_initializer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.constant_initializer(W_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_114": {
                "values": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(x, W) + b",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides, padding) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv1d(x, W, stride, padding, data_format='NHWC') + b",
                            "BinOp"
                        ],
                        [
                            "activation(o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(x, W, padding, dilation_rate=dilation_rate) + b",
                            "BinOp"
                        ],
                        [
                            "activation(o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, output_shape=output_shape, strides=strides) + b",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.multiply(H, T), tf.multiply(x, C), 'y')",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(H, T), tf.multiply(x, C), 'y')",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(y, 1), phi, cos_theta)",
                            "Call"
                        ],
                        [
                            "cos_theta",
                            "Name"
                        ]
                    ]
                }
            },
            "map_fn_148": {
                "fn": {
                    "value": "lambda seq: _conv(seq)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "seqs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack(seqs)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_186": {
                "values": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(x, W) + b",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides, padding) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv1d(x, W, stride, padding, data_format='NHWC') + b",
                            "BinOp"
                        ],
                        [
                            "activation(o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(x, W, padding, dilation_rate=dilation_rate) + b",
                            "BinOp"
                        ],
                        [
                            "activation(o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, output_shape=output_shape, strides=strides) + b",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.multiply(H, T), tf.multiply(x, C), 'y')",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(H, T), tf.multiply(x, C), 'y')",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(y, 1), phi, cos_theta)",
                            "Call"
                        ],
                        [
                            "cos_theta",
                            "Name"
                        ]
                    ]
                }
            },
            "avg_pool_189": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, ksize, ksize, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_192": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, ksize, ksize, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool_195": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, ksize, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_217": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_221": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_236": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(x, W) + b",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides, padding) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv1d(x, W, stride, padding, data_format='NHWC') + b",
                            "BinOp"
                        ],
                        [
                            "activation(o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(x, W, padding, dilation_rate=dilation_rate) + b",
                            "BinOp"
                        ],
                        [
                            "activation(o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, output_shape=output_shape, strides=strides) + b",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.multiply(H, T), tf.multiply(x, C), 'y')",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(H, T), tf.multiply(x, C), 'y')",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(y, 1), phi, cos_theta)",
                            "Call"
                        ],
                        [
                            "cos_theta",
                            "Name"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_241": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(x, W) + b",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides, padding) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv1d(x, W, stride, padding, data_format='NHWC') + b",
                            "BinOp"
                        ],
                        [
                            "activation(o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(x, W, padding, dilation_rate=dilation_rate) + b",
                            "BinOp"
                        ],
                        [
                            "activation(o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, output_shape=output_shape, strides=strides) + b",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.multiply(H, T), tf.multiply(x, C), 'y')",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(H, T), tf.multiply(x, C), 'y')",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(y, 1), phi, cos_theta)",
                            "Call"
                        ],
                        [
                            "cos_theta",
                            "Name"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_255": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_259": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_274": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(x, W) + b",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides, padding) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv1d(x, W, stride, padding, data_format='NHWC') + b",
                            "BinOp"
                        ],
                        [
                            "activation(o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(x, W, padding, dilation_rate=dilation_rate) + b",
                            "BinOp"
                        ],
                        [
                            "activation(o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, output_shape=output_shape, strides=strides) + b",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.multiply(H, T), tf.multiply(x, C), 'y')",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(H, T), tf.multiply(x, C), 'y')",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(y, 1), phi, cos_theta)",
                            "Call"
                        ],
                        [
                            "cos_theta",
                            "Name"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_279": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(x, W) + b",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides, padding) + b",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv1d(x, W, stride, padding, data_format='NHWC') + b",
                            "BinOp"
                        ],
                        [
                            "activation(o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.convolution(x, W, padding, dilation_rate=dilation_rate) + b",
                            "BinOp"
                        ],
                        [
                            "activation(o)",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(o, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, W, output_shape=output_shape, strides=strides) + b",
                            "BinOp"
                        ],
                        [
                            "tf.add(tf.multiply(H, T), tf.multiply(x, C), 'y')",
                            "Call"
                        ],
                        [
                            "tf.add(tf.multiply(H, T), tf.multiply(x, C), 'y')",
                            "Call"
                        ],
                        [
                            "tf.where(tf.equal(y, 1), phi, cos_theta)",
                            "Call"
                        ],
                        [
                            "cos_theta",
                            "Name"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_363": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, h * w * c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_366": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, h, w, out_c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "qr_420": {
                "variable": {
                    "value": "(q, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "randmat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_normal((h * w * c, _n))",
                            "Call"
                        ],
                        [
                            "tf.random_normal((h * w * c, _n))",
                            "Call"
                        ],
                        [
                            "tf.random_normal((h * w * c, _n))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_422": {
                "variable": {
                    "value": "direction",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "qr_467": {
                "variable": {
                    "value": "(q, r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "randmat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_normal((h * w * c, _n))",
                            "Call"
                        ],
                        [
                            "tf.random_normal((h * w * c, _n))",
                            "Call"
                        ],
                        [
                            "tf.random_normal((h * w * c, _n))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_469": {
                "variable": {
                    "value": "direction",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "l2_normalize_484": {
                "variable": {
                    "value": "direction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "direction",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(q)",
                            "Call"
                        ],
                        [
                            "tf.transpose(q)",
                            "Call"
                        ],
                        [
                            "tf.random_normal((_n, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(direction, 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(q)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_normalize_531": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_532": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w_am_softmax",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[1], n_class]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer(uniform=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_535": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w_am_softmax', dtype=tf.float32, shape=[x.get_shape()[1], n_class], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, 0, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_536": {
                "variable": {
                    "value": "cos_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w_am_softmax', dtype=tf.float32, shape=[x.get_shape()[1], n_class], initializer=tf.contrib.layers.xavier_initializer(uniform=False))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(w, 0, 1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_575": {
                "variable": {
                    "value": "y_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(y, tf.reduce_max(y, 1, keep_dims=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_610": {
                "shape": {
                    "value": "_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "_stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_626": {
                "variable": {
                    "value": "logsigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "logsigma",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.dense(scope + '_vae_logsigma', x, size, activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(logsigma, eps, 50)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(logsigma, eps, 50)",
                            "Call"
                        ],
                        [
                            "tf.log(sigma + eps)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-08",
                            "Constant"
                        ],
                        [
                            "1e-20",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_746": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_747": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_749": {
                "variable": {
                    "value": "pop_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pop_mean",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_750": {
                "variable": {
                    "value": "pop_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pop_var",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_752": {
                "variable": {
                    "value": "train_mean_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "pop_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pop_mean', shape=[size], initializer=tf.constant_initializer(0.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "pop_mean * decay + batch_mean * (1 - decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_753": {
                "variable": {
                    "value": "train_var_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "pop_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pop_var', shape=[size], initializer=tf.constant_initializer(1.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "pop_var * decay + batch_var * (1 - decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_774": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_prod(tf.shape(x)[:-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_776": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list(range(int(tf.shape(x).get_shape().as_list()[0]) - 1))",
                            "Call"
                        ],
                        [
                            "list(range(int(tf.shape(x).get_shape().as_list()[0]) - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_777": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.pow(x - mean, 2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list(range(int(tf.shape(x).get_shape().as_list()[0]) - 1))",
                            "Call"
                        ],
                        [
                            "list(range(int(tf.shape(x).get_shape().as_list()[0]) - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_778": {
                "variable": {
                    "value": "avg_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_mean'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x.get_shape()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_787": {
                "variable": {
                    "value": "avg_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_var'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x.get_shape()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_796": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_gamma'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x.get_shape()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_804": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_beta'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "x.get_shape()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[1]",
                            "Subscript"
                        ],
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "collections",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_op_879": {
                "variable": {
                    "value": "avg_mean_assign_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_op_880": {
                "variable": {
                    "value": "avg_var_assign_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_36": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.pow(x - mean, 2.0), axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.pow(x - mean, 2.0), axis)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.get_shape().as_list()[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "_prefix + '_1'",
                            "BinOp"
                        ],
                        [
                            "_prefix + '_2'",
                            "BinOp"
                        ],
                        [
                            "'g_gause'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "self.do_share",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.W(W_shape, W_name=W_name, W_init=None)",
                            "Call"
                        ],
                        [
                            "self.W(W_shape, W_name, W_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_69": {
                "features": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_71": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "a * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_103": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1d('conv1d_' + str(w) + '_' + str(i), seq, 1, filter_size=w, on_time_direction=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(h, axis=(0, 2))",
                            "Call"
                        ],
                        [
                            "self.conv1d('conv1d_' + str(w) + '_' + str(i), seq, 1, filter_size=w, on_time_direction=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(h, axis=(0, 2))",
                            "Call"
                        ],
                        [
                            "self.conv1d('conv1d_' + str(w) + '_' + str(i), seq, 1, filter_size=w, on_time_direction=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(h, axis=(0, 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_142": {
                "a": {
                    "value": "tf.stack(hs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "a_coarse_grain_seq",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "a_coarse_grain_seq_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_179": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "hs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(hs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(hs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(hs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(hs)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_181": {
                "variable": {
                    "value": "hs",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "hs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(hs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(hs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(hs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(hs)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_203": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "_prefix + '_1'",
                            "BinOp"
                        ],
                        [
                            "_prefix + '_2'",
                            "BinOp"
                        ],
                        [
                            "'g_gause'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "self.do_share",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_204": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.W(W_shape, W_name=W_name, W_init=None)",
                            "Call"
                        ],
                        [
                            "self.W(W_shape, W_name, W_init)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "scope + 'conv1d'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.do_share",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_230": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.W(W_shape, W_name=W_name, W_init=None)",
                            "Call"
                        ],
                        [
                            "self.W(W_shape, W_name, W_init)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_263": {
                "name_or_scope": {
                    "value": "scope + 'dilated_conv1d'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.do_share",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convolution_268": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.W(W_shape, W_name=W_name, W_init=None)",
                            "Call"
                        ],
                        [
                            "self.W(W_shape, W_name, W_init)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation_rate": {
                    "value": "dilation_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1]",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_285": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "_prefix + '_1'",
                            "BinOp"
                        ],
                        [
                            "_prefix + '_2'",
                            "BinOp"
                        ],
                        [
                            "'g_gause'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "self.do_share",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_290": {
                "value": {
                    "value": "deconv",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(input_, W, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, b), deconv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(b_name, b_shape, initializer=tf.constant_initializer(b_init))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_301": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "_prefix + '_1'",
                            "BinOp"
                        ],
                        [
                            "_prefix + '_2'",
                            "BinOp"
                        ],
                        [
                            "'g_gause'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "self.do_share",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_transpose_309": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.W(W_shape, W_name=W_name, W_init=None)",
                            "Call"
                        ],
                        [
                            "self.W(W_shape, W_name, W_init)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Tuple",
                    "possible_values": [
                        [
                            "(_b, in_h * 2, in_w * 2, out_c)",
                            "Tuple"
                        ],
                        [
                            "(_b, output_size[0], output_size[1], out_c)",
                            "Tuple"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_338": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "_prefix + '_1'",
                            "BinOp"
                        ],
                        [
                            "_prefix + '_2'",
                            "BinOp"
                        ],
                        [
                            "'g_gause'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "self.do_share",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_340": {
                "name_or_scope": {
                    "value": "scope + 'hw_trans_wb'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.do_share",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_347": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "C",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(1.0, T, name='carry_gate')",
                            "Call"
                        ],
                        [
                            "tf.subtract(1.0, T, name='carry_gate')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_355": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "_prefix + '_1'",
                            "BinOp"
                        ],
                        [
                            "_prefix + '_2'",
                            "BinOp"
                        ],
                        [
                            "'g_gause'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "self.do_share",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_356": {
                "name_or_scope": {
                    "value": "scope + 'hw_trans_wb'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "self.do_share",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_370": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "C",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.subtract(1.0, T, name='carry_gate')",
                            "Call"
                        ],
                        [
                            "tf.subtract(1.0, T, name='carry_gate')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_510": {
                "logits": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_530": {
                "name": {
                    "value": "am_softmax",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_540": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(y, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "phi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cos_theta - c.SOFTMAX_DEDUCTON",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "cos_theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_569": {
                "logits": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_621": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "_prefix + '_1'",
                            "BinOp"
                        ],
                        [
                            "_prefix + '_2'",
                            "BinOp"
                        ],
                        [
                            "'g_gause'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "self.do_share",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_639": {
                "x": {
                    "value": "sigma1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_640": {
                "x": {
                    "value": "sigma2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.dense(scope + '_lvae_logsigma', sigma2, size_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_713": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "_prefix + '_1'",
                            "BinOp"
                        ],
                        [
                            "_prefix + '_2'",
                            "BinOp"
                        ],
                        [
                            "'g_gause'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "self.do_share",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_744": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "_prefix + '_1'",
                            "BinOp"
                        ],
                        [
                            "_prefix + '_2'",
                            "BinOp"
                        ],
                        [
                            "'g_gause'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "self.do_share",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_762": {
                "pred": {
                    "value": "is_train",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "batch_statistics",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "population_statistics",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_773": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "_prefix + '_1'",
                            "BinOp"
                        ],
                        [
                            "_prefix + '_2'",
                            "BinOp"
                        ],
                        [
                            "'g_gause'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "self.do_share",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_op_813": {
                "variable": {
                    "value": "avg_mean_assign_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_op_814": {
                "variable": {
                    "value": "avg_var_assign_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_prod_840": {
                "input_tensor": {
                    "value": "tf.shape(x)[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_843": {
                "x": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_882": {
                "variable": {
                    "value": "avg_mean_assign_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "avg_mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name + '_mean', shape=size, initializer=tf.constant_initializer(0.0), collections=collections, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=name + '_mean', shape=size, initializer=tf.constant_initializer(0.0), collections=collections, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "decay * avg_mean + (1 - decay) * mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_885": {
                "variable": {
                    "value": "avg_var_assign_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "avg_var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name + '_var', shape=size, initializer=tf.constant_initializer(1.0), collections=collections, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=name + '_var', shape=size, initializer=tf.constant_initializer(1.0), collections=collections, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "decay * avg_var + n / (n - 1) * (1 - decay) * var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_31": {
                "value": {
                    "value": "b_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_35": {
                "name": {
                    "value": "summaries",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_37": {
                "name": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(var)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(x, axis)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_45": {
                "name": {
                    "value": "histogram",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.pow(x - mean, 2.0), axis)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.pow(x - mean, 2.0), axis)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_138": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1d('conv1d_' + str(w) + '_' + str(i), seq, 1, filter_size=w, on_time_direction=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(h, axis=(0, 2))",
                            "Call"
                        ],
                        [
                            "self.conv1d('conv1d_' + str(w) + '_' + str(i), seq, 1, filter_size=w, on_time_direction=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(h, axis=(0, 2))",
                            "Call"
                        ],
                        [
                            "self.conv1d('conv1d_' + str(w) + '_' + str(i), seq, 1, filter_size=w, on_time_direction=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(h, axis=(0, 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_142": {
                "values": {
                    "value": "hs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(hs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(hs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(hs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(hs)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_343": {
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_T",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_344": {
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.W(W_shape, W_name=W_name, W_init=None)",
                            "Call"
                        ],
                        [
                            "self.W(W_shape, W_name, W_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_357": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.W(W_shape, W_name=W_name, W_init=None)",
                            "Call"
                        ],
                        [
                            "self.W(W_shape, W_name, W_init)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_358": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W_T",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_564": {
                "x": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_573": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "equal_575": {
                "x": {
                    "value": "y",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "gumbel_softmax_sample(logits, temperature)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_hard - y) + y",
                            "BinOp"
                        ],
                        [
                            "logits + sample_gumbel(tf.shape(logits))",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_max(y, 1, keep_dims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_576": {
                "input": {
                    "value": "y_hard - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_603": {
                "input_": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "cur_begin",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros([n], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "cur_end",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros([n], dtype=np.int32) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_655": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "_prefix + '_1'",
                            "BinOp"
                        ],
                        [
                            "_prefix + '_2'",
                            "BinOp"
                        ],
                        [
                            "'g_gause'",
                            "Constant"
                        ]
                    ]
                },
                "reuse": {
                    "value": "self.do_share",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_700": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "u",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.dense(scope, u, shape[1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(u, (shape_u[0], shape[1], shape[2], -1))",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, u, shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(u, (shape_u[0], shape[1], shape[2], -1))",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, u, shape[3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(shape_u[0], shape[1], shape[2], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "batch_normalization_760": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "pop_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pop_mean', shape=[size], initializer=tf.constant_initializer(0.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "pop_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='pop_var', shape=[size], initializer=tf.constant_initializer(1.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "gamma",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name='gamma', shape=[size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=name + '_gamma', shape=size, initializer=tf.constant_initializer(1.0), collections=collections)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=name + '_gamma', shape=size, initializer=tf.constant_initializer(1.0), collections=collections)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "beta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name='beta', shape=[size], initializer=tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=name + '_beta', shape=size, initializer=tf.constant_initializer(0.0), collections=collections)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=name + '_beta', shape=size, initializer=tf.constant_initializer(0.0), collections=collections)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-08",
                            "Constant"
                        ],
                        [
                            "1e-20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_prod_774": {
                "input_tensor": {
                    "value": "tf.shape(x)[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pow_777": {
                "x": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_816": {
                "variable": {
                    "value": "avg_mean_assign_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "avg_mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name + '_mean', shape=size, initializer=tf.constant_initializer(0.0), collections=collections, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=name + '_mean', shape=size, initializer=tf.constant_initializer(0.0), collections=collections, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "decay * avg_mean + (1 - decay) * mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_819": {
                "variable": {
                    "value": "avg_var_assign_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "avg_var",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name + '_var', shape=size, initializer=tf.constant_initializer(1.0), collections=collections, trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=name + '_var', shape=size, initializer=tf.constant_initializer(1.0), collections=collections, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "decay * avg_var + n / (n - 1) * (1 - decay) * var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_848": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_857": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_866": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_874": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_889": {
                "control_inputs": {
                    "value": "[avg_mean_assign_op, avg_var_assign_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_892": {
                "x": {
                    "value": "1e-06 + avg_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_175": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1d('conv1d_' + str(w) + '_' + str(i), seq, 1, filter_size=w, on_time_direction=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(h, axis=(0, 2))",
                            "Call"
                        ],
                        [
                            "self.conv1d('conv1d_' + str(w) + '_' + str(i), seq, 1, filter_size=w, on_time_direction=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(h, axis=(0, 2))",
                            "Call"
                        ],
                        [
                            "self.conv1d('conv1d_' + str(w) + '_' + str(i), seq, 1, filter_size=w, on_time_direction=False)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(h, axis=(0, 2))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(0, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "equal_540": {
                "x": {
                    "value": "y",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "gumbel_softmax_sample(logits, temperature)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_hard - y) + y",
                            "BinOp"
                        ],
                        [
                            "logits + sample_gumbel(tf.shape(logits))",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_568": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_max_575": {
                "input_tensor": {
                    "value": "y",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "gumbel_softmax_sample(logits, temperature)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(y_hard - y) + y",
                            "BinOp"
                        ],
                        [
                            "logits + sample_gumbel(tf.shape(logits))",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_617": {
                "input": {
                    "value": "mu",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.dense(scope + '_vae_mu', x, size, activation)",
                            "Call"
                        ],
                        [
                            "(mu1 * sigma1__2 + mu2 * sigma2__2) / (sigma1__2 + sigma2__2)",
                            "BinOp"
                        ],
                        [
                            "a1 * tf.sigmoid(a2 * u + a3) + a4 * u + a5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_725": {
                "x": {
                    "value": "a2 * u + a3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_726": {
                "x": {
                    "value": "a7 * u + a8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_746": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_749": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_750": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_756": {
                "control_inputs": {
                    "value": "[train_mean_op, train_var_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_normalization_757": {
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "batch_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "batch_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "gamma",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name='gamma', shape=[size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=name + '_gamma', shape=size, initializer=tf.constant_initializer(1.0), collections=collections)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=name + '_gamma', shape=size, initializer=tf.constant_initializer(1.0), collections=collections)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "beta",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_variable(name='beta', shape=[size], initializer=tf.constant_initializer(0.1))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=name + '_beta', shape=size, initializer=tf.constant_initializer(0.0), collections=collections)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=name + '_beta', shape=size, initializer=tf.constant_initializer(0.0), collections=collections)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-08",
                            "Constant"
                        ],
                        [
                            "1e-20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_782": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_791": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_800": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_808": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_823": {
                "control_inputs": {
                    "value": "[avg_mean_assign_op, avg_var_assign_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_826": {
                "x": {
                    "value": "1e-06 + avg_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_840": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_890": {
                "x": {
                    "value": "1e-06 + var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_666": {
                "input": {
                    "value": "mu",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.dense(scope + '_vae_mu', x, size, activation)",
                            "Call"
                        ],
                        [
                            "(mu1 * sigma1__2 + mu2 * sigma2__2) / (sigma1__2 + sigma2__2)",
                            "BinOp"
                        ],
                        [
                            "a1 * tf.sigmoid(a2 * u + a3) + a4 * u + a5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_705": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "u",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.dense(scope, u, shape[1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(u, (shape_u[0], shape[1], shape[2], -1))",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, u, shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(u, (shape_u[0], shape[1], shape[2], -1))",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, u, shape[3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(shape_u[0], shape[1], shape[2], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_774": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_824": {
                "x": {
                    "value": "1e-06 + var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_841": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_775": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(x, [x.get_shape().as_list()[0], -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "self.bn(scope, x, is_train)",
                            "Call"
                        ],
                        [
                            "activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d(scope, x, out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h * w * c])",
                            "Call"
                        ],
                        [
                            "self.dense(scope + 'affine', x, h * w * out_c)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, h, w, out_c])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w * c))",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 1, 1e-10)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "vae/util/losses.py": {
        "tensorflow": {
            "reshape_40": {
                "variable": {
                    "value": "logit",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(logit, [-1])",
                            "Call"
                        ],
                        [
                            "self.encoder(x + r_adv, is_train=is_train)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_42": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(tf.subtract(logit, y))) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(t, (-1, self.d.img_size))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.d.img_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(o, (-1, self.d.img_size))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(eigenvalues)",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.d.img_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_71": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.reconst_pixel_log_stdv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_74": {
                "variable": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sigmoid(x_original + binsize / scale) - tf.sigmoid(x_original) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "map_fn_106": {
                "variable": {
                    "value": "mean_diag_covs_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "mean_diag_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_113": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logsigma",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_114": {
                "variable": {
                    "value": "sigma2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(logsigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_187": {
                "variable": {
                    "value": "logit_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_real",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stop_gradient(logit_real)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(logit_real)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(logit_real)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(logit_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_203": {
                "variable": {
                    "value": "real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_true * logit",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_204": {
                "variable": {
                    "value": "other",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1 - y_true) * logit - y_true * 10000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_220": {
                "variable": {
                    "value": "real1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_true * logit_real",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_221": {
                "variable": {
                    "value": "real2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_true * logit_virtual",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stop_gradient_241": {
                "variable": {
                    "value": "logit_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_real",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stop_gradient(logit_real)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(logit_real)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(logit_real)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(logit_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_249": {
                "variable": {
                    "value": "logit_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_real",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stop_gradient(logit_real)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(logit_real)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(logit_real)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(logit_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_310": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.gradients(dist, [d], aggregation_method=2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.gradients(dist, [d], aggregation_method=2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.gradients(loss, [x], aggregation_method=2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.stop_gradient(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_319": {
                "variable": {
                    "value": "unweighted_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(logit, [-1])",
                            "Call"
                        ],
                        [
                            "self.encoder(x + r_adv, is_train=is_train)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_330": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(logit, [-1])",
                            "Call"
                        ],
                        [
                            "self.encoder(x + r_adv, is_train=is_train)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_331": {
                "variable": {
                    "value": "true",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_337": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax(logit)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_338": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(logit, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_339": {
                "variable": {
                    "value": "true",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_340": {
                "variable": {
                    "value": "is_hit",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(pred, true)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_341": {
                "variable": {
                    "value": "accr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(is_hit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_346": {
                "variable": {
                    "value": "cond",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.nn.softmax(logit), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "gamma",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "less_equal_347": {
                "variable": {
                    "value": "cond_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(tf.nn.softmax(logit), 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "gamma",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_348": {
                "variable": {
                    "value": "idxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(cond)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_349": {
                "variable": {
                    "value": "idxes_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(cond_inv)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "size_350": {
                "variable": {
                    "value": "n_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(logit, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.argmax(logit, 1), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_353": {
                "variable": {
                    "value": "pred_confident",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(logit, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.argmax(logit, 1), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(cond), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_354": {
                "variable": {
                    "value": "true_confident",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "true",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(y, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.argmax(y, 1), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(cond), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_355": {
                "variable": {
                    "value": "accr_limited_in_w_confidence",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.to_float(tf.equal(pred_confident, true_confident))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "not_equal_359": {
                "variable": {
                    "value": "cond_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(logit, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.argmax(logit, 1), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "true",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(y, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.argmax(y, 1), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_360": {
                "variable": {
                    "value": "idxes_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.where(cond_error)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_361": {
                "variable": {
                    "value": "pred_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(logit, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.argmax(logit, 1), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idxes_error",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(cond_error), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_362": {
                "variable": {
                    "value": "true_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "true",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(y, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.argmax(y, 1), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idxes_error",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(cond_error), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_380": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "q_logit",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_381": {
                "variable": {
                    "value": "qlogq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(q * self._logsoftmax(q_logit), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_382": {
                "variable": {
                    "value": "qlogp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(q * self._logsoftmax(p_logit), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_386": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "q_logit",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_387": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "p_logit",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_389": {
                "variable": {
                    "value": "qlogq",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(q * self._logsoftmax(q_logit), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_390": {
                "variable": {
                    "value": "plogp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(p * self._logsoftmax(p_logit), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_391": {
                "variable": {
                    "value": "qlogm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(q * tf.log(m + eps))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_392": {
                "variable": {
                    "value": "plogm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(p * tf.log(m + eps))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_396": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(logit, [-1])",
                            "Call"
                        ],
                        [
                            "self.encoder(x + r_adv, is_train=is_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_50": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self._binary_crossentropy(x_original, x_reconst)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_84": {
                "input_tensor": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.log(tf.sigmoid(x_original + binsize / scale) - tf.sigmoid(x_original) + eps)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "indices",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "(1, 2, 3)",
                            "Tuple"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "(1, 2, 3)",
                            "Tuple"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "squeeze_91": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_92": {
                "variable": {
                    "value": "mean_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_93": {
                "variable": {
                    "value": "mx",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(mean_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "mean_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x, axis=0, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "eigh_102": {
                "variable": {
                    "value": "(eigenvalues, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cov",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf_cov(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_103": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "eigenvalues",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_107": {
                "input_tensor": {
                    "value": "mean_diag_covs_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.map_fn(mean_diag_cov, z)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_117": {
                "input_tensor": {
                    "value": "tf.maximum(_lambda, kl)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_135": {
                "variable": {
                    "value": "d_sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_logsigma",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_136": {
                "variable": {
                    "value": "p_sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "p_logsigma",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_142": {
                "variable": {
                    "value": "Lzs1[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(_lambda, kl1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_143": {
                "variable": {
                    "value": "Lzs2[l]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kl2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5 * tf.reduce_sum((tf.square(d_mu - p_mu) + d_sigma2) / p_sigma2 - 2 * tf.log(d_sigma / p_sigma + eps), 1) - Z_SIZES[l] * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tile_159": {
                "variable": {
                    "value": "tiled_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(x, tf.stack([x_size, 1, dim]))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.stack([1, y_size, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_160": {
                "variable": {
                    "value": "tiled_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(y, tf.stack([1, y_size, dim]))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.stack([x_size, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_170": {
                "variable": {
                    "value": "logit_virtual",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_virtual",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stop_gradient(logit_virtual)",
                            "Call"
                        ],
                        [
                            "self.encoder(x, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "self.encoder(x + r_vadv, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "self.encoder(x + r_vadv, is_train=is_train, y=y)",
                            "Call"
                        ],
                        [
                            "self.encoder(x + d, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "self.encoder(x + d, is_train=is_train, y=y)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_184": {
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._ce(logit, y)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(tf.subtract(logit, y))) + eps)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(self._binary_crossentropy(x_original, x_reconst))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(tf.subtract(x_original, x_reconst))) + eps)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=x_reconst, labels=tf.cast(x_original, dtype=tf.int32))) / (self.d.img_size * 256)",
                            "BinOp"
                        ],
                        [
                            "-tf.reduce_mean(self._discretized_logistic(x_reconst, x_original))",
                            "UnaryOp"
                        ],
                        [
                            "Lzs1[-1]",
                            "Subscript"
                        ],
                        [
                            "self._kl_divergence_with_logit(logit_real, logit_virtual)",
                            "Call"
                        ],
                        [
                            "self._kl_divergence_with_logit(logit_virtual, logit_real)",
                            "Call"
                        ],
                        [
                            "self._js_divergence_with_logit(logit_real, logit_virtual)",
                            "Call"
                        ],
                        [
                            "self.get_loss_mmd(logit_virtual, logit_real)",
                            "Call"
                        ],
                        [
                            "self._js_divergence_with_logit(logit_real, logit_virtual)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(tf.subtract(logit_real, logit_virtual))) + eps)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.0, other - real + CONFIDENCE)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.0, real - other + CONFIDENCE)",
                            "Call"
                        ],
                        [
                            "self._kl_divergence_with_logit(y_true * logit_real, y_true * logit_virtual)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.abs(y_true * (logit_virtual - logit_real))) + eps)",
                            "Call"
                        ],
                        [
                            "self.get_loss_mmd(logit_virtual, logit_real)",
                            "Call"
                        ],
                        [
                            "self._kl_divergence_with_logit(logit_virtual, logit_real)",
                            "Call"
                        ],
                        [
                            "self._kl_divergence_with_logit(logit_real, logit_virtual)",
                            "Call"
                        ],
                        [
                            "self._ce(logit, y)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss_kl_logit",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_209": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "other - real + CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_212": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "real - other + CONFIDENCE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_226": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.abs(y_true * (logit_virtual - logit_real))) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_281": {
                "x": {
                    "value": "1e-06 + tf.reduce_sum(tf.pow(d, 2.0), indices, keepdims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_292": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.gradients(dist, [d], aggregation_method=2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.gradients(dist, [d], aggregation_method=2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.gradients(loss, [x], aggregation_method=2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.stop_gradient(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_304": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.gradients(dist, [d], aggregation_method=2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.gradients(dist, [d], aggregation_method=2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.gradients(loss, [x], aggregation_method=2)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.stop_gradient(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_325": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.d.class_weights * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_332": {
                "input_tensor": {
                    "value": "tf.to_float(tf.equal(pred, true))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "x_reconst",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_reconst",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_reconst, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "variable": {
                    "value": "x_original",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_original",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_original, [-1])",
                            "Call"
                        ],
                        [
                            "(tf.floor(x_original / binsize) * binsize - x_reconst) / scale",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_55": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(tf.subtract(x_original, x_reconst))) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_67": {
                "input_tensor": {
                    "value": "t * tf.log(o + eps) + (1.0 - t) * tf.log(1.0 - o + eps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_117": {
                "x": {
                    "value": "_lambda",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "kl",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5 * tf.reduce_sum(tf.square(mu) + sigma2 - 2 * logsigma, 1) - dim_z * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_161": {
                "x": {
                    "value": "-tf.reduce_mean(tf.square(tiled_x - tiled_y), axis=2) / tf.cast(dim, tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_172": {
                "variable": {
                    "value": "logit_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_real",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stop_gradient(logit_real)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(logit_real)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(logit_real)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(logit_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_244": {
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._ce(logit, y)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(tf.subtract(logit, y))) + eps)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(self._binary_crossentropy(x_original, x_reconst))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(tf.subtract(x_original, x_reconst))) + eps)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=x_reconst, labels=tf.cast(x_original, dtype=tf.int32))) / (self.d.img_size * 256)",
                            "BinOp"
                        ],
                        [
                            "-tf.reduce_mean(self._discretized_logistic(x_reconst, x_original))",
                            "UnaryOp"
                        ],
                        [
                            "Lzs1[-1]",
                            "Subscript"
                        ],
                        [
                            "self._kl_divergence_with_logit(logit_real, logit_virtual)",
                            "Call"
                        ],
                        [
                            "self._kl_divergence_with_logit(logit_virtual, logit_real)",
                            "Call"
                        ],
                        [
                            "self._js_divergence_with_logit(logit_real, logit_virtual)",
                            "Call"
                        ],
                        [
                            "self.get_loss_mmd(logit_virtual, logit_real)",
                            "Call"
                        ],
                        [
                            "self._js_divergence_with_logit(logit_real, logit_virtual)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(tf.subtract(logit_real, logit_virtual))) + eps)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.0, other - real + CONFIDENCE)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.0, real - other + CONFIDENCE)",
                            "Call"
                        ],
                        [
                            "self._kl_divergence_with_logit(y_true * logit_real, y_true * logit_virtual)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.abs(y_true * (logit_virtual - logit_real))) + eps)",
                            "Call"
                        ],
                        [
                            "self.get_loss_mmd(logit_virtual, logit_real)",
                            "Call"
                        ],
                        [
                            "self._kl_divergence_with_logit(logit_virtual, logit_real)",
                            "Call"
                        ],
                        [
                            "self._kl_divergence_with_logit(logit_real, logit_virtual)",
                            "Call"
                        ],
                        [
                            "self._ce(logit, y)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "vcw_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_260": {
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._ce(logit, y)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(tf.subtract(logit, y))) + eps)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(self._binary_crossentropy(x_original, x_reconst))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(tf.subtract(x_original, x_reconst))) + eps)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=x_reconst, labels=tf.cast(x_original, dtype=tf.int32))) / (self.d.img_size * 256)",
                            "BinOp"
                        ],
                        [
                            "-tf.reduce_mean(self._discretized_logistic(x_reconst, x_original))",
                            "UnaryOp"
                        ],
                        [
                            "Lzs1[-1]",
                            "Subscript"
                        ],
                        [
                            "self._kl_divergence_with_logit(logit_real, logit_virtual)",
                            "Call"
                        ],
                        [
                            "self._kl_divergence_with_logit(logit_virtual, logit_real)",
                            "Call"
                        ],
                        [
                            "self._js_divergence_with_logit(logit_real, logit_virtual)",
                            "Call"
                        ],
                        [
                            "self.get_loss_mmd(logit_virtual, logit_real)",
                            "Call"
                        ],
                        [
                            "self._js_divergence_with_logit(logit_real, logit_virtual)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(tf.subtract(logit_real, logit_virtual))) + eps)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.0, other - real + CONFIDENCE)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.0, real - other + CONFIDENCE)",
                            "Call"
                        ],
                        [
                            "self._kl_divergence_with_logit(y_true * logit_real, y_true * logit_virtual)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.abs(y_true * (logit_virtual - logit_real))) + eps)",
                            "Call"
                        ],
                        [
                            "self.get_loss_mmd(logit_virtual, logit_real)",
                            "Call"
                        ],
                        [
                            "self._kl_divergence_with_logit(logit_virtual, logit_real)",
                            "Call"
                        ],
                        [
                            "self._kl_divergence_with_logit(logit_real, logit_virtual)",
                            "Call"
                        ],
                        [
                            "self._ce(logit, y)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "vat_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_280": {
                "input_tensor": {
                    "value": "tf.abs(d)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "indices",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "(1, 2, 3)",
                            "Tuple"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "(1, 2, 3)",
                            "Tuple"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_309": {
                "ys": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._ce(logit, y)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(tf.subtract(logit, y))) + eps)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(self._binary_crossentropy(x_original, x_reconst))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(tf.subtract(x_original, x_reconst))) + eps)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=x_reconst, labels=tf.cast(x_original, dtype=tf.int32))) / (self.d.img_size * 256)",
                            "BinOp"
                        ],
                        [
                            "-tf.reduce_mean(self._discretized_logistic(x_reconst, x_original))",
                            "UnaryOp"
                        ],
                        [
                            "Lzs1[-1]",
                            "Subscript"
                        ],
                        [
                            "self._kl_divergence_with_logit(logit_real, logit_virtual)",
                            "Call"
                        ],
                        [
                            "self._kl_divergence_with_logit(logit_virtual, logit_real)",
                            "Call"
                        ],
                        [
                            "self._js_divergence_with_logit(logit_real, logit_virtual)",
                            "Call"
                        ],
                        [
                            "self.get_loss_mmd(logit_virtual, logit_real)",
                            "Call"
                        ],
                        [
                            "self._js_divergence_with_logit(logit_real, logit_virtual)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.square(tf.subtract(logit_real, logit_virtual))) + eps)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.0, other - real + CONFIDENCE)",
                            "Call"
                        ],
                        [
                            "tf.maximum(0.0, real - other + CONFIDENCE)",
                            "Call"
                        ],
                        [
                            "self._kl_divergence_with_logit(y_true * logit_real, y_true * logit_virtual)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.reduce_mean(tf.abs(y_true * (logit_virtual - logit_real))) + eps)",
                            "Call"
                        ],
                        [
                            "self.get_loss_mmd(logit_virtual, logit_real)",
                            "Call"
                        ],
                        [
                            "self._kl_divergence_with_logit(logit_virtual, logit_real)",
                            "Call"
                        ],
                        [
                            "self._kl_divergence_with_logit(logit_real, logit_virtual)",
                            "Call"
                        ],
                        [
                            "self._ce(logit, y)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "aggregation_method": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_322": {
                "input_tensor": {
                    "value": "unweighted_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=logit, labels=y)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_327": {
                "input_tensor": {
                    "value": "weighted_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "unweighted_losses * weights",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_332": {
                "x": {
                    "value": "tf.equal(pred, true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_337": {
                "logits": {
                    "value": "logit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(logit, [-1])",
                            "Call"
                        ],
                        [
                            "self.encoder(x + r_adv, is_train=is_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_338": {
                "input": {
                    "value": "logit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(logit, [-1])",
                            "Call"
                        ],
                        [
                            "self.encoder(x + r_adv, is_train=is_train)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_339": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_340": {
                "x": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(logit, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.argmax(logit, 1), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "true",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(y, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.argmax(y, 1), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_341": {
                "x": {
                    "value": "is_hit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(tf.equal(pred, true), tf.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_348": {
                "condition": {
                    "value": "cond",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater(prob, gamma)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_349": {
                "condition": {
                    "value": "cond_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.less_equal(prob, gamma)",
                            "Call"
                        ]
                    ]
                }
            },
            "size_351": {
                "input": {
                    "value": "idxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.where(cond), [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_355": {
                "x": {
                    "value": "tf.equal(pred_confident, true_confident)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_356": {
                "input_tensor": {
                    "value": "tf.to_float(tf.equal(pred_confident, true_confident))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_356": {
                "x": {
                    "value": "tf.equal(pred_confident, true_confident)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_360": {
                "condition": {
                    "value": "cond_error",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.not_equal(pred, true)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_375": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(x)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_376": {
                "x": {
                    "value": "tf.reduce_sum(tf.exp(xdev), 1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_381": {
                "input_tensor": {
                    "value": "q * self._logsoftmax(q_logit)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_382": {
                "input_tensor": {
                    "value": "q * self._logsoftmax(p_logit)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_389": {
                "input_tensor": {
                    "value": "q * self._logsoftmax(q_logit)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_390": {
                "input_tensor": {
                    "value": "p * self._logsoftmax(p_logit)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_391": {
                "input_tensor": {
                    "value": "q * tf.log(m + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_392": {
                "input_tensor": {
                    "value": "p * tf.log(m + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_397": {
                "input_tensor": {
                    "value": "tf.reduce_sum(p * self._logsoftmax(logit), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_42": {
                "input_tensor": {
                    "value": "tf.square(tf.subtract(logit, y))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_93": {
                "a": {
                    "value": "mean_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x, axis=0, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_94": {
                "a": {
                    "value": "tf.transpose(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_94": {
                "x": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_116": {
                "input_tensor": {
                    "value": "tf.square(mu) + sigma2 - 2 * logsigma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_137": {
                "x": {
                    "value": "p_sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(p_logsigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_142": {
                "x": {
                    "value": "_lambda",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "kl1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5 * tf.reduce_sum(tf.square(d_mu) + d_sigma2 - 2 * d_logsigma, 1) - Z_SIZES[l] * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_156": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_157": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_158": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_159": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([x_size, 1, dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_159": {
                "values": {
                    "value": "[x_size, 1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_160": {
                "tensor": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([1, y_size, dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_160": {
                "values": {
                    "value": "[1, y_size, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_166": {
                "input_tensor": {
                    "value": "xy_kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_kernel(x, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_194": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(tf.subtract(logit_real, logit_virtual))) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_280": {
                "x": {
                    "value": "d",
                    "type": "Call",
                    "possible_values": [
                        [
                            "d / tf.sqrt(1e-06 + tf.reduce_sum(tf.pow(d, 2.0), indices, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(shape=tf.shape(x))",
                            "Call"
                        ],
                        [
                            "XI * self._get_normalized_vector(d)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(grad)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=tf.shape(x))",
                            "Call"
                        ],
                        [
                            "XI * self._get_normalized_vector(d)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_281": {
                "input_tensor": {
                    "value": "tf.pow(d, 2.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "indices",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "(1, 2, 3)",
                            "Tuple"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "(1, 2, 3)",
                            "Tuple"
                        ],
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_285": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_291": {
                "ys": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._kl_divergence_with_logit(logit_real, logit_virtual)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[d]",
                    "type": "List",
                    "possible_values": []
                },
                "aggregation_method": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_297": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_303": {
                "ys": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._kl_divergence_with_logit(logit_real, logit_virtual)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[d]",
                    "type": "List",
                    "possible_values": []
                },
                "aggregation_method": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sign_313": {
                "x": {
                    "value": "norm",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._get_normalized_vector(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_332": {
                "x": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(logit, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.argmax(logit, 1), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "true",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(y, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.argmax(y, 1), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_355": {
                "x": {
                    "value": "pred_confident",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(pred, idxes)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "true_confident",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(true, idxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_376": {
                "input_tensor": {
                    "value": "tf.exp(xdev)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_397": {
                "input_tensor": {
                    "value": "p * self._logsoftmax(logit)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_42": {
                "x": {
                    "value": "tf.subtract(logit, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_72": {
                "x": {
                    "value": "x_original / binsize",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_74": {
                "x": {
                    "value": "x_original",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_original, [-1])",
                            "Call"
                        ],
                        [
                            "(tf.floor(x_original / binsize) * binsize - x_reconst) / scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_94": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_139": {
                "input_tensor": {
                    "value": "tf.square(d_mu) + d_sigma2 - 2 * d_logsigma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_140": {
                "input_tensor": {
                    "value": "(tf.square(d_mu - p_mu) + d_sigma2) / p_sigma2 - 2 * tf.log(d_sigma / p_sigma + eps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_161": {
                "x": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(x)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_226": {
                "input_tensor": {
                    "value": "tf.abs(y_true * (logit_virtual - logit_real))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_281": {
                "x": {
                    "value": "d",
                    "type": "Call",
                    "possible_values": [
                        [
                            "d / tf.sqrt(1e-06 + tf.reduce_sum(tf.pow(d, 2.0), indices, keepdims=True))",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(shape=tf.shape(x))",
                            "Call"
                        ],
                        [
                            "XI * self._get_normalized_vector(d)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(grad)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=tf.shape(x))",
                            "Call"
                        ],
                        [
                            "XI * self._get_normalized_vector(d)",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(grad)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_356": {
                "x": {
                    "value": "pred_confident",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(pred, idxes)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "true_confident",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(true, idxes)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_376": {
                "x": {
                    "value": "xdev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x - tf.reduce_max(x, 1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_391": {
                "x": {
                    "value": "m + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_392": {
                "x": {
                    "value": "m + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "subtract_42": {
                "x": {
                    "value": "logit",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reshape(logit, [-1])",
                            "Call"
                        ],
                        [
                            "self.encoder(x + r_adv, is_train=is_train)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(y, [-1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_55": {
                "input_tensor": {
                    "value": "tf.square(tf.subtract(x_original, x_reconst))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_57": {
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=x_reconst, labels=tf.cast(x_original, dtype=tf.int32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_67": {
                "x": {
                    "value": "1.0 - o + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_94": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_161": {
                "input_tensor": {
                    "value": "tf.square(tiled_x - tiled_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_226": {
                "x": {
                    "value": "y_true * (logit_virtual - logit_real)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_55": {
                "x": {
                    "value": "tf.subtract(x_original, x_reconst)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_57": {
                "logits": {
                    "value": "x_reconst",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_reconst, [-1])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.cast(x_original, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_59": {
                "input_tensor": {
                    "value": "self._discretized_logistic(x_reconst, x_original)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_116": {
                "x": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_161": {
                "x": {
                    "value": "tiled_x - tiled_y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_194": {
                "input_tensor": {
                    "value": "tf.square(tf.subtract(logit_real, logit_virtual))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_55": {
                "x": {
                    "value": "x_original",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_original, [-1])",
                            "Call"
                        ],
                        [
                            "(tf.floor(x_original / binsize) * binsize - x_reconst) / scale",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x_reconst",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_reconst, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_139": {
                "x": {
                    "value": "d_mu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_140": {
                "x": {
                    "value": "d_sigma / p_sigma + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_194": {
                "x": {
                    "value": "tf.subtract(logit_real, logit_virtual)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_57": {
                "x": {
                    "value": "x_original",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_original, [-1])",
                            "Call"
                        ],
                        [
                            "(tf.floor(x_original / binsize) * binsize - x_reconst) / scale",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_140": {
                "x": {
                    "value": "d_mu - p_mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "subtract_194": {
                "x": {
                    "value": "logit_real",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stop_gradient(logit_real)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(logit_real)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(logit_real)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(logit_real)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "logit_virtual",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.stop_gradient(logit_virtual)",
                            "Call"
                        ],
                        [
                            "self.encoder(x, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "self.encoder(x + r_vadv, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "self.encoder(x + r_vadv, is_train=is_train, y=y)",
                            "Call"
                        ],
                        [
                            "self.encoder(x + d, is_train=is_train)",
                            "Call"
                        ],
                        [
                            "self.encoder(x + d, is_train=is_train, y=y)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "vae/util/svhn.py": {
        "tensorflow": {
            "DEFINE_integer_31": {
                "name": {
                    "value": "num_valid_examples",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of validation examples",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_183": {
                "x": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform(tf.cast(image, tf.float32)) if train else image",
                            "IfExp"
                        ],
                        [
                            "transform(tf.cast(image, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_166": {
                "x": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform(tf.cast(image, tf.float32)) if train else image",
                            "IfExp"
                        ],
                        [
                            "transform(tf.cast(image, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}