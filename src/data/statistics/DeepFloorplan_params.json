{
    "demo.py": {
        "tensorflow": {
            "import_meta_graph_56": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "./pretrained/pretrained_r3d.meta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_default_graph_60": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_52": {
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {}
    },
    "net.py": {
        "tensorflow": {}
    },
    "postprocess.py": {
        "tensorflow": {}
    },
    "scores.py": {
        "tensorflow": {}
    },
    "utils/tf_record.py": {
        "tensorflow": {
            "TFRecordWriter_61": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'dataset.tfrecords'",
                            "Method Argument"
                        ],
                        [
                            "'dataset.tfrecords'",
                            "Method Argument"
                        ],
                        [
                            "'dataset.tfrecords'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "string_input_producer_90": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[data_path]",
                    "type": "List",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "capacity": {
                    "value": "batch_size * 128",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TFRecordReader_93": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_97": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.read(filename_queue)",
                            "Call"
                        ],
                        [
                            "reader.read(filename_queue)",
                            "Call"
                        ],
                        [
                            "reader.read(filename_queue)",
                            "Call"
                        ]
                    ]
                },
                "features": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'image': _bytes_feature(tf.compat.as_bytes(image.tostring())), 'wall': _bytes_feature(tf.compat.as_bytes(wall.tostring())), 'close': _bytes_feature(tf.compat.as_bytes(close.tostring())), 'room': _bytes_feature(tf.compat.as_bytes(room_ind.tostring())), 'close_wall': _bytes_feature(tf.compat.as_bytes(close_wall.tostring()))}",
                            "Dict"
                        ],
                        [
                            "{'image': tf.FixedLenFeature(shape=(), dtype=tf.string), 'wall': tf.FixedLenFeature(shape=(), dtype=tf.string), 'close': tf.FixedLenFeature(shape=(), dtype=tf.string), 'room': tf.FixedLenFeature(shape=(), dtype=tf.string), 'close_wall': tf.FixedLenFeature(shape=(), dtype=tf.string)}",
                            "Dict"
                        ],
                        [
                            "{'image': _bytes_feature(tf.compat.as_bytes(image.tostring())), 'label': _bytes_feature(tf.compat.as_bytes(room_ind.tostring()))}",
                            "Dict"
                        ],
                        [
                            "{'image': tf.FixedLenFeature(shape=(), dtype=tf.string), 'label': tf.FixedLenFeature(shape=(), dtype=tf.string)}",
                            "Dict"
                        ],
                        [
                            "{'image': _bytes_feature(tf.compat.as_bytes(image.tostring())), 'boundary': _bytes_feature(tf.compat.as_bytes(cw_ind.tostring())), 'room': _bytes_feature(tf.compat.as_bytes(room_ind.tostring())), 'door': _bytes_feature(tf.compat.as_bytes(d_ind.tostring()))}",
                            "Dict"
                        ],
                        [
                            "{'image': tf.FixedLenFeature(shape=(), dtype=tf.string), 'boundary': tf.FixedLenFeature(shape=(), dtype=tf.string), 'room': tf.FixedLenFeature(shape=(), dtype=tf.string), 'door': tf.FixedLenFeature(shape=(), dtype=tf.string)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "decode_raw_100": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_101": {
                "variable": {
                    "value": "wall",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['wall']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_102": {
                "variable": {
                    "value": "close",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['close']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_103": {
                "variable": {
                    "value": "room",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['room']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_104": {
                "variable": {
                    "value": "close_wall",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['close_wall']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_107": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_seg_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_bd_rm_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_108": {
                "variable": {
                    "value": "wall",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "wall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[1], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(wall, (512, 512))",
                            "Call"
                        ],
                        [
                            "wall.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['wall'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(wall, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(wall, [size, size, 1])",
                            "Call"
                        ],
                        [
                            "tf.divide(wall, tf.constant(255.0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_109": {
                "variable": {
                    "value": "close",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "close",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[2], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(close, (512, 512))",
                            "Call"
                        ],
                        [
                            "close.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['close'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(close, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(close, [size, size, 1])",
                            "Call"
                        ],
                        [
                            "tf.divide(close, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[2], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(close, (512, 512)) / 255",
                            "BinOp"
                        ],
                        [
                            "imread(paths[2], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(close, (512, 512)) / 255.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_111": {
                "variable": {
                    "value": "close_wall",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "close_wall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[4], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(close_wall, (512, 512))",
                            "Call"
                        ],
                        [
                            "close_wall.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['close_wall'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(close_wall, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(close_wall, [size, size, 1])",
                            "Call"
                        ],
                        [
                            "tf.divide(close_wall, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[4], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(close_wall, (512, 512)) / 255",
                            "BinOp"
                        ],
                        [
                            "imread(paths[4], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(close_wall, (512, 512)) / 255.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_seg_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_bd_rm_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[size, size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_115": {
                "variable": {
                    "value": "wall",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "wall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[1], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(wall, (512, 512))",
                            "Call"
                        ],
                        [
                            "wall.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['wall'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(wall, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(wall, [size, size, 1])",
                            "Call"
                        ],
                        [
                            "tf.divide(wall, tf.constant(255.0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[size, size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "close",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "close",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[2], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(close, (512, 512))",
                            "Call"
                        ],
                        [
                            "close.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['close'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(close, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(close, [size, size, 1])",
                            "Call"
                        ],
                        [
                            "tf.divide(close, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[2], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(close, (512, 512)) / 255",
                            "BinOp"
                        ],
                        [
                            "imread(paths[2], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(close, (512, 512)) / 255.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[size, size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "room",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "room",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[3], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(room, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['room'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(room, [size, size])",
                            "Call"
                        ],
                        [
                            "imread(paths[3], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(room, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "imread(paths[3], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(room, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['room'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(room, [size, size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "close_wall",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "close_wall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[4], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(close_wall, (512, 512))",
                            "Call"
                        ],
                        [
                            "close_wall.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['close_wall'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(close_wall, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(close_wall, [size, size, 1])",
                            "Call"
                        ],
                        [
                            "tf.divide(close_wall, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[4], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(close_wall, (512, 512)) / 255",
                            "BinOp"
                        ],
                        [
                            "imread(paths[4], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(close_wall, (512, 512)) / 255.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[size, size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "divide_123": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_seg_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_bd_rm_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(255.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_124": {
                "variable": {
                    "value": "wall",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "wall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[1], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(wall, (512, 512))",
                            "Call"
                        ],
                        [
                            "wall.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['wall'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(wall, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(wall, [size, size, 1])",
                            "Call"
                        ],
                        [
                            "tf.divide(wall, tf.constant(255.0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(255.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_125": {
                "variable": {
                    "value": "close",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "close",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[2], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(close, (512, 512))",
                            "Call"
                        ],
                        [
                            "close.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['close'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(close, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(close, [size, size, 1])",
                            "Call"
                        ],
                        [
                            "tf.divide(close, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[2], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(close, (512, 512)) / 255",
                            "BinOp"
                        ],
                        [
                            "imread(paths[2], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(close, (512, 512)) / 255.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(255.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "divide_126": {
                "variable": {
                    "value": "close_wall",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "close_wall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[4], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(close_wall, (512, 512))",
                            "Call"
                        ],
                        [
                            "close_wall.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['close_wall'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(close_wall, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(close_wall, [size, size, 1])",
                            "Call"
                        ],
                        [
                            "tf.divide(close_wall, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[4], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(close_wall, (512, 512)) / 255",
                            "BinOp"
                        ],
                        [
                            "imread(paths[4], mode='L')",
                            "Call"
                        ],
                        [
                            "imresize(close_wall, (512, 512)) / 255.0",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(255.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_129": {
                "variable": {
                    "value": "room_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "room",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[3], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(room, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['room'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(room, [size, size])",
                            "Call"
                        ],
                        [
                            "imread(paths[3], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(room, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "imread(paths[3], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(room, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['room'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(room, [size, size])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shuffle_batch_132": {
                "variable": {
                    "value": "(images, walls, closes, rooms, close_walls)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, wall, close, room_one_hot, close_wall]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "capacity": {
                    "value": "batch_size * 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "batch_size * 32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TFRecordWriter_183": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'dataset.tfrecords'",
                            "Method Argument"
                        ],
                        [
                            "'dataset.tfrecords'",
                            "Method Argument"
                        ],
                        [
                            "'dataset.tfrecords'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "string_input_producer_206": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[data_path]",
                    "type": "List",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "capacity": {
                    "value": "batch_size * 128",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TFRecordReader_209": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_213": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.read(filename_queue)",
                            "Call"
                        ],
                        [
                            "reader.read(filename_queue)",
                            "Call"
                        ],
                        [
                            "reader.read(filename_queue)",
                            "Call"
                        ]
                    ]
                },
                "features": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'image': _bytes_feature(tf.compat.as_bytes(image.tostring())), 'wall': _bytes_feature(tf.compat.as_bytes(wall.tostring())), 'close': _bytes_feature(tf.compat.as_bytes(close.tostring())), 'room': _bytes_feature(tf.compat.as_bytes(room_ind.tostring())), 'close_wall': _bytes_feature(tf.compat.as_bytes(close_wall.tostring()))}",
                            "Dict"
                        ],
                        [
                            "{'image': tf.FixedLenFeature(shape=(), dtype=tf.string), 'wall': tf.FixedLenFeature(shape=(), dtype=tf.string), 'close': tf.FixedLenFeature(shape=(), dtype=tf.string), 'room': tf.FixedLenFeature(shape=(), dtype=tf.string), 'close_wall': tf.FixedLenFeature(shape=(), dtype=tf.string)}",
                            "Dict"
                        ],
                        [
                            "{'image': _bytes_feature(tf.compat.as_bytes(image.tostring())), 'label': _bytes_feature(tf.compat.as_bytes(room_ind.tostring()))}",
                            "Dict"
                        ],
                        [
                            "{'image': tf.FixedLenFeature(shape=(), dtype=tf.string), 'label': tf.FixedLenFeature(shape=(), dtype=tf.string)}",
                            "Dict"
                        ],
                        [
                            "{'image': _bytes_feature(tf.compat.as_bytes(image.tostring())), 'boundary': _bytes_feature(tf.compat.as_bytes(cw_ind.tostring())), 'room': _bytes_feature(tf.compat.as_bytes(room_ind.tostring())), 'door': _bytes_feature(tf.compat.as_bytes(d_ind.tostring()))}",
                            "Dict"
                        ],
                        [
                            "{'image': tf.FixedLenFeature(shape=(), dtype=tf.string), 'boundary': tf.FixedLenFeature(shape=(), dtype=tf.string), 'room': tf.FixedLenFeature(shape=(), dtype=tf.string), 'door': tf.FixedLenFeature(shape=(), dtype=tf.string)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "decode_raw_216": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_217": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_220": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_seg_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_bd_rm_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_223": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_seg_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_bd_rm_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[size, size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_224": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['label'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [size, size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "divide_229": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_seg_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_bd_rm_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(255.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_232": {
                "variable": {
                    "value": "label_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['label'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(label, [size, size])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shuffle_batch_235": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label_one_hot]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "capacity": {
                    "value": "batch_size * 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "batch_size * 32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TFRecordWriter_290": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'dataset.tfrecords'",
                            "Method Argument"
                        ],
                        [
                            "'dataset.tfrecords'",
                            "Method Argument"
                        ],
                        [
                            "'dataset.tfrecords'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "string_input_producer_317": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[data_path]",
                    "type": "List",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "capacity": {
                    "value": "batch_size * 128",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TFRecordReader_320": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_324": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.read(filename_queue)",
                            "Call"
                        ],
                        [
                            "reader.read(filename_queue)",
                            "Call"
                        ],
                        [
                            "reader.read(filename_queue)",
                            "Call"
                        ]
                    ]
                },
                "features": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'image': _bytes_feature(tf.compat.as_bytes(image.tostring())), 'wall': _bytes_feature(tf.compat.as_bytes(wall.tostring())), 'close': _bytes_feature(tf.compat.as_bytes(close.tostring())), 'room': _bytes_feature(tf.compat.as_bytes(room_ind.tostring())), 'close_wall': _bytes_feature(tf.compat.as_bytes(close_wall.tostring()))}",
                            "Dict"
                        ],
                        [
                            "{'image': tf.FixedLenFeature(shape=(), dtype=tf.string), 'wall': tf.FixedLenFeature(shape=(), dtype=tf.string), 'close': tf.FixedLenFeature(shape=(), dtype=tf.string), 'room': tf.FixedLenFeature(shape=(), dtype=tf.string), 'close_wall': tf.FixedLenFeature(shape=(), dtype=tf.string)}",
                            "Dict"
                        ],
                        [
                            "{'image': _bytes_feature(tf.compat.as_bytes(image.tostring())), 'label': _bytes_feature(tf.compat.as_bytes(room_ind.tostring()))}",
                            "Dict"
                        ],
                        [
                            "{'image': tf.FixedLenFeature(shape=(), dtype=tf.string), 'label': tf.FixedLenFeature(shape=(), dtype=tf.string)}",
                            "Dict"
                        ],
                        [
                            "{'image': _bytes_feature(tf.compat.as_bytes(image.tostring())), 'boundary': _bytes_feature(tf.compat.as_bytes(cw_ind.tostring())), 'room': _bytes_feature(tf.compat.as_bytes(room_ind.tostring())), 'door': _bytes_feature(tf.compat.as_bytes(d_ind.tostring()))}",
                            "Dict"
                        ],
                        [
                            "{'image': tf.FixedLenFeature(shape=(), dtype=tf.string), 'boundary': tf.FixedLenFeature(shape=(), dtype=tf.string), 'room': tf.FixedLenFeature(shape=(), dtype=tf.string), 'door': tf.FixedLenFeature(shape=(), dtype=tf.string)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "decode_raw_327": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_328": {
                "variable": {
                    "value": "boundary",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['boundary']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_329": {
                "variable": {
                    "value": "room",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['room']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_330": {
                "variable": {
                    "value": "door",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['door']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_333": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_seg_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_bd_rm_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_336": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_seg_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_bd_rm_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[size, size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_337": {
                "variable": {
                    "value": "boundary",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boundary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['boundary'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boundary, [size, size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_338": {
                "variable": {
                    "value": "room",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "room",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[3], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(room, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['room'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(room, [size, size])",
                            "Call"
                        ],
                        [
                            "imread(paths[3], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(room, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "imread(paths[3], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(room, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['room'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(room, [size, size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_339": {
                "variable": {
                    "value": "door",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "door",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['door'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(door, [size, size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "divide_343": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_seg_raw_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ],
                        [
                            "imread(paths[0], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(image, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "image.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "load_bd_rm_images(paths[i])",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['image'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [size, size, 3])",
                            "Call"
                        ],
                        [
                            "tf.divide(image, tf.constant(255.0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(255.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_346": {
                "variable": {
                    "value": "label_boundary",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "boundary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['boundary'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boundary, [size, size])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_347": {
                "variable": {
                    "value": "label_room",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "room",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imread(paths[3], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(room, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['room'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(room, [size, size])",
                            "Call"
                        ],
                        [
                            "imread(paths[3], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(room, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "imread(paths[3], mode='RGB')",
                            "Call"
                        ],
                        [
                            "imresize(room, (512, 512, 3))",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['room'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(room, [size, size])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shuffle_batch_350": {
                "variable": {
                    "value": "(images, label_boundaries, label_rooms, label_doors)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label_boundary, label_room, door]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "capacity": {
                    "value": "batch_size * 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "batch_size * 32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Feature_55": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_58": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_75": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_194": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_303": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FixedLenFeature_83": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_84": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_85": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_86": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_87": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_123": {
                "value": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_124": {
                "value": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_125": {
                "value": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_126": {
                "value": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "FixedLenFeature_202": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_203": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_229": {
                "value": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "FixedLenFeature_311": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_312": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_313": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_314": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_343": {
                "value": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Int64List_55": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_58": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_bytes_68": {
                "bytes_or_text": {
                    "value": "image.tostring()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_bytes_69": {
                "bytes_or_text": {
                    "value": "wall.tostring()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_bytes_70": {
                "bytes_or_text": {
                    "value": "close.tostring()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_bytes_71": {
                "bytes_or_text": {
                    "value": "room_ind.tostring()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_bytes_72": {
                "bytes_or_text": {
                    "value": "close_wall.tostring()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_75": {
                "feature": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'image': _bytes_feature(tf.compat.as_bytes(image.tostring())), 'wall': _bytes_feature(tf.compat.as_bytes(wall.tostring())), 'close': _bytes_feature(tf.compat.as_bytes(close.tostring())), 'room': _bytes_feature(tf.compat.as_bytes(room_ind.tostring())), 'close_wall': _bytes_feature(tf.compat.as_bytes(close_wall.tostring()))}",
                            "Dict"
                        ],
                        [
                            "{'image': tf.FixedLenFeature(shape=(), dtype=tf.string), 'wall': tf.FixedLenFeature(shape=(), dtype=tf.string), 'close': tf.FixedLenFeature(shape=(), dtype=tf.string), 'room': tf.FixedLenFeature(shape=(), dtype=tf.string), 'close_wall': tf.FixedLenFeature(shape=(), dtype=tf.string)}",
                            "Dict"
                        ],
                        [
                            "{'image': _bytes_feature(tf.compat.as_bytes(image.tostring())), 'label': _bytes_feature(tf.compat.as_bytes(room_ind.tostring()))}",
                            "Dict"
                        ],
                        [
                            "{'image': tf.FixedLenFeature(shape=(), dtype=tf.string), 'label': tf.FixedLenFeature(shape=(), dtype=tf.string)}",
                            "Dict"
                        ],
                        [
                            "{'image': _bytes_feature(tf.compat.as_bytes(image.tostring())), 'boundary': _bytes_feature(tf.compat.as_bytes(cw_ind.tostring())), 'room': _bytes_feature(tf.compat.as_bytes(room_ind.tostring())), 'door': _bytes_feature(tf.compat.as_bytes(d_ind.tostring()))}",
                            "Dict"
                        ],
                        [
                            "{'image': tf.FixedLenFeature(shape=(), dtype=tf.string), 'boundary': tf.FixedLenFeature(shape=(), dtype=tf.string), 'room': tf.FixedLenFeature(shape=(), dtype=tf.string), 'door': tf.FixedLenFeature(shape=(), dtype=tf.string)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "as_bytes_190": {
                "bytes_or_text": {
                    "value": "image.tostring()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_bytes_191": {
                "bytes_or_text": {
                    "value": "room_ind.tostring()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_194": {
                "feature": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'image': _bytes_feature(tf.compat.as_bytes(image.tostring())), 'wall': _bytes_feature(tf.compat.as_bytes(wall.tostring())), 'close': _bytes_feature(tf.compat.as_bytes(close.tostring())), 'room': _bytes_feature(tf.compat.as_bytes(room_ind.tostring())), 'close_wall': _bytes_feature(tf.compat.as_bytes(close_wall.tostring()))}",
                            "Dict"
                        ],
                        [
                            "{'image': tf.FixedLenFeature(shape=(), dtype=tf.string), 'wall': tf.FixedLenFeature(shape=(), dtype=tf.string), 'close': tf.FixedLenFeature(shape=(), dtype=tf.string), 'room': tf.FixedLenFeature(shape=(), dtype=tf.string), 'close_wall': tf.FixedLenFeature(shape=(), dtype=tf.string)}",
                            "Dict"
                        ],
                        [
                            "{'image': _bytes_feature(tf.compat.as_bytes(image.tostring())), 'label': _bytes_feature(tf.compat.as_bytes(room_ind.tostring()))}",
                            "Dict"
                        ],
                        [
                            "{'image': tf.FixedLenFeature(shape=(), dtype=tf.string), 'label': tf.FixedLenFeature(shape=(), dtype=tf.string)}",
                            "Dict"
                        ],
                        [
                            "{'image': _bytes_feature(tf.compat.as_bytes(image.tostring())), 'boundary': _bytes_feature(tf.compat.as_bytes(cw_ind.tostring())), 'room': _bytes_feature(tf.compat.as_bytes(room_ind.tostring())), 'door': _bytes_feature(tf.compat.as_bytes(d_ind.tostring()))}",
                            "Dict"
                        ],
                        [
                            "{'image': tf.FixedLenFeature(shape=(), dtype=tf.string), 'boundary': tf.FixedLenFeature(shape=(), dtype=tf.string), 'room': tf.FixedLenFeature(shape=(), dtype=tf.string), 'door': tf.FixedLenFeature(shape=(), dtype=tf.string)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "as_bytes_297": {
                "bytes_or_text": {
                    "value": "image.tostring()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_bytes_298": {
                "bytes_or_text": {
                    "value": "cw_ind.tostring()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_bytes_299": {
                "bytes_or_text": {
                    "value": "room_ind.tostring()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_bytes_300": {
                "bytes_or_text": {
                    "value": "d_ind.tostring()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_303": {
                "feature": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'image': _bytes_feature(tf.compat.as_bytes(image.tostring())), 'wall': _bytes_feature(tf.compat.as_bytes(wall.tostring())), 'close': _bytes_feature(tf.compat.as_bytes(close.tostring())), 'room': _bytes_feature(tf.compat.as_bytes(room_ind.tostring())), 'close_wall': _bytes_feature(tf.compat.as_bytes(close_wall.tostring()))}",
                            "Dict"
                        ],
                        [
                            "{'image': tf.FixedLenFeature(shape=(), dtype=tf.string), 'wall': tf.FixedLenFeature(shape=(), dtype=tf.string), 'close': tf.FixedLenFeature(shape=(), dtype=tf.string), 'room': tf.FixedLenFeature(shape=(), dtype=tf.string), 'close_wall': tf.FixedLenFeature(shape=(), dtype=tf.string)}",
                            "Dict"
                        ],
                        [
                            "{'image': _bytes_feature(tf.compat.as_bytes(image.tostring())), 'label': _bytes_feature(tf.compat.as_bytes(room_ind.tostring()))}",
                            "Dict"
                        ],
                        [
                            "{'image': tf.FixedLenFeature(shape=(), dtype=tf.string), 'label': tf.FixedLenFeature(shape=(), dtype=tf.string)}",
                            "Dict"
                        ],
                        [
                            "{'image': _bytes_feature(tf.compat.as_bytes(image.tostring())), 'boundary': _bytes_feature(tf.compat.as_bytes(cw_ind.tostring())), 'room': _bytes_feature(tf.compat.as_bytes(room_ind.tostring())), 'door': _bytes_feature(tf.compat.as_bytes(d_ind.tostring()))}",
                            "Dict"
                        ],
                        [
                            "{'image': tf.FixedLenFeature(shape=(), dtype=tf.string), 'boundary': tf.FixedLenFeature(shape=(), dtype=tf.string), 'room': tf.FixedLenFeature(shape=(), dtype=tf.string), 'door': tf.FixedLenFeature(shape=(), dtype=tf.string)}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    }
}