{
    "datasets/cifar10.py": {
        "torch": {
            "DataLoader_87": {
                "variable": {
                    "value": "self.train_instance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "IMBALANCECIFAR10(root=root, imb_type=imb_type, imb_factor=imb_factor, rand_number=0, train=True, download=True, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_works",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "self.dist_sampler",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_93": {
                "variable": {
                    "value": "self.train_balance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "IMBALANCECIFAR10(root=root, imb_type=imb_type, imb_factor=imb_factor, rand_number=0, train=True, download=True, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_works",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "balance_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ClassAwareSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "self.eval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root=root, train=False, download=True, transform=eval_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_works",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_86": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "IMBALANCECIFAR10(root=root, imb_type=imb_type, imb_factor=imb_factor, rand_number=0, train=True, download=True, transform=train_transform)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/cifar100.py": {
        "torch": {
            "DataLoader_90": {
                "variable": {
                    "value": "self.train_instance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "IMBALANCECIFAR100(root=root, imb_type=imb_type, imb_factor=imb_factor, rand_number=0, train=True, download=True, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_works",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "self.dist_sampler",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "self.train_balance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "IMBALANCECIFAR100(root=root, imb_type=imb_type, imb_factor=imb_factor, rand_number=0, train=True, download=True, transform=train_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_works",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "balance_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ClassAwareSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "self.eval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR100(root=root, train=False, download=True, transform=eval_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_works",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_89": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "IMBALANCECIFAR100(root=root, imb_type=imb_type, imb_factor=imb_factor, rand_number=0, train=True, download=True, transform=train_transform)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/imagenet.py": {
        "torch": {
            "DataLoader_119": {
                "variable": {
                    "value": "self.train_instance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LT_Dataset(root, train_txt, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "60",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_works",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "self.dist_sampler",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_125": {
                "variable": {
                    "value": "self.train_balance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LT_Dataset(root, train_txt, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "60",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_works",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "balance_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ClassAwareSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_130": {
                "variable": {
                    "value": "self.eval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LT_Dataset_Eval(root, eval_txt, transform=transform_test, class_map=train_dataset.class_map)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "60",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_works",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_118": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LT_Dataset(root, train_txt, transform=transform_train)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/ina2018.py": {
        "torch": {
            "DataLoader_118": {
                "variable": {
                    "value": "self.train_instance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LT_Dataset(root, train_txt, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "60",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_works",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "self.dist_sampler",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "self.train_balance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LT_Dataset(root, train_txt, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "60",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_works",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "balance_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ClassAwareSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "self.eval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LT_Dataset_Eval(root, eval_txt, transform=transform_test, class_map=train_dataset.class_map)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "60",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_works",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_117": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LT_Dataset(root, train_txt, transform=transform_train)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/places.py": {
        "torch": {
            "DataLoader_119": {
                "variable": {
                    "value": "self.train_instance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LT_Dataset(root, train_txt, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "60",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_works",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "self.dist_sampler",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_125": {
                "variable": {
                    "value": "self.train_balance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LT_Dataset(root, train_txt, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "60",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_works",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "balance_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ClassAwareSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_130": {
                "variable": {
                    "value": "self.eval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LT_Dataset_Eval(root, eval_txt, transform=transform_test, class_map=train_dataset.class_map)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "60",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_works",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedSampler_118": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LT_Dataset(root, train_txt, transform=transform_train)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "datasets/sampler.py": {
        "torch": {
            "multinomial_42": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multinomial_84": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "device_count_82": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_227": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_250": {
                "variable": {
                    "value": "class_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_251": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_69": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_70": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_71": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_281": {
                "variable": {
                    "value": "target_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target.cuda(config.gpu, non_blocking=True)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_282": {
                "variable": {
                    "value": "predict_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_286": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "classifier(feat)",
                            "Call"
                        ],
                        [
                            "lws_model(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_287": {
                "variable": {
                    "value": "(confidence_part, pred_class_part)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.softmax(output, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_146": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_cifar, config.backbone)()",
                            "Call"
                        ],
                        [
                            "getattr(resnet, config.backbone)()",
                            "Call"
                        ],
                        [
                            "getattr(resnet_places, config.backbone)(pretrained=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[config.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_147": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_cifar, 'Classifier')(feat_in=64, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "getattr(resnet, 'Classifier')(feat_in=2048, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "getattr(resnet_places, 'Classifier')(feat_in=2048, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(classifier, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(classifier)",
                            "Call"
                        ],
                        [
                            "classifier.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(classifier).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[config.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_148": {
                "variable": {
                    "value": "lws_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "lws_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LearnableWeightScaling(num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(lws_model, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(lws_model)",
                            "Call"
                        ],
                        [
                            "lws_model.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(lws_model).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[config.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_159": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_cifar, config.backbone)()",
                            "Call"
                        ],
                        [
                            "getattr(resnet, config.backbone)()",
                            "Call"
                        ],
                        [
                            "getattr(resnet_places, config.backbone)(pretrained=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_160": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_cifar, 'Classifier')(feat_in=64, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "getattr(resnet, 'Classifier')(feat_in=2048, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "getattr(resnet_places, 'Classifier')(feat_in=2048, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(classifier, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(classifier)",
                            "Call"
                        ],
                        [
                            "classifier.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(classifier).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_161": {
                "variable": {
                    "value": "lws_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "lws_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LearnableWeightScaling(num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(lws_model, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(lws_model)",
                            "Call"
                        ],
                        [
                            "lws_model.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(lws_model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_175": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_cifar, config.backbone)()",
                            "Call"
                        ],
                        [
                            "getattr(resnet, config.backbone)()",
                            "Call"
                        ],
                        [
                            "getattr(resnet_places, config.backbone)(pretrained=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_176": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_cifar, 'Classifier')(feat_in=64, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "getattr(resnet, 'Classifier')(feat_in=2048, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "getattr(resnet_places, 'Classifier')(feat_in=2048, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(classifier, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(classifier)",
                            "Call"
                        ],
                        [
                            "classifier.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(classifier).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_177": {
                "variable": {
                    "value": "lws_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "lws_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LearnableWeightScaling(num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(lws_model, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(lws_model)",
                            "Call"
                        ],
                        [
                            "lws_model.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(lws_model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_186": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_190": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(config.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_137": {
                "device": {
                    "value": "config.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_152": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_places, 'Bottleneck')(2048, 512, groups=1, base_width=64, dilation=1, norm_layer=nn.BatchNorm2d)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(block, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(block)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(block).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[config.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_164": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_places, 'Bottleneck')(2048, 512, groups=1, base_width=64, dilation=1, norm_layer=nn.BatchNorm2d)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(block, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(block)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(block).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "set_device_167": {
                "device": {
                    "value": "config.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_179": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_places, 'Bottleneck')(2048, 512, groups=1, base_width=64, dilation=1, norm_layer=nn.BatchNorm2d)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(block, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(block)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(block).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "methods.py": {
        "torch": {
            "randperm_17": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_19": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "self.smooth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.smooth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_58": {
                "variable": {
                    "value": "logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_70": {
                "variable": {
                    "value": "self.learned_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_70": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_149": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_157": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_213": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_239": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_242": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_243": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_252": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flatten_306": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_315": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_185": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_279": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_293": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet_cifar.py": {
        "torch": {
            "Parameter_41": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_45": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_45": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(self.weight, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(x, dim=1).mm(F.normalize(self.weight, dim=0))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_117": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_121": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(x, dim=1).mm(F.normalize(self.weight, dim=0))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_133": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_149": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_153": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(x, dim=1).mm(F.normalize(self.weight, dim=0))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_114": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_75": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet_places.py": {
        "torch": {
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_149": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_157": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_158": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_213": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_239": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_242": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_243": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_252": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_314": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_315": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_319": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_185": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_279": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_293": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "train_stage1.py": {
        "torch": {
            "device_count_84": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_220": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_366": {
                "variable": {
                    "value": "class_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_367": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_223": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': block.parameters()}, {'params': classifier.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_228": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': model.parameters()}, {'params': classifier.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_428": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_dir + '/current.pth.tar'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_71": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_72": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_73": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_395": {
                "variable": {
                    "value": "target_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target.cuda(config.gpu, non_blocking=True)",
                            "Call"
                        ],
                        [
                            "target.cuda(config.gpu, non_blocking=True)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_396": {
                "variable": {
                    "value": "predict_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_400": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "classifier(feat)",
                            "Call"
                        ],
                        [
                            "classifier(feat)",
                            "Call"
                        ],
                        [
                            "classifier(feat)",
                            "Call"
                        ],
                        [
                            "classifier(feat)",
                            "Call"
                        ],
                        [
                            "classifier(feat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_401": {
                "variable": {
                    "value": "(confidence_part, pred_class_part)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.softmax(output, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_143": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_cifar, config.backbone)()",
                            "Call"
                        ],
                        [
                            "getattr(resnet, config.backbone)()",
                            "Call"
                        ],
                        [
                            "getattr(resnet_places, config.backbone)(pretrained=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[config.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_144": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_cifar, 'Classifier')(feat_in=64, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "getattr(resnet, 'Classifier')(feat_in=2048, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "getattr(resnet_places, 'Classifier')(feat_in=2048, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(classifier, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(classifier)",
                            "Call"
                        ],
                        [
                            "classifier.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(classifier).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[config.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_153": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_cifar, config.backbone)()",
                            "Call"
                        ],
                        [
                            "getattr(resnet, config.backbone)()",
                            "Call"
                        ],
                        [
                            "getattr(resnet_places, config.backbone)(pretrained=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_154": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_cifar, 'Classifier')(feat_in=64, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "getattr(resnet, 'Classifier')(feat_in=2048, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "getattr(resnet_places, 'Classifier')(feat_in=2048, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(classifier, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(classifier)",
                            "Call"
                        ],
                        [
                            "classifier.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(classifier).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_166": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_cifar, config.backbone)()",
                            "Call"
                        ],
                        [
                            "getattr(resnet, config.backbone)()",
                            "Call"
                        ],
                        [
                            "getattr(resnet_places, config.backbone)(pretrained=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_167": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_cifar, 'Classifier')(feat_in=64, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "getattr(resnet, 'Classifier')(feat_in=2048, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "getattr(resnet_places, 'Classifier')(feat_in=2048, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(classifier, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(classifier)",
                            "Call"
                        ],
                        [
                            "classifier.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(classifier).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_176": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_180": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(config.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_135": {
                "device": {
                    "value": "config.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_147": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_places, 'Bottleneck')(2048, 512, groups=1, base_width=64, dilation=1, norm_layer=nn.BatchNorm2d)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(block, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(block)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(block).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[config.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_157": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_places, 'Bottleneck')(2048, 512, groups=1, base_width=64, dilation=1, norm_layer=nn.BatchNorm2d)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(block, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(block)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(block).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "set_device_159": {
                "device": {
                    "value": "config.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_169": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_places, 'Bottleneck')(2048, 512, groups=1, base_width=64, dilation=1, norm_layer=nn.BatchNorm2d)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(block, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(block)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(block).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_stage2.py": {
        "torch": {
            "device_count_86": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_241": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': classifier.parameters()}, {'params': lws_model.parameters()}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_383": {
                "variable": {
                    "value": "class_num",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_384": {
                "variable": {
                    "value": "correct",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_447": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_dir + '/current.pth.tar'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_73": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_74": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_75": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_325": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_390": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_414": {
                "variable": {
                    "value": "target_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target.cuda(config.gpu, non_blocking=True)",
                            "Call"
                        ],
                        [
                            "target.cuda(config.gpu, non_blocking=True)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_415": {
                "variable": {
                    "value": "predict_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "config.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_419": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "classifier(feat.detach())",
                            "Call"
                        ],
                        [
                            "lws_model(output)",
                            "Call"
                        ],
                        [
                            "classifier(feat.detach())",
                            "Call"
                        ],
                        [
                            "lws_model(output)",
                            "Call"
                        ],
                        [
                            "classifier(feat)",
                            "Call"
                        ],
                        [
                            "lws_model(output)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_420": {
                "variable": {
                    "value": "(confidence_part, pred_class_part)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.softmax(output, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_149": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_cifar, config.backbone)()",
                            "Call"
                        ],
                        [
                            "getattr(resnet, config.backbone)()",
                            "Call"
                        ],
                        [
                            "getattr(resnet_places, config.backbone)(pretrained=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[config.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_150": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_cifar, 'Classifier')(feat_in=64, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "getattr(resnet, 'Classifier')(feat_in=2048, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "getattr(resnet_places, 'Classifier')(feat_in=2048, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(classifier, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(classifier)",
                            "Call"
                        ],
                        [
                            "classifier.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(classifier).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[config.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_151": {
                "variable": {
                    "value": "lws_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "lws_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LearnableWeightScaling(num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(lws_model, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(lws_model)",
                            "Call"
                        ],
                        [
                            "lws_model.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(lws_model).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[config.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_162": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_cifar, config.backbone)()",
                            "Call"
                        ],
                        [
                            "getattr(resnet, config.backbone)()",
                            "Call"
                        ],
                        [
                            "getattr(resnet_places, config.backbone)(pretrained=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_163": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_cifar, 'Classifier')(feat_in=64, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "getattr(resnet, 'Classifier')(feat_in=2048, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "getattr(resnet_places, 'Classifier')(feat_in=2048, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(classifier, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(classifier)",
                            "Call"
                        ],
                        [
                            "classifier.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(classifier).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_164": {
                "variable": {
                    "value": "lws_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "lws_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LearnableWeightScaling(num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(lws_model, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(lws_model)",
                            "Call"
                        ],
                        [
                            "lws_model.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(lws_model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_178": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_cifar, config.backbone)()",
                            "Call"
                        ],
                        [
                            "getattr(resnet, config.backbone)()",
                            "Call"
                        ],
                        [
                            "getattr(resnet_places, config.backbone)(pretrained=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_179": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_cifar, 'Classifier')(feat_in=64, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "getattr(resnet, 'Classifier')(feat_in=2048, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "getattr(resnet_places, 'Classifier')(feat_in=2048, num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(classifier, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(classifier)",
                            "Call"
                        ],
                        [
                            "classifier.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(classifier).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_180": {
                "variable": {
                    "value": "lws_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "lws_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "LearnableWeightScaling(num_classes=config.num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(lws_model, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(lws_model)",
                            "Call"
                        ],
                        [
                            "lws_model.cuda(config.gpu)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(lws_model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_189": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_193": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "config.resume",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "loc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(config.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_395": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_140": {
                "device": {
                    "value": "config.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_155": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_places, 'Bottleneck')(2048, 512, groups=1, base_width=64, dilation=1, norm_layer=nn.BatchNorm2d)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(block, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(block)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(block).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[config.gpu]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_167": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_places, 'Bottleneck')(2048, 512, groups=1, base_width=64, dilation=1, norm_layer=nn.BatchNorm2d)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(block, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(block)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(block).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "set_device_170": {
                "device": {
                    "value": "config.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_182": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(resnet_places, 'Bottleneck')(2048, 512, groups=1, base_width=64, dilation=1, norm_layer=nn.BatchNorm2d)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(block, device_ids=[config.gpu])",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(block)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(block).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_331": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/metric.py": {
        "torch": {
            "no_grad_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}