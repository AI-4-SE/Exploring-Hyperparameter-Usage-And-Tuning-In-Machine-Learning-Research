{
    "experiments/mnist/client.py": {
        "tensorflow": {
            "SGD_31": {
                "learning_rate": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/mnist/experiment_runner.py": {
        "tensorflow": {
            "set_seed_71": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "layers": {
                    "value": "[tf.keras.layers.Dense(64, activation='relu', input_shape=(784,)), tf.keras.layers.Dropout(0.2), tf.keras.layers.Dense(10, activation='softmax')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_94": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(784,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_95": {
                "rate": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_96": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/mnist/mnist.py": {
        "tensorflow": {
            "load_data_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/mnist/server.py": {
        "tensorflow": {
            "SparseCategoricalCrossentropy_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/shakespeare/federated_shakespeare.py": {
        "tensorflow": {
            "SparseCategoricalCrossentropy_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "uniform_119": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "maxval": {
                    "value": "len(shakespeare_train.client_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/shakespeare/numpy_aggr.py": {
        "tensorflow": {
            "TensorArray_63": {
                "variable": {
                    "value": "tensor_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dataset.element_spec.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "tf.cast(tf.data.experimental.cardinality(dataset), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "element_shape": {
                    "value": "dataset.element_spec.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_25": {
                "tensor": {
                    "value": "tf.numpy_function(self._numpy_fn, [v, w], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(v)[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_64": {
                "x": {
                    "value": "tf.data.experimental.cardinality(dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_67": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "numpy_function_25": {
                "func": {
                    "value": "self._numpy_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[v, w]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cardinality_64": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_25": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ds_to_array(values)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/shakespeare/plot_ds_hist.py": {
        "tensorflow": {
            "function_65": {
                "input_signature": {
                    "value": "[tf.TensorSpec(shape=None, dtype=tf.int64), shakespeare_train.element_type_structure]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_71": {
                "x": {
                    "value": "tf.size(tokens) // SEQUENCE_LENGTH",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "count_nonzero_71": {
                "input": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_tokens(_)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorSpec_65": {
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "size_71": {
                "input": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_tokens(_)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_42": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/shakespeare/run_experiment.py": {
        "tensorflow": {
            "cast_158": {
                "x": {
                    "value": "tf.squeeze(local_outputs['num_tokens'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_164": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_158": {
                "input": {
                    "value": "local_outputs['num_tokens']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/shakespeare/tff_patch/federated_averaging.py": {
        "tensorflow": {
            "map_structure_128": {
                "variable": {
                    "value": "weights_delta",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "tf.subtract",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*structure": {
                    "value": "model.weights.trainable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "initial_weights.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_162": {
                "learning_rate": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "map_structure_106": {
                "func": {
                    "value": "lambda a, b: a.assign(b)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "model.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "initial_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "map_structure_134": {
                "variable": {
                    "value": "weights_delta",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda _: -_",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "initial_weights.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_143": {
                "variable": {
                    "value": "weights_delta_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_145": {
                "variable": {
                    "value": "weights_delta_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_examples_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._dataset_reduce_fn(reduce_fn, dataset, initial_state_fn=lambda : tf.zeros(shape=[], dtype=tf.int64))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_147": {
                "variable": {
                    "value": "weights_delta_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_121": {
                "x": {
                    "value": "output.num_examples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_126": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_118": {
                "input": {
                    "value": "output.predictions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/shakespeare/tff_patch/optimizer_utils.py": {
        "tensorflow": {
            "map_structure_193": {
                "variable": {
                    "value": "grads_and_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x, v: (-1.0 * x, v)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "tf.nest.flatten(delta)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.nest.flatten(model_variables.trainable)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_structure_216": {
                "variable": {
                    "value": "delta_tensor_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda v: tf.TensorSpec.from_tensor(v.read_value())",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "model_utils.ModelWeights.from_model(model).trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_same_structure_192": {
                "nest1": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "nest2": {
                    "value": "model_variables.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_194": {
                "structure": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "flatten_195": {
                "structure": {
                    "value": "model_variables.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "map_structure_354": {
                "func": {
                    "value": "lambda a, b: a.assign(b)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "(model_variables, optimizer_variables)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "(global_model, optimizer_state)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "init_scope_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "init_scope_386": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "map_structure_169": {
                "func": {
                    "value": "type",
                    "type": "variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "old_value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "map_structure_170": {
                "func": {
                    "value": "type",
                    "type": "variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "new_value",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}