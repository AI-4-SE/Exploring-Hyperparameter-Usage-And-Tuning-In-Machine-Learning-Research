{
    "src/mylib/lgb/metrics.py": {
        "sklearn": {
            "mean_squared_log_error_11": {
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.exp(label)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.exp(preds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/mylib/sklearn/fe/pair_count_encoder.py": {
        "sklearn": {
            "TruncatedSVD_10": {
                "variable": {
                    "value": "self.svd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_components",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/mylib/sklearn/fe/target_encoder.py": {
        "sklearn": {
            "check_cv_26": {
                "cv": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_input_vector(y, X.index)",
                            "Call"
                        ]
                    ]
                },
                "classifier": {
                    "value": "stratified",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "StratifiedKFold_22": {
                "n_splits": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "KFold_24": {
                "n_splits": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clone_66": {
                "estimator": {
                    "value": "self.base_transformer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "type_of_target_21": {
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "convert_input_vector(y, X.index)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/mylib/sklearn/split.py": {
        "sklearn": {
            "KBinsDiscretizer_16": {
                "variable": {
                    "value": "self.kbd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_bins": {
                    "value": "n_bins",
                    "type": "variable",
                    "possible_values": []
                },
                "encode": {
                    "value": "ordinal",
                    "type": "str",
                    "possible_values": []
                },
                "strategy": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/run_train.py": {
        "sklearn": {
            "KFold_55": {
                "variable": {
                    "value": "folds",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "self.hp.n_splits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.hp.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "log_123": {
                "variable": {
                    "value": "lmae",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mae",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mae_loss(y_pred, y_true)",
                            "Call"
                        ],
                        [
                            "mae + o[f'{prefix}_mae'] * size",
                            "BinOp"
                        ],
                        [
                            "mae / total_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_176": {
                "input": {
                    "value": "mae",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mae_loss(y_pred, y_true)",
                            "Call"
                        ],
                        [
                            "mae + o[f'{prefix}_mae'] * size",
                            "BinOp"
                        ],
                        [
                            "mae / total_size",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/dimenet/functional.py": {
        "torch": {
            "sqrt_9": {
                "variable": {
                    "value": "Dij",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(torch.sum((Ri - Rj) ** 2, -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R1 * R2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_21": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rj - Ri",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "R2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rk - Ri",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_22": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(R1, R2)",
                            "Call"
                        ],
                        [
                            "torch.norm(y, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan2_23": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(R1, R2)",
                            "Call"
                        ],
                        [
                            "torch.norm(y, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(R1 * R2, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_9": {
                "input": {
                    "value": "torch.sum((Ri - Rj) ** 2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_9": {
                "input": {
                    "value": "(Ri - Rj) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/dimenet/loader.py": {
        "torch": {
            "from_numpy_57": {
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PandasDataset(df)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AtomsCollate(cutoff=cutoff, post_fn=post_fn)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_56": {
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/dimenet/loss.py": {
        "torch": {
            "abs_5": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/dimenet/modules/bessel_basis_layer.py": {
        "torch": {
            "Parameter_15": {
                "variable": {
                    "value": "self.frequencies",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "freq_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.pi * torch.arange(1, num_radial + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_19": {
                "variable": {
                    "value": "d_scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_scaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs / self.cutoff",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(d_scaled, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_14": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_radial + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_21": {
                "input": {
                    "value": "self.frequencies * d_scaled",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/dimenet/modules/dimenet.py": {
        "torch": {
            "ModuleList_51": {
                "variable": {
                    "value": "self.output_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[OutputBlock(emb_size, num_radial=num_radial, n_layers=num_dense_output, n_out=num_targets, activation=activation) for _ in range(num_blocks + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_61": {
                "variable": {
                    "value": "self.int_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[InteractionBlock(emb_size, num_radial=num_radial, num_spherical=num_spherical, num_bilinear=num_bilinear, num_before_skip=num_before_skip, num_after_skip=num_after_skip, activation=activation) for _ in range(num_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "src/dimenet/modules/embedding_block.py": {
        "torch": {
            "Embedding_10": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, rbf)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/dimenet/modules/envelope.py": {
        "torch": {
            "where_20": {
                "condition": {
                    "value": "inputs < 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "env_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / inputs + self.a * inputs ** (self.p - 1) + self.b * inputs ** self.p + self.c * inputs ** (self.p + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros_like(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_20": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/dimenet/modules/interaction_block.py": {
        "torch": {
            "empty_32": {
                "variable": {
                    "value": "bilin_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.emb_size, self.num_bilinear, self.emb_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.W_bilin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bilin_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((self.emb_size, self.num_bilinear, self.emb_size)).normal_(mean=0, std=2 / emb_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.layers_before_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResidualLayer(emb_size, activation=activation, bias=True) for _ in range(num_before_skip)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_43": {
                "variable": {
                    "value": "self.layers_after_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResidualLayer(emb_size, activation=activation, bias=True) for _ in range(num_after_skip)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "einsum_65": {
                "variable": {
                    "value": "x_kj",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "wj,wl,ijl->wi",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "sbf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((10, 42)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.dense_sbf(sbf)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_101": {
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((7, 64)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "inputs + self.dense_2(self.dense_1(inputs))",
                            "BinOp"
                        ],
                        [
                            "x + x2",
                            "BinOp"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_102": {
                "ndarray": {
                    "value": "rbf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((7, 6)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_103": {
                "ndarray": {
                    "value": "sbf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random((10, 42)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "self.dense_sbf(sbf)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_104": {
                "ndarray": {
                    "value": "id_expand_kj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(np.arange(0, 7), 2)[:10]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_105": {
                "ndarray": {
                    "value": "id_reduce_ji",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(np.arange(0, 7), 2)[:10]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/dimenet/modules/output_block.py": {
        "torch": {}
    },
    "src/dimenet/modules/spherical_basis_layer.py": {
        "torch": {
            "stack_196": {
                "variable": {
                    "value": "rbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rbf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[f(d_scaled) for f in self.bessel_funcs]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(rbf, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_203": {
                "variable": {
                    "value": "cbf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cbf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[f(Angles) for f in self.sph_funcs]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(cbf, dim=1)",
                            "Call"
                        ],
                        [
                            "cbf.repeat_interleave(self.num_radial, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_185": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/mylib/torch/data/dataset.py": {
        "torch": {}
    },
    "src/mylib/torch/fe/bert_emb.py": {
        "torch": {
            "tensor_81": {
                "data": {
                    "value": "tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tokenizer.encode(text, add_special_tokens=True, max_length=512)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_33": {
                "variable": {
                    "value": "token",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat((cls_token, token[1:-1][torch.randperm(len(token) - 2)], sep_token)) for _ in range(n_shuffle)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outputs[0].mean(dim=1), outputs[0].max(dim=1)[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_46": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "(cls_token, token[1:-1][torch.randperm(len(token) - 2)], sep_token)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randperm_36": {
                "n": {
                    "value": "len(token) - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/mylib/torch/nn/functional.py": {
        "torch": {
            "ones_21": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "index.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "src.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/mylib/torch/nn/init.py": {
        "torch": {}
    },
    "src/mylib/torch/nn/mish_init.py": {
        "torch": {
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/mylib/torch/nn/modules/dense.py": {
        "torch": {}
    },
    "src/mylib/torch/nn/modules/gauss_rank_transform.py": {
        "torch": {
            "from_numpy_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.uniform(low=0, high=1, size=2000)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_63": {
                "input": {
                    "value": "x_tformed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grt.forward(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/mylib/torch/nn/modules/mlp.py": {
        "torch": {
            "Sequential_59": {
                "variable": {
                    "value": "self.out_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "src/mylib/torch/nn/modules/pair_norm.py": {
        "torch": {}
    },
    "src/mylib/torch/nn/modules/se_layer.py": {
        "torch": {
            "randn_30": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 12, 768, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_11": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Dense(channel, channel // reduction, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/mylib/torch/optim/SM3.py": {
        "torch": {
            "gather_136": {
                "variable": {
                    "value": "update_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "state[_key(0)]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "grad_indices[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_150": {
                "variable": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "acc_list[0].clone()",
                            "Call"
                        ],
                        [
                            "torch.min(update, acc_list[i])",
                            "Call"
                        ],
                        [
                            "make_sparse(update_values)",
                            "Call"
                        ],
                        [
                            "_compute_update(beta, acc_list, grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_174": {
                "variable": {
                    "value": "acc[_key(0)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "acc[_key(0)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad.shape",
                            "Attribute"
                        ],
                        [
                            "grad.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_128": {
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "state[_key(0)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "state[_key(0)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "acc[_key(i)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "acc_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * i + [shape[i]] + [1] * (rank - 1 - i)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "enable_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_120": {
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "state[_key(0)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "state[_key(0)]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/mylib/torch/tools/ema/utils.py": {
        "torch": {
            "no_grad_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/mylib/torch/tools/lr_finder.py": {
        "torch": {
            "load_432": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.cache_dir, 'state_{}_{}.pt'.format(key, id(self)))",
                            "Call"
                        ],
                        [
                            "self.cached.get(key)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_grad_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_418": {
                "obj": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(fn, map_location=lambda storage, location: storage)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.cache_dir, 'state_{}_{}.pt'.format(key, id(self)))",
                            "Call"
                        ],
                        [
                            "self.cached.get(key)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_279": {
                "obj": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/mylib/torch/tools/swa/utils.py": {
        "torch": {
            "zeros_like_24": {
                "variable": {
                    "value": "module.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "module.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_25": {
                "variable": {
                    "value": "module.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "module.running_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_5": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}