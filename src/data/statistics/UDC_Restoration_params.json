{
    "PDCRN/custom_layers.py": {
        "tensorflow": {
            "concatenate_28": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[y1, y2, y3, y4]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_56": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "depth_to_space_57": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.backend.concatenate([y1, y2, y3, y4], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.keras.backend.conv2d(inputs, self.kernel, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.depth_to_space(y, 2)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "depth_to_space_6": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "block_size": {
                    "value": "block_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_size",
                            "Method Argument"
                        ],
                        [
                            "block_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "space_to_depth_10": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "block_size": {
                    "value": "block_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_size",
                            "Method Argument"
                        ],
                        [
                            "block_size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "PDCRN/dataset.py": {
        "tensorflow": {
            "read_file_22": {
                "variable": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "input_img_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_img_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "decode_image_23": {
                "variable": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(input_img_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(input_img, dtype=tf.dtypes.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(input_img, tf.dtypes.float32)",
                            "Call"
                        ],
                        [
                            "input_img",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.dtypes.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_24": {
                "variable": {
                    "value": "target_img",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "target_img_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_img_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "decode_image_25": {
                "variable": {
                    "value": "target_img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "target_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(target_img_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(target_img, dtype=tf.dtypes.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(target_img, tf.dtypes.float32)",
                            "Call"
                        ],
                        [
                            "target_img",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.dtypes.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_image_dtype_29": {
                "variable": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "input_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(input_img_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(input_img, dtype=tf.dtypes.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(input_img, tf.dtypes.float32)",
                            "Call"
                        ],
                        [
                            "input_img",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_image_dtype_30": {
                "variable": {
                    "value": "target_img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "target_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(target_img_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(target_img, dtype=tf.dtypes.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(target_img, tf.dtypes.float32)",
                            "Call"
                        ],
                        [
                            "target_img",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_crop_34": {
                "variable": {
                    "value": "img_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img_pair",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_flip_up_down(img_pair)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img_pair)",
                            "Call"
                        ],
                        [
                            "tf.image.rot90(img_pair, k=tf.random.uniform([], maxval=5, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.concat([img_pair, imgs_ud_flip, imgs_lr_flip], axis=0)",
                            "Call"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[cfg.train_img_shape[0], cfg.train_img_shape[1], cfg.train_img_shape[-1] * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_crop_38": {
                "variable": {
                    "value": "img_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img_pair",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_flip_up_down(img_pair)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img_pair)",
                            "Call"
                        ],
                        [
                            "tf.image.rot90(img_pair, k=tf.random.uniform([], maxval=5, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.concat([img_pair, imgs_ud_flip, imgs_lr_flip], axis=0)",
                            "Call"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[cfg.val_img_shape[0], cfg.val_img_shape[1], cfg.val_img_shape[-1] * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_up_down_48": {
                "variable": {
                    "value": "img_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img_pair",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_flip_up_down(img_pair)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img_pair)",
                            "Call"
                        ],
                        [
                            "tf.image.rot90(img_pair, k=tf.random.uniform([], maxval=5, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.concat([img_pair, imgs_ud_flip, imgs_lr_flip], axis=0)",
                            "Call"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_flip_left_right_49": {
                "variable": {
                    "value": "img_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img_pair",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_flip_up_down(img_pair)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img_pair)",
                            "Call"
                        ],
                        [
                            "tf.image.rot90(img_pair, k=tf.random.uniform([], maxval=5, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.concat([img_pair, imgs_ud_flip, imgs_lr_flip], axis=0)",
                            "Call"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rot90_50": {
                "variable": {
                    "value": "img_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img_pair",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_flip_up_down(img_pair)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img_pair)",
                            "Call"
                        ],
                        [
                            "tf.image.rot90(img_pair, k=tf.random.uniform([], maxval=5, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.concat([img_pair, imgs_ud_flip, imgs_lr_flip], axis=0)",
                            "Call"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "tf.random.uniform([], maxval=5, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flip_up_down_55": {
                "variable": {
                    "value": "imgs_ud_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img_pair",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_flip_up_down(img_pair)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img_pair)",
                            "Call"
                        ],
                        [
                            "tf.image.rot90(img_pair, k=tf.random.uniform([], maxval=5, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.concat([img_pair, imgs_ud_flip, imgs_lr_flip], axis=0)",
                            "Call"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flip_left_right_56": {
                "variable": {
                    "value": "imgs_lr_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img_pair",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.random_flip_up_down(img_pair)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img_pair)",
                            "Call"
                        ],
                        [
                            "tf.image.rot90(img_pair, k=tf.random.uniform([], maxval=5, dtype=tf.int32))",
                            "Call"
                        ],
                        [
                            "tf.concat([img_pair, imgs_ud_flip, imgs_lr_flip], axis=0)",
                            "Call"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ],
                        [
                            "img_pair",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_58": {
                "variable": {
                    "value": "img_pair",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[img_pair, imgs_ud_flip, imgs_lr_flip]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_31": {
                "values": {
                    "value": "[input_img, target_img]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "glob_10": {
                "pattern": {
                    "value": "cfg.train_gt_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "glob_11": {
                "pattern": {
                    "value": "cfg.train_input_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "glob_14": {
                "pattern": {
                    "value": "cfg.val_gt_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "glob_15": {
                "pattern": {
                    "value": "cfg.val_input_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_50": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "maxval": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "PDCRN/model.py": {
        "tensorflow": {
            "ReLU_10": {
                "variable": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                },
                "max_value": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D(filters * 2, 3, padding='same')(x_in)",
                            "Call"
                        ],
                        [
                            "ReLU(x_in)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=-1)([x_in, x_out])",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Input(shape=input_shape)",
                            "Call"
                        ],
                        [
                            "x_in",
                            "Method Argument"
                        ],
                        [
                            "x_in",
                            "Method Argument"
                        ],
                        [
                            "x_in",
                            "Method Argument"
                        ],
                        [
                            "x_in",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_16": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "max_value": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D(filters, 3, padding='same', dilation_rate=dil_rate)(x_in)",
                            "Call"
                        ],
                        [
                            "ReLU(x_out)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters, 1, padding='same')(x_in)",
                            "Call"
                        ],
                        [
                            "ReLU(x_out)",
                            "Call"
                        ],
                        [
                            "dilation_pyramid(x_in, nPyramidFilters, dilation_rates)",
                            "Call"
                        ],
                        [
                            "Conv2D(nFilters, 3, padding='same')(x_out)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: x * 0.1)(x_out)",
                            "Call"
                        ],
                        [
                            "Add()([x_in, x_out])",
                            "Call"
                        ],
                        [
                            "DWT()(x_in)",
                            "Call"
                        ],
                        [
                            "Lambda(Space2Depth(block_size=2))(x_out)",
                            "Call"
                        ],
                        [
                            "Conv2D(nFilters, 5, padding='same')(x_out)",
                            "Call"
                        ],
                        [
                            "Conv2D(nFilters, 3, padding='same')(x_out)",
                            "Call"
                        ],
                        [
                            "pyramid_block(x_out, nFilters, dilation_rates, nPyramidFilters)",
                            "Call"
                        ],
                        [
                            "Conv2D(nFilters * 2, 5, padding='same', strides=(2, 2))(x_out)",
                            "Call"
                        ],
                        [
                            "pyramid_block(x_out, nFilters * 2, dilation_rates, nPyramidFilters * 2)",
                            "Call"
                        ],
                        [
                            "Conv2D(nFilters * 4, 5, padding='same', strides=(2, 2))(x_out)",
                            "Call"
                        ],
                        [
                            "pyramid_block(x_out, nFilters * 4, dilation_rates, nPyramidFilters * 4)",
                            "Call"
                        ],
                        [
                            "pyramid_block(x_in, nFilters, dilation_rates, nPyramidFilters)",
                            "Call"
                        ],
                        [
                            "Conv2DTranspose(nFilters / 2, 4, strides=(2, 2), padding='same')(x_out)",
                            "Call"
                        ],
                        [
                            "pyramid_block(x_out, nFilters / 2, dilation_rates, nPyramidFilters / 2)",
                            "Call"
                        ],
                        [
                            "Conv2DTranspose(nFilters / 4, 4, strides=(2, 2), padding='same')(x_out)",
                            "Call"
                        ],
                        [
                            "pyramid_block(x_out, nFilters / 4, dilation_rates, nPyramidFilters / 4)",
                            "Call"
                        ],
                        [
                            "Lambda(Depth2Space(block_size=2))(x_out)",
                            "Call"
                        ],
                        [
                            "Conv2D(3 * 4, 3, padding='same')(x_out)",
                            "Call"
                        ],
                        [
                            "IWT()(x_out)",
                            "Call"
                        ],
                        [
                            "encoder(x_in, cfg.nFilters_enc, cfg.dilation_rates, cfg.nPyramidFilters_enc)",
                            "Call"
                        ],
                        [
                            "decoder(x_out, cfg.nFilters_dec, cfg.dilation_rates, cfg.nPyramidFilters_dec)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_54": {
                "variable": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "max_value": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D(filters, 3, padding='same', dilation_rate=dil_rate)(x_in)",
                            "Call"
                        ],
                        [
                            "ReLU(x_out)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters, 1, padding='same')(x_in)",
                            "Call"
                        ],
                        [
                            "ReLU(x_out)",
                            "Call"
                        ],
                        [
                            "dilation_pyramid(x_in, nPyramidFilters, dilation_rates)",
                            "Call"
                        ],
                        [
                            "Conv2D(nFilters, 3, padding='same')(x_out)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: x * 0.1)(x_out)",
                            "Call"
                        ],
                        [
                            "Add()([x_in, x_out])",
                            "Call"
                        ],
                        [
                            "DWT()(x_in)",
                            "Call"
                        ],
                        [
                            "Lambda(Space2Depth(block_size=2))(x_out)",
                            "Call"
                        ],
                        [
                            "Conv2D(nFilters, 5, padding='same')(x_out)",
                            "Call"
                        ],
                        [
                            "Conv2D(nFilters, 3, padding='same')(x_out)",
                            "Call"
                        ],
                        [
                            "pyramid_block(x_out, nFilters, dilation_rates, nPyramidFilters)",
                            "Call"
                        ],
                        [
                            "Conv2D(nFilters * 2, 5, padding='same', strides=(2, 2))(x_out)",
                            "Call"
                        ],
                        [
                            "pyramid_block(x_out, nFilters * 2, dilation_rates, nPyramidFilters * 2)",
                            "Call"
                        ],
                        [
                            "Conv2D(nFilters * 4, 5, padding='same', strides=(2, 2))(x_out)",
                            "Call"
                        ],
                        [
                            "pyramid_block(x_out, nFilters * 4, dilation_rates, nPyramidFilters * 4)",
                            "Call"
                        ],
                        [
                            "pyramid_block(x_in, nFilters, dilation_rates, nPyramidFilters)",
                            "Call"
                        ],
                        [
                            "Conv2DTranspose(nFilters / 2, 4, strides=(2, 2), padding='same')(x_out)",
                            "Call"
                        ],
                        [
                            "pyramid_block(x_out, nFilters / 2, dilation_rates, nPyramidFilters / 2)",
                            "Call"
                        ],
                        [
                            "Conv2DTranspose(nFilters / 4, 4, strides=(2, 2), padding='same')(x_out)",
                            "Call"
                        ],
                        [
                            "pyramid_block(x_out, nFilters / 4, dilation_rates, nPyramidFilters / 4)",
                            "Call"
                        ],
                        [
                            "Lambda(Depth2Space(block_size=2))(x_out)",
                            "Call"
                        ],
                        [
                            "Conv2D(3 * 4, 3, padding='same')(x_out)",
                            "Call"
                        ],
                        [
                            "IWT()(x_out)",
                            "Call"
                        ],
                        [
                            "encoder(x_in, cfg.nFilters_enc, cfg.dilation_rates, cfg.nPyramidFilters_enc)",
                            "Call"
                        ],
                        [
                            "decoder(x_out, cfg.nFilters_dec, cfg.dilation_rates, cfg.nPyramidFilters_dec)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_57": {
                "*args": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D(filters * 2, 3, padding='same')(x_in)",
                            "Call"
                        ],
                        [
                            "ReLU(x_in)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=-1)([x_in, x_out])",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Input(shape=input_shape)",
                            "Call"
                        ],
                        [
                            "x_in",
                            "Method Argument"
                        ],
                        [
                            "x_in",
                            "Method Argument"
                        ],
                        [
                            "x_in",
                            "Method Argument"
                        ],
                        [
                            "x_in",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D(filters, 3, padding='same', dilation_rate=dil_rate)(x_in)",
                            "Call"
                        ],
                        [
                            "ReLU(x_out)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters, 1, padding='same')(x_in)",
                            "Call"
                        ],
                        [
                            "ReLU(x_out)",
                            "Call"
                        ],
                        [
                            "dilation_pyramid(x_in, nPyramidFilters, dilation_rates)",
                            "Call"
                        ],
                        [
                            "Conv2D(nFilters, 3, padding='same')(x_out)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: x * 0.1)(x_out)",
                            "Call"
                        ],
                        [
                            "Add()([x_in, x_out])",
                            "Call"
                        ],
                        [
                            "DWT()(x_in)",
                            "Call"
                        ],
                        [
                            "Lambda(Space2Depth(block_size=2))(x_out)",
                            "Call"
                        ],
                        [
                            "Conv2D(nFilters, 5, padding='same')(x_out)",
                            "Call"
                        ],
                        [
                            "Conv2D(nFilters, 3, padding='same')(x_out)",
                            "Call"
                        ],
                        [
                            "pyramid_block(x_out, nFilters, dilation_rates, nPyramidFilters)",
                            "Call"
                        ],
                        [
                            "Conv2D(nFilters * 2, 5, padding='same', strides=(2, 2))(x_out)",
                            "Call"
                        ],
                        [
                            "pyramid_block(x_out, nFilters * 2, dilation_rates, nPyramidFilters * 2)",
                            "Call"
                        ],
                        [
                            "Conv2D(nFilters * 4, 5, padding='same', strides=(2, 2))(x_out)",
                            "Call"
                        ],
                        [
                            "pyramid_block(x_out, nFilters * 4, dilation_rates, nPyramidFilters * 4)",
                            "Call"
                        ],
                        [
                            "pyramid_block(x_in, nFilters, dilation_rates, nPyramidFilters)",
                            "Call"
                        ],
                        [
                            "Conv2DTranspose(nFilters / 2, 4, strides=(2, 2), padding='same')(x_out)",
                            "Call"
                        ],
                        [
                            "pyramid_block(x_out, nFilters / 2, dilation_rates, nPyramidFilters / 2)",
                            "Call"
                        ],
                        [
                            "Conv2DTranspose(nFilters / 4, 4, strides=(2, 2), padding='same')(x_out)",
                            "Call"
                        ],
                        [
                            "pyramid_block(x_out, nFilters / 4, dilation_rates, nPyramidFilters / 4)",
                            "Call"
                        ],
                        [
                            "Lambda(Depth2Space(block_size=2))(x_out)",
                            "Call"
                        ],
                        [
                            "Conv2D(3 * 4, 3, padding='same')(x_out)",
                            "Call"
                        ],
                        [
                            "IWT()(x_out)",
                            "Call"
                        ],
                        [
                            "encoder(x_in, cfg.nFilters_enc, cfg.dilation_rates, cfg.nPyramidFilters_enc)",
                            "Call"
                        ],
                        [
                            "decoder(x_out, cfg.nFilters_dec, cfg.dilation_rates, cfg.nPyramidFilters_dec)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_9": {
                "filters": {
                    "value": "filters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_15": {
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_22": {
                "filters": {
                    "value": "nFilters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nFilters",
                            "Method Argument"
                        ],
                        [
                            "nFilters",
                            "Method Argument"
                        ],
                        [
                            "nFilters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_23": {
                "function": {
                    "value": "lambda x: x * 0.1",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Add_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Lambda_30": {
                "function": {
                    "value": "Space2Depth(block_size=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_31": {
                "filters": {
                    "value": "nFilters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nFilters",
                            "Method Argument"
                        ],
                        [
                            "nFilters",
                            "Method Argument"
                        ],
                        [
                            "nFilters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_32": {
                "filters": {
                    "value": "nFilters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nFilters",
                            "Method Argument"
                        ],
                        [
                            "nFilters",
                            "Method Argument"
                        ],
                        [
                            "nFilters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_34": {
                "filters": {
                    "value": "nFilters * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_36": {
                "filters": {
                    "value": "nFilters * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_43": {
                "filters": {
                    "value": "nFilters / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_45": {
                "filters": {
                    "value": "nFilters / 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_47": {
                "function": {
                    "value": "Depth2Space(block_size=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_48": {
                "filters": {
                    "value": "3 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_12": {
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "dilation_rate": {
                    "value": "dil_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilation_rates",
                            "variable"
                        ]
                    ]
                }
            },
            "Concatenate_14": {
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "PDCRN/test.py": {
        "tensorflow": {
            "Checkpoint_15": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "model": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model([None, None, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "CheckpointManager_18": {
                "variable": {
                    "value": "chkpt_manager",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Checkpoint(model=model)",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "ckpt_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'train_ckpts/checkpoint_folder/best'",
                            "str"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Mean_26": {
                "variable": {
                    "value": "avg_time",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "read_file_29": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "input_path + '/' + fileNames[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "decode_image_30": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(input_path + '/' + fileNames[i])",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(input_image, dtype=tf.dtypes.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.dtypes.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_image_dtype_36": {
                "variable": {
                    "value": "output_img",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "output_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.activations.relu(output_batch, max_value=1)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.convert_image_dtype(output_img, tf.dtypes.uint8)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.dtypes.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_20": {
                "shape": {
                    "value": "[1, 1024, 2048, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_33": {
                "input": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(input_path + '/' + fileNames[i])",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(input_image, dtype=tf.dtypes.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_34": {
                "features": {
                    "value": "output_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(tf.expand_dims(input_image, 0), training=False)",
                            "Call"
                        ]
                    ]
                },
                "max_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "PDCRN/train.py": {
        "tensorflow": {
            "Adam_18": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_schedule",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr_decay(boundaries=[i * dataset.num_train_batches for i in cfg.lr_boundaries], values=cfg.lr_values)",
                            "Call"
                        ]
                    ]
                }
            },
            "create_file_writer_19": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "cfg.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Checkpoint_22": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "model": {
                    "value": "train_obj.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "train_obj.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "train_dataset": {
                    "value": "train_obj.dataset.train_ds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epoch": {
                    "value": "tf.Variable(0, dtype=tf.dtypes.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_psnr": {
                    "value": "tf.Variable(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CheckpointManager_31": {
                "variable": {
                    "value": "chkpt_best",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Checkpoint(model=train_obj.model, optimizer=train_obj.optimizer, train_dataset=train_obj.dataset.train_ds, epoch=tf.Variable(0, dtype=tf.dtypes.int64), max_psnr=tf.Variable(0.0))",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "chkpt_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'best')",
                            "Call"
                        ],
                        [
                            "tf.train.CheckpointManager(ckpt, chkpt_best, max_to_keep=1, checkpoint_name='ckpt')",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "checkpoint_name": {
                    "value": "ckpt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CheckpointManager_33": {
                "variable": {
                    "value": "chkpt_last",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Checkpoint(model=train_obj.model, optimizer=train_obj.optimizer, train_dataset=train_obj.dataset.train_ds, epoch=tf.Variable(0, dtype=tf.dtypes.int64), max_psnr=tf.Variable(0.0))",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "chkpt_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(ckpt_dir, 'last')",
                            "Call"
                        ],
                        [
                            "tf.train.CheckpointManager(ckpt, chkpt_last, max_to_keep=1, checkpoint_name='ckpt')",
                            "Call"
                        ]
                    ]
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "checkpoint_name": {
                    "value": "ckpt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_26": {
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.dtypes.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_27": {
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "scalar_56": {
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_obj.train_loss.result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "ckpt.epoch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_59": {
                "name": {
                    "value": "val_psnr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "train_obj.val_psnr.result()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "ckpt.epoch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_61": {
                "name": {
                    "value": "val_images",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "display_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_obj.run_validation(save_prediction)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "ckpt.epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "cfg.display_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "PDCRN/train_loop.py": {
        "tensorflow": {
            "MeanSquaredError_12": {
                "variable": {
                    "value": "self.mse_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Mean_13": {
                "variable": {
                    "value": "self.train_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_16": {
                "variable": {
                    "value": "self.val_psnr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "val_psnr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "output_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "output_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model([input_batch], training=True)",
                            "Call"
                        ],
                        [
                            "self.model([input_batch], training=False)",
                            "Call"
                        ],
                        [
                            "tf.keras.activations.relu(output_batch, max_value=1)",
                            "Call"
                        ],
                        [
                            "self.val_step(input_batch, gt_batch)",
                            "Call"
                        ],
                        [
                            "output_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "max_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientTape_25": {
                "persistent": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "psnr_53": {
                "a": {
                    "value": "output_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model([input_batch], training=True)",
                            "Call"
                        ],
                        [
                            "self.model([input_batch], training=False)",
                            "Call"
                        ],
                        [
                            "tf.keras.activations.relu(output_batch, max_value=1)",
                            "Call"
                        ],
                        [
                            "self.val_step(input_batch, gt_batch)",
                            "Call"
                        ],
                        [
                            "output_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "gt_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_batch",
                            "Method Argument"
                        ],
                        [
                            "gt_batch",
                            "Method Argument"
                        ],
                        [
                            "gt_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "max_val": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}